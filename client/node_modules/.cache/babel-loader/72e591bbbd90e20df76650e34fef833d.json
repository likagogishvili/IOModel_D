{"ast":null,"code":"import * as $array from \"./Array\";\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function fromArray(array) {\n  return function (push) {\n    var length = array.length;\n\n    for (var i = 0; i < length; ++i) {\n      if (!push(array[i])) {\n        break;\n      }\n    }\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function length(iter) {\n  var sum = 0;\n  iter(function (_) {\n    ++sum;\n    return true;\n  });\n  return sum;\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function toArray(iter) {\n  var output = [];\n  iter(function (value) {\n    output.push(value);\n    return true;\n  });\n  return output;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function eachContinue(iter, fn) {\n  iter(fn);\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function each(iter, fn) {\n  iter(function (value) {\n    fn(value);\n    return true;\n  });\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function sort(iter, fn) {\n  return fromArray(toArray(iter).sort(fn));\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function map(iter, fn) {\n  return function (push) {\n    return iter(function (value) {\n      return push(fn(value));\n    });\n  };\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function filter(iter, fn) {\n  return function (push) {\n    return iter(function (value) {\n      if (fn(value)) {\n        return push(value);\n      } else {\n        return true;\n      }\n    });\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function concat() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return function (push) {\n    var go = true;\n\n    var push2 = function (value) {\n      return go = push(value);\n    };\n\n    var length = args.length;\n\n    for (var i = 0; i < length; ++i) {\n      args[i](push2);\n\n      if (!go) {\n        break;\n      }\n    }\n  };\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function flatten(iter) {\n  return function (push) {\n    var go = true;\n\n    var push2 = function (value) {\n      return go = push(value);\n    };\n\n    iter(function (value) {\n      value(push2);\n      return go;\n    });\n  };\n}\n/**\r\n * [number description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function indexed(iter) {\n  return function (push) {\n    var index = 0;\n    iter(function (value) {\n      return push([index++, value]);\n    });\n  };\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function findIndex(iter, matches) {\n  var found = false;\n  var i = 0;\n  iter(function (value) {\n    if (matches(value)) {\n      found = true;\n      return false;\n    } else {\n      ++i;\n      return true;\n    }\n  });\n  return found ? i : -1;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function find(iter, matches) {\n  var output;\n  iter(function (value) {\n    if (matches(value)) {\n      output = value;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function findMap(iter, matches) {\n  var output;\n  iter(function (value) {\n    var v = matches(value);\n\n    if (v !== null) {\n      output = v;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [iter description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function contains(iter, matches) {\n  var output = false;\n  iter(function (value) {\n    if (matches(value)) {\n      output = true;\n      return false;\n    } else {\n      return true;\n    }\n  });\n  return output;\n}\n/**\r\n * [A description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nexport function foldl(iter, init, fn) {\n  iter(function (value) {\n    init = fn(init, value);\n    return true;\n  });\n  return init;\n}\n/**\r\n * [min2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\n\nfunction min2(left, right) {\n  if (left == null || right < left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * [min description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\n\n\nexport function min(a) {\n  return foldl(a, null, min2);\n}\n/**\r\n * [max2 description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param left [description]\r\n * @param right [description]\r\n * @return [description]\r\n */\n\nfunction max2(left, right) {\n  if (left == null || right > left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * [max description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Verify that this works correctly\r\n * @todo Description\r\n * @param a [description]\r\n * @return [description]\r\n */\n\n\nexport function max(a) {\n  return foldl(a, null, max2);\n}\n/**\r\n * [join description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param iter [description]\r\n * @param separator [description]\r\n * @return [description]\r\n */\n\nexport function join(iter, separator) {\n  if (separator === void 0) {\n    separator = \"\";\n  }\n\n  var first = true;\n  var init = \"\";\n  iter(function (value) {\n    if (first) {\n      first = false;\n    } else {\n      init += separator;\n    }\n\n    init += value;\n    return true;\n  });\n  return init;\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar ListIterator =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param list [description]\r\n   * @param create [description]\r\n   */\n  function ListIterator(list, create) {\n    // flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n    this.createNewItems = false;\n    this.list = list;\n    this._create = create;\n    this.reset();\n  }\n\n  ListIterator.prototype.reset = function () {\n    this._listCopy = toArray(this.list.iterator());\n  };\n\n  ListIterator.prototype.clear = function () {\n    this._listCopy.length = 0;\n  };\n\n  ListIterator.prototype.getFirst = function () {\n    return this.returnItem(0);\n  };\n\n  ListIterator.prototype.getLast = function () {\n    return this.returnItem(this._listCopy.length - 1);\n  };\n\n  ListIterator.prototype.find = function (fn) {\n    var index = $array.findIndex(this._listCopy, fn);\n\n    if (index !== -1) {\n      var item = this._listCopy[index]; // TODO use removeIndex instead ?\n\n      $array.remove(this._listCopy, item);\n      return item;\n    } else {\n      return this.getLast();\n    }\n  };\n\n  ListIterator.prototype.removeItem = function (item) {\n    return $array.remove(this._listCopy, item);\n  };\n\n  ListIterator.prototype.returnItem = function (index) {\n    if (index >= 0 && index < this._listCopy.length) {\n      var item = this._listCopy[index]; // TODO use removeIndex instead ?\n\n      $array.remove(this._listCopy, item);\n      return item;\n    } else if (this.createNewItems) {\n      return this._create();\n    }\n  };\n\n  ListIterator.prototype.iterator = function () {\n    return fromArray(this._listCopy);\n  };\n\n  return ListIterator;\n}();\n\nexport { ListIterator };","map":{"version":3,"mappings":"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","names":["$array","fromArray","array","push","length","i","iter","sum","_","toArray","output","value","eachContinue","fn","each","sort","map","filter","concat","args","go","push2","flatten","indexed","index","findIndex","matches","found","find","findMap","v","contains","foldl","init","min2","left","right","min","a","max2","max","join","separator","first","list","create","_create","reset","ListIterator","_listCopy","iterator","returnItem","item","remove","getLast","createNewItems"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Iterator.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { IClone } from \"./Clone\";\nimport { Ordering } from \"./Order\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n\n\n/**\n * ============================================================================\n * UTILITY FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterator<A> {\n\t(push: (value: A) => boolean): void;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface Iterable<A> {\n\titerator(): Iterator<A>;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function fromArray<A>(array: Array<A>): Iterator<A> {\n\treturn (push) => {\n\t\tconst length = array.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tif (!push(array[i])) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function length<A>(iter: Iterator<A>): number {\n\tlet sum = 0;\n\n\titer((_) => {\n\t\t++sum;\n\t\treturn true;\n\t});\n\n\treturn sum;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function toArray<A>(iter: Iterator<A>): Array<A> {\n\tconst output: Array<A> = [];\n\n\titer((value) => {\n\t\toutput.push(value);\n\t\treturn true;\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function eachContinue<A>(iter: Iterator<A>, fn: (value: A) => boolean): void {\n\titer(fn);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function each<A>(iter: Iterator<A>, fn: (value: A) => void): void {\n\titer((value) => {\n\t\tfn(value);\n\t\treturn true;\n\t});\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function sort<A>(iter: Iterator<A>, fn: (left: A, right: A) => Ordering): Iterator<A> {\n\treturn fromArray(toArray(iter).sort(fn));\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function map<A, B>(iter: Iterator<A>, fn: (value: A) => B): Iterator<B> {\n\treturn (push) => iter((value) => push(fn(value)));\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function filter<A>(iter: Iterator<A>, fn: (value: A) => boolean): Iterator<A> {\n\treturn (push) => iter((value) => {\n\t\tif (fn(value)) {\n\t\t\treturn push(value);\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function concat<A>(...args: Array<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\tconst length = args.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\targs[i](push2);\n\n\t\t\tif (!go) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function flatten<A>(iter: Iterator<Iterator<A>>): Iterator<A> {\n\treturn (push) => {\n\t\tlet go = true;\n\n\t\tconst push2 = (value: A) => (go = push(value));\n\n\t\titer((value) => {\n\t\t\tvalue(push2);\n\t\t\treturn go;\n\t\t});\n\t};\n}\n\n/**\n * [number description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function indexed<A>(iter: Iterator<A>): Iterator<[number, A]> {\n\treturn (push) => {\n\t\tlet index = 0;\n\n\t\titer((value) => push([index++, value]));\n\t};\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findIndex<A>(iter: Iterator<A>, matches: (value: A) => boolean): number {\n\tlet found = false;\n\tlet i = 0;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\tfound = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\t++i;\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn (found ? i : -1);\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function find<A>(iter: Iterator<A>, matches: (value: A) => boolean): A | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = value;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function findMap<A, B>(iter: Iterator<A>, matches: (value: A) => B | null): B | undefined {\n\tlet output;\n\n\titer((value) => {\n\t\tconst v = matches(value);\n\n\t\tif (v !== null) {\n\t\t\toutput = v;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [iter description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function contains<A>(iter: Iterator<A>, matches: (value: A) => boolean): boolean {\n\tlet output = false;\n\n\titer((value) => {\n\t\tif (matches(value)) {\n\t\t\toutput = true;\n\t\t\treturn false;\n\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\treturn output;\n}\n\n/**\n * [A description]\n *\n * @ignore Exclude from docs\n * @todo Description\n */\nexport function foldl<A, B>(iter: Iterator<A>, init: B, fn: (state: B, value: A) => B): B {\n\titer((value) => {\n\t\tinit = fn(init, value);\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * [min2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction min2(left: number | null, right: number): number {\n\tif (left == null || right < left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [min description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function min(a: Iterator<number>): number | null {\n\treturn foldl(a, null, min2);\n}\n\n/**\n * [max2 description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param left [description]\n * @param right [description]\n * @return [description]\n */\nfunction max2(left: number | null, right: number): number {\n\tif (left == null || right > left) {\n\t\treturn right;\n\n\t} else {\n\t\treturn left;\n\t}\n}\n\n/**\n * [max description]\n *\n * @ignore Exclude from docs\n * @todo Verify that this works correctly\n * @todo Description\n * @param a [description]\n * @return [description]\n */\nexport function max(a: Iterator<number>): number | null {\n\treturn foldl(a, null, max2);\n}\n\n\n/**\n * [join description]\n *\n * @ignore Exclude from docs\n * @todo Description\n * @param iter [description]\n * @param separator [description]\n * @return [description]\n */\nexport function join(iter: Iterator<string>, separator: string = \"\"): string {\n\tlet first = true;\n\tlet init = \"\";\n\n\titer((value) => {\n\t\tif (first) {\n\t\t\tfirst = false;\n\n\t\t} else {\n\t\t\tinit += separator;\n\t\t}\n\n\t\tinit += value;\n\n\t\treturn true;\n\t});\n\n\treturn init;\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport class ListIterator<T extends IClone<T>> {\n\tprivate _listCopy!: Array<T>;\n\tprivate _create: () => T;\n\n\tpublic list: Iterable<T>;\n\n\t// flag specifies if iterator should create new list item if it is reqested for a nextItem but there is no more left in the list\n\tpublic createNewItems: boolean = false;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param list [description]\n\t * @param create [description]\n\t */\n\tconstructor(list: Iterable<T>, create: () => T) {\n\t\tthis.list = list;\n\t\tthis._create = create;\n\t\tthis.reset();\n\t}\n\n\treset() {\n\t\tthis._listCopy = toArray(this.list.iterator());\n\t}\n\n\tclear() {\n\t\tthis._listCopy.length = 0;\n\t}\n\n\tgetFirst(): $type.Optional<T> {\n\t\treturn this.returnItem(0);\n\t}\n\n\tgetLast(): $type.Optional<T> {\n\t\treturn this.returnItem(this._listCopy.length - 1);\n\t}\n\n\tfind(fn: (value: T) => boolean): $type.Optional<T> {\n\t\tlet index: number = $array.findIndex(this._listCopy, fn);\n\n\t\tif (index !== -1) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else {\n\t\t\treturn this.getLast();\n\t\t}\n\t}\n\n\tremoveItem(item: T): boolean {\n\t\treturn $array.remove(this._listCopy, item);\n\t}\n\n\tprotected returnItem(index: number): $type.Optional<T> {\n\t\tif (index >= 0 && index < this._listCopy.length) {\n\t\t\tlet item = this._listCopy[index];\n\t\t\t// TODO use removeIndex instead ?\n\t\t\t$array.remove(this._listCopy, item);\n\t\t\treturn item;\n\n\t\t} else if (this.createNewItems) {\n\t\t\treturn this._create();\n\t\t}\n\t}\n\n\titerator() {\n\t\treturn fromArray(this._listCopy);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}