{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A horizontal children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar HorizontalLayout =\n/** @class */\nfunction (_super) {\n  __extends(HorizontalLayout, _super);\n\n  function HorizontalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(HorizontalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingLeft = container.get(\"paddingLeft\", 0);\n      var availableWidth = container.innerWidth();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childWidth = child.get(\"width\");\n\n            if (childWidth instanceof Percent) {\n              totalPercent += childWidth.value;\n              var w = availableWidth * childWidth.value;\n              var minWidth = child.get(\"minWidth\", -Infinity);\n\n              if (minWidth > w) {\n                availableWidth -= minWidth;\n                totalPercent -= childWidth.value;\n              }\n\n              var maxWidth = child.get(\"maxWidth\", Infinity);\n\n              if (w > maxWidth) {\n                availableWidth -= maxWidth;\n                totalPercent -= childWidth.value;\n              }\n            } else {\n              if (!$type.isNumber(childWidth)) {\n                childWidth = child.width();\n              }\n\n              availableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n            }\n          }\n        }\n      });\n\n      if (availableWidth > 0) {\n        eachChildren(container, function (child) {\n          if (child.isVisible()) {\n            if (child.get(\"position\") == \"relative\") {\n              var childWidth = child.get(\"width\");\n\n              if (childWidth instanceof Percent) {\n                var privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n                var minWidth = child.get(\"minWidth\", -Infinity);\n                var maxWidth = child.get(\"maxWidth\", Infinity);\n                privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n                child.setPrivate(\"width\", privateWidth);\n              }\n            }\n          }\n        });\n      }\n\n      var prevX = paddingLeft;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginLeft = child.get(\"marginLeft\", 0);\n            var marginRight = child.get(\"marginRight\", 0);\n            var x = prevX + marginLeft - bounds.left;\n            child.setPrivate(\"x\", x);\n            prevX = x + bounds.right + marginRight;\n          } else {\n            child.setPrivate(\"x\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(HorizontalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"HorizontalLayout\"\n  });\n  Object.defineProperty(HorizontalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([HorizontalLayout.className])\n  });\n  return HorizontalLayout;\n}(Layout);\n\nexport { HorizontalLayout };","map":{"version":3,"mappings":"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","names":["Layout","eachChildren","$type","Percent","__extends","container","paddingLeft","get","availableWidth","innerWidth","totalPercent","child","isVisible","childWidth","value","w","minWidth","Infinity","maxWidth","isNumber","width","privateWidth","Math","min","max","setPrivate","prevX","bounds","adjustedLocalBounds","marginLeft","marginRight","x","left","right","undefined","Object","classNames","concat","HorizontalLayout","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/HorizontalLayout.ts"],"sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n/**\n * A horizontal children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class HorizontalLayout extends Layout {\n\n\tpublic static className: string = \"HorizontalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([HorizontalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\n\t\tlet paddingLeft = container.get(\"paddingLeft\", 0);\n\n\t\tlet availableWidth = container.innerWidth();\n\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childWidth.value;\n\n\t\t\t\t\t\tlet w = availableWidth * childWidth.value;\n\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", -Infinity);\n\t\t\t\t\t\tif (minWidth > w) {\n\t\t\t\t\t\t\tavailableWidth -= minWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", Infinity);\n\t\t\t\t\t\tif (w > maxWidth) {\n\t\t\t\t\t\t\tavailableWidth -= maxWidth;\n\t\t\t\t\t\t\ttotalPercent -= childWidth.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childWidth)) {\n\t\t\t\t\t\t\tchildWidth = child.width();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableWidth -= childWidth + child.get(\"marginLeft\", 0) + child.get(\"marginRight\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (availableWidth > 0) {\n\t\t\teachChildren(container, (child) => {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\t\tlet childWidth = child.get(\"width\");\n\t\t\t\t\t\tif (childWidth instanceof Percent) {\n\t\t\t\t\t\t\tlet privateWidth = availableWidth * childWidth.value / totalPercent - child.get(\"marginLeft\", 0) - child.get(\"marginRight\", 0);\n\t\t\t\t\t\t\tlet minWidth = child.get(\"minWidth\", -Infinity);\n\t\t\t\t\t\t\tlet maxWidth = child.get(\"maxWidth\", Infinity);\n\t\t\t\t\t\t\tprivateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);\n\n\t\t\t\t\t\t\tchild.setPrivate(\"width\", privateWidth);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet prevX = paddingLeft;\n\n\t\teachChildren(container, (child) => {\n\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginLeft = child.get(\"marginLeft\", 0);\n\t\t\t\t\tlet marginRight = child.get(\"marginRight\", 0);\n\n\t\t\t\t\tlet x = prevX + marginLeft - bounds.left;\n\t\t\t\t\tchild.setPrivate(\"x\", x);\n\t\t\t\t\tprevX = x + bounds.right + marginRight;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tchild.setPrivate(\"x\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}