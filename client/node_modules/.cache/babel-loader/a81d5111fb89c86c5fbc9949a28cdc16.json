{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n/**\r\n * Returns a `Promise` which can be used to execute code after number of\r\n * milliseconds.\r\n *\r\n * @param   ms  Sleep duration in ms\r\n * @return      Promise\r\n */\n\nexport function sleep(ms) {\n  return new Promise(function (resolve, _reject) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 365.242 / 12 * 86400000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\n\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n\n    case \"month\":\n      return \"year\";\n\n    case \"week\":\n      return \"month\";\n\n    case \"day\":\n      return \"month\";\n    // not a mistake\n\n    case \"hour\":\n      return \"day\";\n\n    case \"minute\":\n      return \"hour\";\n\n    case \"second\":\n      return \"minute\";\n\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\n\nexport function getDuration(unit, count) {\n  if (count == null) {\n    count = 1;\n  }\n\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * @ignore\r\n */\n\nexport function getIntervalDuration(interval) {\n  if (interval) {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  }\n\n  return 0;\n}\nexport function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {\n  var unit = interval.timeUnit;\n  var count = interval.count;\n\n  if (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n    return timeUnitDurations[interval.timeUnit] * interval.count;\n  } else {\n    var firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n    var lastTime = add(new Date(firstTime), unit, count, utc).getTime();\n    return lastTime - firstTime;\n  }\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\n\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\n\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @param date  Source date\r\n * @return Copy\r\n */\n\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @param timeOne  timestamp\r\n * @param timeTwo  timestamp\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\n\nexport function checkChange(timeOne, timeTwo, unit, utc, timezone) {\n  // quick\n  if (timeTwo - timeOne > getDuration(unit, 1.2)) {\n    return true;\n  }\n\n  var dateOne = new Date(timeOne);\n  var dateTwo = new Date(timeTwo);\n\n  if (timezone) {\n    dateOne = timezone.convertLocal(dateOne);\n    dateTwo = timezone.convertLocal(dateTwo);\n  }\n\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n\n  var changed = false;\n\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n\n      break;\n  }\n\n  if (changed) {\n    return changed;\n  }\n\n  var nextUnit = getNextUnit(unit);\n\n  if (nextUnit) {\n    return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\n\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff); // solves issues if newe time falls back to old time zone\n\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param utc              Use UTC timezone\r\n * @param firstDate        First date to round to\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\n\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {\n  if (!timezone || utc) {\n    var timeZoneOffset = 0;\n\n    if (!utc && unit != \"millisecond\") {\n      timeZoneOffset = date.getTimezoneOffset();\n      date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n    }\n\n    switch (unit) {\n      case \"day\":\n        var day = date.getUTCDate();\n\n        if (count > 1) {\n          //\tday = Math.floor(day / count) * count;\n          if (firstDate) {\n            firstDate = round(firstDate, \"day\", 1);\n            var difference = date.getTime() - firstDate.getTime();\n            var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n            var duration = getDuration(\"day\", unitCount * count);\n            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          }\n        } else {\n          date.setUTCDate(day);\n        }\n\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"second\":\n        var seconds = date.getUTCSeconds();\n\n        if (count > 1) {\n          seconds = Math.floor(seconds / count) * count;\n        }\n\n        date.setUTCSeconds(seconds, 0);\n        break;\n\n      case \"millisecond\":\n        if (count == 1) {\n          return date; // much better for perf!\n        }\n\n        var milliseconds = date.getUTCMilliseconds();\n        milliseconds = Math.floor(milliseconds / count) * count;\n        date.setUTCMilliseconds(milliseconds);\n        break;\n\n      case \"hour\":\n        var hours = date.getUTCHours();\n\n        if (count > 1) {\n          hours = Math.floor(hours / count) * count;\n        }\n\n        date.setUTCHours(hours, 0, 0, 0);\n        break;\n\n      case \"minute\":\n        var minutes = date.getUTCMinutes();\n        milliseconds = date.getUTCMilliseconds();\n\n        if (count > 1) {\n          minutes = Math.floor(minutes / count) * count;\n        }\n\n        date.setUTCMinutes(minutes, 0, 0);\n        break;\n\n      case \"month\":\n        var month = date.getUTCMonth();\n\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n\n        date.setUTCMonth(month, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"year\":\n        var year = date.getUTCFullYear();\n\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n\n        date.setUTCFullYear(year, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n\n      case \"week\":\n        var wday = date.getUTCDate();\n        var weekDay = date.getUTCDay();\n\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n\n        if (weekDay >= firstDateOfWeek) {\n          wday = wday - weekDay + firstDateOfWeek;\n        } else {\n          wday = wday - (7 + weekDay) + firstDateOfWeek;\n        }\n\n        date.setUTCDate(wday);\n        date.setUTCHours(0, 0, 0, 0);\n        break;\n    }\n\n    if (!utc && unit != \"millisecond\") {\n      date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n      if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n        var newTimeZoneOffset = date.getTimezoneOffset();\n\n        if (newTimeZoneOffset != timeZoneOffset) {\n          var diff = newTimeZoneOffset - timeZoneOffset;\n          date.setUTCMinutes(date.getUTCMinutes() + diff);\n        }\n      }\n    }\n\n    return date;\n  } else {\n    var tzoffset = timezone.offsetUTC(date);\n    var timeZoneOffset = date.getTimezoneOffset();\n    var parsedDate = timezone.parseDate(date);\n    var year = parsedDate.year;\n    var month = parsedDate.month;\n    var day = parsedDate.day;\n    var hour = parsedDate.hour;\n    var minute = parsedDate.minute;\n    var second = parsedDate.second;\n    var millisecond = parsedDate.millisecond;\n    var weekday = parsedDate.weekday;\n\n    switch (unit) {\n      case \"day\":\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n          parsedDate = timezone.parseDate(date);\n          year = parsedDate.year;\n          month = parsedDate.month;\n          day = parsedDate.day;\n        }\n\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"second\":\n        if (count > 1) {\n          second = Math.floor(second / count) * count;\n        }\n\n        millisecond = 0;\n        break;\n\n      case \"millisecond\":\n        if (count > 1) {\n          millisecond = Math.floor(millisecond / count) * count;\n        }\n\n        break;\n\n      case \"hour\":\n        if (count > 1) {\n          hour = Math.floor(hour / count) * count;\n        }\n\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"minute\":\n        if (count > 1) {\n          minute = Math.floor(minute / count) * count;\n        }\n\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"month\":\n        if (count > 1) {\n          month = Math.floor(month / count) * count;\n        }\n\n        day = 1;\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"year\":\n        if (count > 1) {\n          year = Math.floor(year / count) * count;\n        }\n\n        month = 0;\n        day = 1;\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n\n      case \"week\":\n        if (!$type.isNumber(firstDateOfWeek)) {\n          firstDateOfWeek = 1;\n        }\n\n        if (weekday >= firstDateOfWeek) {\n          day = day - weekday + firstDateOfWeek;\n        } else {\n          day = day - (7 + weekday) + firstDateOfWeek;\n        }\n\n        hour = 0;\n        minute = 0;\n        second = 0;\n        millisecond = 0;\n        break;\n    }\n\n    minute += tzoffset - timeZoneOffset;\n    date = new Date(year, month, day, hour, minute, second, millisecond);\n    var newOffset = date.getTimezoneOffset();\n\n    if (newOffset != timeZoneOffset) {\n      date.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);\n    }\n\n    return date;\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function chooseInterval(index, duration, gridCount, intervals) {\n  var gridInterval = intervals[index];\n  var intervalDuration = getIntervalDuration(gridInterval);\n  var lastIndex = intervals.length - 1;\n\n  if (index >= lastIndex) {\n    return __assign({}, intervals[lastIndex]);\n  }\n\n  var count = Math.ceil(duration / intervalDuration);\n\n  if (duration < intervalDuration && index > 0) {\n    return __assign({}, intervals[index - 1]);\n  }\n\n  if (count <= gridCount) {\n    return __assign({}, intervals[index]);\n  } else {\n    if (index + 1 < intervals.length) {\n      return chooseInterval(index + 1, duration, gridCount, intervals);\n    } else {\n      return __assign({}, intervals[index]);\n    }\n  }\n}\n/**\r\n * @ignore\r\n */\n\nexport function getUnitValue(date, unit) {\n  switch (unit) {\n    case \"day\":\n      return date.getDate();\n\n    case \"second\":\n      return date.getSeconds();\n\n    case \"millisecond\":\n      return date.getMilliseconds();\n\n    case \"hour\":\n      return date.getHours();\n\n    case \"minute\":\n      return date.getMinutes();\n\n    case \"month\":\n      return date.getMonth();\n\n    case \"year\":\n      return date.getFullYear();\n\n    case \"week\":\n      return $utils.getWeek(date);\n  }\n}","map":{"version":3,"mappings":"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","names":["$type","$utils","sleep","ms","Promise","resolve","_reject","setTimeout","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","getIntervalDuration","interval","timeUnit","getDateIntervalDuration","date","firstDateOfWeek","utc","timezone","firstTime","round","Date","getTime","undefined","lastTime","add","now","copy","checkChange","timeOne","timeTwo","dateOne","dateTwo","convertLocal","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","timeZoneOffset","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","setUTCMonth","wday","newTimeZoneOffset","diff","firstDate","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","isNumber","tzoffset","offsetUTC","parsedDate","parseDate","weekday","newOffset","chooseInterval","index","gridCount","intervals","gridInterval","intervalDuration","lastIndex","length","ceil","getUnitValue","getDate","getSeconds","getMilliseconds","getHours","getMinutes","getMonth","getFullYear","getWeek"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/Time.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\nimport type { Timezone } from \"./Timezone\";\n\nexport type TimeUnit = \"millisecond\" | \"second\" | \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\" | \"year\";\n\nexport interface ITimeInterval {\n\ttimeUnit: TimeUnit;\n\tcount: number;\n}\n\n\n/**\n * Returns a `Promise` which can be used to execute code after number of\n * milliseconds.\n *\n * @param   ms  Sleep duration in ms\n * @return      Promise\n */\nexport function sleep(ms: number): Promise<void> {\n\treturn new Promise((resolve, _reject) => {\n\t\tsetTimeout(resolve, ms);\n\t});\n}\n\n\n/**\n * Maps time period names to their numeric representations in milliseconds.\n *\n * @ignore Exclude from docs\n */\nexport let timeUnitDurations: { [Key in TimeUnit]: number } = {\n\tmillisecond: 1,\n\tsecond: 1000,\n\tminute: 60000,\n\thour: 3600000,\n\tday: 86400000,\n\tweek: 604800000,\n\tmonth: 365.242 / 12 * 86400000,\n\tyear: 31536000000\n};\n\n/**\n * Returns the next time unit that goes after source `unit`.\n *\n * E.g. \"hour\" is the next unit after \"minute\", etc.\n *\n * @ignore Exclude from docs\n * @param unit  Source time unit\n * @return Next time unit\n */\nexport function getNextUnit(unit: TimeUnit): TimeUnit | undefined {\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\treturn;\n\t\tcase \"month\":\n\t\t\treturn \"year\";\n\n\t\tcase \"week\":\n\t\t\treturn \"month\";\n\n\t\tcase \"day\":\n\t\t\treturn \"month\"; // not a mistake\n\n\t\tcase \"hour\":\n\t\t\treturn \"day\";\n\n\t\tcase \"minute\":\n\t\t\treturn \"hour\";\n\n\t\tcase \"second\":\n\t\t\treturn \"minute\"\n\n\t\tcase \"millisecond\":\n\t\t\treturn \"second\";\n\t}\n}\n\n/**\n * Returns number of milliseconds in the `count` of time `unit`.\n *\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\n * \"month\", and \"year\".\n *\n * @param unit   Time unit\n * @param count  Number of units\n * @return Milliseconds\n */\nexport function getDuration(unit: TimeUnit, count?: number): number {\n\tif (count == null) {\n\t\tcount = 1;\n\t}\n\treturn timeUnitDurations[unit] * count;\n}\n\n/**\n * @ignore\n */\nexport function getIntervalDuration(interval: ITimeInterval | undefined) {\n\tif (interval) {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\treturn 0;\n}\n\n\nexport function getDateIntervalDuration(interval: ITimeInterval, date: Date, firstDateOfWeek?: number, utc?: boolean, timezone?: Timezone) {\n\tconst unit = interval.timeUnit;\n\tconst count = interval.count;\n\tif (unit == \"hour\" || unit == \"minute\" || unit == \"second\" || unit == \"millisecond\") {\n\t\treturn timeUnitDurations[interval.timeUnit] * interval.count;\n\t}\n\telse {\n\t\tconst firstTime = round(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, undefined, timezone).getTime();\n\t\tconst lastTime = add(new Date(firstTime), unit, count, utc).getTime();\n\t\treturn lastTime - firstTime;\n\t}\n}\n\n/**\n * Returns current `Date` object.\n *\n * @return Current date\n */\nexport function now(): Date {\n\treturn new Date();\n}\n\n/**\n * Returns current timestamp.\n *\n * @return Current timestamp\n */\nexport function getTime(): number {\n\treturn now().getTime();\n}\n\n/**\n * Returns a copy of the `Date` object.\n *\n * @param date  Source date\n * @return Copy\n */\nexport function copy(date: Date): Date {\n\treturn new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n\n/**\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\n * represent a \"range\" of time, rather the same time date.\n *\n * @param timeOne  timestamp\n * @param timeTwo  timestamp\n * @param unit     Time unit to check\n * @return Range?\n */\nexport function checkChange(timeOne: number, timeTwo: number, unit: TimeUnit, utc?: boolean, timezone?: Timezone): boolean {\n\t// quick\n\tif ((timeTwo - timeOne) > getDuration(unit, 1.2)) {\n\t\treturn true;\n\t}\n\n\tlet dateOne = new Date(timeOne);\n\tlet dateTwo = new Date(timeTwo);\n\n\tif (timezone) {\n\t\tdateOne = timezone.convertLocal(dateOne);\n\t\tdateTwo = timezone.convertLocal(dateTwo);\n\t}\n\n\tlet timeZoneOffset1 = 0;\n\tlet timeZoneOffset2 = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset1 = dateOne.getTimezoneOffset();\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n\n\t\ttimeZoneOffset2 = dateTwo.getTimezoneOffset();\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n\t}\n\n\tlet changed = false;\n\tswitch (unit) {\n\t\tcase \"year\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"month\":\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"day\":\n\t\t\tif (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\telse if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tif (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tif (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tif (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tif (dateOne.getTime() != dateTwo.getTime()) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\tif (changed) {\n\t\treturn changed;\n\t}\n\n\tlet nextUnit = getNextUnit(unit);\n\tif (nextUnit) {\n\t\treturn checkChange(timeOne, timeTwo, nextUnit, utc, timezone);\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n/**\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\n *\n * @param date   Source date\n * @param unit   Time unit\n * @param count  Number of units to add\n * @return Modified date\n */\nexport function add(date: Date, unit: TimeUnit, count: number, utc?: boolean): Date {\n\tlet timeZoneOffset = 0;\n\n\tif (!utc && unit != \"millisecond\") {\n\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t}\n\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\tlet day: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(day + count);\n\t\t\tbreak;\n\n\t\tcase \"second\":\n\t\t\tlet seconds: number = date.getUTCSeconds();\n\t\t\tdate.setUTCSeconds(seconds + count);\n\t\t\tbreak;\n\n\t\tcase \"millisecond\":\n\t\t\tlet milliseconds: number = date.getUTCMilliseconds();\n\t\t\tdate.setUTCMilliseconds(milliseconds + count);\n\t\t\tbreak;\n\n\t\tcase \"hour\":\n\t\t\tlet hours: number = date.getUTCHours();\n\t\t\tdate.setUTCHours(hours + count);\n\t\t\tbreak;\n\n\t\tcase \"minute\":\n\t\t\tlet minutes: number = date.getUTCMinutes();\n\t\t\tdate.setUTCMinutes(minutes + count);\n\t\t\tbreak;\n\n\t\tcase \"year\":\n\t\t\tlet year: number = date.getUTCFullYear();\n\t\t\tdate.setUTCFullYear(year + count);\n\t\t\tbreak;\n\n\t\tcase \"month\":\n\t\t\tlet month: number = date.getUTCMonth();\n\t\t\tdate.setUTCMonth(month + count);\n\t\t\tbreak;\n\n\t\tcase \"week\":\n\t\t\tlet wday: number = date.getUTCDate();\n\t\t\tdate.setUTCDate(wday + count * 7);\n\t\t\tbreak;\n\t}\n\tif (!utc && unit != \"millisecond\") {\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t\t// solves issues if newe time falls back to old time zone\n\t\t\t\tif (date.getTimezoneOffset() != newTimeZoneOffset) {\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn date;\n}\n\n\n/**\n * \"Rounds\" the date to specific time unit.\n *\n * @param date             Source date\n * @param unit             Time unit\n * @param count            Number of units to round to\n * @param firstDateOfWeek  First day of week\n * @param utc              Use UTC timezone\n * @param firstDate        First date to round to\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\n * @param timezone         Use specific named timezone when rounding\n * @return New date\n */\nexport function round(date: Date, unit: TimeUnit, count: number, firstDateOfWeek?: number, utc?: boolean, firstDate?: Date, timezone?: Timezone): Date {\n\tif (!timezone || utc) {\n\n\t\tlet timeZoneOffset = 0;\n\n\t\tif (!utc && unit != \"millisecond\") {\n\t\t\ttimeZoneOffset = date.getTimezoneOffset();\n\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n\t\t}\n\n\t\tswitch (unit) {\n\n\t\t\tcase \"day\":\n\t\t\t\tlet day = date.getUTCDate();\n\n\t\t\t\tif (count > 1) {\n\t\t\t\t\t//\tday = Math.floor(day / count) * count;\n\t\t\t\t\tif (firstDate) {\n\t\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\n\n\t\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdate.setUTCDate(day);\n\t\t\t\t}\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"second\":\n\t\t\t\tlet seconds = date.getUTCSeconds();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tseconds = Math.floor(seconds / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCSeconds(seconds, 0);\n\t\t\t\tbreak;\n\n\t\t\tcase \"millisecond\":\n\t\t\t\tif (count == 1) {\n\t\t\t\t\treturn date; // much better for perf!\n\t\t\t\t}\n\n\t\t\t\tlet milliseconds = date.getUTCMilliseconds();\n\t\t\t\tmilliseconds = Math.floor(milliseconds / count) * count;\n\t\t\t\tdate.setUTCMilliseconds(milliseconds);\n\t\t\t\tbreak;\n\n\t\t\tcase \"hour\":\n\n\t\t\t\tlet hours = date.getUTCHours();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\thours = Math.floor(hours / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCHours(hours, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"minute\":\n\n\t\t\t\tlet minutes = date.getUTCMinutes();\n\t\t\t\tmilliseconds = date.getUTCMilliseconds();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tminutes = Math.floor(minutes / count) * count;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCMinutes(minutes, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"month\":\n\n\t\t\t\tlet month = date.getUTCMonth();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCMonth(month, 1);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"year\":\n\n\t\t\t\tlet year = date.getUTCFullYear();\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t\t}\n\t\t\t\tdate.setUTCFullYear(year, 0, 1);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\t\t\t\tbreak;\n\n\t\t\tcase \"week\":\n\n\t\t\t\tlet wday = date.getUTCDate();\n\t\t\t\tlet weekDay = date.getUTCDay();\n\n\t\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t\t}\n\n\t\t\t\tif (weekDay >= firstDateOfWeek) {\n\t\t\t\t\twday = wday - weekDay + firstDateOfWeek;\n\t\t\t\t} else {\n\t\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\n\t\t\t\t}\n\n\t\t\t\tdate.setUTCDate(wday);\n\t\t\t\tdate.setUTCHours(0, 0, 0, 0);\n\n\t\t\t\tbreak;\n\t\t}\n\t\tif (!utc && unit != \"millisecond\") {\n\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n\t\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n\t\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\n\t\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\n\t\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\n\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn date;\n\t}\n\telse {\n\t\tlet tzoffset = timezone.offsetUTC(date);\n\t\tlet timeZoneOffset = date.getTimezoneOffset();\n\t\tlet parsedDate = timezone.parseDate(date);\n\t\tlet year = parsedDate.year;\n\t\tlet month = parsedDate.month;\n\t\tlet day = parsedDate.day;\n\t\tlet hour = parsedDate.hour;\n\t\tlet minute = parsedDate.minute;\n\t\tlet second = parsedDate.second;\n\t\tlet millisecond = parsedDate.millisecond;\n\t\tlet weekday = parsedDate.weekday;\n\n\t\tswitch (unit) {\n\n\t\t\tcase \"day\":\n\t\t\t\tif (firstDate) {\n\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\n\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\n\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\n\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\n\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n\n\t\t\t\t\tparsedDate = timezone.parseDate(date);\n\n\t\t\t\t\tyear = parsedDate.year;\n\t\t\t\t\tmonth = parsedDate.month;\n\t\t\t\t\tday = parsedDate.day;\n\t\t\t\t}\n\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"second\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tsecond = Math.floor(second / count) * count;\n\t\t\t\t}\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"millisecond\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmillisecond = Math.floor(millisecond / count) * count;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"hour\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\thour = Math.floor(hour / count) * count;\n\t\t\t\t}\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"minute\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tminute = Math.floor(minute / count) * count;\n\t\t\t\t}\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"month\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tmonth = Math.floor(month / count) * count;\n\t\t\t\t}\n\t\t\t\tday = 1;\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\n\t\t\t\tbreak;\n\n\t\t\tcase \"year\":\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tyear = Math.floor(year / count) * count;\n\t\t\t\t}\n\t\t\t\tmonth = 0;\n\t\t\t\tday = 1;\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\n\t\t\tcase \"week\":\n\t\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\n\t\t\t\t\tfirstDateOfWeek = 1;\n\t\t\t\t}\n\n\t\t\t\tif (weekday >= firstDateOfWeek) {\n\t\t\t\t\tday = day - weekday + firstDateOfWeek;\n\t\t\t\t} else {\n\t\t\t\t\tday = day - (7 + weekday) + firstDateOfWeek;\n\t\t\t\t}\n\n\t\t\t\thour = 0;\n\t\t\t\tminute = 0;\n\t\t\t\tsecond = 0;\n\t\t\t\tmillisecond = 0;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tminute += tzoffset - timeZoneOffset;\n\t\tdate = new Date(year, month, day, hour, minute, second, millisecond);\n\n\t\tlet newOffset = date.getTimezoneOffset();\n\t\tif (newOffset != timeZoneOffset) {\n\t\t\tdate.setTime(date.getTime() + (timeZoneOffset - newOffset) * 60000);\n\t\t}\n\n\t\treturn date;\n\t}\n}\n\n/**\n * @ignore\n */\nexport function chooseInterval(index: number, duration: number, gridCount: number, intervals: Array<ITimeInterval>): ITimeInterval {\n\tlet gridInterval: ITimeInterval = intervals[index];\n\tlet intervalDuration = getIntervalDuration(gridInterval);\n\n\tlet lastIndex = intervals.length - 1;\n\tif (index >= lastIndex) {\n\t\treturn { ...intervals[lastIndex] };\n\t}\n\n\tlet count = Math.ceil(duration / intervalDuration);\n\n\tif (duration < intervalDuration && index > 0) {\n\t\treturn { ...intervals[index - 1] };\n\t}\n\tif (count <= gridCount) {\n\t\treturn { ...intervals[index] };\n\t} else {\n\t\tif (index + 1 < intervals.length) {\n\t\t\treturn chooseInterval(index + 1, duration, gridCount, intervals);\n\t\t} else {\n\t\t\treturn { ...intervals[index] };\n\t\t}\n\t}\n}\n\n/**\n * @ignore\n */\nexport function getUnitValue(date: Date, unit: TimeUnit) {\n\tswitch (unit) {\n\t\tcase \"day\":\n\t\t\treturn date.getDate();\n\t\tcase \"second\":\n\t\t\treturn date.getSeconds();\n\t\tcase \"millisecond\":\n\t\t\treturn date.getMilliseconds();\n\t\tcase \"hour\":\n\t\t\treturn date.getHours();\n\t\tcase \"minute\":\n\t\t\treturn date.getMinutes();\n\t\tcase \"month\":\n\t\t\treturn date.getMonth();\n\t\tcase \"year\":\n\t\t\treturn date.getFullYear();\n\t\tcase \"week\":\n\t\t\treturn $utils.getWeek(date);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}