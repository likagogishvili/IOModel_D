{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\n/**\r\n * Draws a Ellipse.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Ellipse =\n/** @class */\nfunction (_super) {\n  __extends(Ellipse, _super);\n\n  function Ellipse() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Ellipse.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"radiusX\") || this.isDirty(\"radiusY\") || this.isDirty(\"rotation\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Ellipse.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        this._display.drawEllipse(0, 0, Math.abs(this.get(\"radiusX\")), Math.abs(this.get(\"radiusY\")));\n      }\n    }\n  });\n  Object.defineProperty(Ellipse, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Ellipse\"\n  });\n  Object.defineProperty(Ellipse, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Ellipse.className])\n  });\n  return Ellipse;\n}(Graphics);\n\nexport { Ellipse };","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAA8D,YAA9D;AAmBA;;;;;;;AAMA;AAAA;AAAA;EAA6BC;;EAA7B;;EAuBC;;;;;;WAfA;MACCC,iBAAMC,cAAN,CAAoBC,IAApB,CAAoB,IAApB;;MAEA,IAAI,KAAKC,OAAL,CAAa,SAAb,KAA2B,KAAKA,OAAL,CAAa,SAAb,CAA3B,IAAsD,KAAKA,OAAL,CAAa,UAAb,CAA1D,EAAoF;QACnF,KAAKC,MAAL,GAAc,IAAd;MACA;IACD;;;;;;WAED;MACCJ,iBAAMK,QAAN,CAAcH,IAAd,CAAc,IAAd;;MAEA,IAAI,KAAKE,MAAT,EAAiB;QAChB,KAAKE,QAAL,CAAcC,WAAd,CAA0B,CAA1B,EAA6B,CAA7B,EAAgCC,IAAI,CAACC,GAAL,CAAS,KAAKC,GAAL,CAAS,SAAT,CAAT,CAAhC,EAA+DF,IAAI,CAACC,GAAL,CAAS,KAAKC,GAAL,CAAS,SAAT,CAAT,CAA/D;MACA;IACD;;EAjBDC;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0Cb,QAAQ,CAACc,UAAT,CAAoBC,MAApB,CAA2B,CAACC,OAAO,CAACC,SAAT,CAA3B;EAA1C;EAiBD;AAAC,CAvBD,CAA6BjB,QAA7B;;SAAagB","names":["Graphics","__extends","_super","_beforeChanged","call","isDirty","_clear","_changed","_display","drawEllipse","Math","abs","get","Object","classNames","concat","Ellipse","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/Ellipse.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\n\r\nexport interface IEllipseSettings extends IGraphicsSettings {\r\n\r\n\t/**\r\n\t * The ellipse's major-axis radius. Must be non-negative.\r\n\t */\r\n\r\n\tradiusX: number\r\n\r\n\t/**\r\n\t * The ellipse's minor-axis radius. Must be non-negative.\r\n\t */\r\n\tradiusY: number\r\n}\r\n\r\nexport interface IEllipsePrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a Ellipse.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Ellipse extends Graphics {\r\n\r\n\tdeclare public _settings: IEllipseSettings;\r\n\tdeclare public _privateSettings: IEllipsePrivate;\r\n\r\n\tpublic static className: string = \"Ellipse\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Ellipse.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"radiusX\") || this.isDirty(\"radiusY\") || this.isDirty(\"rotation\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear) {\r\n\t\t\tthis._display.drawEllipse(0, 0, Math.abs(this.get(\"radiusX\")), Math.abs(this.get(\"radiusY\")));\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}