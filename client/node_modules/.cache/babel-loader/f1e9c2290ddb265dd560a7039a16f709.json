{"ast":null,"code":"/**\r\n * 3D slice module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Slice } from \"../Slice\";\nimport { Sprite } from \"../../Sprite\";\nimport * as $math from \"../../utils/Math\";\nimport * as $path from \"../../rendering/Path\";\nimport * as $type from \"../../utils/Type\";\nimport { Color, color } from \"../../utils/Color\";\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\n\nvar Slice3D =\n/** @class */\nfunction (_super) {\n  __extends(Slice3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Slice3D() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"Slice3D\";\n    _this.layout = \"none\"; // Create edge container\n\n    var edge = _this.createChild(Sprite);\n\n    _this.edge = edge;\n    edge.shouldClone = false;\n    edge.isMeasured = false;\n    edge.toBack(); // Set defaults\n\n    _this.angle = 30;\n    _this.depth = 20; // Create side A element\n\n    var sideA = _this.createChild(Sprite);\n\n    _this.sideA = sideA;\n    sideA.shouldClone = false;\n    sideA.isMeasured = false; //sideA.setElement(this.paper.add(\"path\"));\n    //sideA.strokeOpacity = 0;\n    // Crate side B element\n\n    var sideB = _this.createChild(Sprite);\n\n    _this.sideB = sideB;\n    sideB.shouldClone = false;\n    sideB.isMeasured = false; //sideB.setElement(this.paper.add(\"path\"));\n    //sideB.strokeOpacity = 0;\n    // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n\n  Slice3D.prototype.setFill = function (value) {\n    _super.prototype.setFill.call(this, value);\n\n    var colorStr;\n\n    if (value instanceof Color) {\n      colorStr = value.hex;\n    } else if (value instanceof LinearGradient || value instanceof RadialGradient) {\n      colorStr = value.stops.getIndex(0).color.hex;\n    } else {\n      var filter = new LightenFilter();\n      filter.lightness = -0.25;\n      this.edge.filters.push(filter);\n      this.sideA.filters.push(filter.clone());\n      this.sideB.filters.push(filter.clone());\n    }\n\n    if (colorStr) {\n      var edgeFill = color(colorStr).lighten(-0.25);\n      this.edge.fill = edgeFill;\n      this.sideA.fill = edgeFill;\n      this.sideB.fill = edgeFill;\n      this.edge.stroke = edgeFill;\n      this.sideA.stroke = edgeFill;\n      this.sideB.stroke = edgeFill;\n    }\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Slice3D.prototype.draw = function () {\n    this.cornerRadius = 0;\n    this.innerCornerRadius = 0;\n\n    _super.prototype.draw.call(this);\n\n    if (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\n      this.sideB.show(0);\n      this.sideA.show(0);\n      this.edge.show(0);\n      var startAngle = this.startAngle;\n      var arc = this.arc;\n      var innerRadius = this.pixelInnerRadius || 0;\n      var radiusY = this.radiusY || 0; //let cornerRadius = this.cornerRadius || 0;\n      //let innerCornerRadius = this.innerCornerRadius;\n\n      var radius = this.radius; // this is code duplicate with $path.arc. @todo to think how to avoid it\n\n      var endAngle = startAngle + arc; //let crSin = $math.sin($math.min(arc, 45) / 2);\n      //innerCornerRadius = innerCornerRadius || cornerRadius;\n\n      var innerRadiusY = radiusY / radius * innerRadius; //let cornerRadiusY = (radiusY / radius) * cornerRadius;\n      //let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\n      //cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\n      //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n      //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\n      //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\n      //cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\n      //cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\n      //innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\n      //innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\n      //let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\n      //let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\n      //if (innerRadius < innerCornerRadius) {\n      //\tinnerRadius = innerCornerRadius;\n      //}\n      //if (innerRadiusY < innerCornerRadiusY) {\n      //\tinnerRadiusY = innerCornerRadiusY;\n      //}\n      //let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\n      //let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\n      //if (!$type.isNumber(crInnerAngle)) {\n      //\tcrInnerAngle = 0;\n      //}\n      //if (!$type.isNumber(crInnerAngleY)) {\n      //\tcrInnerAngleY = 0;\n      //}\n      //let middleAngle = startAngle + arc / 2;\n      //let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\n\n      var a0 = {\n        x: $math.cos(startAngle) * innerRadius,\n        y: $math.sin(startAngle) * innerRadiusY\n      };\n      var b0 = {\n        x: $math.cos(startAngle) * radius,\n        y: $math.sin(startAngle) * radiusY\n      };\n      var c0 = {\n        x: $math.cos(endAngle) * radius,\n        y: $math.sin(endAngle) * radiusY\n      };\n      var d0 = {\n        x: $math.cos(endAngle) * innerRadius,\n        y: $math.sin(endAngle) * innerRadiusY\n      }; // end of duplicate\n\n      var h = this.depth;\n      var ah = {\n        x: a0.x,\n        y: a0.y - h\n      };\n      var bh = {\n        x: b0.x,\n        y: b0.y - h\n      };\n      var ch = {\n        x: c0.x,\n        y: c0.y - h\n      };\n      var dh = {\n        x: d0.x,\n        y: d0.y - h\n      };\n      var edgePath = \"\";\n      var count = Math.ceil(arc / 5);\n      var step = arc / count;\n      var mangle = startAngle;\n      var prevPoint = bh;\n\n      for (var i = 0; i < count; i++) {\n        mangle += step;\n\n        if (mangle > 0 && mangle < 180) {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * radius,\n            y: $math.sin(mangle) * radiusY - h\n          };\n          edgePath += $path.lineTo({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: pp.x,\n            y: pp.y + h\n          }, radius, radiusY, true);\n          edgePath += $path.lineTo(pp);\n          edgePath += $path.arcToPoint(prevPoint, radius, radiusY);\n          edgePath += \"z\";\n          prevPoint = pp;\n        } else {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * radius,\n            y: $math.sin(mangle) * radiusY - h\n          };\n          edgePath += $path.arcToPoint(pp, radius, radiusY, true);\n          edgePath += $path.lineTo({\n            x: pp.x,\n            y: pp.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          }, radius, radiusY);\n          edgePath += $path.lineTo(prevPoint);\n          edgePath += \"z\";\n          prevPoint = pp;\n        }\n      }\n\n      prevPoint = ah;\n      mangle = startAngle;\n\n      for (var i = 0; i < count; i++) {\n        mangle += step;\n\n        if (mangle > 0 && mangle < 180) {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * innerRadius,\n            y: $math.sin(mangle) * innerRadiusY - h\n          };\n          edgePath += $path.lineTo({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: pp.x,\n            y: pp.y + h\n          }, innerRadius, innerRadiusY, true);\n          edgePath += $path.lineTo(pp);\n          edgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\n          edgePath += \"z\";\n          prevPoint = pp;\n        } else {\n          edgePath += $path.moveTo(prevPoint);\n          var pp = {\n            x: $math.cos(mangle) * innerRadius,\n            y: $math.sin(mangle) * innerRadiusY - h\n          };\n          edgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\n          edgePath += $path.lineTo({\n            x: pp.x,\n            y: pp.y + h\n          });\n          edgePath += $path.arcToPoint({\n            x: prevPoint.x,\n            y: prevPoint.y + h\n          }, innerRadius, innerRadiusY);\n          edgePath += $path.lineTo(prevPoint);\n          edgePath += \"z\";\n          prevPoint = pp;\n        }\n      }\n\n      this.edge.path = edgePath;\n      /*\r\n                  a0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n                  b0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n                  c0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n                  d0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n                  // end of duplicate\r\n      \r\n                  ah = { x: a0.x, y: a0.y - h };\r\n                  bh = { x: b0.x, y: b0.y - h };\r\n                  ch = { x: c0.x, y: c0.y - h };\r\n                  dh = { x: d0.x, y: d0.y - h };\r\n      */\n\n      this.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\n      this.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\n\n      if (this.startAngle < 90) {\n        this.sideA.toBack();\n      } else {\n        this.sideA.toFront();\n      }\n\n      if (this.startAngle + this.arc > 90) {\n        this.sideB.toBack();\n      } else {\n        this.sideB.toFront();\n      }\n\n      this.slice.dy = -h;\n    } else {\n      this.sideA.hide(0);\n      this.sideB.hide(0);\n      this.edge.hide(0);\n    }\n  };\n\n  Object.defineProperty(Slice3D.prototype, \"depth\", {\n    /**\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (height) of the 3D slice in pixels.\r\n     *\r\n     * @default 20\r\n     * @param depth  Depth (px)\r\n     */\n    set: function (depth) {\n      this.setPropertyValue(\"depth\", depth, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice3D.prototype, \"angle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      var angle = this.getPropertyValue(\"angle\");\n\n      if (!$type.isNumber(angle)) {\n        angle = 0;\n      }\n\n      return angle;\n    },\n\n    /**\r\n     * Angle of the point of view to the 3D element. (0-360)\r\n     *\r\n     * @default 30\r\n     * @param value  Angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Slice3D.prototype, \"radiusY\", {\n    /**\r\n     * @return Vertical radius (0-1)\r\n     */\n    get: function () {\n      var radiusY = this.getPropertyValue(\"radiusY\");\n\n      if (!$type.isNumber(radiusY)) {\n        radiusY = this.radius - this.radius * this.angle / 90;\n      }\n\n      return radiusY;\n    },\n\n    /**\r\n     * Vertical radius for creating skewed slices.\r\n     *\r\n     * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n     * the `radius`.\r\n     *\r\n     * @param value Vertical radius (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"radiusY\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n  Slice3D.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.edge.copyFrom(source.edge);\n    this.sideA.copyFrom(source.sideA);\n    this.sideB.copyFrom(source.sideB);\n  };\n\n  return Slice3D;\n}(Slice);\n\nexport { Slice3D };","map":{"version":3,"mappings":"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","names":["Slice","Sprite","$math","$path","$type","Color","color","RadialGradient","LinearGradient","LightenFilter","__extends","_super","_this","className","layout","edge","createChild","shouldClone","isMeasured","toBack","angle","depth","sideA","sideB","applyTheme","Slice3D","value","setFill","call","colorStr","hex","stops","getIndex","filter","lightness","filters","push","clone","edgeFill","lighten","fill","stroke","cornerRadius","innerCornerRadius","draw","arc","radius","show","startAngle","innerRadius","pixelInnerRadius","radiusY","endAngle","innerRadiusY","a0","x","cos","y","sin","b0","c0","d0","h","ah","bh","ch","dh","edgePath","count","Math","ceil","step","mangle","prevPoint","i","moveTo","pp","lineTo","arcToPoint","path","closePath","toFront","slice","dy","hide","Object","getPropertyValue","setPropertyValue","isNumber","source","copyFrom"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/elements/3d/Slice3D.ts"],"sourcesContent":["/**\r\n * 3D slice module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Slice, ISliceProperties, ISliceAdapters, ISliceEvents } from \"../Slice\";\r\nimport { Sprite } from \"../../Sprite\";\r\nimport { IPoint } from \"../../defs/IPoint\";\r\nimport * as $math from \"../../utils/Math\";\r\nimport * as $path from \"../../rendering/Path\";\r\nimport * as $type from \"../../utils/Type\";\r\nimport { Color, color } from \"../../utils/Color\";\r\nimport { RadialGradient } from \"../../rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../rendering/fills/Pattern\";\r\nimport { LightenFilter } from \"../../rendering/filters/LightenFilter\";\r\n\r\n/**\r\n * Defines properties for [[Slice3D]].\r\n */\r\nexport interface ISlice3DProperties extends ISliceProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Slice3D]].\r\n */\r\nexport interface ISlice3DEvents extends ISliceEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Slice3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlice3DAdapters extends ISliceAdapters, ISlice3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to draw a 3D slice of a Pie chart.\r\n *\r\n * @see {@link ISlice3DEvents} for a list of available events\r\n * @see {@link ISlice3DAdapters} for a list of available Adapters\r\n */\r\nexport class Slice3D extends Slice {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlice3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlice3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlice3DEvents;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic edge: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideA: Sprite;\r\n\r\n\t/**\r\n\t * Side element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic sideB: Sprite;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Slice3D\";\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create edge container\r\n\t\tlet edge = this.createChild(Sprite);\r\n\t\tthis.edge = edge;\r\n\t\tedge.shouldClone = false;\r\n\t\tedge.isMeasured = false;\r\n\t\tedge.toBack();\r\n\r\n\t\t// Set defaults\r\n\t\tthis.angle = 30;\r\n\t\tthis.depth = 20;\r\n\r\n\t\t// Create side A element\r\n\t\tlet sideA = this.createChild(Sprite);\r\n\t\tthis.sideA = sideA;\r\n\t\tsideA.shouldClone = false;\r\n\t\tsideA.isMeasured = false;\r\n\t\t//sideA.setElement(this.paper.add(\"path\"));\r\n\t\t//sideA.strokeOpacity = 0;\r\n\r\n\t\t// Crate side B element\r\n\t\tlet sideB = this.createChild(Sprite);\r\n\t\tthis.sideB = sideB;\r\n\t\tsideB.shouldClone = false;\r\n\t\tsideB.isMeasured = false;\r\n\t\t//sideB.setElement(this.paper.add(\"path\"));\r\n\t\t//sideB.strokeOpacity = 0;\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\r\n\t\tlet colorStr: string;\r\n\t\tif (value instanceof Color) {\r\n\t\t\tcolorStr = value.hex;\r\n\t\t}\r\n\t\telse if (value instanceof LinearGradient || value instanceof RadialGradient) {\r\n\t\t\tcolorStr = value.stops.getIndex(0).color.hex;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet filter = new LightenFilter();\r\n\t\t\tfilter.lightness = -0.25;\r\n\t\t\tthis.edge.filters.push(filter);\r\n\t\t\tthis.sideA.filters.push(filter.clone());\r\n\t\t\tthis.sideB.filters.push(filter.clone());\r\n\t\t}\r\n\r\n\t\tif (colorStr) {\r\n\t\t\tlet edgeFill = color(colorStr).lighten(-0.25);\r\n\r\n\t\t\tthis.edge.fill = edgeFill;\r\n\t\t\tthis.sideA.fill = edgeFill;\r\n\t\t\tthis.sideB.fill = edgeFill;\r\n\r\n\t\t\tthis.edge.stroke = edgeFill;\r\n\t\t\tthis.sideA.stroke = edgeFill;\r\n\t\t\tthis.sideB.stroke = edgeFill;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tthis.cornerRadius = 0;\r\n\t\tthis.innerCornerRadius = 0;\r\n\r\n\t\tsuper.draw();\r\n\r\n\t\tif (this.arc !== 0 && this.radius > 0 && this.depth > 0) {\r\n\t\t\tthis.sideB.show(0);\r\n\t\t\tthis.sideA.show(0);\r\n\t\t\tthis.edge.show(0);\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet innerRadius = this.pixelInnerRadius || 0;\r\n\t\t\tlet radiusY = this.radiusY || 0;\r\n\r\n\t\t\t//let cornerRadius = this.cornerRadius || 0;\r\n\t\t\t//let innerCornerRadius = this.innerCornerRadius;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\t// this is code duplicate with $path.arc. @todo to think how to avoid it\r\n\r\n\t\t\tlet endAngle = startAngle + arc;\r\n\t\t\t//let crSin = $math.sin($math.min(arc, 45) / 2);\r\n\r\n\t\t\t//innerCornerRadius = innerCornerRadius || cornerRadius;\r\n\r\n\t\t\tlet innerRadiusY = (radiusY / radius) * innerRadius;\r\n\t\t\t//let cornerRadiusY = (radiusY / radius) * cornerRadius;\r\n\t\t\t//let innerCornerRadiusY = (radiusY / radius) * innerCornerRadius;\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, (radius - innerRadius) / 2);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, (radiusY - innerRadiusY) / 2);\r\n\r\n\t\t\t//cornerRadius = $math.fitToRange(cornerRadius, 0, radius * crSin);\r\n\t\t\t//cornerRadiusY = $math.fitToRange(cornerRadiusY, 0, radiusY * crSin);\r\n\r\n\t\t\t//innerCornerRadius = $math.fitToRange(innerCornerRadius, 0, innerRadius * crSin);\r\n\t\t\t//innerCornerRadiusY = $math.fitToRange(innerCornerRadiusY, 0, innerRadiusY * crSin);\r\n\r\n\t\t\t//let crAngle: number = Math.asin(cornerRadius / radius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crAngleY: number = Math.asin(cornerRadiusY / radiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (innerRadius < innerCornerRadius) {\r\n\t\t\t//\tinnerRadius = innerCornerRadius;\r\n\t\t\t//}\r\n\r\n\t\t\t//if (innerRadiusY < innerCornerRadiusY) {\r\n\t\t\t//\tinnerRadiusY = innerCornerRadiusY;\r\n\t\t\t//}\r\n\r\n\t\t\t//let crInnerAngle: number = Math.asin(innerCornerRadius / innerRadius / 2) * $math.DEGREES * 2;\r\n\t\t\t//let crInnerAngleY: number = Math.asin(innerCornerRadiusY / innerRadiusY / 2) * $math.DEGREES * 2;\r\n\r\n\t\t\t//if (!$type.isNumber(crInnerAngle)) {\r\n\t\t\t//\tcrInnerAngle = 0;\r\n\t\t\t//}\r\n\t\t\t//if (!$type.isNumber(crInnerAngleY)) {\r\n\t\t\t//\tcrInnerAngleY = 0;\r\n\t\t\t//}\r\n\r\n\t\t\t//let middleAngle = startAngle + arc / 2;\r\n\t\t\t//let mPoint = { x: $math.round($math.cos(middleAngle) * innerRadius, 4), y: $math.round($math.sin(middleAngle) * innerRadiusY, 4) };\r\n\r\n\t\t\tlet a0 = { x: $math.cos(startAngle) * (innerRadius), y: $math.sin(startAngle) * (innerRadiusY) };\r\n\t\t\tlet b0 = { x: $math.cos(startAngle) * (radius), y: $math.sin(startAngle) * (radiusY) };\r\n\t\t\tlet c0 = { x: $math.cos(endAngle) * (radius), y: $math.sin(endAngle) * (radiusY) };\r\n\t\t\tlet d0 = { x: $math.cos(endAngle) * (innerRadius), y: $math.sin(endAngle) * (innerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tlet h: number = this.depth;\r\n\t\t\tlet ah: IPoint = { x: a0.x, y: a0.y - h };\r\n\t\t\tlet bh: IPoint = { x: b0.x, y: b0.y - h };\r\n\t\t\tlet ch: IPoint = { x: c0.x, y: c0.y - h };\r\n\t\t\tlet dh: IPoint = { x: d0.x, y: d0.y - h };\r\n\r\n\t\t\tlet edgePath = \"\";\r\n\t\t\tlet count = Math.ceil(arc / 5);\r\n\t\t\tlet step = arc / count;\r\n\t\t\tlet mangle = startAngle;\r\n\r\n\t\t\tlet prevPoint = bh;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, radius, radiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (radius), y: $math.sin(mangle) * (radiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, radius, radiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, radius, radiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tprevPoint = ah;\r\n\t\t\tmangle = startAngle;\r\n\r\n\r\n\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\tmangle += step;\r\n\t\t\t\tif (mangle > 0 && mangle < 180) {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: prevPoint.x, y: prevPoint.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: pp.x, y: pp.y + h }, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo(pp);\r\n\t\t\t\t\tedgePath += $path.arcToPoint(prevPoint, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tedgePath += $path.moveTo(prevPoint);\r\n\t\t\t\t\tlet pp = { x: $math.cos(mangle) * (innerRadius), y: $math.sin(mangle) * (innerRadiusY) - h };\r\n\t\t\t\t\tedgePath += $path.arcToPoint(pp, innerRadius, innerRadiusY, true);\r\n\t\t\t\t\tedgePath += $path.lineTo({ x: pp.x, y: pp.y + h });\r\n\t\t\t\t\tedgePath += $path.arcToPoint({ x: prevPoint.x, y: prevPoint.y + h }, innerRadius, innerRadiusY);\r\n\t\t\t\t\tedgePath += $path.lineTo(prevPoint);\r\n\t\t\t\t\tedgePath += \"z\";\r\n\t\t\t\t\tprevPoint = pp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.edge.path = edgePath;\r\n/*\r\n\t\t\ta0 = { x: $math.cos(startAngle) * (innerRadius + innerCornerRadius), y: $math.sin(startAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\tb0 = { x: $math.cos(startAngle) * (radius - cornerRadius), y: $math.sin(startAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\tc0 = { x: $math.cos(endAngle) * (radius - cornerRadius), y: $math.sin(endAngle) * (radiusY - cornerRadiusY) };\r\n\t\t\td0 = { x: $math.cos(endAngle) * (innerRadius + innerCornerRadius), y: $math.sin(endAngle) * (innerRadiusY + innerCornerRadiusY) };\r\n\t\t\t// end of duplicate\r\n\r\n\t\t\tah = { x: a0.x, y: a0.y - h };\r\n\t\t\tbh = { x: b0.x, y: b0.y - h };\r\n\t\t\tch = { x: c0.x, y: c0.y - h };\r\n\t\t\tdh = { x: d0.x, y: d0.y - h };\r\n*/\r\n\t\t\tthis.sideA.path = $path.moveTo(a0) + $path.lineTo(b0) + $path.lineTo(bh) + $path.lineTo(ah) + $path.closePath();\r\n\t\t\tthis.sideB.path = $path.moveTo(c0) + $path.lineTo(d0) + $path.lineTo(dh) + $path.lineTo(ch) + $path.closePath();\r\n\r\n\t\t\tif (this.startAngle < 90) {\r\n\t\t\t\tthis.sideA.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideA.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.startAngle + this.arc > 90) {\r\n\t\t\t\tthis.sideB.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.sideB.toFront();\r\n\t\t\t}\r\n\r\n\t\t\tthis.slice.dy = -h;\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.sideA.hide(0);\r\n\t\t\tthis.sideB.hide(0);\r\n\t\t\tthis.edge.hide(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the 3D slice in pixels.\r\n\t *\r\n\t * @default 20\r\n\t * @param depth  Depth (px)\r\n\t */\r\n\tpublic set depth(depth: number) {\r\n\t\tthis.setPropertyValue(\"depth\", depth, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the point of view to the 3D element. (0-360)\r\n\t *\r\n\t * @default 30\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\tlet angle: number = this.getPropertyValue(\"angle\");\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = 0;\r\n\t\t}\r\n\t\treturn angle;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical radius (0-1)\r\n\t */\r\n\tpublic get radiusY(): number {\r\n\t\tlet radiusY: number = this.getPropertyValue(\"radiusY\");\r\n\t\tif (!$type.isNumber(radiusY)) {\r\n\t\t\tradiusY = this.radius - this.radius * this.angle / 90;\r\n\t\t}\r\n\t\treturn radiusY;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical radius for creating skewed slices.\r\n\t *\r\n\t * This is relevant to `radius`, e.g. 0.5 will set vertical radius to half\r\n\t * the `radius`.\r\n\t *\r\n\t * @param value Vertical radius (0-1)\r\n\t */\r\n\tpublic set radiusY(value: number) {\r\n\t\tthis.setPropertyValue(\"radiusY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.edge.copyFrom(source.edge);\r\n\t\tthis.sideA.copyFrom(source.sideA);\r\n\t\tthis.sideB.copyFrom(source.sideB);\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}