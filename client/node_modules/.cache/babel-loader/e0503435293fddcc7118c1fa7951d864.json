{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a rectangle with a pointer.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar PointedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(PointedRectangle, _super);\n\n  function PointedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(PointedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        this.markDirtyBounds();\n        var w = this.width();\n        var h = this.height();\n\n        if (w > 0 && h > 0) {\n          var cr = this.get(\"cornerRadius\", 8);\n          cr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n          var x = this.get(\"pointerX\", 0);\n          var y = this.get(\"pointerY\", 0);\n          var bwh = this.get(\"pointerBaseWidth\", 15) / 2; // corner coordinates\n          // top left\n\n          var xtl = 0;\n          var ytl = 0; // top right\n\n          var xtr = w;\n          var ytr = 0; // bottom right\n\n          var xbr = w;\n          var ybr = h; // bottom left\n\n          var xbl = 0;\n          var ybl = h; // find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n          // d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\n          var d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n          var d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n          var display = this._display; // top\n\n          display.moveTo(cr, 0);\n\n          if (d1 > 0 && d2 > 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, -Infinity, 0);\n            display.lineTo(stemX - bwh, 0);\n            display.lineTo(x, y);\n            display.lineTo(stemX + bwh, 0);\n          }\n\n          display.lineTo(w - cr, 0);\n          display.arcTo(w, 0, w, cr, cr); // right\n\n          if (d1 > 0 && d2 < 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n            x = $math.fitToRange(x, w, Infinity);\n            display.lineTo(w, cr);\n            display.lineTo(w, stemY - bwh);\n            display.lineTo(x, y);\n            display.lineTo(w, stemY + bwh);\n          }\n\n          display.lineTo(w, h - cr);\n          display.arcTo(w, h, w - cr, h, cr); // bottom\n\n          if (d1 < 0 && d2 < 0) {\n            var stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n            y = $math.fitToRange(y, h, Infinity);\n            display.lineTo(w - cr, h);\n            display.lineTo(stemX + bwh, h);\n            display.lineTo(x, y);\n            display.lineTo(stemX - bwh, h);\n          }\n\n          display.lineTo(cr, h);\n          display.arcTo(0, h, 0, h - cr, cr); // left\n\n          if (d1 < 0 && d2 > 0) {\n            var stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n            x = $math.fitToRange(x, -Infinity, 0);\n            display.lineTo(0, h - cr);\n            display.lineTo(0, stemY + bwh);\n            display.lineTo(x, y);\n            display.lineTo(0, stemY - bwh);\n          }\n\n          display.lineTo(0, cr);\n          display.arcTo(0, 0, cr, 0, cr);\n        }\n      }\n    }\n  });\n  Object.defineProperty(PointedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"PointedRectangle\"\n  });\n  Object.defineProperty(PointedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([PointedRectangle.className])\n  });\n  return PointedRectangle;\n}(Graphics);\n\nexport { PointedRectangle };","map":{"version":3,"mappings":"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","names":["Graphics","$math","__extends","_super","_beforeChanged","call","isDirty","_clear","_changed","markDirtyBounds","w","width","h","height","cr","get","fitToRange","Math","min","x","y","bwh","xtl","ytl","xtr","ytr","xbr","ybr","xbl","ybl","d1","d2","display","_display","moveTo","stemX","round","Infinity","lineTo","arcTo","stemY","Object","classNames","concat","PointedRectangle","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/PointedRectangle.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $math from \"../util/Math\";\n\nexport interface IPointedRectangleSettings extends IGraphicsSettings {\n\n\t/**\n\t * A width of the pinter's (stem's) thick end (base) in pixels.\n\t */\n\tpointerBaseWidth?: number;\n\n\t/**\n\t * A length of the pinter (stem) in pixels.\n\t */\n\tpointerLength?: number;\n\n\t/**\n\t * X coordinate the shape is pointing to.\n\t */\n\tpointerX?: number;\n\n\t/**\n\t * Y coordinate the shape is pointing to.\n\t */\n\tpointerY?: number;\n\n\t/**\n\t * Corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n}\n\nexport interface IPointedRectanglePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a rectangle with a pointer.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class PointedRectangle extends Graphics {\n\n\tdeclare public _settings: IPointedRectangleSettings;\n\tdeclare public _privateSettings: IPointedRectanglePrivate;\n\n\tpublic static className: string = \"PointedRectangle\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([PointedRectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"pointerBaseWidth\") || this.isDirty(\"cornerRadius\") || this.isDirty(\"pointerLength\") || this.isDirty(\"pointerX\") || this.isDirty(\"pointerY\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet w = this.width();\n\t\t\tlet h = this.height();\n\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tlet cr = this.get(\"cornerRadius\", 8);\n\t\t\t\tcr = $math.fitToRange(cr, 0, Math.min(w / 2, h / 2));\n\n\t\t\t\tlet x = this.get(\"pointerX\", 0);\n\t\t\t\tlet y = this.get(\"pointerY\", 0);\n\t\t\t\tlet bwh = this.get(\"pointerBaseWidth\", 15) / 2;\n\n\t\t\t\t// corner coordinates\n\t\t\t\t// top left\n\t\t\t\tlet xtl = 0;\n\t\t\t\tlet ytl = 0;\n\t\t\t\t// top right\n\t\t\t\tlet xtr = w;\n\t\t\t\tlet ytr = 0;\n\t\t\t\t// bottom right\n\t\t\t\tlet xbr = w;\n\t\t\t\tlet ybr = h;\n\t\t\t\t// bottom left\n\t\t\t\tlet xbl = 0;\n\t\t\t\tlet ybl = h;\n\n\t\t\t\t// find stem base side: http://$math.stackexchange.com/questions/274712/calculate-on-which-side-of-straign-line-is-dot-located\n\t\t\t\t// d=(x−x1)(y2−y1)−(y−y1)(x2−x1)\n\t\t\t\tlet d1 = (x - xtl) * (ybr - ytl) - (y - ytl) * (xbr - xtl);\n\t\t\t\tlet d2 = (x - xbl) * (ytr - ybl) - (y - ybl) * (xtr - xbl);\n\n\t\t\t\tconst display = this._display;\n\t\t\t\t// top\n\t\t\t\tdisplay.moveTo(cr, 0);\n\n\t\t\t\tif (d1 > 0 && d2 > 0) {\n\t\t\t\t\tlet stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n\t\t\t\t\ty = $math.fitToRange(y, -Infinity, 0);\n\n\t\t\t\t\tdisplay.lineTo(stemX - bwh, 0);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(stemX + bwh, 0);\n\t\t\t\t}\n\n\t\t\t\tdisplay.lineTo(w - cr, 0);\n\t\t\t\tdisplay.arcTo(w, 0, w, cr, cr);\n\n\t\t\t\t// right\n\t\t\t\tif (d1 > 0 && d2 < 0) {\n\t\t\t\t\tlet stemY = Math.round($math.fitToRange(y, cr + bwh, h - bwh - cr));\n\t\t\t\t\tx = $math.fitToRange(x, w, Infinity);\n\t\t\t\t\tdisplay.lineTo(w, cr);\n\t\t\t\t\tdisplay.lineTo(w, stemY - bwh);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(w, stemY + bwh);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(w, h - cr);\n\t\t\t\tdisplay.arcTo(w, h, w - cr, h, cr);\n\n\t\t\t\t// bottom\n\t\t\t\tif (d1 < 0 && d2 < 0) {\n\t\t\t\t\tlet stemX = Math.round($math.fitToRange(x, cr + bwh, w - bwh - cr));\n\t\t\t\t\ty = $math.fitToRange(y, h, Infinity);\n\n\t\t\t\t\tdisplay.lineTo(w - cr, h);\n\t\t\t\t\tdisplay.lineTo(stemX + bwh, h);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(stemX - bwh, h);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(cr, h)\n\t\t\t\tdisplay.arcTo(0, h, 0, h - cr, cr);\n\n\n\t\t\t\t// left\n\t\t\t\tif (d1 < 0 && d2 > 0) {\n\t\t\t\t\tlet stemY = Math.round($math.fitToRange(y, cr + bwh, h - cr - bwh));\n\t\t\t\t\tx = $math.fitToRange(x, -Infinity, 0);\n\t\t\t\t\tdisplay.lineTo(0, h - cr);\n\t\t\t\t\tdisplay.lineTo(0, stemY + bwh);\n\t\t\t\t\tdisplay.lineTo(x, y);\n\t\t\t\t\tdisplay.lineTo(0, stemY - bwh);\n\t\t\t\t}\n\t\t\t\tdisplay.lineTo(0, cr);\n\t\t\t\tdisplay.arcTo(0, 0, cr, 0, cr);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}