{"ast":null,"code":"/**\r\n * Cursor for XY chart\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Cursor } from \"./Cursor\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { XYSeries } from \"../series/XYSeries\";\nimport { registry } from \"../../core/Registry\";\nimport { color } from \"../../core/utils/Color\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\n\nvar XYCursor =\n/** @class */\nfunction (_super) {\n  __extends(XYCursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYCursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Vertical cursor line element.\r\n     */\n\n\n    _this._lineX = new MutableValueDisposer();\n    /**\r\n     * Horizontal cursor line element.\r\n     */\n\n    _this._lineY = new MutableValueDisposer();\n    /**\r\n     * Horizontal [[Axis]].\r\n     */\n\n    _this._xAxis = new MutableValueDisposer();\n    /**\r\n     * Vertical [[Axis]].\r\n     */\n\n    _this._yAxis = new MutableValueDisposer();\n    _this._snapToDisposers = [];\n    _this.className = \"XYCursor\"; // Defaults\n\n    _this.behavior = \"zoomX\";\n    _this.maxPanOut = 0.1;\n    var interfaceColors = new InterfaceColorSet();\n    _this.snapOnPan = true; // Create selection element\n\n    var selection = _this.createChild(Sprite);\n\n    selection.shouldClone = false;\n    selection.fillOpacity = 0.2;\n    selection.fill = interfaceColors.getFor(\"alternativeBackground\");\n    selection.isMeasured = false;\n    selection.visible = false;\n    selection.interactionsEnabled = false;\n    _this.selection = selection;\n\n    _this._disposers.push(_this.selection); // Create cursor's vertical line\n\n\n    var lineX = _this.createChild(Sprite);\n\n    lineX.shouldClone = false;\n    lineX.stroke = interfaceColors.getFor(\"grid\");\n    lineX.fill = color();\n    lineX.strokeDasharray = \"3,3\";\n    lineX.isMeasured = false;\n    lineX.strokeOpacity = 0.4;\n    lineX.interactionsEnabled = false;\n    lineX.y = 0; // important\n\n    _this.lineX = lineX;\n\n    _this._disposers.push(_this.lineX); // Create cursor's horizontal line\n\n\n    var lineY = _this.createChild(Sprite);\n\n    lineY.shouldClone = false;\n    lineY.stroke = interfaceColors.getFor(\"grid\");\n    lineY.fill = color();\n    lineY.strokeDasharray = \"3,3\";\n    lineY.isMeasured = false;\n    lineY.strokeOpacity = 0.4;\n    lineY.interactionsEnabled = false;\n    lineY.x = 0; // important\n\n    _this.lineY = lineY;\n\n    _this._disposers.push(_this.lineY); // Add handler for size changes\n\n\n    _this.events.on(\"sizechanged\", _this.updateSize, _this, false);\n\n    _this._disposers.push(_this._lineX);\n\n    _this._disposers.push(_this._lineY);\n\n    _this._disposers.push(_this._xAxis);\n\n    _this._disposers.push(_this._yAxis);\n\n    _this.mask = _this;\n    _this.hideSeriesTooltipsOnSelection = true; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Updates cursor element dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateSize = function () {\n    if (this.lineX) {\n      this.lineX.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: this.innerHeight\n      });\n    }\n\n    if (this.lineY) {\n      this.lineY.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: this.innerWidth,\n        y: 0\n      });\n    }\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateSelection = function () {\n    if (this._usesSelection) {\n      var downPoint = this.downPoint;\n      var behavior = this.behavior;\n\n      if (downPoint) {\n        var point = this.point;\n\n        if (this.lineX) {\n          point.x = this.lineX.pixelX;\n        }\n\n        if (this.lineY) {\n          point.y = this.lineY.pixelY;\n        }\n\n        var selection = this.selection;\n        var x = Math.min(point.x, downPoint.x);\n        var y = Math.min(point.y, downPoint.y);\n        var w = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\n        var h = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\n\n        switch (behavior) {\n          case \"zoomX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"zoomY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n\n          case \"selectX\":\n            y = 0;\n            h = this.pixelHeight;\n            break;\n\n          case \"selectY\":\n            x = 0;\n            w = this.pixelWidth;\n            break;\n        }\n\n        selection.x = x;\n        selection.y = y;\n        selection.path = $path.rectangle(w, h);\n        selection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\n      } else {\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.fixPoint = function (point) {\n    point.x = Math.max(0, point.x);\n    point.y = Math.max(0, point.y);\n    point.x = Math.min(this.pixelWidth, point.x);\n    point.y = Math.min(this.pixelHeight, point.y);\n    return point;\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n\n\n  XYCursor.prototype.triggerMoveReal = function (point, force) {\n    _super.prototype.triggerMoveReal.call(this, point, force);\n\n    var snapToSeries = this.snapToSeries;\n\n    if (snapToSeries && !this.downPoint) {\n      if (snapToSeries instanceof XYSeries) {\n        if (snapToSeries.isHidden) {\n          this.updateLinePositions(point);\n        }\n      } else {\n        var allHidden_1 = true;\n        $array.each(snapToSeries, function (s) {\n          if (!s.isHidden) {\n            allHidden_1 = false;\n          }\n        });\n\n        if (allHidden_1) {\n          this.updateLinePositions(point);\n        }\n      }\n    } else {\n      this.updateLinePositions(point);\n    }\n\n    if (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\n      if (this._generalBehavior == \"pan\") {\n        this.getPanningRanges();\n        this.dispatch(\"panning\");\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  XYCursor.prototype.updateLinePositions = function (point) {\n    point = this.fixPoint(this.point);\n\n    if (this.lineX && this.lineX.visible && !this.xAxis) {\n      this.lineX.x = point.x;\n    }\n\n    if (this.lineY && this.lineY.visible && !this.yAxis) {\n      this.lineY.y = point.y;\n    }\n\n    this.updateSelection();\n  };\n\n  XYCursor.prototype.triggerDownReal = function (point) {\n    if (this.visible && !this.isHiding) {\n      if (this._generalBehavior == \"select\") {\n        this.selection.parent = this.parent;\n      }\n\n      if (this.fitsToBounds(point)) {\n        this.downPoint = {\n          x: point.x,\n          y: point.y\n        };\n        this.updatePoint(point); //this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\n\n        this.point.x = this.downPoint.x;\n        this.point.y = this.downPoint.y;\n        var selection = this.selection;\n        var selectionX = this.downPoint.x;\n        var selectionY = this.downPoint.y;\n\n        if (this._usesSelection) {\n          selection.x = selectionX;\n          selection.y = selectionY;\n          selection.path = \"\";\n          selection.show();\n        }\n\n        _super.prototype.triggerDownReal.call(this, point);\n      } else {\n        this.downPoint = undefined;\n      }\n    } else {\n      this.downPoint = undefined;\n    }\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n\n\n  XYCursor.prototype.updatePoint = function (point) {\n    if (this.lineX) {\n      point.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      point.y = this.lineY.pixelY;\n    }\n  };\n  /**\r\n   * Handle action when cursor is released, which should perform an operation\r\n   * based on its `behavior`, like zoom.\r\n   *\r\n   * @param  point  Release point\r\n   */\n\n\n  XYCursor.prototype.triggerUpReal = function (point) {\n    if (this.hasMoved()) {\n      if (this.downPoint) {\n        this.upPoint = point;\n        this.updatePoint(this.upPoint);\n\n        if (this._generalBehavior != \"pan\") {\n          this.getRanges();\n        }\n\n        if (this._generalBehavior != \"select\") {\n          this.selection.hide();\n        }\n\n        _super.prototype.triggerUpReal.call(this, point);\n      }\n    } else {\n      if (this._generalBehavior != \"select\") {\n        this.selection.hide(0);\n      } else {\n        this.xRange = undefined;\n        this.yRange = undefined;\n        this.dispatchImmediately(\"selectended\");\n      } // reset cursor style, just in case\n\n\n      if (this._generalBehavior == \"pan\") {\n        var interaction = getInteraction();\n        interaction.setGlobalStyle(MouseCursorStyle.default);\n      }\n\n      this.dispatchImmediately(\"behaviorcanceled\");\n    }\n\n    this.downPoint = undefined;\n    this.dispatch(\"cursorpositionchanged\");\n  };\n  /**\r\n   * Calculates if the cursor has moved enough based on its `behavior`.\r\n   *\r\n   * @return Moved?\r\n   */\n\n\n  XYCursor.prototype.hasMoved = function () {\n    var distance;\n\n    if (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\n      distance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\n    } else if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\n      distance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\n    } else {\n      distance = $math.getDistance(this._upPointOrig, this._downPointOrig);\n    }\n\n    return distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  XYCursor.prototype.getPanningRanges = function () {\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var currentX = $math.round(this.point.x / this.innerWidth, 5);\n    var currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\n    var deltaX = startX - currentX;\n    var deltaY = startY - currentY;\n    this.xRange = {\n      start: deltaX,\n      end: 1 + deltaX\n    };\n    this.yRange = {\n      start: deltaY,\n      end: 1 + deltaY\n    };\n\n    if (this.behavior == \"panX\") {\n      this.yRange.start = 0;\n      this.yRange.end = 1;\n    }\n\n    if (this.behavior == \"panY\") {\n      this.xRange.start = 0;\n      this.xRange.end = 1;\n    }\n  };\n  /**\r\n   * [getRanges description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  XYCursor.prototype.getRanges = function () {\n    if (this.lineX) {\n      this.upPoint.x = this.lineX.pixelX;\n    }\n\n    if (this.lineY) {\n      this.upPoint.y = this.lineY.pixelY;\n    } // @todo Is this needed?\n\n\n    $utils.used(this.selection);\n    var startX = $math.round(this.downPoint.x / this.innerWidth, 5);\n    var endX = $math.round(this.upPoint.x / this.innerWidth, 5);\n    var startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\n    var endY = 1 - $math.round(this.upPoint.y / this.innerHeight, 5);\n    this.xRange = {\n      start: $math.min(startX, endX),\n      end: $math.max(startX, endX)\n    };\n    this.yRange = {\n      start: $math.min(startY, endY),\n      end: $math.max(startY, endY)\n    };\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"behavior\", {\n    /**\r\n     * Behavior\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"behavior\");\n    },\n\n    /**\r\n     * Cursor's behavior when it's moved with pointer down:\r\n     *\r\n     * * `\"zoomX\"` - zooms horizontally.\r\n     * * `\"zoomY\"` - zooms vertically.\r\n     * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n     * * `\"selectX\"` - selects a range horizontally.\r\n     * * `\"selectY\"` - selects a range vertically.\r\n     * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n     * * `\"panX\"` - moves (pans) current selection horizontally.\r\n     * * `\"panY\"` - moves (pans) current selection vertically.\r\n     * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n     * * `\"none\"` - does nothing with pointer down.\r\n     *\r\n     * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n     * and dragging it will start zooming the chart.\r\n     *\r\n     * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n     * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n     *\r\n     * @param value Bheavior\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"behavior\", value, true);\n      this._usesSelection = false;\n\n      if (value.indexOf(\"zoom\") != -1) {\n        this._generalBehavior = \"zoom\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"select\") != -1) {\n        this._generalBehavior = \"select\";\n        this._usesSelection = true;\n      }\n\n      if (value.indexOf(\"pan\") != -1) {\n        this._generalBehavior = \"pan\";\n        this._usesSelection = false;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n   *\r\n   * @return Prevent default?\r\n   */\n\n  XYCursor.prototype.shouldPreventGestures = function (touch) {\n    return (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineX\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthLineX\");\n    },\n\n    /**\r\n     * Cursor's horizontal line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n     * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthLineX\", value);\n\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"fullWidthLineY\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fullWidthLineY\");\n    },\n\n    /**\r\n     * Cursor's vertical line is expanded to take full width of the related\r\n     * Axis' cell/category.\r\n     *\r\n     * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n     * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * @param value Full width?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"fullWidthLineY\", value);\n\n      if (!value) {\n        this.updateSize();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"hideSeriesTooltipsOnSelection\", {\n    /**\r\n     * @return hide tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\n    },\n\n    /**\r\n     * If set to `true` this will hide series tooltips when selecting with cursor.\r\n     *\r\n     * @since 4.5.15\r\n     * @param  value  hide tooltips?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxTooltipDistance\", {\n    /**\r\n     * @return Distance\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxTooltipDistance\");\n    },\n\n    /**\r\n     * If set to a numeric value, cursor will display closest series' tooltips\r\n     * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n     * it.\r\n     *\r\n     * Set it to `-1` to always force one tooltip, even if there are multiple\r\n     * data items in exactly same place.\r\n     *\r\n     * @since 4.7.18\r\n     * @param  value  Distance\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxTooltipDistance\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"maxPanOut\", {\n    /**\r\n     * @return Full width?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPanOut\");\n    },\n\n    /**\r\n     * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n     * This setting specifies relative value by how much we can pan out the plot\r\n     *\r\n     * @param value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxPanOut\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"xAxis\", {\n    /**\r\n     * @return X axis\r\n     */\n    get: function () {\n      return this._xAxis.get();\n    },\n\n    /**\r\n     * A reference to X [[Axis]].\r\n     *\r\n     * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis X axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this._xAxis.get() != axis) {\n        this._xAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n\n          _this.preventShow = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.preventShow = false;\n\n          _this.hide(0);\n\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"yAxis\", {\n    /**\r\n     * @return Y Axis\r\n     */\n    get: function () {\n      return this._yAxis.get();\n    },\n\n    /**\r\n     * A reference to Y [[Axis]].\r\n     *\r\n     * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n     * you have axis tooltip enabled and you want cursor line to be at the same\r\n     * position as tooltip.\r\n     *\r\n     * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n     * [[ValueAxis]].\r\n     *\r\n     * @todo Description (review)\r\n     * @param axis Y axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this._yAxis.get() != axis) {\n        this._yAxis.set(axis, new MultiDisposer([axis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false), axis.events.on(\"rangechangestarted\", function (event) {\n          _this.hide(0);\n\n          _this.__disabled = true;\n        }, undefined, false), axis.events.on(\"rangechangeended\", function (event) {\n          _this.__disabled = false;\n\n          _this.hide(0);\n\n          _this.dispatch(\"cursorpositionchanged\");\n        }, undefined, false)]));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates Cursor's position when axis tooltip changes position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n\n  XYCursor.prototype.handleXTooltipPosition = function (event) {\n    var tooltip = this.xAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var x = point.x;\n    point.y = 1;\n\n    if (this.lineX) {\n      this.lineX.x = x;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.xAxis && this.fullWidthLineX) {\n      var startPoint = this.xAxis.currentItemStartPoint;\n      var endPoint = this.xAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineX.x = x;\n        var width = endPoint.x - startPoint.x;\n        this.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\n      }\n    }\n  };\n  /**\r\n   * Updates Cursor's position when Y axis changes position or scale.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original Axis event\r\n   */\n\n\n  XYCursor.prototype.handleYTooltipPosition = function (event) {\n    var tooltip = this.yAxis.tooltip;\n    var point = $utils.svgPointToSprite({\n      x: tooltip.pixelX,\n      y: tooltip.pixelY\n    }, this);\n    var y = point.y;\n    point.x = 1;\n\n    if (this.lineY) {\n      this.lineY.y = y;\n\n      if (!this.fitsToBounds(point)) {\n        this.hide();\n      }\n    }\n\n    if (this.yAxis && this.fullWidthLineY) {\n      var startPoint = this.yAxis.currentItemStartPoint;\n      var endPoint = this.yAxis.currentItemEndPoint;\n\n      if (startPoint && endPoint) {\n        this.lineY.y = y;\n        var height = endPoint.y - startPoint.y;\n        this.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\n      }\n    }\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"lineX\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function () {\n      return this._lineX.get();\n    },\n\n    /**\r\n     * A Line element to use for X axis.\r\n     *\r\n     * @param lineX Line\r\n     */\n    set: function (lineX) {\n      if (lineX) {\n        lineX.setElement(this.paper.add(\"path\"));\n\n        this._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineX.interactionsEnabled = false;\n        lineX.parent = this;\n      } else {\n        this._lineX.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"lineY\", {\n    /**\r\n     * @return Line element\r\n     */\n    get: function () {\n      return this._lineY.get();\n    },\n\n    /**\r\n     * A Line element to use Y axis.\r\n     *\r\n     * @param lineY Line\r\n     */\n    set: function (lineY) {\n      if (lineY) {\n        lineY.setElement(this.paper.add(\"path\"));\n\n        this._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\n\n        lineY.parent = this;\n        lineY.interactionsEnabled = false;\n      } else {\n        this._lineY.reset();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"selection\", {\n    /**\r\n     * @return Selection rectangle\r\n     */\n    get: function () {\n      return this._selection;\n    },\n\n    /**\r\n     * A selection element ([[Sprite]]).\r\n     *\r\n     * @param selection Selection rectangle\r\n     */\n    set: function (selection) {\n      this._selection = selection;\n\n      if (selection) {\n        selection.element = this.paper.add(\"path\");\n        selection.parent = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n   * with real references.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  XYCursor.prototype.processConfig = function (config) {\n    var _this = this;\n\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\n        if (this.map.hasKey(config.xAxis)) {\n          config.xAxis = this.map.getKey(config.xAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\n          delete config.xAxis;\n        }\n      }\n\n      if ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\n        if (this.map.hasKey(config.yAxis)) {\n          config.yAxis = this.map.getKey(config.yAxis);\n        } else {\n          this.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\n          delete config.yAxis;\n        }\n      }\n\n      if ($type.hasValue(config.snapToSeries)) {\n        var snapTo_1 = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\n        var snapError_1 = false;\n        $array.each(snapTo_1, function (snap, index) {\n          if ($type.isString(snap)) {\n            if (_this.map.hasKey(snap)) {\n              snapTo_1[index] = _this.map.getKey(snap);\n            } else {\n              _this.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\n\n              snapError_1 = true;\n            }\n          }\n        });\n\n        if (snapError_1) {\n          delete config.snapToSeries;\n        } else {\n          config.snapToSeries = snapTo_1;\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  Object.defineProperty(XYCursor.prototype, \"snapToSeries\", {\n    /**\r\n     * @return {XYSeries | XYSeries[]}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"snapToSeries\");\n    },\n\n    /**\r\n     * Specifies to which series cursor lines should be snapped.\r\n     *\r\n     * Can be a single series instance or an array of series.\r\n     *\r\n     * @param {XYSeries | XYSeries[]}\r\n     */\n    set: function (series) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"snapToSeries\", series)) {\n        if (series instanceof XYSeries) {\n          series = [series];\n        }\n\n        if (this._snapToDisposers) {\n          $array.each(this._snapToDisposers, function (disposer) {\n            disposer.dispose();\n          });\n        }\n\n        this._snapToDisposers = [];\n\n        if (series) {\n          $array.each(series, function (s) {\n            _this._snapToDisposers.push(s.events.on(\"tooltipshownat\", function () {\n              _this.handleSnap(s);\n            }, undefined, false));\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYCursor.prototype, \"snapOnPan\", {\n    /**\r\n     * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n     * the chart? (when `behavior == \"panX\"`)\r\n     *\r\n     * @default true\r\n     * @since 4.10.17\r\n     * @return Snap on pan?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"snapOnPan\");\n    },\n\n    /**\r\n     * @param value Snap on pan?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"snapOnPan\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Snaps the zoom selection after chart is panned.\r\n   *\r\n   * @ignore\r\n   */\n\n  XYCursor.prototype.handleSnap = function (series) {\n    if (!this.downPoint) {\n      var x = series.getTooltipX() + series.xAxis.pixelX;\n      var y = series.getTooltipY() + series.yAxis.pixelY;\n      var xAxis = series.xAxis;\n      var yAxis = series.yAxis;\n\n      if (xAxis) {\n        if (xAxis.renderer.opposite) {\n          y -= this.pixelHeight;\n        }\n      }\n\n      this.point = {\n        x: x,\n        y: y\n      };\n      this.getPositions();\n      var xx = x;\n      var yy = y;\n      x -= this.pixelWidth;\n\n      if (yAxis) {\n        if (yAxis.renderer.opposite) {\n          x += this.pixelWidth;\n        }\n      }\n\n      var tooltip = series.tooltip;\n      var duration = tooltip.animationDuration;\n      var easing = tooltip.animationEasing;\n\n      if (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\n        series.yAxis.showTooltipAtPosition(this.yPosition);\n        series.xAxis.showTooltipAtPosition(this.xPosition);\n      } else {\n        if (series.baseAxis == series.xAxis) {\n          series.yAxis.showTooltipAtPosition(this.yPosition);\n        }\n\n        if (series.baseAxis == series.yAxis) {\n          series.xAxis.showTooltipAtPosition(this.xPosition);\n        }\n      } //\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\n      //\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\n\n\n      this.lineY.x = x;\n      this.lineX.y = y;\n\n      if (!this.xAxis) {\n        this.lineX.animate([{\n          property: \"x\",\n          to: xx\n        }], duration, easing);\n      }\n\n      if (!this.yAxis) {\n        this.lineY.animate([{\n          property: \"y\",\n          to: yy\n        }], duration, easing);\n      }\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  XYCursor.prototype.dispose = function () {\n    this.hide(0);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return XYCursor;\n}(Cursor);\n\nexport { XYCursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,MAAT,QAA0E,UAA1E;AACA,SAASC,MAAT,QAAsC,mBAAtC;AACA,SAASC,oBAAT,EAA+BC,aAA/B,QAA+D,2BAA/D;AAIA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAIA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,iBAAT,QAAkC,oCAAlC;AACA,SAASC,cAAT,QAA+B,oCAA/B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,2BAAvB;AAmGA;;;;;;;AAOA;;;;;;;;AAOA;AAAA;AAAA;EAA8BC;EA2D7B;;;;;EAGA;IAAA,YAEC;IACAC,qBAAO,IAHR;IA7CA;;;;;IAGUC,eAAS,IAAIjB,oBAAJ,EAAT;IAEV;;;;IAGUiB,eAAS,IAAIjB,oBAAJ,EAAT;IAiBV;;;;IAGUiB,eAAS,IAAIjB,oBAAJ,EAAT;IAEV;;;;IAGUiB,eAAS,IAAIjB,oBAAJ,EAAT;IAOAiB,yBAAgC,EAAhC;IASTA,KAAI,CAACC,SAAL,GAAiB,UAAjB,CAJD,CAMC;;IACAD,KAAI,CAACE,QAAL,GAAgB,OAAhB;IAEAF,KAAI,CAACG,SAAL,GAAiB,GAAjB;IAEA,IAAIC,eAAe,GAAG,IAAId,iBAAJ,EAAtB;IAEAU,KAAI,CAACK,SAAL,GAAiB,IAAjB,CAbD,CAeC;;IACA,IAAIC,SAAS,GAAWN,KAAI,CAACO,WAAL,CAAiBzB,MAAjB,CAAxB;;IACAwB,SAAS,CAACE,WAAV,GAAwB,KAAxB;IACAF,SAAS,CAACG,WAAV,GAAwB,GAAxB;IACAH,SAAS,CAACI,IAAV,GAAiBN,eAAe,CAACO,MAAhB,CAAuB,uBAAvB,CAAjB;IACAL,SAAS,CAACM,UAAV,GAAuB,KAAvB;IACAN,SAAS,CAACO,OAAV,GAAoB,KAApB;IACAP,SAAS,CAACQ,mBAAV,GAAgC,KAAhC;IACAd,KAAI,CAACM,SAAL,GAAiBA,SAAjB;;IACAN,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAACM,SAA1B,EAxBD,CA0BC;;;IACA,IAAIW,KAAK,GAAWjB,KAAI,CAACO,WAAL,CAAiBzB,MAAjB,CAApB;;IACAmC,KAAK,CAACT,WAAN,GAAoB,KAApB;IACAS,KAAK,CAACC,MAAN,GAAed,eAAe,CAACO,MAAhB,CAAuB,MAAvB,CAAf;IACAM,KAAK,CAACP,IAAN,GAAarB,KAAK,EAAlB;IACA4B,KAAK,CAACE,eAAN,GAAwB,KAAxB;IACAF,KAAK,CAACL,UAAN,GAAmB,KAAnB;IACAK,KAAK,CAACG,aAAN,GAAsB,GAAtB;IACAH,KAAK,CAACH,mBAAN,GAA4B,KAA5B;IACAG,KAAK,CAACI,CAAN,GAAU,CAAV,CAnCD,CAmCa;;IACZrB,KAAI,CAACiB,KAAL,GAAaA,KAAb;;IACAjB,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAACiB,KAA1B,EArCD,CAuCC;;;IACA,IAAIK,KAAK,GAAWtB,KAAI,CAACO,WAAL,CAAiBzB,MAAjB,CAApB;;IACAwC,KAAK,CAACd,WAAN,GAAoB,KAApB;IACAc,KAAK,CAACJ,MAAN,GAAed,eAAe,CAACO,MAAhB,CAAuB,MAAvB,CAAf;IACAW,KAAK,CAACZ,IAAN,GAAarB,KAAK,EAAlB;IACAiC,KAAK,CAACH,eAAN,GAAwB,KAAxB;IACAG,KAAK,CAACV,UAAN,GAAmB,KAAnB;IACAU,KAAK,CAACF,aAAN,GAAsB,GAAtB;IACAE,KAAK,CAACR,mBAAN,GAA4B,KAA5B;IACAQ,KAAK,CAACC,CAAN,GAAU,CAAV,CAhDD,CAgDc;;IACbvB,KAAI,CAACsB,KAAL,GAAaA,KAAb;;IACAtB,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAACsB,KAA1B,EAlDD,CAoDC;;;IACAtB,KAAI,CAACwB,MAAL,CAAYC,EAAZ,CAAe,aAAf,EAA8BzB,KAAI,CAAC0B,UAAnC,EAA+C1B,KAA/C,EAAqD,KAArD;;IAEAA,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAAC2B,MAA1B;;IACA3B,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAAC4B,MAA1B;;IACA5B,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAAC6B,MAA1B;;IACA7B,KAAI,CAACe,UAAL,CAAgBC,IAAhB,CAAqBhB,KAAI,CAAC8B,MAA1B;;IAEA9B,KAAI,CAAC+B,IAAL,GAAY/B,KAAZ;IAEAA,KAAI,CAACgC,6BAAL,GAAqC,IAArC,CA9DD,CAgEC;;IACAhC,KAAI,CAACiC,UAAL;;;EAEA;EAED;;;;;;;EAKOC,gCAAP;IACC,IAAI,KAAKjB,KAAT,EAAgB;MACf,KAAKA,KAAL,CAAWkB,IAAX,GAAkBtC,KAAK,CAACuC,MAAN,CAAa;QAAEb,CAAC,EAAE,CAAL;QAAQF,CAAC,EAAE;MAAX,CAAb,IAA+BxB,KAAK,CAACwC,MAAN,CAAa;QAAEd,CAAC,EAAE,CAAL;QAAQF,CAAC,EAAE,KAAKiB;MAAhB,CAAb,CAAjD;IACA;;IACD,IAAI,KAAKhB,KAAT,EAAgB;MACf,KAAKA,KAAL,CAAWa,IAAX,GAAkBtC,KAAK,CAACuC,MAAN,CAAa;QAAEb,CAAC,EAAE,CAAL;QAAQF,CAAC,EAAE;MAAX,CAAb,IAA+BxB,KAAK,CAACwC,MAAN,CAAa;QAAEd,CAAC,EAAE,KAAKgB,UAAV;QAAsBlB,CAAC,EAAE;MAAzB,CAAb,CAAjD;IACA;EACD,CAPM;EASP;;;;;;;EAKOa,qCAAP;IACC,IAAI,KAAKM,cAAT,EAAyB;MACxB,IAAIC,SAAS,GAAW,KAAKA,SAA7B;MACA,IAAIvC,QAAQ,GAAG,KAAKA,QAApB;;MAEA,IAAIuC,SAAJ,EAAe;QAEd,IAAIC,KAAK,GAAW,KAAKA,KAAzB;;QAEA,IAAI,KAAKzB,KAAT,EAAgB;UACfyB,KAAK,CAACnB,CAAN,GAAU,KAAKN,KAAL,CAAW0B,MAArB;QACA;;QAED,IAAI,KAAKrB,KAAT,EAAgB;UACfoB,KAAK,CAACrB,CAAN,GAAU,KAAKC,KAAL,CAAWsB,MAArB;QACA;;QAED,IAAItC,SAAS,GAAW,KAAKA,SAA7B;QAEA,IAAIiB,CAAC,GAAWsB,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACnB,CAAf,EAAkBkB,SAAS,CAAClB,CAA5B,CAAhB;QACA,IAAIF,CAAC,GAAWwB,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACrB,CAAf,EAAkBoB,SAAS,CAACpB,CAA5B,CAAhB;QAEA,IAAI0B,CAAC,GAAWtD,KAAK,CAACuD,KAAN,CAAYH,IAAI,CAACI,GAAL,CAASR,SAAS,CAAClB,CAAV,GAAcmB,KAAK,CAACnB,CAA7B,CAAZ,EAA6C,KAAK2B,kBAAlD,CAAhB;QACA,IAAIC,CAAC,GAAW1D,KAAK,CAACuD,KAAN,CAAYH,IAAI,CAACI,GAAL,CAASR,SAAS,CAACpB,CAAV,GAAcqB,KAAK,CAACrB,CAA7B,CAAZ,EAA6C,KAAK6B,kBAAlD,CAAhB;;QAEA,QAAQhD,QAAR;UACC,KAAK,OAAL;YACCmB,CAAC,GAAG,CAAJ;YACA8B,CAAC,GAAG,KAAKC,WAAT;YACA;;UACD,KAAK,OAAL;YACC7B,CAAC,GAAG,CAAJ;YACAwB,CAAC,GAAG,KAAKM,UAAT;YACA;;UACD,KAAK,SAAL;YACChC,CAAC,GAAG,CAAJ;YACA8B,CAAC,GAAG,KAAKC,WAAT;YACA;;UACD,KAAK,SAAL;YACC7B,CAAC,GAAG,CAAJ;YACAwB,CAAC,GAAG,KAAKM,UAAT;YACA;QAhBF;;QAmBA/C,SAAS,CAACiB,CAAV,GAAcA,CAAd;QACAjB,SAAS,CAACe,CAAV,GAAcA,CAAd;QAEAf,SAAS,CAAC6B,IAAV,GAAiBtC,KAAK,CAACyD,SAAN,CAAgBP,CAAhB,EAAmBI,CAAnB,CAAjB;QAEA7C,SAAS,CAACiD,gBAAV,GA5Cc,CA4CgB;MAC9B,CA7CD,MA8CK;QACJ,IAAI,KAAKC,gBAAL,IAAyB,QAA7B,EAAuC;UACtC,KAAKlD,SAAL,CAAemD,IAAf;QACA;MACD;IACD;EACD,CAzDM;EA4DP;;;;;;EAKUvB,8BAAV,UAAmBQ,KAAnB,EAAgC;IAC/BA,KAAK,CAACnB,CAAN,GAAUsB,IAAI,CAACa,GAAL,CAAS,CAAT,EAAYhB,KAAK,CAACnB,CAAlB,CAAV;IACAmB,KAAK,CAACrB,CAAN,GAAUwB,IAAI,CAACa,GAAL,CAAS,CAAT,EAAYhB,KAAK,CAACrB,CAAlB,CAAV;IACAqB,KAAK,CAACnB,CAAN,GAAUsB,IAAI,CAACC,GAAL,CAAS,KAAKO,UAAd,EAA0BX,KAAK,CAACnB,CAAhC,CAAV;IACAmB,KAAK,CAACrB,CAAN,GAAUwB,IAAI,CAACC,GAAL,CAAS,KAAKM,WAAd,EAA2BV,KAAK,CAACrB,CAAjC,CAAV;IAEA,OAAOqB,KAAP;EACA,CAPS;EAUV;;;;;;;EAKUR,qCAAV,UAA0BQ,KAA1B,EAAyCiB,KAAzC,EAAwD;IAEvD5D,iBAAM6D,eAAN,CAAqBC,IAArB,CAAqB,IAArB,EAAsBnB,KAAtB,EAA6BiB,KAA7B;;IACA,IAAIG,YAAY,GAAG,KAAKA,YAAxB;;IACA,IAAKA,YAAY,IAAI,CAAC,KAAKrB,SAA3B,EAAuC;MACtC,IAAIqB,YAAY,YAAY3E,QAA5B,EAAsC;QACrC,IAAI2E,YAAY,CAACC,QAAjB,EAA2B;UAC1B,KAAKC,mBAAL,CAAyBtB,KAAzB;QACA;MACD,CAJD,MAKK;QACJ,IAAIuB,WAAS,GAAG,IAAhB;QACArE,MAAM,CAACsE,IAAP,CAAYJ,YAAZ,EAA0B,UAACK,CAAD,EAAE;UAC3B,IAAI,CAACA,CAAC,CAACJ,QAAP,EAAiB;YAChBE,WAAS,GAAG,KAAZ;UACA;QACD,CAJD;;QAKA,IAAIA,WAAJ,EAAe;UACd,KAAKD,mBAAL,CAAyBtB,KAAzB;QACA;MACD;IACD,CAjBD,MAkBK;MACJ,KAAKsB,mBAAL,CAAyBtB,KAAzB;IACA;;IAED,IAAI,KAAKD,SAAL,IAAkBhD,KAAK,CAAC2E,WAAN,CAAkB,KAAK3B,SAAvB,EAAkCC,KAAlC,IAA2C,CAAjE,EAAoE;MACnE,IAAI,KAAKc,gBAAL,IAAyB,KAA7B,EAAoC;QACnC,KAAKa,gBAAL;QACA,KAAKC,QAAL,CAAc,SAAd;MACA;IACD;EACD,CAhCS;EAkCV;;;;;;EAIUpC,yCAAV,UAA8BQ,KAA9B,EAA2C;IAC1CA,KAAK,GAAG,KAAK6B,QAAL,CAAc,KAAK7B,KAAnB,CAAR;;IAEA,IAAI,KAAKzB,KAAL,IAAc,KAAKA,KAAL,CAAWJ,OAAzB,IAAoC,CAAC,KAAK2D,KAA9C,EAAqD;MACpD,KAAKvD,KAAL,CAAWM,CAAX,GAAemB,KAAK,CAACnB,CAArB;IACA;;IACD,IAAI,KAAKD,KAAL,IAAc,KAAKA,KAAL,CAAWT,OAAzB,IAAoC,CAAC,KAAK4D,KAA9C,EAAqD;MACpD,KAAKnD,KAAL,CAAWD,CAAX,GAAeqB,KAAK,CAACrB,CAArB;IACA;;IACD,KAAKqD,eAAL;EACA,CAVS;;EAaAxC,qCAAV,UAA0BQ,KAA1B,EAAuC;IAEtC,IAAI,KAAK7B,OAAL,IAAgB,CAAC,KAAK8D,QAA1B,EAAoC;MAEnC,IAAI,KAAKnB,gBAAL,IAAyB,QAA7B,EAAuC;QACtC,KAAKlD,SAAL,CAAesE,MAAf,GAAwB,KAAKA,MAA7B;MACA;;MAED,IAAI,KAAKC,YAAL,CAAkBnC,KAAlB,CAAJ,EAA8B;QAC7B,KAAKD,SAAL,GAAiB;UAAElB,CAAC,EAAEmB,KAAK,CAACnB,CAAX;UAAcF,CAAC,EAAEqB,KAAK,CAACrB;QAAvB,CAAjB;QAEA,KAAKyD,WAAL,CAAiBpC,KAAjB,EAH6B,CAK7B;;QAEA,KAAKA,KAAL,CAAWnB,CAAX,GAAe,KAAKkB,SAAL,CAAelB,CAA9B;QACA,KAAKmB,KAAL,CAAWrB,CAAX,GAAe,KAAKoB,SAAL,CAAepB,CAA9B;QAEA,IAAIf,SAAS,GAAW,KAAKA,SAA7B;QACA,IAAIyE,UAAU,GAAW,KAAKtC,SAAL,CAAelB,CAAxC;QACA,IAAIyD,UAAU,GAAW,KAAKvC,SAAL,CAAepB,CAAxC;;QAEA,IAAI,KAAKmB,cAAT,EAAyB;UACxBlC,SAAS,CAACiB,CAAV,GAAcwD,UAAd;UACAzE,SAAS,CAACe,CAAV,GAAc2D,UAAd;UACA1E,SAAS,CAAC6B,IAAV,GAAiB,EAAjB;UACA7B,SAAS,CAAC2E,IAAV;QACA;;QACDlF,iBAAMmF,eAAN,CAAqBrB,IAArB,CAAqB,IAArB,EAAsBnB,KAAtB;MACA,CArBD,MAsBK;QACJ,KAAKD,SAAL,GAAiB0C,SAAjB;MACA;IACD,CA/BD,MAgCK;MACJ,KAAK1C,SAAL,GAAiB0C,SAAjB;IACA;EACD,CArCS;EAuCV;;;;;;EAIUjD,iCAAV,UAAsBQ,KAAtB,EAAmC;IAClC,IAAI,KAAKzB,KAAT,EAAgB;MACfyB,KAAK,CAACnB,CAAN,GAAU,KAAKN,KAAL,CAAW0B,MAArB;IACA;;IACD,IAAI,KAAKrB,KAAT,EAAgB;MACfoB,KAAK,CAACrB,CAAN,GAAU,KAAKC,KAAL,CAAWsB,MAArB;IACA;EACD,CAPS;EASV;;;;;;;;EAMUV,mCAAV,UAAwBQ,KAAxB,EAAqC;IACpC,IAAI,KAAK0C,QAAL,EAAJ,EAAqB;MACpB,IAAI,KAAK3C,SAAT,EAAoB;QACnB,KAAK4C,OAAL,GAAe3C,KAAf;QAEA,KAAKoC,WAAL,CAAiB,KAAKO,OAAtB;;QAEA,IAAI,KAAK7B,gBAAL,IAAyB,KAA7B,EAAoC;UACnC,KAAK8B,SAAL;QACA;;QAED,IAAI,KAAK9B,gBAAL,IAAyB,QAA7B,EAAuC;UACtC,KAAKlD,SAAL,CAAemD,IAAf;QACA;;QACD1D,iBAAMwF,aAAN,CAAmB1B,IAAnB,CAAmB,IAAnB,EAAoBnB,KAApB;MACA;IACD,CAfD,MAgBK;MACJ,IAAI,KAAKc,gBAAL,IAAyB,QAA7B,EAAuC;QACtC,KAAKlD,SAAL,CAAemD,IAAf,CAAoB,CAApB;MACA,CAFD,MAGK;QACJ,KAAK+B,MAAL,GAAcL,SAAd;QACA,KAAKM,MAAL,GAAcN,SAAd;QACA,KAAKO,mBAAL,CAAyB,aAAzB;MACA,CARG,CAUJ;;;MACA,IAAI,KAAKlC,gBAAL,IAAyB,KAA7B,EAAoC;QACnC,IAAImC,WAAW,GAAGpG,cAAc,EAAhC;QACAoG,WAAW,CAACC,cAAZ,CAA2BpG,gBAAgB,CAACqG,OAA5C;MACA;;MAED,KAAKH,mBAAL,CAAyB,kBAAzB;IACA;;IACD,KAAKjD,SAAL,GAAiB0C,SAAjB;IACA,KAAKb,QAAL,CAAc,uBAAd;EACA,CArCS;EAuCV;;;;;;;EAKQpC,8BAAR;IACC,IAAI4D,QAAJ;;IACA,IAAI,KAAK5F,QAAL,IAAiB,OAAjB,IAA4B,KAAKA,QAAL,IAAiB,MAAjD,EAAyD;MACxD4F,QAAQ,GAAGrG,KAAK,CAACsG,qBAAN,CAA4B,KAAKC,YAAjC,EAA+C,KAAKC,cAApD,CAAX;IACA,CAFD,MAGK,IAAI,KAAK/F,QAAL,IAAiB,OAAjB,IAA4B,KAAKA,QAAL,IAAiB,MAAjD,EAAyD;MAC7D4F,QAAQ,GAAGrG,KAAK,CAACyG,mBAAN,CAA0B,KAAKF,YAA/B,EAA6C,KAAKC,cAAlD,CAAX;IACA,CAFI,MAGA;MACJH,QAAQ,GAAGrG,KAAK,CAAC2E,WAAN,CAAkB,KAAK4B,YAAvB,EAAqC,KAAKC,cAA1C,CAAX;IACA;;IACD,OAAOH,QAAQ,GAAGvG,cAAc,GAAG4G,YAAjB,CAA8B,KAAKC,YAAnC,EAAiD,cAAjD,CAAlB;EACA,CAZO;EAcR;;;;;;;EAKUlE,sCAAV;IAEC,IAAImE,MAAM,GAAG5G,KAAK,CAACuD,KAAN,CAAY,KAAKP,SAAL,CAAelB,CAAf,GAAmB,KAAKgB,UAApC,EAAgD,CAAhD,CAAb;IACA,IAAI+D,MAAM,GAAG,IAAI7G,KAAK,CAACuD,KAAN,CAAY,KAAKP,SAAL,CAAepB,CAAf,GAAmB,KAAKiB,WAApC,EAAiD,CAAjD,CAAjB;IAEA,IAAIiE,QAAQ,GAAG9G,KAAK,CAACuD,KAAN,CAAY,KAAKN,KAAL,CAAWnB,CAAX,GAAe,KAAKgB,UAAhC,EAA4C,CAA5C,CAAf;IACA,IAAIiE,QAAQ,GAAG,IAAI/G,KAAK,CAACuD,KAAN,CAAY,KAAKN,KAAL,CAAWrB,CAAX,GAAe,KAAKiB,WAAhC,EAA6C,CAA7C,CAAnB;IAEA,IAAImE,MAAM,GAAGJ,MAAM,GAAGE,QAAtB;IACA,IAAIG,MAAM,GAAGJ,MAAM,GAAGE,QAAtB;IAEA,KAAKhB,MAAL,GAAc;MAAEmB,KAAK,EAAEF,MAAT;MAAiBG,GAAG,EAAE,IAAIH;IAA1B,CAAd;IACA,KAAKhB,MAAL,GAAc;MAAEkB,KAAK,EAAED,MAAT;MAAiBE,GAAG,EAAE,IAAIF;IAA1B,CAAd;;IAEA,IAAI,KAAKxG,QAAL,IAAiB,MAArB,EAA6B;MAC5B,KAAKuF,MAAL,CAAYkB,KAAZ,GAAoB,CAApB;MACA,KAAKlB,MAAL,CAAYmB,GAAZ,GAAkB,CAAlB;IACA;;IACD,IAAI,KAAK1G,QAAL,IAAiB,MAArB,EAA6B;MAC5B,KAAKsF,MAAL,CAAYmB,KAAZ,GAAoB,CAApB;MACA,KAAKnB,MAAL,CAAYoB,GAAZ,GAAkB,CAAlB;IACA;EACD,CAtBS;EAwBV;;;;;;;EAKU1E,+BAAV;IACC,IAAI,KAAKjB,KAAT,EAAgB;MACf,KAAKoE,OAAL,CAAa9D,CAAb,GAAiB,KAAKN,KAAL,CAAW0B,MAA5B;IACA;;IACD,IAAI,KAAKrB,KAAT,EAAgB;MACf,KAAK+D,OAAL,CAAahE,CAAb,GAAiB,KAAKC,KAAL,CAAWsB,MAA5B;IACA,CANF,CAQC;;;IACAlD,MAAM,CAACmH,IAAP,CAAY,KAAKvG,SAAjB;IAEA,IAAI+F,MAAM,GAAW5G,KAAK,CAACuD,KAAN,CAAY,KAAKP,SAAL,CAAelB,CAAf,GAAmB,KAAKgB,UAApC,EAAgD,CAAhD,CAArB;IACA,IAAIuE,IAAI,GAAWrH,KAAK,CAACuD,KAAN,CAAa,KAAKqC,OAAL,CAAa9D,CAAd,GAAmB,KAAKgB,UAApC,EAAgD,CAAhD,CAAnB;IAEA,IAAI+D,MAAM,GAAW,IAAI7G,KAAK,CAACuD,KAAN,CAAY,KAAKP,SAAL,CAAepB,CAAf,GAAmB,KAAKiB,WAApC,EAAiD,CAAjD,CAAzB;IACA,IAAIyE,IAAI,GAAW,IAAItH,KAAK,CAACuD,KAAN,CAAa,KAAKqC,OAAL,CAAahE,CAAd,GAAmB,KAAKiB,WAApC,EAAiD,CAAjD,CAAvB;IAEA,KAAKkD,MAAL,GAAc;MAAEmB,KAAK,EAAElH,KAAK,CAACqD,GAAN,CAAUuD,MAAV,EAAkBS,IAAlB,CAAT;MAAkCF,GAAG,EAAEnH,KAAK,CAACiE,GAAN,CAAU2C,MAAV,EAAkBS,IAAlB;IAAvC,CAAd;IACA,KAAKrB,MAAL,GAAc;MAAEkB,KAAK,EAAElH,KAAK,CAACqD,GAAN,CAAUwD,MAAV,EAAkBS,IAAlB,CAAT;MAAkCH,GAAG,EAAEnH,KAAK,CAACiE,GAAN,CAAU4C,MAAV,EAAkBS,IAAlB;IAAvC,CAAd;EAEA,CApBS;;EA4CVC,sBAAW9E,kBAAX,EAAW,UAAX,EAAmB;IAmBnB;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,UAAtB,CAAP;IACA,CAxBkB;;IAtBnB;;;;;;;;;;;;;;;;;;;;;;SAsBA,UAAoBC,KAApB,EAAiI;MAChI,KAAKC,gBAAL,CAAsB,UAAtB,EAAkCD,KAAlC,EAAyC,IAAzC;MAEA,KAAK1E,cAAL,GAAsB,KAAtB;;MAEA,IAAI0E,KAAK,CAACE,OAAN,CAAc,MAAd,KAAyB,CAAC,CAA9B,EAAiC;QAChC,KAAK5D,gBAAL,GAAwB,MAAxB;QACA,KAAKhB,cAAL,GAAsB,IAAtB;MACA;;MACD,IAAI0E,KAAK,CAACE,OAAN,CAAc,QAAd,KAA2B,CAAC,CAAhC,EAAmC;QAClC,KAAK5D,gBAAL,GAAwB,QAAxB;QACA,KAAKhB,cAAL,GAAsB,IAAtB;MACA;;MACD,IAAI0E,KAAK,CAACE,OAAN,CAAc,KAAd,KAAwB,CAAC,CAA7B,EAAgC;QAC/B,KAAK5D,gBAAL,GAAwB,KAAxB;QACA,KAAKhB,cAAL,GAAsB,KAAtB;MACA;IACD,CAjBkB;oBAAA;;EAAA,CAAnB;EA0BA;;;;;;;;EAOUN,2CAAV,UAAgCmF,KAAhC,EAA8C;IAC7C,OAAO,CAAC,CAAC,KAAKjB,YAAL,CAAkBkB,gBAAnB,IAAuC,CAACD,KAAzC,KAAmD,KAAKnH,QAAL,IAAiB,MAA3E;EACA,CAFS;;EAaV8G,sBAAW9E,kBAAX,EAAW,gBAAX,EAAyB;IAOzB;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,gBAAtB,CAAP;IACA,CAZwB;;IATzB;;;;;;;;;SASA,UAA0BC,KAA1B,EAAwC;MACvC,KAAKC,gBAAL,CAAsB,gBAAtB,EAAwCD,KAAxC;;MACA,IAAI,CAACA,KAAL,EAAY;QACX,KAAKxF,UAAL;MACA;IACD,CALwB;oBAAA;;EAAA,CAAzB;EAuBAsF,sBAAW9E,kBAAX,EAAW,gBAAX,EAAyB;IAOzB;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,gBAAtB,CAAP;IACA,CAZwB;;IATzB;;;;;;;;;SASA,UAA0BC,KAA1B,EAAwC;MACvC,KAAKC,gBAAL,CAAsB,gBAAtB,EAAwCD,KAAxC;;MACA,IAAI,CAACA,KAAL,EAAY;QACX,KAAKxF,UAAL;MACA;IACD,CALwB;oBAAA;;EAAA,CAAzB;EAoBAsF,sBAAW9E,kBAAX,EAAW,+BAAX,EAAwC;IAIxC;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,+BAAtB,CAAP;IACA,CATuC;;IANxC;;;;;;SAMA,UAAyCC,KAAzC,EAAuD;MACtD,KAAKC,gBAAL,CAAsB,+BAAtB,EAAuDD,KAAvD;IACA,CAFuC;oBAAA;;EAAA,CAAxC;EAsBAF,sBAAW9E,kBAAX,EAAW,oBAAX,EAA6B;IAI7B;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,oBAAtB,CAAP;IACA,CAT4B;;IAX7B;;;;;;;;;;;SAWA,UAA8BC,KAA9B,EAA2C;MAC1C,KAAKC,gBAAL,CAAsB,oBAAtB,EAA4CD,KAA5C;IACA,CAF4B;oBAAA;;EAAA,CAA7B;EAiBAF,sBAAW9E,kBAAX,EAAW,WAAX,EAAoB;IAIpB;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,WAAtB,CAAP;IACA,CATmB;;IANpB;;;;;;SAMA,UAAqBC,KAArB,EAAkC;MACjC,KAAKC,gBAAL,CAAsB,WAAtB,EAAmCD,KAAnC;IACA,CAFmB;oBAAA;;EAAA,CAApB;EAwBAF,sBAAW9E,kBAAX,EAAW,OAAX,EAAgB;IAkBhB;;;SAGA;MACC,OAAO,KAAKL,MAAL,CAAY0F,GAAZ,EAAP;IACA,CAvBe;;IAbhB;;;;;;;;;;;;;SAaA,UAAiBC,IAAjB,EAA2B;MAA3B;;MACC,IAAI,KAAK3F,MAAL,CAAY0F,GAAZ,MAAqBC,IAAzB,EAA+B;QAC9B,KAAK3F,MAAL,CAAY4F,GAAZ,CAAgBD,IAAhB,EAAsB,IAAIxI,aAAJ,CAAkB,CACvCwI,IAAI,CAACE,OAAL,CAAalG,MAAb,CAAoBC,EAApB,CAAuB,iBAAvB,EAA0C,KAAKkG,sBAA/C,EAAuE,IAAvE,EAA6E,KAA7E,CADuC,EAGvCH,IAAI,CAAChG,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,UAACmG,KAAD,EAAM;UAC1C5H,KAAI,CAACyD,IAAL,CAAU,CAAV;;UACAzD,KAAI,CAAC6H,WAAL,GAAmB,IAAnB;QACA,CAHD,EAGG1C,SAHH,EAGc,KAHd,CAHuC,EAOvCqC,IAAI,CAAChG,MAAL,CAAYC,EAAZ,CAAe,kBAAf,EAAmC,UAACmG,KAAD,EAAM;UACxC5H,KAAI,CAAC6H,WAAL,GAAmB,KAAnB;;UACA7H,KAAI,CAACyD,IAAL,CAAU,CAAV;;UACAzD,KAAI,CAACsE,QAAL,CAAc,uBAAd;QACA,CAJD,EAIGa,SAJH,EAIc,KAJd,CAPuC,CAAlB,CAAtB;MAaA;IACD,CAhBe;oBAAA;;EAAA,CAAhB;EAsCA6B,sBAAW9E,kBAAX,EAAW,OAAX,EAAgB;IAkBhB;;;SAGA;MACC,OAAO,KAAKJ,MAAL,CAAYyF,GAAZ,EAAP;IACA,CAvBe;;IAbhB;;;;;;;;;;;;;SAaA,UAAiBC,IAAjB,EAA2B;MAA3B;;MACC,IAAI,KAAK1F,MAAL,CAAYyF,GAAZ,MAAqBC,IAAzB,EAA+B;QAC9B,KAAK1F,MAAL,CAAY2F,GAAZ,CAAgBD,IAAhB,EAAsB,IAAIxI,aAAJ,CAAkB,CACvCwI,IAAI,CAACE,OAAL,CAAalG,MAAb,CAAoBC,EAApB,CAAuB,iBAAvB,EAA0C,KAAKqG,sBAA/C,EAAuE,IAAvE,EAA6E,KAA7E,CADuC,EAGvCN,IAAI,CAAChG,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,UAACmG,KAAD,EAAM;UAC1C5H,KAAI,CAACyD,IAAL,CAAU,CAAV;;UACAzD,KAAI,CAAC+H,UAAL,GAAkB,IAAlB;QACA,CAHD,EAGG5C,SAHH,EAGc,KAHd,CAHuC,EAOvCqC,IAAI,CAAChG,MAAL,CAAYC,EAAZ,CAAe,kBAAf,EAAmC,UAACmG,KAAD,EAAM;UACxC5H,KAAI,CAAC+H,UAAL,GAAkB,KAAlB;;UACA/H,KAAI,CAACyD,IAAL,CAAU,CAAV;;UACAzD,KAAI,CAACsE,QAAL,CAAc,uBAAd;QACA,CAJD,EAIGa,SAJH,EAIc,KAJd,CAPuC,CAAlB,CAAtB;MAaA;IACD,CAhBe;oBAAA;;EAAA,CAAhB;EAyBA;;;;;;;EAMUjD,4CAAV,UAAiC0F,KAAjC,EAAwE;IACvE,IAAIF,OAAO,GAAY,KAAKlD,KAAL,CAAWkD,OAAlC;IACA,IAAIhF,KAAK,GAAWhD,MAAM,CAACsI,gBAAP,CAAwB;MAAEzG,CAAC,EAAEmG,OAAO,CAAC/E,MAAb;MAAqBtB,CAAC,EAAEqG,OAAO,CAAC9E;IAAhC,CAAxB,EAAkE,IAAlE,CAApB;IACA,IAAIrB,CAAC,GAAWmB,KAAK,CAACnB,CAAtB;IACAmB,KAAK,CAACrB,CAAN,GAAU,CAAV;;IAEA,IAAI,KAAKJ,KAAT,EAAgB;MACf,KAAKA,KAAL,CAAWM,CAAX,GAAeA,CAAf;;MACA,IAAI,CAAC,KAAKsD,YAAL,CAAkBnC,KAAlB,CAAL,EAA+B;QAC9B,KAAKe,IAAL;MACA;IACD;;IAED,IAAI,KAAKe,KAAL,IAAc,KAAKyD,cAAvB,EAAuC;MACtC,IAAIC,UAAU,GAAW,KAAK1D,KAAL,CAAW2D,qBAApC;MACA,IAAIC,QAAQ,GAAW,KAAK5D,KAAL,CAAW6D,mBAAlC;;MACA,IAAIH,UAAU,IAAIE,QAAlB,EAA4B;QAC3B,KAAKnH,KAAL,CAAWM,CAAX,GAAeA,CAAf;QACA,IAAI+G,KAAK,GAAWF,QAAQ,CAAC7G,CAAT,GAAa2G,UAAU,CAAC3G,CAA5C;QACA,KAAKN,KAAL,CAAWkB,IAAX,GAAkBtC,KAAK,CAACyD,SAAN,CAAgBgF,KAAhB,EAAuB,KAAKhG,WAA5B,EAAyC,CAACgG,KAAD,GAAS,CAAlD,CAAlB;MACA;IACD;EACD,CAtBS;EAwBV;;;;;;;;EAMUpG,4CAAV,UAAiC0F,KAAjC,EAAwE;IACvE,IAAIF,OAAO,GAAY,KAAKjD,KAAL,CAAWiD,OAAlC;IACA,IAAIhF,KAAK,GAAWhD,MAAM,CAACsI,gBAAP,CAAwB;MAAEzG,CAAC,EAAEmG,OAAO,CAAC/E,MAAb;MAAqBtB,CAAC,EAAEqG,OAAO,CAAC9E;IAAhC,CAAxB,EAAkE,IAAlE,CAApB;IACA,IAAIvB,CAAC,GAAWqB,KAAK,CAACrB,CAAtB;IACAqB,KAAK,CAACnB,CAAN,GAAU,CAAV;;IAEA,IAAI,KAAKD,KAAT,EAAgB;MACf,KAAKA,KAAL,CAAWD,CAAX,GAAeA,CAAf;;MAEA,IAAI,CAAC,KAAKwD,YAAL,CAAkBnC,KAAlB,CAAL,EAA+B;QAC9B,KAAKe,IAAL;MACA;IACD;;IAED,IAAI,KAAKgB,KAAL,IAAc,KAAK8D,cAAvB,EAAuC;MACtC,IAAIL,UAAU,GAAW,KAAKzD,KAAL,CAAW0D,qBAApC;MACA,IAAIC,QAAQ,GAAW,KAAK3D,KAAL,CAAW4D,mBAAlC;;MACA,IAAIH,UAAU,IAAIE,QAAlB,EAA4B;QAC3B,KAAK9G,KAAL,CAAWD,CAAX,GAAeA,CAAf;QACA,IAAImH,MAAM,GAAWJ,QAAQ,CAAC/G,CAAT,GAAa6G,UAAU,CAAC7G,CAA7C;QACA,KAAKC,KAAL,CAAWa,IAAX,GAAkBtC,KAAK,CAACyD,SAAN,CAAgB,KAAKf,UAArB,EAAiCiG,MAAjC,EAAyC,CAAzC,EAA4C,CAACA,MAAD,GAAU,CAAtD,CAAlB;MACA;IACD;EACD,CAvBS;;EA8BVxB,sBAAW9E,kBAAX,EAAW,OAAX,EAAgB;IAYhB;;;SAGA;MACC,OAAO,KAAKP,MAAL,CAAY4F,GAAZ,EAAP;IACA,CAjBe;;IALhB;;;;;SAKA,UAAiBtG,KAAjB,EAA8B;MAC7B,IAAIA,KAAJ,EAAW;QACVA,KAAK,CAACwH,UAAN,CAAiB,KAAKC,KAAL,CAAWC,GAAX,CAAe,MAAf,CAAjB;;QACA,KAAKhH,MAAL,CAAY8F,GAAZ,CAAgBxG,KAAhB,EAAuBA,KAAK,CAACO,MAAN,CAAaC,EAAb,CAAgB,iBAAhB,EAAmC,KAAKiD,eAAxC,EAAyD,IAAzD,EAA+D,KAA/D,CAAvB;;QACAzD,KAAK,CAACH,mBAAN,GAA4B,KAA5B;QACAG,KAAK,CAAC2D,MAAN,GAAe,IAAf;MACA,CALD,MAMK;QACJ,KAAKjD,MAAL,CAAYiH,KAAZ;MACA;IACD,CAVe;oBAAA;;EAAA,CAAhB;EAwBA5B,sBAAW9E,kBAAX,EAAW,OAAX,EAAgB;IAYhB;;;SAGA;MACC,OAAO,KAAKN,MAAL,CAAY2F,GAAZ,EAAP;IACA,CAjBe;;IALhB;;;;;SAKA,UAAiBjG,KAAjB,EAA8B;MAC7B,IAAIA,KAAJ,EAAW;QACVA,KAAK,CAACmH,UAAN,CAAiB,KAAKC,KAAL,CAAWC,GAAX,CAAe,MAAf,CAAjB;;QACA,KAAK/G,MAAL,CAAY6F,GAAZ,CAAgBnG,KAAhB,EAAuBA,KAAK,CAACE,MAAN,CAAaC,EAAb,CAAgB,iBAAhB,EAAmC,KAAKiD,eAAxC,EAAyD,IAAzD,EAA+D,KAA/D,CAAvB;;QACApD,KAAK,CAACsD,MAAN,GAAe,IAAf;QACAtD,KAAK,CAACR,mBAAN,GAA4B,KAA5B;MACA,CALD,MAMK;QACJ,KAAKc,MAAL,CAAYgH,KAAZ;MACA;IACD,CAVe;oBAAA;;EAAA,CAAhB;EAwBA5B,sBAAW9E,kBAAX,EAAW,WAAX,EAAoB;IAQpB;;;SAGA;MACC,OAAO,KAAK2G,UAAZ;IACA,CAbmB;;IALpB;;;;;SAKA,UAAqBvI,SAArB,EAAsC;MACrC,KAAKuI,UAAL,GAAkBvI,SAAlB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACwI,OAAV,GAAoB,KAAKJ,KAAL,CAAWC,GAAX,CAAe,MAAf,CAApB;QACArI,SAAS,CAACsE,MAAV,GAAmB,IAAnB;MACA;IACD,CANmB;oBAAA;;EAAA,CAApB;EAeA;;;;;;;;;;EASO1C,mCAAP,UAAqB6G,MAArB,EAAsD;IAAtD;;IAEC,IAAIA,MAAJ,EAAY;MAEX;MACA,IAAIpJ,KAAK,CAACqJ,QAAN,CAAeD,MAAM,CAACvE,KAAtB,KAAgC7E,KAAK,CAACsJ,QAAN,CAAeF,MAAM,CAACvE,KAAtB,CAApC,EAAkE;QACjE,IAAI,KAAK0E,GAAL,CAASC,MAAT,CAAgBJ,MAAM,CAACvE,KAAvB,CAAJ,EAAmC;UAClCuE,MAAM,CAACvE,KAAP,GAAe,KAAK0E,GAAL,CAASE,MAAT,CAAgBL,MAAM,CAACvE,KAAvB,CAAf;QACA,CAFD,MAGK;UACJ,KAAK6E,gBAAL,CAAsBrI,IAAtB,CAA2B,kCAAkC+H,MAAM,CAACvE,KAAzC,GAAiD,sBAA5E;UACA,OAAOuE,MAAM,CAACvE,KAAd;QACA;MACD;;MACD,IAAI7E,KAAK,CAACqJ,QAAN,CAAeD,MAAM,CAACtE,KAAtB,KAAgC9E,KAAK,CAACsJ,QAAN,CAAeF,MAAM,CAACtE,KAAtB,CAApC,EAAkE;QACjE,IAAI,KAAKyE,GAAL,CAASC,MAAT,CAAgBJ,MAAM,CAACtE,KAAvB,CAAJ,EAAmC;UAClCsE,MAAM,CAACtE,KAAP,GAAe,KAAKyE,GAAL,CAASE,MAAT,CAAgBL,MAAM,CAACtE,KAAvB,CAAf;QACA,CAFD,MAGK;UACJ,KAAK4E,gBAAL,CAAsBrI,IAAtB,CAA2B,kCAAkC+H,MAAM,CAACtE,KAAzC,GAAiD,sBAA5E;UACA,OAAOsE,MAAM,CAACtE,KAAd;QACA;MACD;;MAED,IAAI9E,KAAK,CAACqJ,QAAN,CAAeD,MAAM,CAACjF,YAAtB,CAAJ,EAAyC;QACxC,IAAIwF,QAAM,GAAG3J,KAAK,CAAC4J,OAAN,CAAcR,MAAM,CAACjF,YAArB,IAAqCiF,MAAM,CAACjF,YAA5C,GAA2D,CAACiF,MAAM,CAACjF,YAAR,CAAxE;QACA,IAAI0F,WAAS,GAAG,KAAhB;QACA5J,MAAM,CAACsE,IAAP,CAAYoF,QAAZ,EAAoB,UAACG,IAAD,EAAOC,KAAP,EAAY;UAC/B,IAAI/J,KAAK,CAACsJ,QAAN,CAAeQ,IAAf,CAAJ,EAA0B;YACzB,IAAIzJ,KAAI,CAACkJ,GAAL,CAASC,MAAT,CAAgBM,IAAhB,CAAJ,EAA2B;cAC1BH,QAAM,CAACI,KAAD,CAAN,GAAgB1J,KAAI,CAACkJ,GAAL,CAASE,MAAT,CAAgBK,IAAhB,CAAhB;YACA,CAFD,MAGK;cACJzJ,KAAI,CAACqJ,gBAAL,CAAsBrI,IAAtB,CAA2B,oCAAoCyI,IAApC,GAA2C,uBAAtE;;cACAD,WAAS,GAAG,IAAZ;YACA;UACD;QACD,CAVD;;QAWA,IAAIA,WAAJ,EAAe;UACd,OAAOT,MAAM,CAACjF,YAAd;QACA,CAFD,MAGK;UACJiF,MAAM,CAACjF,YAAP,GAAsBwF,QAAtB;QACA;MACD;IAED;;IAEDvJ,iBAAM4J,aAAN,CAAmB9F,IAAnB,CAAmB,IAAnB,EAAoBkF,MAApB;EAEA,CAlDM;;EA2DP/B,sBAAW9E,kBAAX,EAAW,cAAX,EAAuB;IAqBvB;;;SAGA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,cAAtB,CAAP;IACA,CA1BsB;;IAPvB;;;;;;;SAOA,UAAwB2C,MAAxB,EAAqD;MAArD;;MACC,IAAI,KAAKzC,gBAAL,CAAsB,cAAtB,EAAsCyC,MAAtC,CAAJ,EAAmD;QAElD,IAAIA,MAAM,YAAYzK,QAAtB,EAAgC;UAC/ByK,MAAM,GAAG,CAACA,MAAD,CAAT;QACA;;QACD,IAAI,KAAKC,gBAAT,EAA2B;UAC1BjK,MAAM,CAACsE,IAAP,CAAY,KAAK2F,gBAAjB,EAAmC,UAACC,QAAD,EAAS;YAC3CA,QAAQ,CAACC,OAAT;UACA,CAFD;QAGA;;QACD,KAAKF,gBAAL,GAAwB,EAAxB;;QAEA,IAAID,MAAJ,EAAY;UACXhK,MAAM,CAACsE,IAAP,CAAY0F,MAAZ,EAAoB,UAACzF,CAAD,EAAE;YACrBnE,KAAI,CAAC6J,gBAAL,CAAsB7I,IAAtB,CAA2BmD,CAAC,CAAC3C,MAAF,CAASC,EAAT,CAAY,gBAAZ,EAA8B;cAAQzB,KAAI,CAACgK,UAAL,CAAgB7F,CAAhB;YAAoB,CAA1D,EAA4DgB,SAA5D,EAAuE,KAAvE,CAA3B;UACA,CAFD;QAGA;MACD;IACD,CAnBsB;oBAAA;;EAAA,CAAvB;EAqCA6B,sBAAW9E,kBAAX,EAAW,WAAX,EAAoB;IARpB;;;;;;;;SAQA;MACC,OAAO,KAAK+E,gBAAL,CAAsB,WAAtB,CAAP;IACA,CAFmB;;IAIpB;;;SAGA,UAAqBC,KAArB,EAAmC;MAClC,KAAKC,gBAAL,CAAsB,WAAtB,EAAmCD,KAAnC;IACA,CATmB;oBAAA;;EAAA,CAApB;EAWA;;;;;;EAKOhF,gCAAP,UAAkB0H,MAAlB,EAAkC;IACjC,IAAI,CAAC,KAAKnH,SAAV,EAAqB;MACpB,IAAIlB,CAAC,GAAGqI,MAAM,CAACK,WAAP,KAAuBL,MAAM,CAACpF,KAAP,CAAa7B,MAA5C;MACA,IAAItB,CAAC,GAAGuI,MAAM,CAACM,WAAP,KAAuBN,MAAM,CAACnF,KAAP,CAAa7B,MAA5C;MAEA,IAAI4B,KAAK,GAAGoF,MAAM,CAACpF,KAAnB;MACA,IAAIC,KAAK,GAAGmF,MAAM,CAACnF,KAAnB;;MAEA,IAAID,KAAJ,EAAW;QACV,IAAIA,KAAK,CAAC2F,QAAN,CAAeC,QAAnB,EAA6B;UAC5B/I,CAAC,IAAI,KAAK+B,WAAV;QACA;MACD;;MAED,KAAKV,KAAL,GAAa;QAAEnB,CAAC,EAAEA,CAAL;QAAQF,CAAC,EAAEA;MAAX,CAAb;MACA,KAAKgJ,YAAL;MAEA,IAAIC,EAAE,GAAG/I,CAAT;MACA,IAAIgJ,EAAE,GAAGlJ,CAAT;MAEAE,CAAC,IAAI,KAAK8B,UAAV;;MAEA,IAAIoB,KAAJ,EAAW;QACV,IAAIA,KAAK,CAAC0F,QAAN,CAAeC,QAAnB,EAA6B;UAC5B7I,CAAC,IAAI,KAAK8B,UAAV;QACA;MACD;;MAED,IAAIqE,OAAO,GAAGkC,MAAM,CAAClC,OAArB;MACA,IAAI8C,QAAQ,GAAG9C,OAAO,CAAC+C,iBAAvB;MACA,IAAIC,MAAM,GAAGhD,OAAO,CAACiD,eAArB;;MAEA,IAAInG,KAAK,YAAYvF,SAAjB,IAA8B,EAAEuF,KAAK,YAAYtF,QAAnB,CAA9B,IAA8DuF,KAAK,YAAYxF,SAA/E,IAA4F,EAAEwF,KAAK,YAAYvF,QAAnB,CAAhG,EAA8H;QAC7H0K,MAAM,CAACnF,KAAP,CAAamG,qBAAb,CAAmC,KAAKC,SAAxC;QACAjB,MAAM,CAACpF,KAAP,CAAaoG,qBAAb,CAAmC,KAAKE,SAAxC;MACA,CAHD,MAIK;QACJ,IAAIlB,MAAM,CAACmB,QAAP,IAAmBnB,MAAM,CAACpF,KAA9B,EAAqC;UACpCoF,MAAM,CAACnF,KAAP,CAAamG,qBAAb,CAAmC,KAAKC,SAAxC;QACA;;QAED,IAAIjB,MAAM,CAACmB,QAAP,IAAmBnB,MAAM,CAACnF,KAA9B,EAAqC;UACpCmF,MAAM,CAACpF,KAAP,CAAaoG,qBAAb,CAAmC,KAAKE,SAAxC;QACA;MACD,CA3CmB,CA6CrB;MACA;;;MAEC,KAAKxJ,KAAL,CAAWC,CAAX,GAAeA,CAAf;MACA,KAAKN,KAAL,CAAWI,CAAX,GAAeA,CAAf;;MAEA,IAAI,CAAC,KAAKmD,KAAV,EAAiB;QAChB,KAAKvD,KAAL,CAAW+J,OAAX,CAAmB,CAAC;UAAEC,QAAQ,EAAE,GAAZ;UAAiBC,EAAE,EAAEZ;QAArB,CAAD,CAAnB,EAAgDE,QAAhD,EAA0DE,MAA1D;MACA;;MACD,IAAI,CAAC,KAAKjG,KAAV,EAAiB;QAChB,KAAKnD,KAAL,CAAW0J,OAAX,CAAmB,CAAC;UAAEC,QAAQ,EAAE,GAAZ;UAAiBC,EAAE,EAAEX;QAArB,CAAD,CAAnB,EAAgDC,QAAhD,EAA0DE,MAA1D;MACA;IACD;EACD,CA3DM;EA6DP;;;;;EAGOxI,6BAAP;IACC,KAAKuB,IAAL,CAAU,CAAV;;IACA1D,iBAAMgK,OAAN,CAAalG,IAAb,CAAa,IAAb;EACA,CAHM;;EAIR;AAAC,CAh/BD,CAA8BhF,MAA9B;;;AAk/BA;;;;;;;AAMAO,QAAQ,CAAC+L,iBAAT,CAA2B,UAA3B,IAAyCjJ,QAAzC","names":["Cursor","Sprite","MutableValueDisposer","MultiDisposer","ValueAxis","DateAxis","XYSeries","registry","color","InterfaceColorSet","getInteraction","MouseCursorStyle","$math","$utils","$type","$array","$path","__extends","_super","_this","className","behavior","maxPanOut","interfaceColors","snapOnPan","selection","createChild","shouldClone","fillOpacity","fill","getFor","isMeasured","visible","interactionsEnabled","_disposers","push","lineX","stroke","strokeDasharray","strokeOpacity","y","lineY","x","events","on","updateSize","_lineX","_lineY","_xAxis","_yAxis","mask","hideSeriesTooltipsOnSelection","applyTheme","XYCursor","path","moveTo","lineTo","innerHeight","innerWidth","_usesSelection","downPoint","point","pixelX","pixelY","Math","min","w","round","abs","_positionPrecision","h","pixelHeight","pixelWidth","rectangle","validatePosition","_generalBehavior","hide","max","force","triggerMoveReal","call","snapToSeries","isHidden","updateLinePositions","allHidden_1","each","s","getDistance","getPanningRanges","dispatch","fixPoint","xAxis","yAxis","updateSelection","isHiding","parent","fitsToBounds","updatePoint","selectionX","selectionY","show","triggerDownReal","undefined","hasMoved","upPoint","getRanges","triggerUpReal","xRange","yRange","dispatchImmediately","interaction","setGlobalStyle","default","distance","getHorizontalDistance","_upPointOrig","_downPointOrig","getVerticalDistance","getHitOption","interactions","startX","startY","currentX","currentY","deltaX","deltaY","start","end","used","endX","endY","Object","getPropertyValue","value","setPropertyValue","indexOf","touch","isTouchProtected","get","axis","set","tooltip","handleXTooltipPosition","event","preventShow","handleYTooltipPosition","__disabled","svgPointToSprite","fullWidthLineX","startPoint","currentItemStartPoint","endPoint","currentItemEndPoint","width","fullWidthLineY","height","setElement","paper","add","reset","_selection","element","config","hasValue","isString","map","hasKey","getKey","processingErrors","snapTo_1","isArray","snapError_1","snap","index","processConfig","series","_snapToDisposers","disposer","dispose","handleSnap","getTooltipX","getTooltipY","renderer","opposite","getPositions","xx","yy","duration","animationDuration","easing","animationEasing","showTooltipAtPosition","yPosition","xPosition","baseAxis","animate","property","to","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/cursors/XYCursor.ts"],"sourcesContent":["/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t */\r\n\tsnapToSeries?: XYSeries | XYSeries[];\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t */\r\n\thideSeriesTooltipsOnSelection?: boolean;\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t */\r\n\tmaxTooltipDistance?: number;\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t */\r\n\tsnapOnPan?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposers: IDisposer[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.snapOnPan = true;\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.visible = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\tthis.hideSeriesTooltipsOnSelection = true;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\r\n\t\tsuper.triggerMoveReal(point, force);\r\n\t\tlet snapToSeries = this.snapToSeries;\r\n\t\tif ((snapToSeries && !this.downPoint)) {\r\n\t\t\tif (snapToSeries instanceof XYSeries) {\r\n\t\t\t\tif (snapToSeries.isHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet allHidden = true;\r\n\t\t\t\t$array.each(snapToSeries, (s) => {\r\n\t\t\t\t\tif (!s.isHidden) {\r\n\t\t\t\t\t\tallHidden = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tif (allHidden) {\r\n\t\t\t\t\tthis.updateLinePositions(point);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle action when cursor is released, which should perform an operation\r\n\t * based on its `behavior`, like zoom.\r\n\t * \r\n\t * @param  point  Release point\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint): void {\r\n\t\tif (this.hasMoved()) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tif (this._generalBehavior != \"pan\") {\r\n\t\t\t\t\tthis.getRanges();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.xRange = undefined;\r\n\t\t\t\tthis.yRange = undefined;\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the cursor has moved enough based on its `behavior`.\r\n\t * \r\n\t * @return Moved?\r\n\t */\r\n\tprivate hasMoved(): boolean {\r\n\t\tlet distance: number;\r\n\t\tif (this.behavior == \"zoomX\" || this.behavior == \"panX\") {\r\n\t\t\tdistance = $math.getHorizontalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse if (this.behavior == \"zoomY\" || this.behavior == \"panY\") {\r\n\t\t\tdistance = $math.getVerticalDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdistance = $math.getDistance(this._upPointOrig, this._downPointOrig);\r\n\t\t}\r\n\t\treturn distance > getInteraction().getHitOption(this.interactions, \"hitTolerance\");\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = 1 - $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = startY - currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = 1 - $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = 1 - $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * `\"zoomX\"` - zooms horizontally.\r\n\t * * `\"zoomY\"` - zooms vertically.\r\n\t * * `\"zoomXY\"` - zooms both horizontally and vertically.\r\n\t * * `\"selectX\"` - selects a range horizontally.\r\n\t * * `\"selectY\"` - selects a range vertically.\r\n\t * * `\"selectXY\"` - selects a range both horizontally and vertically.\r\n\t * * `\"panX\"` - moves (pans) current selection horizontally.\r\n\t * * `\"panY\"` - moves (pans) current selection vertically.\r\n\t * * `\"panXY\"` - moves (pans) current selection both horizontally and vertically.\r\n\t * * `\"none\"` - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * NOTE: `\"zoomXY\"` acts differently when used on a `DateAxis`.\r\n\t * See [this note](https://www.amcharts.com/docs/v4/concepts/chart-cursor/#zoomXY_behavior_and_DateAxis).\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true` this will hide series tooltips when selecting with cursor.\r\n\t *\r\n\t * @since 4.5.15\r\n\t * @param  value  hide tooltips?\r\n\t */\r\n\tpublic set hideSeriesTooltipsOnSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideSeriesTooltipsOnSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return hide tooltip?\r\n\t */\r\n\tpublic get hideSeriesTooltipsOnSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideSeriesTooltipsOnSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to a numeric value, cursor will display closest series' tooltips\r\n\t * plus tooltips from series that are closer to than `maxTooltipDistance` to\r\n\t * it.\r\n\t *\r\n\t * Set it to `-1` to always force one tooltip, even if there are multiple\r\n\t * data items in exactly same place.\r\n\t *\r\n\t * @since 4.7.18\r\n\t * @param  value  Distance\r\n\t */\r\n\tpublic set maxTooltipDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"maxTooltipDistance\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Distance\r\n\t */\r\n\tpublic get maxTooltipDistance(): number {\r\n\t\treturn this.getPropertyValue(\"maxTooltipDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.preventShow = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.preventShow = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\r\n\t\t\t\taxis.events.on(\"rangechangestarted\", (event) => {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.__disabled = true;\r\n\t\t\t\t}, undefined, false),\r\n\t\t\t\taxis.events.on(\"rangechangeended\", (event) => {\r\n\t\t\t\t\tthis.__disabled = false;\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t\tthis.dispatch(\"cursorpositionchanged\");\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\t\tpoint.y = 1;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\t\tpoint.x = 1;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries)) {\r\n\t\t\t\tlet snapTo = $type.isArray(config.snapToSeries) ? config.snapToSeries : [config.snapToSeries];\r\n\t\t\t\tlet snapError = false;\r\n\t\t\t\t$array.each(snapTo, (snap, index) => {\r\n\t\t\t\t\tif ($type.isString(snap)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(snap)) {\r\n\t\t\t\t\t\t\tsnapTo[index] = this.map.getKey(snap);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + snap + \"\\\" found for `series`\");\r\n\t\t\t\t\t\t\tsnapError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (snapError) {\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tconfig.snapToSeries = snapTo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped.\r\n\t * \r\n\t * Can be a single series instance or an array of series.\r\n\t *\r\n\t * @param {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries | XYSeries[]) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\r\n\t\t\tif (series instanceof XYSeries) {\r\n\t\t\t\tseries = [series];\r\n\t\t\t}\r\n\t\t\tif (this._snapToDisposers) {\r\n\t\t\t\t$array.each(this._snapToDisposers, (disposer) => {\r\n\t\t\t\t\tdisposer.dispose();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tthis._snapToDisposers = [];\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\t$array.each(series, (s) => {\r\n\t\t\t\t\tthis._snapToDisposers.push(s.events.on(\"tooltipshownat\", () => { this.handleSnap(s) }, undefined, false));\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries | XYSeries[]}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries | XYSeries[] {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should zoom selection \"snap\" into equal categories/intervals after panning\r\n\t * the chart? (when `behavior == \"panX\"`)\r\n\t *\r\n\t * @default true\r\n\t * @since 4.10.17\r\n\t * @return Snap on pan?\r\n\t */\r\n\tpublic get snapOnPan(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapOnPan\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param value Snap on pan?\r\n\t */\r\n\tpublic set snapOnPan(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapOnPan\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Snaps the zoom selection after chart is panned.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic handleSnap(series: XYSeries) {\r\n\t\tif (!this.downPoint) {\r\n\t\t\tlet x = series.getTooltipX() + series.xAxis.pixelX;\r\n\t\t\tlet y = series.getTooltipY() + series.yAxis.pixelY;\r\n\r\n\t\t\tlet xAxis = series.xAxis;\r\n\t\t\tlet yAxis = series.yAxis;\r\n\r\n\t\t\tif (xAxis) {\r\n\t\t\t\tif (xAxis.renderer.opposite) {\r\n\t\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.point = { x: x, y: y };\r\n\t\t\tthis.getPositions();\r\n\r\n\t\t\tlet xx = x;\r\n\t\t\tlet yy = y;\r\n\r\n\t\t\tx -= this.pixelWidth;\r\n\r\n\t\t\tif (yAxis) {\r\n\t\t\t\tif (yAxis.renderer.opposite) {\r\n\t\t\t\t\tx += this.pixelWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet tooltip = series.tooltip;\r\n\t\t\tlet duration = tooltip.animationDuration;\r\n\t\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\t\tif (xAxis instanceof ValueAxis && !(xAxis instanceof DateAxis) && yAxis instanceof ValueAxis && !(yAxis instanceof DateAxis)) {\r\n\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t//\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\t//\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\t\tthis.lineY.x = x;\r\n\t\t\tthis.lineX.y = y;\r\n\r\n\t\t\tif (!this.xAxis) {\r\n\t\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t\t}\r\n\t\t\tif (!this.yAxis) {\r\n\t\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n"]},"metadata":{},"sourceType":"module"}