{"ast":null,"code":"/**\n * @module matrixmath/arrays\n * @private\n */\n'use strict';\n/**\n * Pool of arrays.\n * Organized by array length to avoid changing lengths of arrays.\n * Each array gets a non-enumerable property `inUse` which is `true` when the\n * array is in use.\n *\n * @type {Object.<number, Array.<Array>>}\n */\n\nvar pool = {};\n/**\n * Get an array from the pool.\n * This array will have a length of 0.\n *\n * @return {Array} An array.\n */\n\nfunction get() {\n  return getWithLength(0);\n}\n/**\n * Get an array with the specified length from the pool.\n *\n * @param {number} length The preferred length of the array.\n *\n * @return {Array} An array.\n */\n\n\nfunction getWithLength(length) {\n  var arrays = pool[length];\n  var array;\n  var i; // Create the first array for the specified length\n\n  if (!arrays) {\n    array = create(length);\n  } // Find an unused array among the created arrays for the specified length\n\n\n  if (!array) {\n    for (i = arrays.length; i--;) {\n      if (!arrays[i].inUse) {\n        array = arrays[i];\n        break;\n      }\n    } // If no array was found, create a new one\n\n\n    if (!array) {\n      array = create(length);\n    }\n  }\n\n  array.inUse = true;\n  return array;\n}\n/**\n * Give back an array to the pool.\n * This will reset the array to the original length and make all values\n * undefined.\n *\n * @param {Array} array An array that was gotten from this pool before.\n */\n\n\nfunction giveBack(array) {\n  // Don't return arrays that didn't originate from this pool\n  if (!array.hasOwnProperty('originalLength')) return; // Reset all the elements\n\n  for (var i = array.length; i--;) {\n    array[i] = undefined;\n  } // Reset the length\n\n\n  array.length = array.originalLength; // Remove custom properties that the Matrix class might have added\n\n  delete array.rows;\n  delete array.cols; // Let the pool know that it's no longer in use\n\n  array.inUse = false;\n}\n/**\n * Create a new array and add it to the pool for the specified length.\n *\n * @param {number} length The length of the array to create.\n *\n * @return {Array} The new array.\n */\n\n\nfunction create(length) {\n  var array = new Array(length); // Create a non-enumerable property as a flag to know if the array is in use\n\n  Object.defineProperties(array, {\n    inUse: {\n      enumerable: false,\n      writable: true,\n      value: false\n    },\n    originalLength: {\n      enumerable: false,\n      value: length\n    }\n  });\n  if (!pool[length]) pool[length] = [];\n  pool[length].push(array);\n  return array;\n}\n\nexports.get = get;\nexports.getWithLength = getWithLength;\nexports.giveBack = giveBack;","map":{"version":3,"names":["pool","get","getWithLength","length","arrays","array","i","create","inUse","giveBack","hasOwnProperty","undefined","originalLength","rows","cols","Array","Object","defineProperties","enumerable","writable","value","push","exports"],"sources":["/Users/macbookpro/Desktop/IOModel_D/client/node_modules/matrixmath/arrays.js"],"sourcesContent":["/**\n * @module matrixmath/arrays\n * @private\n */\n'use strict';\n\n/**\n * Pool of arrays.\n * Organized by array length to avoid changing lengths of arrays.\n * Each array gets a non-enumerable property `inUse` which is `true` when the\n * array is in use.\n *\n * @type {Object.<number, Array.<Array>>}\n */\nvar pool = {};\n\n/**\n * Get an array from the pool.\n * This array will have a length of 0.\n *\n * @return {Array} An array.\n */\nfunction get() {\n  return getWithLength(0);\n}\n\n/**\n * Get an array with the specified length from the pool.\n *\n * @param {number} length The preferred length of the array.\n *\n * @return {Array} An array.\n */\nfunction getWithLength(length) {\n  var arrays = pool[length];\n  var array;\n  var i;\n\n  // Create the first array for the specified length\n  if (!arrays) {\n    array = create(length);\n  }\n\n  // Find an unused array among the created arrays for the specified length\n  if (!array) {\n    for (i = arrays.length; i--;) {\n      if (!arrays[i].inUse) {\n        array = arrays[i];\n        break;\n      }\n    }\n\n    // If no array was found, create a new one\n    if (!array) {\n      array = create(length);\n    }\n  }\n\n  array.inUse = true;\n  return array;\n}\n\n/**\n * Give back an array to the pool.\n * This will reset the array to the original length and make all values\n * undefined.\n *\n * @param {Array} array An array that was gotten from this pool before.\n */\nfunction giveBack(array) {\n\n  // Don't return arrays that didn't originate from this pool\n  if (!array.hasOwnProperty('originalLength')) return;\n\n  // Reset all the elements\n  for (var i = array.length; i--;) {\n    array[i] = undefined;\n  }\n\n  // Reset the length\n  array.length = array.originalLength;\n\n  // Remove custom properties that the Matrix class might have added\n  delete array.rows;\n  delete array.cols;\n\n  // Let the pool know that it's no longer in use\n  array.inUse = false;\n}\n\n/**\n * Create a new array and add it to the pool for the specified length.\n *\n * @param {number} length The length of the array to create.\n *\n * @return {Array} The new array.\n */\nfunction create(length) {\n  var array = new Array(length);\n\n  // Create a non-enumerable property as a flag to know if the array is in use\n  Object.defineProperties(array, {\n    inUse: {\n      enumerable: false,\n      writable: true,\n      value: false\n    },\n    originalLength: {\n      enumerable: false,\n      value: length\n    }\n  });\n\n  if (!pool[length]) pool[length] = [];\n  pool[length].push(array);\n\n  return array;\n}\n\nexports.get = get;\nexports.getWithLength = getWithLength;\nexports.giveBack = giveBack;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,IAAI,GAAG,EAAX;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,GAAT,GAAe;EACb,OAAOC,aAAa,CAAC,CAAD,CAApB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;EAC7B,IAAIC,MAAM,GAAGJ,IAAI,CAACG,MAAD,CAAjB;EACA,IAAIE,KAAJ;EACA,IAAIC,CAAJ,CAH6B,CAK7B;;EACA,IAAI,CAACF,MAAL,EAAa;IACXC,KAAK,GAAGE,MAAM,CAACJ,MAAD,CAAd;EACD,CAR4B,CAU7B;;;EACA,IAAI,CAACE,KAAL,EAAY;IACV,KAAKC,CAAC,GAAGF,MAAM,CAACD,MAAhB,EAAwBG,CAAC,EAAzB,GAA8B;MAC5B,IAAI,CAACF,MAAM,CAACE,CAAD,CAAN,CAAUE,KAAf,EAAsB;QACpBH,KAAK,GAAGD,MAAM,CAACE,CAAD,CAAd;QACA;MACD;IACF,CANS,CAQV;;;IACA,IAAI,CAACD,KAAL,EAAY;MACVA,KAAK,GAAGE,MAAM,CAACJ,MAAD,CAAd;IACD;EACF;;EAEDE,KAAK,CAACG,KAAN,GAAc,IAAd;EACA,OAAOH,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,QAAT,CAAkBJ,KAAlB,EAAyB;EAEvB;EACA,IAAI,CAACA,KAAK,CAACK,cAAN,CAAqB,gBAArB,CAAL,EAA6C,OAHtB,CAKvB;;EACA,KAAK,IAAIJ,CAAC,GAAGD,KAAK,CAACF,MAAnB,EAA2BG,CAAC,EAA5B,GAAiC;IAC/BD,KAAK,CAACC,CAAD,CAAL,GAAWK,SAAX;EACD,CARsB,CAUvB;;;EACAN,KAAK,CAACF,MAAN,GAAeE,KAAK,CAACO,cAArB,CAXuB,CAavB;;EACA,OAAOP,KAAK,CAACQ,IAAb;EACA,OAAOR,KAAK,CAACS,IAAb,CAfuB,CAiBvB;;EACAT,KAAK,CAACG,KAAN,GAAc,KAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASD,MAAT,CAAgBJ,MAAhB,EAAwB;EACtB,IAAIE,KAAK,GAAG,IAAIU,KAAJ,CAAUZ,MAAV,CAAZ,CADsB,CAGtB;;EACAa,MAAM,CAACC,gBAAP,CAAwBZ,KAAxB,EAA+B;IAC7BG,KAAK,EAAE;MACLU,UAAU,EAAE,KADP;MAELC,QAAQ,EAAE,IAFL;MAGLC,KAAK,EAAE;IAHF,CADsB;IAM7BR,cAAc,EAAE;MACdM,UAAU,EAAE,KADE;MAEdE,KAAK,EAAEjB;IAFO;EANa,CAA/B;EAYA,IAAI,CAACH,IAAI,CAACG,MAAD,CAAT,EAAmBH,IAAI,CAACG,MAAD,CAAJ,GAAe,EAAf;EACnBH,IAAI,CAACG,MAAD,CAAJ,CAAakB,IAAb,CAAkBhB,KAAlB;EAEA,OAAOA,KAAP;AACD;;AAEDiB,OAAO,CAACrB,GAAR,GAAcA,GAAd;AACAqB,OAAO,CAACpB,aAAR,GAAwBA,aAAxB;AACAoB,OAAO,CAACb,QAAR,GAAmBA,QAAnB"},"metadata":{},"sourceType":"script"}