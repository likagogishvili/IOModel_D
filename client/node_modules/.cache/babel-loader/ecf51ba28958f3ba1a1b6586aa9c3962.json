{"ast":null,"code":"/**\r\n * Radar column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { RadarColumn } from \"../elements/RadarColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport { Percent } from \"../../core/utils/Percent\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar RadarColumnSeriesDataItem =\n/** @class */\nfunction (_super) {\n  __extends(RadarColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return RadarColumnSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { RadarColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar RadarColumnSeries =\n/** @class */\nfunction (_super) {\n  __extends(RadarColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarColumnSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RadarColumnSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates and returns a RadarColumn element to use as column in radar chart.\r\n   *\r\n   * @return RadarColumn.\r\n   */\n\n\n  RadarColumnSeries.prototype.createColumnTemplate = function () {\n    return new RadarColumn();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarColumnSeries.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  RadarColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\n    if (dataItem) {\n      if (dataItem.column) {\n        dataItem.column.__disabled = true;\n      }\n\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (rangeColumn) {\n          rangeColumn.__disabled = true;\n        }\n      });\n    }\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this;\n\n    var startAngle = this.chart.startAngle;\n    var endAngle = this.chart.endAngle;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var lAngle;\n    var rAngle;\n    var tRadius;\n    var bRadius;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\n    var radarColumn = dataItem.column;\n\n    if (!radarColumn) {\n      radarColumn = this.columns.create();\n      dataItem.column = radarColumn;\n      $object.copyProperties(this, radarColumn, visualProperties); // need this \n\n      $object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\n\n      dataItem.addSprite(radarColumn);\n      radarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n\n      this.setColumnStates(radarColumn);\n    }\n\n    var width = radarColumn.width;\n    var percentWidth = 100;\n\n    if (width instanceof Percent) {\n      percentWidth = width.percent;\n    }\n\n    var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n    startLocation += offset;\n    endLocation -= offset; // two category axes\n\n    if (this.xAxis instanceof CategoryAxis && this.yAxis instanceof CategoryAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, 0, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else if (this.baseAxis == this.xAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\")\n      });\n\n      if ($type.isNumber(width)) {\n        var abs = Math.abs(tRadius - bRadius);\n\n        if (abs > width) {\n          var d = (abs - width) / 2;\n          tRadius += d;\n          bRadius -= d;\n        }\n      }\n\n      lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\n    }\n\n    if (rAngle < lAngle) {\n      var temp = rAngle;\n      rAngle = lAngle;\n      lAngle = temp;\n    }\n\n    lAngle = $math.fitToRange(lAngle, startAngle, endAngle);\n    rAngle = $math.fitToRange(rAngle, startAngle, endAngle);\n    var slice = radarColumn.radarColumn;\n    slice.startAngle = lAngle;\n    var arc = rAngle - lAngle;\n\n    if (arc > 0) {\n      slice.arc = arc;\n      slice.radius = tRadius;\n      slice.innerRadius = bRadius;\n      radarColumn.__disabled = false;\n      radarColumn.parent = this.columnsContainer;\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create();\n          $object.forceCopyProperties(_this.columns.template, rangeColumn, visualProperties);\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n\n          if (rangeColumn.dataItem) {\n            $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\n          }\n\n          dataItem.addSprite(rangeColumn);\n          rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\n\n          _this.setColumnStates(rangeColumn);\n\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n        }\n\n        var slice = rangeColumn.radarColumn;\n        slice.startAngle = lAngle;\n        slice.arc = arc;\n        slice.radius = tRadius;\n        slice.innerRadius = bRadius;\n\n        if (slice.invalid) {\n          slice.paper = _this.paper;\n          slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n\n        rangeColumn.__disabled = false;\n        rangeColumn.parent = axisRange.contents;\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n  };\n  /**\r\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n   *\r\n   * @param    dataItem   Data item\r\n   * @param    xKey       Name of X data field\r\n   * @param    yKey       Name of Y data field\r\n   * @param    locationX  X location\r\n   * @param    locationY  Y location\r\n   * @param    stackKeyX  ?\r\n   * @param    stackKeyY  ?\r\n   * @returns             Coordinates\r\n   */\n\n\n  RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (!stackKeyX) {\n      stackKeyX = \"valueX\";\n    }\n\n    if (!stackKeyY) {\n      stackKeyY = \"valueY\";\n    }\n\n    var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\n    var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\n    var radius = $math.getDistance({\n      x: x,\n      y: y\n    }); // hack to be able to determine angle later\n\n    if (radius == 0) {\n      radius = 0.00001;\n    }\n\n    var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\n    return {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n  };\n  /**\r\n   * Returns an SVG path to be used as a mask for the series.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  RadarColumnSeries.prototype.getMaskPath = function () {\n    var renderer = this.yAxis.renderer;\n    return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\n  };\n\n  RadarColumnSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\n      bullet.visible = false;\n    }\n\n    bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\n  };\n\n  RadarColumnSeries.prototype.setXAxis = function (axis) {\n    _super.prototype.setXAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  RadarColumnSeries.prototype.setYAxis = function (axis) {\n    _super.prototype.setYAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  RadarColumnSeries.prototype.updateRendererRefs = function () {\n    var rendererX = this.xAxis.renderer;\n    var rendererY = this.yAxis.renderer;\n    rendererX.axisRendererY = rendererY;\n  };\n\n  return RadarColumnSeries;\n}(ColumnSeries);\n\nexport { RadarColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;","map":{"version":3,"mappings":"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","names":["ColumnSeries","ColumnSeriesDataItem","visualProperties","CategoryAxis","RadarColumn","registry","$path","$math","$object","Percent","$iter","$array","$type","__extends","_super","_this","className","applyTheme","RadarColumnSeries","chart","invalid","validate","call","dataItem","column","__disabled","each","axisRanges","iterator","axisRange","rangeColumn","rangesColumns","getKey","uid","startAngle","endAngle","yField","yOpenField","xField","xOpenField","lAngle","rAngle","tRadius","bRadius","startLocation","getStartLocation","endLocation","getEndLocation","cellAngle","dataItems","length","end","start","radarColumn","columns","create","copyProperties","template","addSprite","paper","setColumnStates","width","percentWidth","percent","offset","round","xAxis","yAxis","getDistance","x","getX","y","getY","getAngle","baseAxis","locations","isNumber","abs","Math","d","temp","fitToRange","slice","arc","radius","innerRadius","parent","columnsContainer","forceCopyProperties","contents","remove","sprites","setKey","disableUnusedColumns","xKey","yKey","locationX","locationY","stackKeyX","stackKeyY","angle","cos","sin","renderer","pixelRadius","pixelInnerRadius","bullet","positionX","positionY","visible","moveTo","positionToPoint","axis","setXAxis","updateRendererRefs","setYAxis","rendererX","rendererY","axisRendererY","registeredClasses","RadarColumnSeriesDataItem"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/RadarColumnSeries.ts"],"sourcesContent":["/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected disableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.copyProperties(this, radarColumn, visualProperties); // need this \r\n\t\t\t$object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet width = radarColumn.width;\r\n\t\tlet percentWidth = 100;\r\n\r\n\t\tif (width instanceof Percent) {\r\n\t\t\tpercentWidth = width.percent;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"), y: this.yAxis.getY(dataItem, yField, 0, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tif ($type.isNumber(width)) {\t\t\t\t\r\n\t\t\t\tlet abs = Math.abs(tRadius - bRadius);\r\n\t\t\t\tif (abs > width) {\r\n\t\t\t\t\tlet d = (abs - width) / 2;\r\n\t\t\t\t\ttRadius += d;\r\n\t\t\t\t\tbRadius -= d;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\tprotected positionBulletReal(bullet: Sprite, positionX: number, positionY: number) {\r\n\t\tlet xAxis = this.xAxis;\r\n\t\tlet yAxis = this.yAxis;\r\n\r\n\t\tif (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\r\n\t\tbullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\r\n\t}\r\n\r\n\tprotected setXAxis(axis: Axis) {\r\n\t\tsuper.setXAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected setYAxis(axis: Axis) {\r\n\t\tsuper.setYAxis(axis);\r\n\t\tthis.updateRendererRefs();\r\n\t}\r\n\r\n\tprotected updateRendererRefs() {\r\n\t\tlet rendererX = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\tlet rendererY = <AxisRendererRadial>this.yAxis.renderer;\r\n\r\n\t\trendererX.axisRendererY = rendererY;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n"]},"metadata":{},"sourceType":"module"}