{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRenderer } from \"./AxisRenderer\";\nimport { AxisBullet } from \"./AxisBullet\";\nimport { WavedLine } from \"../../core/elements/WavedLine\";\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\nimport { registry } from \"../../core/Registry\";\nimport { percent, Percent } from \"../../core/utils/Percent\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\n\nvar AxisRendererX =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererX, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererX() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"AxisRendererX\";\n    _this.minGridDistance = 120;\n    _this.opposite = false;\n    _this.rotation = 0;\n    _this.width = percent(100);\n    _this.labels.template.horizontalCenter = \"middle\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n  * @ignore\r\n  */\n\n\n  AxisRendererX.prototype.setAxis = function (axis) {\n    _super.prototype.setAxis.call(this, axis);\n\n    axis.layout = \"vertical\";\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererX.prototype.updateGridContainer = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var gridContainer = this.gridContainer;\n      gridContainer.x = axis.pixelX;\n      gridContainer.width = axis.axisLength;\n    }\n  };\n  /**\r\n   * Called when rendered is attached to an Axis, as well as a property of\r\n   * Axis that might affect the appearance is updated.\r\n   *\r\n   * E.g. `axis.opposite`, `axis.inside`, etc.\r\n   *\r\n   * This method is called **before** draw, so that any related setting\r\n   * changed in this method can be changed.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.processRenderer = function () {\n    _super.prototype.processRenderer.call(this); // can not do this in init, as axis is set later\n\n\n    var axis = this.axis;\n\n    if (axis) {\n      if (!(axis.width instanceof Percent)) {\n        axis.width = percent(100);\n      } // @todo Is thi sneeded?\n\n\n      $utils.used(this.line);\n      var title = axis.title;\n      title.rotation = 0;\n      title.align = \"center\";\n\n      if (this.opposite) {\n        this.line.toFront();\n        title.toBack();\n      } else {\n        title.toFront();\n        this.toBack();\n        this.line.toBack();\n      }\n    }\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 1000;\n      var bbx = this.line.pixelX;\n      var bby = this.line.pixelY;\n      var bbw = this.axisLength;\n      var bbh = bigNum; // top\n\n      if (this.opposite) {\n        if (!this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      } // bottom\n      else {\n        if (this.inside) {\n          bby = -bigNum;\n          bbh = bigNum;\n        }\n      }\n\n      this.axis.updateTooltip(\"vertical\", {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererX.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    label.isMeasured = !label.inside;\n    var deltaY = 0;\n    var verticalCenter;\n    var maxHeight = this.gridContainer.maxHeight;\n\n    if (this.opposite) {\n      if (label.inside) {\n        verticalCenter = \"top\";\n\n        if (label.valign == \"bottom\") {\n          deltaY = maxHeight;\n          verticalCenter = \"bottom\";\n        }\n\n        if (label.valign == \"middle\") {\n          deltaY = maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"bottom\";\n      }\n\n      point.y = deltaY;\n    } else {\n      if (label.inside) {\n        verticalCenter = \"bottom\";\n\n        if (label.valign == \"top\") {\n          deltaY = -maxHeight;\n          verticalCenter = \"top\";\n        }\n\n        if (label.valign == \"middle\") {\n          deltaY = -maxHeight / 2;\n          verticalCenter = \"middle\";\n        }\n      } else {\n        verticalCenter = \"top\";\n      }\n\n      point.y += deltaY;\n    }\n\n    if (label.rotation == 0) {\n      // Apply fuzzy logic to verticalCenter only if labels are not rotated\n      label.verticalCenter = verticalCenter;\n    }\n\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n\n  Object.defineProperty(AxisRendererX.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      var axis = this.axis;\n      return axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererX.prototype.positionToPoint = function (position, position2) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererX.prototype.pointToPosition = function (point) {\n    return this.coordinateToPosition(point.x, point.y);\n  };\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n\n  AxisRendererX.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var x1 = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\n    var x2 = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\n    var w = Math.abs(x2 - x1);\n    var h = this.getHeight();\n    var x = Math.min(x1, x2);\n    var y = 0;\n    return $path.rectToPath({\n      x: x,\n      y: y,\n      width: w,\n      height: h\n    }, true);\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererX.prototype.updateBreakElement = function (axisBreak) {\n    _super.prototype.updateBreakElement.call(this, axisBreak);\n\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    var y1 = axisBreak.pixelMarginLeft;\n    var y2 = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\n    startPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\n    endPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\n\n    if (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\n      axisBreak.fillShape.__disabled = true;\n    } else {\n      axisBreak.fillShape.__disabled = false;\n    }\n\n    startLine.y = y1;\n    startLine.width = 0;\n    startLine.height = y2;\n    endLine.y = y1;\n    endLine.width = 0;\n    endLine.height = y2;\n    fillShape.height = y2;\n    fillShape.width = Math.abs(endPoint.x - startPoint.x);\n    fillShape.y = y1;\n    fillShape.x = startPoint.x;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position); //point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\n\n    grid.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: this.getHeight()\n    });\n    this.positionItem(grid, point);\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick         Tick element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n    var tickLength = tick.length;\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n\n    if (this.opposite) {\n      tickLength *= tick.inside ? 1 : -1;\n    } else {\n      tickLength *= tick.inside ? -1 : 1;\n    }\n\n    tick.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: 0,\n      y: tickLength\n    });\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: 0,\n      y: 0\n    }) + $path.lineTo({\n      x: this.axisLength,\n      y: 0\n    });\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererX.prototype.updateBaseGridElement = function () {\n    _super.prototype.updateBaseGridElement.call(this);\n\n    var axis = this.axis;\n    var h = this.getHeight();\n    var w = this.axisLength;\n    var baseGrid = this.baseGrid;\n    var x = axis.basePoint.x;\n\n    if (x < -0.2 || x > w + 0.2) {\n      baseGrid.hide(0);\n    } else {\n      var y = $utils.spritePointToSprite({\n        x: 0,\n        y: 0\n      }, this.gridContainer, baseGrid.parent).y;\n      baseGrid.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: 0,\n        y: h\n      });\n      baseGrid.moveTo({\n        x: x,\n        y: y\n      });\n      baseGrid.show(0);\n    }\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererX.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedLine();\n    axisBreak.endLine = new WavedLine();\n    var wavedRectangle = new WavedRectangle();\n    wavedRectangle.setWavedSides(false, true, false, true);\n    axisBreak.fillShape = wavedRectangle;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  AxisRendererX.prototype.toAxisPosition = function (value) {\n    var inversedPosition = value;\n    var axis = this.axis;\n\n    if (axis) {\n      var relativePositionSprite = axis.relativePositionSprite;\n      var x = axis.pixelX;\n\n      if (relativePositionSprite) {\n        x = $utils.spritePointToSprite({\n          x: this.pixelX,\n          y: 0\n        }, this.parent, relativePositionSprite).x;\n      } else {\n        relativePositionSprite = axis.parent;\n      }\n\n      if (relativePositionSprite) {\n        var relativeX = x / relativePositionSprite.innerWidth;\n        var relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\n        return (inversedPosition - relativeX) / relativeWidth;\n      }\n    }\n\n    return value;\n  };\n  /**\r\n   * Updates and positions axis bullets.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererX.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    point.y = $utils.spritePointToSprite({\n      x: 0,\n      y: this.line.pixelY\n    }, this.line.parent, this.gridContainer).y;\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n\n  return AxisRendererX;\n}(AxisRenderer);\n\nexport { AxisRendererX };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\n/**\r\n * Add default responsive rules\r\n */\n\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.inside = true;\n      state.properties.maxLabelPosition = 0.9;\n      state.properties.minLabelPosition = 0.1;\n      return state;\n    }\n\n    return null;\n  }\n});\n/**\r\n * Disable labels altogather on very small charts\r\n */\n\ndefaultRules.push({\n  relevant: ResponsiveBreakpoints.heightXXS,\n  state: function (target, stateId) {\n    if (target instanceof AxisRendererX) {\n      var state = target.states.create(stateId);\n      state.properties.disabled = true;\n      return state;\n    }\n\n    return null;\n  }\n});","map":{"version":3,"mappings":"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","names":["AxisRenderer","AxisBullet","WavedLine","WavedRectangle","registry","percent","Percent","$math","$path","$utils","$type","defaultRules","ResponsiveBreakpoints","__extends","_super","_this","className","minGridDistance","opposite","rotation","width","labels","template","horizontalCenter","applyTheme","AxisRendererX","axis","setAxis","call","layout","gridContainer","x","pixelX","axisLength","processRenderer","used","line","title","align","toFront","toBack","bigNum","bbx","bby","pixelY","bbw","bbh","inside","updateTooltip","y","height","label","position","endPosition","location","hasValue","point","positionToPoint","isMeasured","deltaY","verticalCenter","maxHeight","valign","positionItem","toggleVisibility","minLabelPosition","maxLabelPosition","Object","measuredWidth","pixelPaddingRight","pixelPaddingLeft","position2","positionToCoordinate","coordinateToPosition","startPosition","x1","fitToRange","x2","w","Math","abs","h","getHeight","min","rectToPath","axisBreak","updateBreakElement","startLine","endLine","fillShape","startPoint","endPoint","y1","pixelMarginLeft","y2","pixelMarginTop","pixelMarginBottom","__disabled","grid","path","moveTo","lineTo","tick","tickLength","length","spritePointToSprite","parent","updateBaseGridElement","baseGrid","basePoint","hide","show","wavedRectangle","setWavedSides","value","inversedPosition","relativePositionSprite","relativeX","innerWidth","relativeWidth","bullet","registeredClasses","push","relevant","heightXS","state","target","stateId","states","create","properties","heightXXS","disabled"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/AxisRendererX.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for vertical axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Grid } from \"./Grid\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\nimport { WavedLine } from \"../../core/elements/WavedLine\";\r\nimport { WavedRectangle } from \"../../core/elements/WavedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { VerticalCenter } from \"../../core/defs/VerticalCenter\";\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXProperties extends IAxisRendererProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX]].\r\n */\r\nexport interface IAxisRendererXEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererXAdapters extends IAxisRendererAdapters, IAxisRendererXProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for horizontal axis.\r\n *\r\n * @see {@link IAxisRendererEvents} for a list of available events\r\n * @see {@link IAxisRendererAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererXProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererXAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererXEvents;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"AxisRendererX\";\r\n\r\n\t\tthis.minGridDistance = 120;\r\n\r\n\t\tthis.opposite = false;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.width = percent(100);\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.layout = \"vertical\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic updateGridContainer() {\r\n\t\tlet axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet gridContainer = this.gridContainer;\r\n\t\t\tgridContainer.x = axis.pixelX;\r\n\t\t\tgridContainer.width = axis.axisLength;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when rendered is attached to an Axis, as well as a property of\r\n\t * Axis that might affect the appearance is updated.\r\n\t *\r\n\t * E.g. `axis.opposite`, `axis.inside`, etc.\r\n\t *\r\n\t * This method is called **before** draw, so that any related setting\r\n\t * changed in this method can be changed.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processRenderer(): void {\r\n\t\tsuper.processRenderer();\r\n\r\n\t\t// can not do this in init, as axis is set later\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tif (!(axis.width instanceof Percent)) {\r\n\t\t\t\taxis.width = percent(100);\r\n\t\t\t}\r\n\r\n\t\t\t// @todo Is thi sneeded?\r\n\t\t\t$utils.used(this.line);\r\n\r\n\t\t\tlet title: Label = axis.title;\r\n\t\t\ttitle.rotation = 0;\r\n\t\t\ttitle.align = \"center\";\r\n\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tthis.line.toFront();\r\n\t\t\t\ttitle.toBack();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttitle.toFront();\r\n\t\t\t\tthis.toBack();\r\n\t\t\t\tthis.line.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip() {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\t\t\tlet bigNum: number = 1000;\r\n\t\t\tlet bbx: number = this.line.pixelX;\r\n\t\t\tlet bby: number = this.line.pixelY;\r\n\t\t\tlet bbw: number = this.axisLength;\r\n\r\n\t\t\tlet bbh: number = bigNum;\r\n\r\n\t\t\t// top\r\n\t\t\tif (this.opposite) {\r\n\t\t\t\tif (!this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// bottom\r\n\t\t\telse {\r\n\t\t\t\tif (this.inside) {\r\n\t\t\t\t\tbby = - bigNum;\r\n\t\t\t\t\tbbh = bigNum;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.axis.updateTooltip(\"vertical\", { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: AxisLabel, position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlabel.isMeasured = !label.inside;\r\n\r\n\t\tlet deltaY = 0;\r\n\t\tlet verticalCenter: VerticalCenter;\r\n\t\tlet maxHeight = this.gridContainer.maxHeight;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\tif (label.valign == \"bottom\") {\r\n\t\t\t\t\tdeltaY = maxHeight;\r\n\t\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y = deltaY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (label.inside) {\r\n\t\t\t\tverticalCenter = \"bottom\";\r\n\t\t\t\tif (label.valign == \"top\") {\r\n\t\t\t\t\tdeltaY = -maxHeight;\r\n\t\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t\t}\r\n\t\t\t\tif (label.valign == \"middle\") {\r\n\t\t\t\t\tdeltaY = -maxHeight / 2;\r\n\t\t\t\t\tverticalCenter = \"middle\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tverticalCenter = \"top\";\r\n\t\t\t}\r\n\r\n\t\t\tpoint.y += deltaY;\r\n\t\t}\r\n\r\n\t\tif (label.rotation == 0) {\r\n\t\t\t// Apply fuzzy logic to verticalCenter only if labels are not rotated\r\n\t\t\tlabel.verticalCenter = verticalCenter;\r\n\t\t}\r\n\r\n\t\tthis.positionItem(label, point);\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\tlet axis = this.axis;\r\n\t\treturn (axis.measuredWidth - axis.pixelPaddingRight - axis.pixelPaddingLeft) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\treturn { x: this.positionToCoordinate(position), y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\treturn this.coordinateToPosition(point.x, point.y);\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet x1: number = $math.fitToRange(this.positionToCoordinate(startPosition), 0, this.axisLength);\r\n\t\tlet x2: number = $math.fitToRange(this.positionToCoordinate(endPosition), 0, this.axisLength);\r\n\r\n\t\tlet w: number = Math.abs(x2 - x1);\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet x: number = Math.min(x1, x2);\r\n\t\tlet y: number = 0;\r\n\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: x,\r\n\t\t\ty: y,\r\n\t\t\twidth: w,\r\n\t\t\theight: h\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak): void {\r\n\t\tsuper.updateBreakElement(axisBreak);\r\n\r\n\t\tlet startLine = axisBreak.startLine;\r\n\t\tlet endLine = axisBreak.endLine;\r\n\t\tlet fillShape = axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tlet y1: number = axisBreak.pixelMarginLeft;\r\n\t\tlet y2: number = this.getHeight() - axisBreak.pixelMarginTop - axisBreak.pixelMarginBottom;\r\n\r\n\t\tstartPoint.x = $math.fitToRange(startPoint.x, -1, this.axisLength + 1);\r\n\t\tendPoint.x = $math.fitToRange(endPoint.x, -1, this.axisLength + 1);\r\n\r\n\t\tif (startPoint.x == endPoint.x && (startPoint.x < 0 || startPoint.x > this.axisLength)) {\r\n\t\t\taxisBreak.fillShape.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxisBreak.fillShape.__disabled = false;\r\n\t\t}\r\n\r\n\t\tstartLine.y = y1;\r\n\t\tstartLine.width = 0;\r\n\t\tstartLine.height = y2;\r\n\r\n\t\tendLine.y = y1;\r\n\t\tendLine.width = 0;\r\n\t\tendLine.height = y2;\r\n\r\n\t\tfillShape.height = y2;\r\n\t\tfillShape.width = Math.abs(endPoint.x - startPoint.x);\r\n\t\tfillShape.y = y1;\r\n\t\tfillShape.x = startPoint.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t//point.x = $utils.spritePointToSprite({x:point.x, y:0}, this, this.gridContainer).x;\r\n\r\n\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.getHeight() });\r\n\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tlet tickLength = tick.length;\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tif (this.opposite) {\r\n\t\t\ttickLength *= (tick.inside ? 1 : -1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttickLength *= (tick.inside ? -1 : 1);\r\n\t\t}\r\n\r\n\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: tickLength });\r\n\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine(): void {\r\n\t\tthis.line.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.axisLength, y: 0 });\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet h: number = this.getHeight();\r\n\t\tlet w: number = this.axisLength;\r\n\t\tlet baseGrid: Sprite = this.baseGrid;\r\n\r\n\t\tlet x: number = axis.basePoint.x;\r\n\t\tif (x < -0.2 || x > w + 0.2) {\r\n\t\t\tbaseGrid.hide(0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet y = $utils.spritePointToSprite({ x: 0, y: 0 }, this.gridContainer, baseGrid.parent).y;\r\n\t\t\tbaseGrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t\t\tbaseGrid.moveTo({ x: x, y: y });\r\n\t\t\tbaseGrid.show(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedLine();\r\n\t\taxisBreak.endLine = new WavedLine();\r\n\t\tlet wavedRectangle: WavedRectangle = new WavedRectangle();\r\n\t\twavedRectangle.setWavedSides(false, true, false, true);\r\n\t\taxisBreak.fillShape = wavedRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic toAxisPosition(value: number): number {\r\n\t\tlet inversedPosition = value;\r\n\t\tlet axis = this.axis;\r\n\r\n\t\tif (axis) {\r\n\t\t\tlet relativePositionSprite = axis.relativePositionSprite;\r\n\r\n\t\t\tlet x = axis.pixelX;\r\n\t\t\tif (relativePositionSprite) {\r\n\t\t\t\tx = $utils.spritePointToSprite({ x: this.pixelX, y: 0 }, this.parent, relativePositionSprite).x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trelativePositionSprite = axis.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif(relativePositionSprite){\r\n\t\t\t\tlet relativeX = x / relativePositionSprite.innerWidth;\r\n\t\t\t\tlet relativeWidth = axis.axisLength / relativePositionSprite.innerWidth;\r\n\r\n\t\t\t\treturn (inversedPosition - relativeX) / relativeWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullets.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tpoint.y = $utils.spritePointToSprite({ x: 0, y: this.line.pixelY }, this.line.parent, this.gridContainer).y;\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX\"] = AxisRendererX;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Put labels inside plot area.\r\n * Disable first and last labels.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.inside = true;\r\n\t\t\tstate.properties.maxLabelPosition = 0.9;\r\n\t\t\tstate.properties.minLabelPosition = 0.1;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Disable labels altogather on very small charts\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.heightXXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof AxisRendererX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});"]},"metadata":{},"sourceType":"module"}