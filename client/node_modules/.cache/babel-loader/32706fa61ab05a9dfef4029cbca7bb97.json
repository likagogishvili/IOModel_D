{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Chart } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * A base class for all series-based charts.\r\n */\n\nvar SerialChart =\n/** @class */\nfunction (_super) {\n  __extends(SerialChart, _super);\n\n  function SerialChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * A [[Container]] where chart will store all series.\r\n     *\r\n     * @default Container.new()\r\n     */\n\n\n    Object.defineProperty(_this, \"seriesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(_this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A list of chart's series.\r\n     */\n\n    Object.defineProperty(_this, \"series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(SerialChart.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._afterNew.call(this);\n\n      this._disposers.push(this.series);\n\n      var children = this.seriesContainer.children;\n\n      this._disposers.push(this.series.events.onAll(function (change) {\n        if (change.type === \"clear\") {\n          $array.each(change.oldValues, function (series) {\n            _this._removeSeries(series);\n          });\n\n          var colors = _this.get(\"colors\");\n\n          if (colors) {\n            colors.reset();\n          }\n        } else if (change.type === \"push\") {\n          children.moveValue(change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"setIndex\") {\n          children.setIndex(change.index, change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"insertIndex\") {\n          children.insertIndex(change.index, change.newValue);\n\n          _this._processSeries(change.newValue);\n        } else if (change.type === \"removeIndex\") {\n          _this._removeSeries(change.oldValue);\n        } else if (change.type === \"moveIndex\") {\n          children.moveValue(change.value, change.newIndex);\n\n          _this._processSeries(change.value);\n        } else {\n          throw new Error(\"Unknown IListEvent type\");\n        }\n      }));\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_processSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      series.chart = this;\n\n      series._placeBulletsContainer(this);\n    }\n  });\n  Object.defineProperty(SerialChart.prototype, \"_removeSeries\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (series) {\n      if (!series.isDisposed()) {\n        this.seriesContainer.children.removeValue(series);\n\n        series._removeBulletsContainer();\n      }\n    }\n  });\n  Object.defineProperty(SerialChart, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"SerialChart\"\n  });\n  Object.defineProperty(SerialChart, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Chart.classNames.concat([SerialChart.className])\n  });\n  return SerialChart;\n}(Chart);\n\nexport { SerialChart };","map":{"version":3,"mappings":"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","names":["Chart","Container","ListAutoDispose","p100","$array","__extends","Object","new","_this","_root","width","height","isMeasured","_super","_afterNew","call","_disposers","push","series","children","seriesContainer","events","onAll","change","type","each","oldValues","_removeSeries","colors","get","reset","moveValue","newValue","_processSeries","setIndex","index","insertIndex","oldValue","value","newIndex","Error","chart","_placeBulletsContainer","isDisposed","removeValue","_removeBulletsContainer","classNames","concat","SerialChart","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/SerialChart.ts"],"sourcesContent":["import type { Series } from \"./Series\";\n\nimport { Chart, IChartSettings, IChartPrivate, IChartEvents } from \"./Chart\";\nimport { Container } from \"../../core/render/Container\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\n\nexport interface ISerialChartSettings extends IChartSettings {\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/#Series_colors} for more info\n\t */\n\tcolors?: ColorSet;\n}\n\nexport interface ISerialChartPrivate extends IChartPrivate {\n}\n\nexport interface ISerialChartEvents extends IChartEvents {\n}\n\n/**\n * A base class for all series-based charts.\n */\nexport abstract class SerialChart extends Chart {\n\tpublic static className: string = \"SerialChart\";\n\tpublic static classNames: Array<string> = Chart.classNames.concat([SerialChart.className]);\n\n\tdeclare public _settings: ISerialChartSettings;\n\tdeclare public _privateSettings: ISerialChartPrivate;\n\tdeclare public _seriesType: Series;\n\tdeclare public _events: ISerialChartEvents;\n\n\t/**\n\t * A [[Container]] where chart will store all series.\n\t *\n\t * @default Container.new()\n\t */\n\tpublic readonly seriesContainer: Container = Container.new(this._root, { width: p100, height: p100, isMeasured: false });\n\n\t/**\n\t * A list of chart's series.\n\t */\n\tpublic readonly series: ListAutoDispose<this[\"_seriesType\"]> = new ListAutoDispose();\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis._disposers.push(this.series);\n\n\t\tconst children = this.seriesContainer.children;\n\n\t\tthis._disposers.push(this.series.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (series) => {\n\t\t\t\t\tthis._removeSeries(series);\n\t\t\t\t})\n\t\t\t\tconst colors = this.get(\"colors\");\n\t\t\t\tif (colors) {\n\t\t\t\t\tcolors.reset();\n\t\t\t\t}\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tchildren.moveValue(change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tchildren.setIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tchildren.insertIndex(change.index, change.newValue);\n\t\t\t\tthis._processSeries(change.newValue);\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._removeSeries(change.oldValue);\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tchildren.moveValue(change.value, change.newIndex);\n\t\t\t\tthis._processSeries(change.value);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected _processSeries(series: this[\"_seriesType\"]) {\n\t\tseries.chart = this;\n\t\tseries._placeBulletsContainer(this);\n\t}\n\n\tprotected _removeSeries(series: this[\"_seriesType\"]) {\n\t\tif (!series.isDisposed()) {\n\t\t\tthis.seriesContainer.children.removeValue(series);\n\t\t\tseries._removeBulletsContainer();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}