{"ast":null,"code":"/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../Container\";\nimport { Label } from \"./Label\";\nimport { Button } from \"../elements/Button\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { Circle } from \"../../core/elements/Circle\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../Registry\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\n\nvar SwitchButton =\n/** @class */\nfunction (_super) {\n  __extends(SwitchButton, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function SwitchButton() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"SwitchButton\";\n    _this.tooltipY = 0; // Set defaults\n\n    _this.layout = \"horizontal\";\n    _this.contentAlign = \"center\";\n    _this.contentValign = \"middle\";\n\n    _this.padding(8, 16, 8, 16);\n\n    _this.setStateOnChildren = true;\n\n    _this.states.create(\"active\");\n\n    var interfaceColors = new InterfaceColorSet(); // Create the label element\n\n    var leftLabel = new Label();\n    leftLabel.fillOpacity = 0.3;\n    var llas = leftLabel.states.create(\"active\");\n    llas.properties.fillOpacity = 1;\n    leftLabel.isActive = true;\n    _this.leftLabel = leftLabel;\n    var button = new Button();\n    var circle = new Circle();\n    button.contentValign = \"none\";\n    button.padding(0, 0, 0, 0);\n    circle.radius = 10;\n    button.icon = circle;\n    button.icon.valign = \"middle\";\n    button.label = undefined;\n    var p100 = percent(100);\n    button.background.cornerRadius(p100, p100, p100, p100);\n    button.width = circle.radius * 3.5;\n    button.height = circle.radius * 2.1;\n    button.marginLeft = 8;\n    button.marginRight = 8;\n    button.togglable = true;\n    circle.dx = -circle.radius * 0.7;\n    circle.fill = interfaceColors.getFor(\"primaryButton\");\n    var hs = circle.states.create(\"hover\");\n    hs.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\n    var as = circle.states.create(\"active\");\n    as.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\n    as.properties.dx = circle.radius * 0.7;\n    _this.switchButton = button;\n\n    _this.events.on(\"toggled\", function () {\n      _this.leftLabel.isActive = !_this.isActive;\n      _this.rightLabel.isActive = _this.isActive;\n    }); // Create the label element\n\n\n    var rightLabel = new Label();\n    rightLabel.fillOpacity = 0.3;\n    var rlas = rightLabel.states.create(\"active\");\n    rlas.properties.fillOpacity = 1;\n    _this.rightLabel = rightLabel; // Set up accessibility\n    // A Button should be always focusable\n\n    _this.role = \"button\";\n    _this.focusable = true;\n    rightLabel.valign = \"middle\";\n    leftLabel.valign = \"middle\";\n    button.valign = \"middle\"; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(SwitchButton.prototype, \"leftLabel\", {\n    /**\r\n     * @return Left label element\r\n     */\n    get: function () {\n      return this._leftLabel;\n    },\n\n    /**\r\n     * [[Label]] element to be used for left text.\r\n     *\r\n     * @param left label element\r\n     */\n    set: function (label) {\n      if (this._leftLabel) {\n        this.removeDispose(this._leftLabel);\n      }\n\n      this._leftLabel = label;\n\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        label.shouldClone = false;\n\n        this._disposers.push(this._leftLabel);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"rightLabel\", {\n    /**\r\n     * @return Rigth label element\r\n     */\n    get: function () {\n      return this._rightLabel;\n    },\n\n    /**\r\n     * [[Label]] element to be used for left text.\r\n     *\r\n     * @param rigth label element\r\n     */\n    set: function (label) {\n      if (this._rightLabel) {\n        this.removeDispose(this._rightLabel);\n      }\n\n      this._rightLabel = label;\n\n      if (label) {\n        label.parent = this;\n        label.interactionsEnabled = false;\n        label.shouldClone = false;\n\n        this._disposers.push(this._rightLabel);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"switch\", {\n    /**\r\n     * @ignore\r\n     * @deprecated Use `switchButton` instead\r\n     */\n    get: function () {\n      return this._switchButton;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SwitchButton.prototype, \"switchButton\", {\n    /**\r\n     * @return Button\r\n     */\n    get: function () {\n      return this._switchButton;\n    },\n\n    /**\r\n     * A [[Button]] element for switch.\r\n     *\r\n     * @param Button\r\n     */\n    set: function (button) {\n      if (this._switchButton) {\n        this.removeDispose(this._switchButton);\n      }\n\n      this._switchButton = button;\n\n      if (button) {\n        button.parent = this;\n        button.shouldClone = false;\n\n        this._disposers.push(this._switchButton);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies properties and other attributes.\r\n   *\r\n   * @param source  Source\r\n   */\n\n  SwitchButton.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source.leftLabel) {\n      this.leftLabel.copyFrom(source.leftLabel);\n    }\n\n    if (source.rightLabel) {\n      this.rightLabel.copyFrom(source.rightLabel);\n    }\n\n    if (source.switchButton) {\n      this.switchButton.copyFrom(source.switchButton);\n    }\n  };\n\n  return SwitchButton;\n}(Container);\n\nexport { SwitchButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;","map":{"version":3,"mappings":"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","names":["Container","Label","Button","InterfaceColorSet","Circle","percent","registry","__extends","_super","_this","className","tooltipY","layout","contentAlign","contentValign","padding","setStateOnChildren","states","create","interfaceColors","leftLabel","fillOpacity","llas","properties","isActive","button","circle","radius","icon","valign","label","undefined","p100","background","cornerRadius","width","height","marginLeft","marginRight","togglable","dx","fill","getFor","hs","as","switchButton","events","on","rightLabel","rlas","role","focusable","applyTheme","Object","SwitchButton","_leftLabel","removeDispose","parent","interactionsEnabled","shouldClone","_disposers","push","_rightLabel","_switchButton","source","copyFrom","call","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/SwitchButton.ts"],"sourcesContent":["/**\r\n * Functionality for drawing simple SwitchButtons.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../Container\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { Label } from \"./Label\";\r\nimport { RoundedRectangle } from \"../elements/RoundedRectangle\";\r\nimport { Button } from \"../elements/Button\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[SwitchButton]].\r\n */\r\nexport interface ISwitchButtonEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SwitchButton]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISwitchButtonAdapters extends IContainerAdapters, ISwitchButtonProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * SwitchButton class is capable of drawing a simple rectangular SwitchButton with\r\n * optionally rounded corners and an icon in it.\r\n *\r\n * @see {@link ISwitchButtonEvents} for a list of available events\r\n * @see {@link ISwitchButtonAdapters} for a list of available Adapters\r\n */\r\nexport class SwitchButton extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISwitchButtonProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISwitchButtonAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISwitchButtonEvents;\r\n\r\n\t/**\r\n\t * Icon reference.\r\n\t */\r\n\tprotected _icon: Sprite;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _leftLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * [[Label]] element for SwitchButton content.\r\n\t */\r\n\tprotected _rightLabel: $type.Optional<Label>;\r\n\r\n\t/**\r\n\t * A type for background.\r\n\t */\r\n\tpublic _background: RoundedRectangle;\r\n\r\n\tprotected _switchButton: Button;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SwitchButton\";\r\n\r\n\t\tthis.tooltipY = 0;\r\n\r\n\t\t// Set defaults\r\n\t\tthis.layout = \"horizontal\";\r\n\t\tthis.contentAlign = \"center\";\r\n\t\tthis.contentValign = \"middle\";\r\n\t\tthis.padding(8, 16, 8, 16);\r\n\t\tthis.setStateOnChildren = true;\r\n\t\tthis.states.create(\"active\");\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create the label element\r\n\t\tlet leftLabel = new Label();\r\n\t\tleftLabel.fillOpacity = 0.3;\r\n\t\tlet llas = leftLabel.states.create(\"active\");\r\n\t\tllas.properties.fillOpacity = 1;\r\n\t\tleftLabel.isActive = true;\r\n\t\tthis.leftLabel = leftLabel;\r\n\r\n\t\tlet button = new Button();\r\n\t\tlet circle = new Circle();\r\n\t\tbutton.contentValign = \"none\";\r\n\t\tbutton.padding(0, 0, 0, 0);\r\n\t\tcircle.radius = 10;\r\n\t\tbutton.icon = circle;\r\n\t\tbutton.icon.valign = \"middle\";\r\n\t\tbutton.label = undefined;\r\n\t\tlet p100 = percent(100);\r\n\t\tbutton.background.cornerRadius(p100, p100, p100, p100);\r\n\t\tbutton.width = circle.radius * 3.5;\r\n\t\tbutton.height = circle.radius * 2.1;\r\n\t\tbutton.marginLeft = 8;\r\n\t\tbutton.marginRight = 8;\r\n\t\tbutton.togglable = true;\r\n\t\tcircle.dx = -circle.radius * 0.7;\r\n\t\tcircle.fill = interfaceColors.getFor(\"primaryButton\");\r\n\r\n\t\tlet hs = circle.states.create(\"hover\");\r\n\t\ths.properties.fill = interfaceColors.getFor(\"primaryButtonHover\");\r\n\r\n\t\tlet as = circle.states.create(\"active\");\r\n\t\tas.properties.fill = interfaceColors.getFor(\"primaryButtonActive\");\r\n\t\tas.properties.dx = circle.radius * 0.7;\r\n\r\n\t\tthis.switchButton = button;\r\n\r\n\t\tthis.events.on(\"toggled\", () => {\r\n\t\t\tthis.leftLabel.isActive = !this.isActive;\r\n\t\t\tthis.rightLabel.isActive = this.isActive;\r\n\t\t})\r\n\r\n\t\t// Create the label element\r\n\t\tlet rightLabel = new Label();\r\n\t\trightLabel.fillOpacity = 0.3;\r\n\r\n\t\tlet rlas = rightLabel.states.create(\"active\");\r\n\t\trlas.properties.fillOpacity = 1;\r\n\t\tthis.rightLabel = rightLabel;\r\n\r\n\t\t// Set up accessibility\r\n\t\t// A Button should be always focusable\r\n\t\tthis.role = \"button\";\r\n\t\tthis.focusable = true;\r\n\r\n\t\trightLabel.valign = \"middle\";\r\n\t\tleftLabel.valign = \"middle\";\r\n\t\tbutton.valign = \"middle\"\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param left label element\r\n\t */\r\n\tpublic set leftLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._leftLabel) {\r\n\t\t\tthis.removeDispose(this._leftLabel);\r\n\t\t}\r\n\t\tthis._leftLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._leftLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Left label element\r\n\t */\r\n\tpublic get leftLabel(): $type.Optional<Label> {\r\n\t\treturn this._leftLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element to be used for left text.\r\n\t *\r\n\t * @param rigth label element\r\n\t */\r\n\tpublic set rightLabel(label: $type.Optional<Label>) {\r\n\t\tif (this._rightLabel) {\r\n\t\t\tthis.removeDispose(this._rightLabel);\r\n\t\t}\r\n\t\tthis._rightLabel = label;\r\n\t\tif (label) {\r\n\t\t\tlabel.parent = this;\r\n\t\t\tlabel.interactionsEnabled = false;\r\n\t\t\tlabel.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._rightLabel);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rigth label element\r\n\t */\r\n\tpublic get rightLabel(): $type.Optional<Label> {\r\n\t\treturn this._rightLabel;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @deprecated Use `switchButton` instead\r\n\t */\r\n\tpublic get switch(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element for switch.\r\n\t *\r\n\t * @param Button\r\n\t */\r\n\tpublic set switchButton(button: $type.Optional<Button>) {\r\n\t\tif (this._switchButton) {\r\n\t\t\tthis.removeDispose(this._switchButton);\r\n\t\t}\r\n\t\tthis._switchButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.parent = this;\r\n\t\t\tbutton.shouldClone = false;\r\n\t\t\tthis._disposers.push(this._switchButton);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Button\r\n\t */\r\n\tpublic get switchButton(): $type.Optional<Button> {\r\n\t\treturn this._switchButton;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and other attributes.\r\n\t *\r\n\t * @param source  Source\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (source.leftLabel) {\r\n\t\t\tthis.leftLabel.copyFrom(source.leftLabel)\r\n\t\t}\r\n\t\tif (source.rightLabel) {\r\n\t\t\tthis.rightLabel.copyFrom(source.rightLabel)\r\n\t\t}\r\n\t\tif (source.switchButton) {\r\n\t\t\tthis.switchButton.copyFrom(source.switchButton)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SwitchButton\"] = SwitchButton;\r\n"]},"metadata":{},"sourceType":"module"}