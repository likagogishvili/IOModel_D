{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\n/**\r\n * A vertical children layout for [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\r\n */\n\nvar VerticalLayout =\n/** @class */\nfunction (_super) {\n  __extends(VerticalLayout, _super);\n\n  function VerticalLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(VerticalLayout.prototype, \"updateContainer\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (container) {\n      var paddingTop = container.get(\"paddingTop\", 0);\n      var availableHeight = container.innerHeight();\n      var totalPercent = 0;\n      eachChildren(container, function (child) {\n        if (child.isVisible()) {\n          if (child.get(\"position\") == \"relative\") {\n            var childHeight = child.get(\"height\");\n\n            if (childHeight instanceof Percent) {\n              totalPercent += childHeight.value;\n              var h = availableHeight * childHeight.value;\n              var minHeight = child.get(\"minHeight\", -Infinity);\n\n              if (minHeight > h) {\n                availableHeight -= minHeight;\n                totalPercent -= childHeight.value;\n              }\n\n              var maxHeight = child.get(\"maxHeight\", Infinity);\n\n              if (h > maxHeight) {\n                availableHeight -= maxHeight;\n                totalPercent -= childHeight.value;\n              }\n            } else {\n              if (!$type.isNumber(childHeight)) {\n                childHeight = child.height();\n              }\n\n              availableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n            }\n          }\n        }\n      });\n\n      if (availableHeight > 0) {\n        eachChildren(container, function (child) {\n          if (child.isVisible()) {\n            if (child.get(\"position\") == \"relative\") {\n              var childHeight = child.get(\"height\");\n\n              if (childHeight instanceof Percent) {\n                var privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n                var minHeight = child.get(\"minHeight\", -Infinity);\n                var maxHeight = child.get(\"maxHeight\", Infinity);\n                privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n                child.setPrivate(\"height\", privateHeight);\n              }\n            }\n          }\n        });\n      }\n\n      var prevY = paddingTop;\n      eachChildren(container, function (child) {\n        if (child.get(\"position\") == \"relative\") {\n          if (child.isVisible()) {\n            var bounds = child.adjustedLocalBounds();\n            var marginTop = child.get(\"marginTop\", 0);\n            var marginBottom = child.get(\"marginBottom\", 0);\n            var y = prevY + marginTop - bounds.top;\n            child.setPrivate(\"y\", y);\n            prevY = y + bounds.bottom + marginBottom;\n          } else {\n            child.setPrivate(\"y\", undefined);\n          }\n        }\n      });\n    }\n  });\n  Object.defineProperty(VerticalLayout, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"VerticalLayout\"\n  });\n  Object.defineProperty(VerticalLayout, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Layout.classNames.concat([VerticalLayout.className])\n  });\n  return VerticalLayout;\n}(Layout);\n\nexport { VerticalLayout };","map":{"version":3,"mappings":"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","names":["Layout","eachChildren","$type","Percent","__extends","container","paddingTop","get","availableHeight","innerHeight","totalPercent","child","isVisible","childHeight","value","h","minHeight","Infinity","maxHeight","isNumber","height","privateHeight","Math","min","max","setPrivate","prevY","bounds","adjustedLocalBounds","marginTop","marginBottom","y","top","bottom","undefined","Object","classNames","concat","VerticalLayout","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/VerticalLayout.ts"],"sourcesContent":["import { Layout, eachChildren } from \"./Layout\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { Container } from \"./Container\";\n\n\n/**\n * A vertical children layout for [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/#Layout} for more info\n */\nexport class VerticalLayout extends Layout {\n\n\tpublic static className: string = \"VerticalLayout\";\n\tpublic static classNames: Array<string> = Layout.classNames.concat([VerticalLayout.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateContainer(container: Container): void {\n\t\tlet paddingTop = container.get(\"paddingTop\", 0);\n\n\t\tlet availableHeight = container.innerHeight();\n\t\tlet totalPercent = 0;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.isVisible()) {\n\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\tlet childHeight = child.get(\"height\");\n\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\ttotalPercent += childHeight.value;\n\n\t\t\t\t\t\tlet h = availableHeight * childHeight.value;\n\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", -Infinity);\n\t\t\t\t\t\tif (minHeight > h) {\n\t\t\t\t\t\t\tavailableHeight -= minHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", Infinity);\n\t\t\t\t\t\tif (h > maxHeight) {\n\t\t\t\t\t\t\tavailableHeight -= maxHeight;\n\t\t\t\t\t\t\ttotalPercent -= childHeight.value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (!$type.isNumber(childHeight)) {\n\t\t\t\t\t\t\tchildHeight = child.height();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tavailableHeight -= childHeight + child.get(\"marginTop\", 0) + child.get(\"marginBottom\", 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\tif (availableHeight > 0) {\n\t\t\teachChildren(container, (child) => {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\t\t\tlet childHeight = child.get(\"height\");\n\n\t\t\t\t\t\tif (childHeight instanceof Percent) {\n\t\t\t\t\t\t\tlet privateHeight = availableHeight * childHeight.value / totalPercent - child.get(\"marginTop\", 0) - child.get(\"marginBottom\", 0);\n\n\t\t\t\t\t\t\tlet minHeight = child.get(\"minHeight\", -Infinity);\n\t\t\t\t\t\t\tlet maxHeight = child.get(\"maxHeight\", Infinity);\n\t\t\t\t\t\t\tprivateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);\n\n\t\t\t\t\t\t\tchild.setPrivate(\"height\", privateHeight);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tlet prevY = paddingTop;\n\n\t\teachChildren(container, (child) => {\n\t\t\tif (child.get(\"position\") == \"relative\") {\n\t\t\t\tif (child.isVisible()) {\n\t\t\t\t\tlet bounds = child.adjustedLocalBounds();\n\t\t\t\t\tlet marginTop = child.get(\"marginTop\", 0);\n\t\t\t\t\tlet marginBottom = child.get(\"marginBottom\", 0);\n\t\t\t\t\tlet y = prevY + marginTop - bounds.top;\n\t\t\t\t\tchild.setPrivate(\"y\", y);\n\t\t\t\t\tprevY = y + bounds.bottom + marginBottom;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tchild.setPrivate(\"y\", undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}