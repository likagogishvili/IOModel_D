{"ast":null,"code":"/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { XYChart, XYChartDataItem } from \"./XYChart\";\nimport { registry } from \"../../core/Registry\";\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\nimport { ColorSet } from \"../../core/utils/ColorSet\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $array from \"../../core/utils/Array\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar TreeMapDataItem =\n/** @class */\nfunction (_super) {\n  __extends(TreeMapDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMapDataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * Required for squarify functionality.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n\n    _this.rows = [];\n    _this.className = \"TreeMapDataItem\";\n    _this.values.value = {\n      workingValue: 0\n    };\n    _this.values.x0 = {};\n    _this.values.y0 = {};\n    _this.values.x1 = {};\n    _this.values.y1 = {};\n    _this.hasChildren.children = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMapDataItem.prototype, \"legendDataItem\", {\n    /**\r\n     * @return Legend data item\r\n     */\n    get: function () {\n      return this._legendDataItem;\n    },\n\n    /**\r\n     * A legend's data item, that corresponds to this data item.\r\n     *\r\n     * @param value  Legend data item\r\n     */\n    set: function (value) {\n      this._legendDataItem = value;\n\n      if (value.label) {\n        value.label.dataItem = this;\n      }\n\n      if (value.valueLabel) {\n        value.valueLabel.dataItem = this;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n\n  TreeMapDataItem.prototype.getDuration = function () {\n    return 0;\n  };\n\n  Object.defineProperty(TreeMapDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      var value = 0;\n\n      if (!this.children || this.children.length == 0) {\n        value = this.values[\"value\"].workingValue;\n      } else {\n        $iter.each(this.children.iterator(), function (child) {\n          var childValue = child.value;\n\n          if ($type.isNumber(childValue)) {\n            value += childValue;\n          }\n        });\n      }\n\n      return value;\n      /*\r\n      let value = this.values[\"value\"].workingValue;\r\n            if (!$type.isNumber(value)) {\r\n          value = 0;\r\n          if (this.children) {\r\n              $iter.each(this.children.iterator(), (child) => {\r\n                  if ($type.isNumber(child.value)) {\r\n                      value += child.value;\r\n                  }\r\n              });\r\n          }\r\n      }\r\n      return value;*/\n    },\n\n    /**\r\n     * Numeric value of the item.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"percent\", {\n    /**\r\n     * Percent value of a node\r\n     */\n    get: function () {\n      if (this.parent) {\n        return this.value / this.parent.value * 100;\n      }\n\n      return 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x0\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x0.value;\n    },\n\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.values.x1.value;\n    },\n\n    /**\r\n     * Item's X position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  X\r\n     */\n    set: function (value) {\n      this.setValue(\"x1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y0\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y0.value;\n    },\n\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y0\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.values.y1.value;\n    },\n\n    /**\r\n     * Item's Y position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @param value  Y\r\n     */\n    set: function (value) {\n      this.setValue(\"y1\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"name\", {\n    /**\r\n     * @return Name\r\n     */\n    get: function () {\n      return this.properties.name;\n    },\n\n    /**\r\n     * Item's name.\r\n     *\r\n     * @param name  Name\r\n     */\n    set: function (name) {\n      this.setProperty(\"name\", name);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"children\", {\n    /**\r\n     * @return Item's children\r\n     */\n    get: function () {\n      return this.properties.children;\n    },\n\n    /**\r\n     * A list of item's sub-children.\r\n     *\r\n     * Having children means that the TreeMap chat will automatically be\r\n     * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n     * display its children.\r\n     *\r\n     * Treemap can have any level of nesting.\r\n     *\r\n     * @param children  Item's children\r\n     */\n    set: function (children) {\n      this.setProperty(\"children\", children);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"level\", {\n    /**\r\n     * Depth level in the treemap hierarchy.\r\n     *\r\n     * The top-level item will have level set at 0. Its children will have\r\n     * level 1, and so on.\r\n     *\r\n     * @readonly\r\n     * @return Level\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.level + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"color\", {\n    /**\r\n     * @return Color\r\n     */\n    get: function () {\n      var color = this.properties.color;\n\n      if (color == undefined) {\n        if (this.parent) {\n          color = this.parent.color;\n        }\n      }\n\n      if (color == undefined) {\n        if (this.component) {\n          color = this.component.colors.getIndex(this.component.colors.step * this.index);\n        }\n      }\n\n      return color;\n    },\n\n    /**\r\n     * Item's color.\r\n     *\r\n     * If not set, will use parent's color, or, if that is not set either,\r\n     * automatically assigned color from chart's color set. (`chart.colors`)\r\n     *\r\n     * @param value  Color\r\n     */\n    set: function (value) {\n      this.setProperty(\"color\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"fill\", {\n    /**\r\n     * @ignore\r\n     * For the legend to work properly\r\n     */\n    get: function () {\n      return this.color;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMapDataItem.prototype, \"series\", {\n    get: function () {\n      return this._series;\n    },\n\n    /**\r\n     * Series of children data items\r\n     * @todo: proper descrition\r\n     */\n    set: function (series) {\n      if (series != this._series) {\n        if (this._series) {\n          this.component.series.removeValue(this._series);\n\n          this._series.dispose();\n        }\n\n        this._series = series;\n\n        this._disposers.push(series);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n  TreeMapDataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    this.setWorkingValue(\"value\", 0);\n\n    if (this.children) {\n      this.children.each(function (child) {\n        child.hide(duration, delay, toValue, fields);\n      });\n    }\n\n    var seriesDataItem = this.seriesDataItem;\n\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.hide();\n        value.preventShow = true;\n      });\n    }\n\n    return _super.prototype.hide.call(this, duration, delay, toValue, fields);\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  TreeMapDataItem.prototype.show = function (duration, delay, fields) {\n    this.setWorkingValue(\"value\", this.values.value.value);\n\n    if (this.children) {\n      this.children.each(function (child) {\n        child.show(duration, delay, fields);\n      });\n    }\n\n    var seriesDataItem = this.seriesDataItem;\n\n    if (seriesDataItem) {\n      seriesDataItem.bullets.each(function (key, value) {\n        value.preventShow = false;\n      });\n    }\n\n    return _super.prototype.show.call(this, duration, delay, fields);\n  };\n\n  return TreeMapDataItem;\n}(XYChartDataItem);\n\nexport { TreeMapDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\n\nvar TreeMap =\n/** @class */\nfunction (_super) {\n  __extends(TreeMap, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function TreeMap() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * An algorithm used to divide area into squares based on their value.\r\n     *\r\n     * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n     *\r\n     * ```TypeScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.layoutAlgorithm = chart.sliceDice;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"layoutAlgorithm\": \"sliceDice\",\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n     * @default squarify\r\n     */\n\n\n    _this.layoutAlgorithm = _this.squarify;\n    /**\r\n     * Is the chart zoomable?\r\n     *\r\n     * If the chart is `zoomable`, and items have sub-items, the chart will\r\n     * drill-down to sub-items when click on their parent item.\r\n     *\r\n     * @default true\r\n     */\n\n    _this.zoomable = true;\n    _this.className = \"TreeMap\";\n    _this._usesData = true;\n    _this.maxLevels = 2;\n    _this.currentLevel = 0;\n    _this.hideParentColumns = false;\n    _this.colors = new ColorSet();\n    _this.sorting = \"descending\"; // create two value axes for the chart\n\n    var xAxis = _this.xAxes.push(new ValueAxis());\n\n    xAxis.title.disabled = true;\n    xAxis.strictMinMax = true;\n    var xRenderer = xAxis.renderer;\n    xRenderer.inside = true;\n    xRenderer.labels.template.disabled = true;\n    xRenderer.ticks.template.disabled = true;\n    xRenderer.grid.template.disabled = true;\n    xRenderer.axisFills.template.disabled = true;\n    xRenderer.minGridDistance = 100;\n    xRenderer.line.disabled = true;\n    xRenderer.baseGrid.disabled = true; //xRenderer.inversed = true;\n\n    var yAxis = _this.yAxes.push(new ValueAxis());\n\n    yAxis.title.disabled = true;\n    yAxis.strictMinMax = true;\n    var yRenderer = yAxis.renderer;\n    yRenderer.inside = true;\n    yRenderer.labels.template.disabled = true;\n    yRenderer.ticks.template.disabled = true;\n    yRenderer.grid.template.disabled = true;\n    yRenderer.axisFills.template.disabled = true;\n    yRenderer.minGridDistance = 100;\n    yRenderer.line.disabled = true;\n    yRenderer.baseGrid.disabled = true;\n    yRenderer.inversed = true; // shortcuts\n\n    _this.xAxis = xAxis;\n    _this.yAxis = yAxis;\n    var template = new TreeMapSeries();\n    _this.seriesTemplates = new DictionaryTemplate(template);\n    template.virtualParent = _this;\n\n    _this._disposers.push(new DictionaryDisposer(_this.seriesTemplates));\n\n    _this._disposers.push(template);\n\n    _this.zoomOutButton.events.on(\"hit\", function () {\n      _this.zoomToChartDataItem(_this._homeDataItem);\n    }, undefined, false);\n\n    _this.seriesTemplates.events.on(\"insertKey\", function (event) {\n      event.newValue.isTemplate = true;\n    }, undefined, false); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(TreeMap.prototype, \"navigationBar\", {\n    /**\r\n     * Returns navigationBar if it is added to a chart\r\n     */\n    get: function () {\n      return this._navigationBar;\n    },\n\n    /**\r\n     * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n     * drill-down path.\r\n     */\n    set: function (navigationBar) {\n      var _this = this;\n\n      if (this._navigationBar != navigationBar) {\n        this._navigationBar = navigationBar;\n        navigationBar.parent = this;\n        navigationBar.toBack();\n        navigationBar.links.template.events.on(\"hit\", function (event) {\n          var dataItem = event.target.dataItem.dataContext;\n\n          if (!dataItem.isDisposed()) {\n            _this.zoomToChartDataItem(dataItem);\n\n            _this.createTreeSeries(dataItem);\n          }\n        }, undefined, true);\n\n        this._disposers.push(navigationBar);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * (Re)validates chart's data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  TreeMap.prototype.validateData = function () {\n    this.series.clear();\n    this._tempSeries = [];\n\n    _super.prototype.validateData.call(this);\n\n    if (this._homeDataItem) {\n      this._homeDataItem.dispose();\n    }\n\n    var homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\n\n    this._homeDataItem = homeDataItem;\n    $iter.each(this.dataItems.iterator(), function (dataItem) {\n      dataItem.parent = homeDataItem;\n    });\n    homeDataItem.children = this.dataItems;\n    homeDataItem.x0 = 0;\n    homeDataItem.y0 = 0;\n    homeDataItem.name = this._homeText;\n    var maxX = 1000;\n    var maxY = Math.round(maxX * this.pixelHeight / this.pixelWidth / 10) * 10 || 1000;\n    homeDataItem.x1 = maxX;\n    homeDataItem.y1 = maxY;\n    this.xAxis.min = 0;\n    this.xAxis.max = maxX;\n    this.xAxis.getMinMax();\n    this.yAxis.min = 0;\n    this.yAxis.max = maxY;\n    this.yAxis.getMinMax();\n    this.layoutItems(homeDataItem);\n    this.createTreeSeries(homeDataItem);\n    this.feedLegend();\n  };\n  /**\r\n   * Layouts and sizes all items according to their value and\r\n   * `layoutAlgorithm`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Parent data item\r\n   */\n\n\n  TreeMap.prototype.layoutItems = function (parent, sorting) {\n    if (parent) {\n      var children = parent.children;\n\n      if (!sorting) {\n        sorting = this.sorting;\n      }\n\n      if (sorting == \"ascending\") {\n        children.values.sort(function (a, b) {\n          return a.value - b.value;\n        });\n      }\n\n      if (sorting == \"descending\") {\n        children.values.sort(function (a, b) {\n          return b.value - a.value;\n        });\n      }\n\n      this._updateDataItemIndexes(0);\n\n      this.layoutAlgorithm(parent);\n\n      for (var i = 0, len = children.length; i < len; i++) {\n        var node = children.getIndex(i);\n\n        if (node.children) {\n          this.layoutItems(node);\n        }\n      }\n    }\n  };\n  /**\r\n   * Creates and returns a new treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Data item to create series out of\r\n   */\n\n\n  TreeMap.prototype.createTreeSeries = function (dataItem) {\n    var _this = this;\n\n    this._tempSeries = [];\n    var navigationData = [dataItem]; // create parent series and navigation data\n\n    var parentDataItem = dataItem.parent;\n\n    while (parentDataItem != undefined) {\n      this.initSeries(parentDataItem);\n      navigationData.push(parentDataItem);\n      parentDataItem = parentDataItem.parent;\n    }\n\n    navigationData.reverse();\n\n    if (this.navigationBar) {\n      this.navigationBar.data = navigationData;\n    } // create series and children series\n\n\n    this.createTreeSeriesReal(dataItem); // add those which are not in the list\n\n    $array.each(this._tempSeries, function (series) {\n      if (_this.series.indexOf(series) == -1) {\n        _this.series.push(series);\n      }\n\n      series.zIndex = series.level;\n    });\n  };\n  /**\r\n   * [createTreeSeriesReal description]\r\n   *\r\n   * @todo Description\r\n   * @param dataItem [description]\r\n   */\n\n\n  TreeMap.prototype.createTreeSeriesReal = function (dataItem) {\n    if (dataItem.children) {\n      var level = dataItem.level;\n\n      if (level < this.currentLevel + this.maxLevels) {\n        this.initSeries(dataItem);\n\n        for (var i = 0; i < dataItem.children.length; i++) {\n          var child = dataItem.children.getIndex(i);\n\n          if (child.children) {\n            this.createTreeSeriesReal(child);\n          }\n        }\n      }\n    }\n  };\n\n  TreeMap.prototype.setData = function (value) {\n    this.currentLevel = 0;\n    this.currentlyZoomed = undefined;\n    this.xAxis.start = 0;\n    this.xAxis.end = 1;\n    this.yAxis.start = 0;\n    this.yAxis.end = 1;\n\n    _super.prototype.setData.call(this, value);\n  };\n  /**\r\n   * @ignore\r\n   * Overriding, as tree map series are created on the fly all the time\r\n   */\n\n\n  TreeMap.prototype.seriesAppeared = function () {\n    return true;\n  };\n  /**\r\n   * Initializes the treemap series.\r\n   *\r\n   * @todo Description\r\n   * @param dataItem  Chart data item\r\n   */\n\n\n  TreeMap.prototype.initSeries = function (dataItem) {\n    var _this = this;\n\n    if (!dataItem.series) {\n      var series = void 0;\n      var template = this.seriesTemplates.getKey(dataItem.level.toString());\n\n      if (template) {\n        series = template.clone();\n      } else {\n        series = this.series.create();\n      } // for the legend to get {value}\n\n\n      series.dataItem.dataContext = dataItem;\n      series.name = dataItem.name;\n      series.parentDataItem = dataItem;\n      dataItem.series = series;\n      var level = dataItem.level;\n      series.level = level;\n      var dataContext = dataItem.dataContext;\n\n      if (dataContext) {\n        series.config = dataContext.config;\n      }\n\n      this.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\n\n      series.data = dataItem.children.values;\n      series.fill = dataItem.color;\n      series.columnsContainer.hide(0);\n      series.bulletsContainer.hide(0);\n      series.columns.template.adapter.add(\"fill\", function (fill, target) {\n        var dataItem = target.dataItem;\n\n        if (dataItem) {\n          var treeMapDataItem = dataItem.treeMapDataItem;\n\n          if (treeMapDataItem) {\n            target.fill = treeMapDataItem.color;\n            target.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\n\n            return treeMapDataItem.color;\n          }\n        }\n      });\n\n      if (this.zoomable && (dataItem.level > this.currentLevel || dataItem.children && dataItem.children.length > 0)) {\n        series.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\n\n        if (this.zoomable) {\n          series.columns.template.events.on(\"hit\", function (event) {\n            var seriesDataItem = event.target.dataItem;\n\n            if (dataItem.level > _this.currentLevel) {\n              _this.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\n            } else {\n              _this.zoomToSeriesDataItem(seriesDataItem);\n            }\n          }, this, undefined);\n        }\n      }\n    }\n\n    this._tempSeries.push(dataItem.series);\n  };\n  /**\r\n   * Toggles bullets so that labels that belong to current drill level are\r\n   * shown.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   */\n\n\n  TreeMap.prototype.toggleBullets = function (duration) {\n    var _this = this; // hide all series which are not in tempSeries\n\n\n    $iter.each(this.series.iterator(), function (series) {\n      if (_this._tempSeries.indexOf(series) == -1) {\n        //series.hideReal(duration);\n        series.columnsContainer.hide();\n        series.bulletsContainer.hide(duration);\n      } else {\n        //series.showReal(duration);\n        series.columnsContainer.show();\n        series.bulletsContainer.show(duration);\n        series.dataItems.each(function (dataItem) {\n          dataItem.bullets.each(function (key, bullet) {\n            bullet.show();\n          });\n        });\n\n        if (series.level < _this.currentLevel) {\n          if (_this.hideParentColumns) {\n            series.columnsContainer.hide();\n          }\n\n          series.bulletsContainer.hide(duration);\n        } else if (series.level == _this.currentLevel) {\n          if (_this.maxLevels > 1) {\n            series.dataItems.each(function (dataItem) {\n              if (dataItem.treeMapDataItem.children) {\n                dataItem.bullets.each(function (key, bullet) {\n                  bullet.hide();\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Zooms to particular item in series.\r\n   *\r\n   * @param dataItem  Data item\r\n   */\n\n\n  TreeMap.prototype.zoomToSeriesDataItem = function (dataItem) {\n    this.zoomToChartDataItem(dataItem.treeMapDataItem);\n  };\n  /**\r\n   * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  TreeMap.prototype.zoomToChartDataItem = function (dataItem) {\n    var _this = this;\n\n    if (!dataItem) {\n      dataItem = this._homeDataItem;\n    }\n\n    var zoomOutButton = this.zoomOutButton; // this is needed because if there is only one fist level, it won't be shown\n\n    if (zoomOutButton) {\n      if (dataItem != this._homeDataItem) {\n        zoomOutButton.show();\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n\n    if (dataItem && dataItem.children) {\n      this.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\n      this.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\n      this.currentLevel = dataItem.level;\n      this.currentlyZoomed = dataItem;\n      this.createTreeSeries(dataItem);\n      var rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\n\n      if (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\n        this._dataDisposers.push(rangeChangeAnimation);\n\n        rangeChangeAnimation.events.once(\"animationended\", function () {\n          _this.toggleBullets();\n        });\n      } else {\n        this.toggleBullets();\n      }\n    }\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  TreeMap.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"TreeMap chart\");\n    } //this.homeText = this.language.translate(\"Home\");\n\n  };\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  TreeMap.prototype.createDataItem = function () {\n    return new TreeMapDataItem();\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"maxLevels\", {\n    /**\r\n     * @return Maximum drill-down level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxLevels\");\n    },\n\n    /**\r\n     * Maximum number of levels the chart will display initially.\r\n     *\r\n     * @default 2\r\n     * @param value  Maximum drill-down level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxLevels\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"currentLevel\", {\n    /**\r\n     * @return Current level\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"currentLevel\");\n    },\n\n    /**\r\n     * Current drill-down level the chart is at.\r\n     *\r\n     * @param value  Current level\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"currentLevel\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"hideParentColumns\", {\n    /**\r\n     * @return Hide?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hideParentColumns\");\n    },\n\n    /**\r\n     * If set to `true`, columns of parent nodes will be hidden when user\r\n     * drills-down into deeper levels.\r\n     *\r\n     * @sice 4.7.4\r\n     * @default false\r\n     * @param  value  Hide?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"hideParentColumns\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TreeMap.prototype, \"sorting\", {\n    get: function () {\n      return this.getPropertyValue(\"sorting\");\n    },\n\n    /**\r\n     * Sorting direction of treemap items.\r\n     *\r\n     * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n     *\r\n     * @default \"descending\"\r\n     * @param value [description]\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"sorting\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and returns a new series of the suitable type.\r\n   *\r\n   * @return new series\r\n   */\n\n  TreeMap.prototype.createSeries = function () {\n    return new TreeMapSeries();\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"homeText\", {\n    /**\r\n     * @return Home text\r\n     */\n    get: function () {\n      return this._homeText;\n    },\n\n    /**\r\n     * A text displayed on the \"home\" button which is used to go back to level 0\r\n     * after drill into sub-items.\r\n     *\r\n     * @param value  Home text\r\n     */\n    set: function (value) {\n      this._homeText = value;\n\n      if (this._homeDataItem) {\n        this._homeDataItem.name = this._homeText;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n  TreeMap.prototype.processConfig = function (config) {\n    if (config) {\n      // Instantiate layout algorithm\n      if ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\n        switch (config[\"layoutAlgorithm\"]) {\n          case \"squarify\":\n            config[\"layoutAlgorithm\"] = this.squarify;\n            break;\n\n          case \"binaryTree\":\n            config[\"layoutAlgorithm\"] = this.binaryTree;\n            break;\n\n          case \"slice\":\n            config[\"layoutAlgorithm\"] = this.slice;\n            break;\n\n          case \"dice\":\n            config[\"layoutAlgorithm\"] = this.dice;\n            break;\n\n          case \"sliceDice\":\n            config[\"layoutAlgorithm\"] = this.sliceDice;\n            break;\n\n          default:\n            delete config[\"layoutAlgorithm\"];\n            break;\n        }\n      } // Set type for navigation bar\n\n\n      if ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\n        config.navigationBar.type = \"NavigationBar\";\n      }\n\n      _super.prototype.processConfig.call(this, config);\n    }\n  };\n  /**\r\n   * Measures the size of container and informs its children of how much size\r\n   * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n   * properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMap.prototype.validateLayout = function () {\n    _super.prototype.validateLayout.call(this);\n\n    this.layoutItems(this.currentlyZoomed);\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  TreeMap.prototype.validateDataItems = function () {\n    _super.prototype.validateDataItems.call(this);\n\n    this.layoutItems(this._homeDataItem);\n    $iter.each(this.series.iterator(), function (series) {\n      series.validateRawData();\n    });\n    this.zoomToChartDataItem(this._homeDataItem);\n  };\n  /**\r\n   * ==========================================================================\r\n   * TREEMAP LAYOUT FUNCTIONS\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * The functions below are from D3.js library (https://d3js.org/)\r\n   *\r\n   * --------------------------------------------------------------------------\r\n   * Copyright 2017 Mike Bostock\r\n   *\r\n   * Redistribution and use in source and binary forms, with or without\r\n   * modification, are permitted provided that the following conditions are met:\r\n   *\r\n   * 1. Redistributions of source code must retain the above copyright notice,\r\n   *    this list of conditions and the following disclaimer.\r\n   *\r\n   * 2. Redistributions in binary form must reproduce the above copyright\r\n   *    notice,this list of conditions and the following disclaimer in the\r\n   *    documentation and/or other materials provided with the distribution.\r\n   *\r\n   * 3. Neither the name of the copyright holder nor the names of its\r\n   *    contributors may be used to endorse or promote products derived from\r\n   *    this software without specific prior written permission.\r\n   *\r\n   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n   * POSSIBILITY OF SUCH DAMAGE.\r\n   * --------------------------------------------------------------------------\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Treemap layout algorithm: binaryTree.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.binaryTree = function (parent) {\n    var nodes = parent.children,\n        i,\n        n = nodes.length,\n        sum,\n        sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes.getIndex(i).value;\n    }\n\n    if (n > 0) {\n      partition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\n    }\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = value / 2 + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n\n        if (sums[mid] < valueTarget) {\n          k = mid + 1;\n        } else {\n          hi = mid;\n        }\n      }\n\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) {\n        --k;\n      }\n\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if (value == 0) {\n        var node = nodes.getIndex(i);\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        return;\n      }\n\n      if (x1 - x0 > y1 - y0) {\n        var xk = (x0 * valueRight + x1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = (y0 * valueRight + y1 * valueLeft) / value;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.slice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var node;\n    var i = -1;\n    var n = nodes.length;\n    var k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.x0 = x0;\n      node.x1 = x1;\n      node.y0 = y0;\n      y0 += node.value * k;\n      node.y1 = y0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: dice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.dice = function (parent) {\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes.getIndex(i);\n      node.y0 = y0;\n      node.y1 = y1;\n      node.x0 = x0;\n      x0 += node.value * k;\n      node.x1 = x0;\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: slideDice.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.sliceDice = function (parent) {\n    if (parent.level & 1) {\n      this.slice(parent);\n    } else {\n      this.dice(parent);\n    }\n  };\n  /**\r\n   * Treemap layout algorithm: squarify.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param parent  Data item\r\n   */\n\n\n  TreeMap.prototype.squarify = function (parent) {\n    var ratio = (1 + Math.sqrt(5)) / 2;\n    var x0 = parent.x0;\n    var x1 = parent.x1;\n    var y0 = parent.y0;\n    var y1 = parent.y1;\n    var nodes = parent.children;\n    var nodeValue;\n    var i0 = 0;\n    var i1 = 0;\n    var n = nodes.length;\n    var dx;\n    var dy;\n    var value = parent.value;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n\n    while (i0 < n) {\n      dx = x1 - x0;\n      dy = y1 - y0; // Find the next non-empty node.\n\n      do {\n        sumValue = nodes.getIndex(i1++).value;\n      } while (!sumValue && i1 < n);\n\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes.getIndex(i1).value;\n\n        if (nodeValue < minValue) {\n          minValue = nodeValue;\n        }\n\n        if (nodeValue > maxValue) {\n          maxValue = nodeValue;\n        }\n\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n\n        minRatio = newRatio;\n      } // Position and record the row orientation.\n\n\n      var row = this.dataItems.template.clone();\n      row.value = sumValue;\n      row.dice = dx < dy;\n      row.children = nodes.slice(i0, i1);\n      row.x0 = x0;\n      row.y0 = y0;\n      row.x1 = x1;\n      row.y1 = y1;\n\n      if (row.dice) {\n        row.y1 = value ? y0 += dy * sumValue / value : y1;\n        this.dice(row);\n      } else {\n        row.x1 = value ? x0 += dx * sumValue / value : x1;\n        this.slice(row);\n      }\n\n      value -= sumValue;\n      i0 = i1;\n    }\n  };\n\n  TreeMap.prototype.handleSeriesAdded2 = function () {// void\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  TreeMap.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n\n  TreeMap.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {\n    if (name == \"value\") {\n      this.invalidateDataItems();\n    }\n  };\n\n  TreeMap.prototype.getLegendLevel = function (dataItem) {\n    if (!dataItem) {\n      return;\n    }\n\n    if (!dataItem.children) {\n      return;\n    }\n\n    if (dataItem.children.length > 1) {\n      return dataItem;\n    } else if (dataItem.children.length == 1) {\n      var child = dataItem.children.getIndex(0);\n\n      if (child.children) {\n        return this.getLegendLevel(child);\n      } else {\n        return dataItem;\n      }\n    } else {\n      return dataItem;\n    }\n  };\n\n  TreeMap.prototype.handleLegendSeriesAdded = function (series) {// void\n  };\n\n  Object.defineProperty(TreeMap.prototype, \"homeDataItem\", {\n    /**\r\n     * A data item associated with top node.\r\n     *\r\n     * @since 4.8.2\r\n     */\n    get: function () {\n      return this._homeDataItem;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n  TreeMap.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      legend.dataFields.name = \"name\";\n      var legendParent = this.getLegendLevel(this._homeDataItem);\n\n      if (legendParent) {\n        var legendData_1 = [];\n        legendParent.children.each(function (dataItem) {\n          //if (!dataItem.hiddenInLegend) {\n          legendData_1.push(dataItem); //}\n        });\n        legend.data = legendData_1;\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  TreeMap.prototype.disposeData = function () {\n    _super.prototype.disposeData.call(this);\n\n    this._homeDataItem = undefined;\n    this.series.clear();\n\n    if (this.navigationBar) {\n      this.navigationBar.disposeData();\n    }\n\n    this.xAxis.disposeData();\n    this.yAxis.disposeData();\n  };\n  /**\r\n   * Since this chart uses hierarchical data, we need to remove childrent\r\n   * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n   *\r\n   * @return Export\r\n   */\n\n\n  TreeMap.prototype.getExporting = function () {\n    var _this = this;\n\n    var exporting = _super.prototype.getExporting.call(this);\n\n    exporting.adapter.add(\"formatDataFields\", function (info) {\n      if (info.format == \"csv\" || info.format == \"xlsx\") {\n        if ($type.hasValue(_this.dataFields.children)) {\n          delete info.dataFields[_this.dataFields.children];\n        }\n      }\n\n      return info;\n    });\n    return exporting;\n  };\n\n  return TreeMap;\n}(XYChart);\n\nexport { TreeMap };\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;","map":{"version":3,"mappings":"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","names":["XYChart","XYChartDataItem","registry","DictionaryTemplate","DictionaryDisposer","ValueAxis","TreeMapSeries","ColorSet","MouseCursorStyle","$iter","$type","$array","__extends","_super","_this","className","values","value","workingValue","x0","y0","x1","y1","hasChildren","children","applyTheme","Object","TreeMapDataItem","_legendDataItem","label","dataItem","valueLabel","length","each","iterator","child","childValue","isNumber","setValue","parent","properties","name","setProperty","level","color","undefined","component","colors","getIndex","step","index","_series","series","removeValue","dispose","_disposers","push","duration","delay","toValue","fields","setWorkingValue","hide","seriesDataItem","bullets","key","preventShow","call","show","squarify","_usesData","maxLevels","currentLevel","hideParentColumns","sorting","xAxis","xAxes","title","disabled","strictMinMax","xRenderer","renderer","inside","labels","template","ticks","grid","axisFills","minGridDistance","line","baseGrid","yAxis","yAxes","yRenderer","inversed","seriesTemplates","virtualParent","zoomOutButton","events","on","zoomToChartDataItem","_homeDataItem","event","newValue","isTemplate","TreeMap","_navigationBar","navigationBar","toBack","links","target","dataContext","isDisposed","createTreeSeries","clear","_tempSeries","validateData","homeDataItem","dataItems","clone","_homeText","maxX","maxY","Math","round","pixelHeight","pixelWidth","min","max","getMinMax","layoutItems","feedLegend","sort","a","b","_updateDataItemIndexes","layoutAlgorithm","i","len","node","navigationData","parentDataItem","initSeries","reverse","data","createTreeSeriesReal","indexOf","zIndex","currentlyZoomed","start","end","setData","getKey","toString","create","config","dataUsers","fill","columnsContainer","bulletsContainer","columns","adapter","add","treeMapDataItem","remove","zoomable","cursorOverStyle","pointer","zoomToSeriesDataItem","bullet","zoomToValues","rangeChangeAnimation","isFinished","_dataDisposers","once","toggleBullets","applyInternalDefaults","hasValue","readerTitle","language","translate","getPropertyValue","setPropertyValue","isString","binaryTree","slice","dice","sliceDice","type","processConfig","validateLayout","validateDataItems","validateRawData","nodes","n","sum","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","ratio","sqrt","nodeValue","i0","i1","dx","dy","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","row","invalidateDataItems","getLegendLevel","legend","dataFields","legendParent","legendData_1","disposeData","exporting","getExporting","info","format","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/TreeMap.ts"],"sourcesContent":["/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {workingValue:0};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\t/**\r\n\t * Percent value of a node\r\n\t */\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.hide();\r\n\t\t\t\tvalue.preventShow = true;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tlet seriesDataItem = this.seriesDataItem;\r\n\t\tif (seriesDataItem) {\r\n\t\t\tseriesDataItem.bullets.each((key, value) => {\r\n\t\t\t\tvalue.preventShow = false;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t */\r\n\thideParentColumns?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis._usesData = true;\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.hideParentColumns = false;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\ttemplate.virtualParent = this;\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\tbullet.show();\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tif (this.hideParentColumns) {\r\n\t\t\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.level == this.currentLevel) {\r\n\t\t\t\t\tif (this.maxLevels > 1) {\r\n\t\t\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\t\tif (dataItem.treeMapDataItem.children) {\r\n\t\t\t\t\t\t\t\tdataItem.bullets.each((key, bullet) => {\r\n\t\t\t\t\t\t\t\t\tbullet.hide();\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item. If dataItem is not specified, the chart will zoom-out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem?: TreeMapDataItem): void {\r\n\t\tif (!dataItem) {\r\n\t\t\tdataItem = this._homeDataItem;\r\n\t\t}\r\n\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it won't be shown\r\n\t\tif (zoomOutButton) {\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, columns of parent nodes will be hidden when user\r\n\t * drills-down into deeper levels.\r\n\t * \r\n\t * @sice 4.7.4\r\n\t * @default false\r\n\t * @param  value  Hide?\r\n\t */\r\n\tpublic set hideParentColumns(value: boolean) {\r\n\t\tthis.setPropertyValue(\"hideParentColumns\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hide?\r\n\t */\r\n\tpublic get hideParentColumns(): boolean {\r\n\t\treturn this.getPropertyValue(\"hideParentColumns\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tif(n > 0){\r\n\t\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\t\t}\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif(value == 0){\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\t\t\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleSeriesAdded2() {\r\n\t\t// void\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\tlet child = dataItem.children.getIndex(0);\r\n\t\t\tif (child.children) {\r\n\t\t\t\treturn this.getLegendLevel(child);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleLegendSeriesAdded(series:TreeMapSeries){\r\n\t\t// void\r\n\t}\t\r\n\r\n\t/**\r\n\t * A data item associated with top node.\r\n\t * \r\n\t * @since 4.8.2\r\n\t */\r\n\tpublic get homeDataItem(): TreeMapDataItem {\r\n\t\treturn this._homeDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n"]},"metadata":{},"sourceType":"module"}