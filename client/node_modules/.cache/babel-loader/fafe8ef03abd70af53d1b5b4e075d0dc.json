{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport * as $iter from \"./Iterator\";\n/**\r\n * @todo Description\r\n */\n\nvar IndexedIterable =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param array  List items\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   */\n  function IndexedIterable(array, start, end) {\n    this._array = array;\n    this._start = start;\n    this._end = end;\n  }\n  /**\r\n   * Returns a list item iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  IndexedIterable.prototype.iterator = function () {\n    var _this = this;\n\n    return function (push) {\n      if (_this._start !== _this._end) {\n        if (_this._start < _this._end) {\n          for (var i = _this._start; i < _this._end; ++i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        } else {\n          for (var i = _this._start - 1; i >= _this._end; --i) {\n            if (!push(_this._array[i])) {\n              break;\n            }\n          }\n        }\n      }\n    };\n  };\n  /**\r\n   * Returns an interable list sorted backwards than current list.\r\n   *\r\n   * @return List\r\n   */\n\n\n  IndexedIterable.prototype.backwards = function () {\n    return new IndexedIterable(this._array, this._end, this._start);\n  };\n  /**\r\n   * Returns a new list consisting only of specific range of items between\r\n   * `start` and `end` indexes.\r\n   *\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return List\r\n   */\n\n\n  IndexedIterable.prototype.range = function (start, end) {\n    if (start <= end) {\n      if (this._start === this._end) {\n        return this;\n      } else if (this._start < this._end) {\n        var diff = end - start;\n        start = Math.max(this._start + start, this._start);\n        end = Math.min(start + diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      } else {\n        var diff = end - start;\n        start = Math.max(this._start - start, this._end);\n        end = Math.max(start - diff, this._end);\n        return new IndexedIterable(this._array, start, end);\n      }\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n\n  return IndexedIterable;\n}();\n\nexport { IndexedIterable };\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar ListGrouper =\n/** @class */\nfunction (_super) {\n  __extends(ListGrouper, _super);\n  /**\r\n   * Constructor.\r\n   */\n\n\n  function ListGrouper(list, getKey, sort) {\n    var _this = _super.call(this, [list.events.on(\"inserted\", function (x) {\n      var value = x.newValue;\n\n      var key = _this._getKey(value);\n\n      var index = 0;\n      $iter.eachContinue(list.iterator(), function (x) {\n        if (x === value) {\n          return false;\n        } else if (_this._getKey(x) === key) {\n          ++index;\n        }\n\n        return true;\n      });\n\n      _this._insert(value, key, index);\n    }, undefined, false), list.events.on(\"removed\", function (x) {\n      _this._remove(x.oldValue);\n    }, undefined, false)]) || this;\n    /**\r\n     * Grouping keys.\r\n     */\n\n\n    _this._keys = [];\n    /**\r\n     * List item groups.\r\n     */\n\n    _this._groups = {};\n    _this._getKey = getKey;\n    _this._sort = sort;\n    $iter.each(list.iterator(), function (x) {\n      _this._insert(x, getKey(x));\n    });\n    return _this;\n  }\n  /**\r\n   * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n   *\r\n   * @param x      Item\r\n   * @param key    Group name\r\n   * @param index  Index\r\n   */\n\n\n  ListGrouper.prototype._insert = function (x, key, index) {\n    if (this._groups[key] == null) {\n      this._groups[key] = []; // TODO code duplication with SortedList\n\n      var _a = $array.getSortedIndex(this._keys, this._sort, key),\n          found = _a.found,\n          index_1 = _a.index;\n\n      if (found) {\n        throw new Error(\"Key already exists: \" + key);\n      } else {\n        $array.insertIndex(this._keys, index_1, key);\n      }\n    }\n\n    if (index == null) {\n      this._groups[key].push(x);\n    } else {\n      $array.insertIndex(this._groups[key], index, x);\n    }\n  };\n  /**\r\n   * Removes an item from the list.\r\n   *\r\n   * @param x Item to remove\r\n   */\n\n\n  ListGrouper.prototype._remove = function (x) {\n    var key = this._getKey(x);\n\n    var values = this._groups[key];\n\n    if (values != null) {\n      $array.remove(values, x);\n\n      if (values.length === 0) {\n        delete this._groups[key];\n\n        var _a = $array.getSortedIndex(this._keys, this._sort, key),\n            found = _a.found,\n            index = _a.index;\n\n        if (found) {\n          $array.removeIndex(this._keys, index);\n        } else {\n          throw new Error(\"Key doesn't exist: \" + key);\n        }\n      }\n    }\n  };\n  /**\r\n   * Returns an iterator for the list.\r\n   *\r\n   * The iterator will iterate through all items in all groups.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  ListGrouper.prototype.iterator = function () {\n    var _this = this;\n\n    return $iter.flatten($iter.map($iter.fromArray(this._keys), function (key) {\n      return $iter.fromArray(_this._groups[key]);\n    }));\n  };\n\n  return ListGrouper;\n}(MultiDisposer);\n\nexport { ListGrouper };\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\n\nvar ListDisposer =\n/** @class */\nfunction (_super) {\n  __extends(ListDisposer, _super);\n\n  function ListDisposer(list, disposeOnRemove) {\n    if (disposeOnRemove === void 0) {\n      disposeOnRemove = true;\n    }\n\n    var _this = this;\n\n    if (disposeOnRemove) {\n      var disposer_1 = list.events.on(\"removed\", function (x) {\n        x.oldValue.dispose();\n      }, undefined, false);\n      _this = _super.call(this, function () {\n        disposer_1.dispose(); // TODO clear the list ?\n\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    } else {\n      _this = _super.call(this, function () {\n        // TODO clear the list ?\n        $iter.each(list.iterator(), function (x) {\n          x.dispose();\n        });\n      }) || this;\n    }\n\n    return _this;\n  }\n\n  return ListDisposer;\n}(Disposer);\n\nexport { ListDisposer };\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\n\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\n\n\nvar List =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * Event dispatcher.\r\n     */\n\n\n    this.events = new EventDispatcher();\n    this._values = initial;\n  }\n\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n\n  List.prototype.contains = function (value) {\n    return this._values.indexOf(value) !== -1;\n  };\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n\n\n  List.prototype.removeValue = function (value) {\n    var i = 0;\n    var length = this._values.length;\n\n    while (i < length) {\n      // TODO handle NaN\n      if (this._values[i] === value) {\n        this.removeIndex(i);\n        --length;\n      } else {\n        ++i;\n      }\n    }\n  };\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n\n\n  List.prototype.indexOf = function (value) {\n    return $array.indexOf(this._values, value);\n  };\n\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n\n  List.prototype.hasIndex = function (index) {\n    return index >= 0 && index < this._values.length;\n  };\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n\n\n  List.prototype.getIndex = function (index) {\n    return this._values[index];\n  };\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n\n\n  List.prototype.setIndex = function (index, value) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same\n\n    if (oldValue !== value) {\n      this._values[index] = value;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: value\n        });\n      }\n\n      if (this.events.isEnabled(\"removed\")) {\n        this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: this,\n          oldValue: oldValue\n        });\n      }\n\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n\n    return oldValue;\n  };\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.insertIndex = function (index, value) {\n    checkBounds(index, this._values.length + 1);\n    $array.insertIndex(this._values, index, value);\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n  };\n  /**\r\n   * [_sortQuicksort description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   */\n\n\n  List.prototype._sortQuicksort = function (low, high, order) {\n    if (low < high) {\n      var p = this._sortPartition(low, high, order);\n\n      this._sortQuicksort(low, p, order);\n\n      this._sortQuicksort(p + 1, high, order);\n    }\n  };\n  /**\r\n   * [_sortPartition description]\r\n   *\r\n   * @todo Description\r\n   * @param low    [description]\r\n   * @param high   [description]\r\n   * @param order  [description]\r\n   * @return [description]\r\n   */\n\n\n  List.prototype._sortPartition = function (low, high, order) {\n    var values = this._values;\n    var pivot = values[low];\n    var i = low - 1;\n    var j = high + 1;\n\n    for (;;) {\n      do {\n        ++i;\n      } while (order(values[i], pivot) < 0);\n\n      do {\n        --j;\n      } while (order(values[j], pivot) > 0);\n\n      if (i >= j) {\n        return j;\n      } else {\n        this.swap(i, j);\n      }\n    }\n  };\n  /**\r\n   * Reorders list items according to specific ordering function.\r\n   *\r\n   * @param order  Ordering function\r\n   */\n\n\n  List.prototype.sort = function (order) {\n    // https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n    // @todo faster implementation of this\n    // @todo test this\n    this._sortQuicksort(0, this._values.length - 1, order);\n  };\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n\n\n  List.prototype.swap = function (a, b) {\n    var len = this._values.length;\n    checkBounds(a, len);\n    checkBounds(b, len);\n\n    if (a !== b) {\n      var value_a = this._values[a];\n      var value_b = this._values[b];\n      this._values[a] = value_b;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: a,\n          oldValue: value_a,\n          newValue: value_b\n        });\n      }\n\n      this._values[b] = value_a;\n\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatchImmediately(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: b,\n          oldValue: value_b,\n          newValue: value_a\n        });\n      }\n    }\n  };\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n\n\n  List.prototype.removeIndex = function (index) {\n    checkBounds(index, this._values.length);\n    var oldValue = this._values[index];\n    $array.removeIndex(this._values, index);\n\n    if (this.events.isEnabled(\"removeIndex\")) {\n      this.events.dispatchImmediately(\"removeIndex\", {\n        type: \"removeIndex\",\n        target: this,\n        index: index,\n        oldValue: oldValue\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      this.events.dispatchImmediately(\"removed\", {\n        type: \"removed\",\n        target: this,\n        oldValue: oldValue\n      });\n    }\n\n    return oldValue;\n  };\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n\n\n  List.prototype.moveValue = function (value, toIndex) {\n    // TODO don't do anything if the desired index is the same as the current index\n    var index = this.indexOf(value); // TODO remove all old values rather than only the first ?\n\n    if (index !== -1) {\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatchImmediately(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n\n    if (toIndex == null) {\n      toIndex = this._values.length;\n\n      this._values.push(value);\n    } else {\n      $array.insertIndex(this._values, toIndex, value);\n    }\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: toIndex,\n        newValue: value\n      });\n    }\n\n    if (index === -1) {\n      if (this.events.isEnabled(\"inserted\")) {\n        this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: this,\n          newValue: value\n        });\n      }\n    }\n  };\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.push = function (value) {\n    var index = this._values.push(value) - 1;\n\n    if (this.events.isEnabled(\"insertIndex\")) {\n      this.events.dispatchImmediately(\"insertIndex\", {\n        type: \"insertIndex\",\n        target: this,\n        index: index,\n        newValue: value\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      this.events.dispatchImmediately(\"inserted\", {\n        type: \"inserted\",\n        target: this,\n        newValue: value\n      });\n    }\n\n    return value;\n  };\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n\n  List.prototype.unshift = function (value) {\n    this.insertIndex(0, value);\n  };\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n\n\n  List.prototype.pushAll = function (values) {\n    var _this = this;\n\n    $array.each(values, function (value) {\n      _this.push(value);\n    });\n  };\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n\n\n  List.prototype.copyFrom = function (source) {\n    this.pushAll(source._values);\n  };\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n\n  List.prototype.pop = function () {\n    var index = this._values.length - 1;\n    return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n  };\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n\n  List.prototype.shift = function () {\n    return this._values.length ? this.removeIndex(0) : undefined;\n  };\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n\n  List.prototype.setAll = function (newArray) {\n    var _this = this; // @tod if a value exists in both the new and old arrays, don't send remove/insert events\n\n\n    var oldArray = $array.copy(this._values);\n    this._values.length = 0;\n    $array.each(newArray, function (value) {\n      _this._values.push(value);\n    });\n\n    if (this.events.isEnabled(\"setAll\")) {\n      this.events.dispatchImmediately(\"setAll\", {\n        type: \"setAll\",\n        target: this,\n        oldArray: oldArray,\n        newArray: this._values // TODO make a copy ?\n\n      });\n    }\n\n    if (this.events.isEnabled(\"removed\")) {\n      $array.each(oldArray, function (x) {\n        _this.events.dispatchImmediately(\"removed\", {\n          type: \"removed\",\n          target: _this,\n          oldValue: x\n        });\n      });\n    }\n\n    if (this.events.isEnabled(\"inserted\")) {\n      $array.each(this._values, function (x) {\n        _this.events.dispatchImmediately(\"inserted\", {\n          type: \"inserted\",\n          target: _this,\n          newValue: x\n        });\n      });\n    }\n  };\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n\n  List.prototype.clear = function () {\n    this.setAll([]);\n  };\n  /**\r\n   * Returns a list iterator.\r\n   *\r\n   * @return Iterator\r\n   */\n\n\n  List.prototype.iterator = function () {\n    return $iter.fromArray(this._values);\n  };\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n\n  List.prototype[Symbol.iterator] = function () {\n    var length, i;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          length = this._values.length;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < length)) return [3\n          /*break*/\n          , 4];\n          return [4\n          /*yield*/\n          , this._values[i]];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          ++i;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n\n  List.prototype.each = function (f) {\n    $array.each(this._values, f);\n  };\n  /**\r\n   * Returns a specific range of list items, which can be iterated.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Code duplication with IndexedIterable\r\n   * @param start  Start index\r\n   * @param end    End index\r\n   * @return Range\r\n   */\n\n\n  List.prototype.range = function (start, end) {\n    if (start <= end) {\n      var diff = end - start;\n      start = Math.max(start, 0);\n      end = Math.min(start + diff, this._values.length);\n      return new IndexedIterable(this._values, start, end);\n    } else {\n      throw new Error(\"Start index must be lower than end index\");\n    }\n  };\n  /**\r\n   * Returns an iterator that has list items sorted backwards.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return List\r\n   */\n\n\n  List.prototype.backwards = function () {\n    return new IndexedIterable(this._values, this._values.length, 0);\n  };\n\n  return List;\n}();\n\nexport { List };\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\n\nvar ListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(ListTemplate, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param t Template object\r\n   */\n\n\n  function ListTemplate(t) {\n    var _this = _super.call(this) || this;\n\n    _this.template = t;\n    return _this;\n  }\n\n  Object.defineProperty(ListTemplate.prototype, \"template\", {\n    /**\r\n     * @return Template object\r\n     */\n    get: function () {\n      return this._template;\n    },\n\n    /**\r\n     * A \"template\" object to copy all properties from when creating new list\r\n     * items.\r\n     *\r\n     * @param v  Template object\r\n     */\n    set: function (v) {\n      v.isTemplate = true;\n      this._template = v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all elements from other list.\r\n   *\r\n   * @param source  Source list\r\n   */\n\n  ListTemplate.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    $iter.each(source.iterator(), function (value) {\n      _this.push(value.clone());\n    });\n  };\n\n  ListTemplate.prototype.create = function (make) {\n    var clone = make != null ? new make() : this.template.clone();\n    this.push(clone);\n    return clone;\n  };\n  /**\r\n   * Creates an exact clone of the list, including its items and template.\r\n   *\r\n   * @return New list\r\n   */\n\n\n  ListTemplate.prototype.clone = function () {\n    var out = new ListTemplate(this.template);\n    var values = this.values;\n    var length = values.length;\n\n    for (var i = 0; i < length; ++i) {\n      out.push(values[i].clone());\n    }\n\n    return out;\n  };\n\n  return ListTemplate;\n}(List);\n\nexport { ListTemplate };","map":{"version":3,"mappings":"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","names":["Disposer","MultiDisposer","EventDispatcher","$array","$iter","array","start","end","_array","_start","_end","IndexedIterable","push","_this","i","diff","Math","max","min","Error","__extends","list","getKey","sort","_super","events","on","x","value","newValue","key","_getKey","index","eachContinue","iterator","_insert","undefined","_remove","oldValue","_sort","each","ListGrouper","_groups","found","index_1","insertIndex","_keys","values","remove","length","removeIndex","flatten","map","fromArray","disposeOnRemove","disposer_1","dispose","checkBounds","len","initial","_values","Object","List","indexOf","isEnabled","dispatchImmediately","type","target","low","high","order","p","_sortPartition","_sortQuicksort","pivot","j","swap","a","b","value_a","value_b","toIndex","source","pushAll","newArray","oldArray","copy","setAll","Symbol","_a","f","t","template","ListTemplate","_template","v","isTemplate","clone","make","out"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/List.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IClone } from \"./Clone\";\r\nimport { Disposer, MultiDisposer, IDisposer } from \"./Disposer\";\r\nimport { EventDispatcher, AMEvent } from \"./EventDispatcher\";\r\nimport { Ordering } from \"./Order\";\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * @todo Description\r\n */\r\nexport class IndexedIterable<A> {\r\n\r\n\t/**\r\n\t * Item list\r\n\t */\r\n\tprivate _array: Array<A>;\r\n\r\n\t/**\r\n\t * Start index.\r\n\t */\r\n\tprivate _start: number;\r\n\r\n\t/**\r\n\t * End index.\r\n\t */\r\n\tprivate _end: number;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param array  List items\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t */\r\n\tconstructor(array: Array<A>, start: number, end: number) {\r\n\t\tthis._array = array;\r\n\t\tthis._start = start;\r\n\t\tthis._end = end;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list item iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<A> {\r\n\t\treturn (push) => {\r\n\t\t\tif (this._start !== this._end) {\r\n\t\t\t\tif (this._start < this._end) {\r\n\t\t\t\t\tfor (let i = this._start; i < this._end; ++i) {\r\n\t\t\t\t\t\tif (!push(this._array[i])) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (let i = this._start - 1; i >= this._end; --i) {\r\n\t\t\t\t\t\tif (!push(this._array[i])) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an interable list sorted backwards than current list.\r\n\t *\r\n\t * @return List\r\n\t */\r\n\tpublic backwards(): IndexedIterable<A> {\r\n\t\treturn new IndexedIterable(this._array, this._end, this._start);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new list consisting only of specific range of items between\r\n\t * `start` and `end` indexes.\r\n\t *\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return List\r\n\t */\r\n\tpublic range(start: number, end: number): IndexedIterable<A> {\r\n\t\tif (start <= end) {\r\n\t\t\tif (this._start === this._end) {\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if (this._start < this._end) {\r\n\t\t\t\tconst diff = end - start;\r\n\r\n\t\t\t\tstart = Math.max(this._start + start, this._start);\r\n\t\t\t\tend = Math.min(start + diff, this._end);\r\n\r\n\t\t\t\treturn new IndexedIterable(this._array, start, end);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tconst diff = end - start;\r\n\r\n\t\t\t\tstart = Math.max(this._start - start, this._end);\r\n\t\t\t\tend = Math.max(start - diff, this._end);\r\n\r\n\t\t\t\treturn new IndexedIterable(this._array, start, end);\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Start index must be lower than end index\");\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines events for the [[List]].\r\n */\r\nexport interface IListEvents<A> {\r\n\t/**\r\n\t * Invoked when item is added to the list.\r\n\t *\r\n\t * @todo remove this later?\r\n\t */\r\n\tinserted: {\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when item is removed from the list.\r\n\t *\r\n\t * @todo remove this later?\r\n\t */\r\n\tremoved: {\r\n\t\toldValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setAll` method is called.\r\n\t */\r\n\tsetAll: {\r\n\t\toldArray: Array<A>;\r\n\t\tnewArray: Array<A>;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `insertIndex` method is called.\r\n\t */\r\n\tinsertIndex: {\r\n\t\tindex: number;\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when `setIndex` method is called.\r\n\t */\r\n\tsetIndex: {\r\n\t\tindex: number;\r\n\t\toldValue: A;\r\n\t\tnewValue: A;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when item is removed.\r\n\t */\r\n\tremoveIndex: {\r\n\t\tindex: number;\r\n\t\toldValue: A;\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * ListGrouper organizes [[List]] items into groups.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport class ListGrouper<A> extends MultiDisposer {\r\n\r\n\t/**\r\n\t * Function that can be used to extract a \"value\" of the list element.\r\n\t *\r\n\t * Used for ordering.\r\n\t */\r\n\tprivate _getKey: (value: A) => number;\r\n\r\n\t/**\r\n\t * A function that  is used to order list groups.\r\n\t */\r\n\tprivate _sort: (left: number, right: number) => Ordering;\r\n\r\n\t/**\r\n\t * Grouping keys.\r\n\t */\r\n\tprivate _keys: Array<number> = [];\r\n\r\n\t/**\r\n\t * List item groups.\r\n\t */\r\n\tprivate _groups: { [key: number]: Array<A> } = {};\r\n\r\n\t/**\r\n\t * Inserts an item (`x`) to a specific group (`key`) and specific `index`.\r\n\t *\r\n\t * @param x      Item\r\n\t * @param key    Group name\r\n\t * @param index  Index\r\n\t */\r\n\tprivate _insert(x: A, key: number, index?: number): void {\r\n\t\tif (this._groups[key] == null) {\r\n\t\t\tthis._groups[key] = [];\r\n\r\n\t\t\t// TODO code duplication with SortedList\r\n\t\t\tconst { found, index } = $array.getSortedIndex(this._keys, this._sort, key);\r\n\r\n\t\t\tif (found) {\r\n\t\t\t\tthrow new Error(\"Key already exists: \" + key);\r\n\r\n\t\t\t} else {\r\n\t\t\t\t$array.insertIndex(this._keys, index, key);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (index == null) {\r\n\t\t\tthis._groups[key].push(x);\r\n\r\n\t\t} else {\r\n\t\t\t$array.insertIndex(this._groups[key], index, x);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an item from the list.\r\n\t *\r\n\t * @param x Item to remove\r\n\t */\r\n\tprivate _remove(x: A): void {\r\n\t\tconst key = this._getKey(x);\r\n\r\n\t\tconst values = this._groups[key];\r\n\r\n\t\tif (values != null) {\r\n\t\t\t$array.remove(values, x);\r\n\r\n\t\t\tif (values.length === 0) {\r\n\t\t\t\tdelete this._groups[key];\r\n\r\n\t\t\t\tconst { found, index } = $array.getSortedIndex(this._keys, this._sort, key);\r\n\r\n\t\t\t\tif (found) {\r\n\t\t\t\t\t$array.removeIndex(this._keys, index);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(\"Key doesn't exist: \" + key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t */\r\n\tconstructor(\r\n\t\tlist: $iter.Iterable<A> & {\r\n\t\t\tevents: EventDispatcher<{\r\n\t\t\t\tinserted: { newValue: A },\r\n\t\t\t\tremoved: { oldValue: A }\r\n\t\t\t}>;\r\n\t\t},\r\n\t\tgetKey: (value: A) => number,\r\n\t\tsort: (left: number, right: number) => Ordering\r\n\t) {\r\n\t\tsuper([\r\n\t\t\tlist.events.on(\"inserted\", (x) => {\r\n\t\t\t\tconst value = x.newValue;\r\n\t\t\t\tconst key = this._getKey(value);\r\n\r\n\t\t\t\tlet index = 0;\r\n\r\n\t\t\t\t$iter.eachContinue(list.iterator(), (x) => {\r\n\t\t\t\t\tif (x === value) {\r\n\t\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t\t} else if (this._getKey(x) === key) {\r\n\t\t\t\t\t\t++index;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._insert(value, key, index);\r\n\t\t\t}, undefined, false),\r\n\r\n\t\t\tlist.events.on(\"removed\", (x) => {\r\n\t\t\t\tthis._remove(x.oldValue);\r\n\t\t\t}, undefined, false)\r\n\t\t]);\r\n\r\n\t\tthis._getKey = getKey;\r\n\t\tthis._sort = sort;\r\n\r\n\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\tthis._insert(x, getKey(x));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator for the list.\r\n\t *\r\n\t * The iterator will iterate through all items in all groups.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<A> {\r\n\t\treturn $iter.flatten($iter.map($iter.fromArray(this._keys), (key) => {\r\n\t\t\treturn $iter.fromArray(this._groups[key]);\r\n\t\t}));\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @todo Description\r\n * @ignore Exclude from docs\r\n */\r\nexport type ListLike<A> = $iter.Iterable<A> & {\r\n\tevents: EventDispatcher<{ removed: { oldValue: A } }>;\r\n};\r\n\r\n/**\r\n * A disposable list, which when disposed itself will call `dispose()` method\r\n * on all its items.\r\n */\r\nexport class ListDisposer<A extends IDisposer> extends Disposer {\r\n\tconstructor(list: ListLike<A>, disposeOnRemove: boolean = true) {\r\n\t\tif (disposeOnRemove) {\r\n\t\t\tconst disposer = list.events.on(\"removed\", (x) => {\r\n\t\t\t\tx.oldValue.dispose();\r\n\t\t\t}, undefined, false);\r\n\r\n\t\t\tsuper(() => {\r\n\t\t\t\tdisposer.dispose();\r\n\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t} else {\r\n\t\t\tsuper(() => {\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(list.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n */\r\nfunction checkBounds(index: number, len: number): void {\r\n\tif (!(index >= 0 && index < len)) {\r\n\t\tthrow new Error(\"Index out of bounds: \" + index);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\r\nexport class List<T> {\r\n\r\n\t/**\r\n\t * List values.\r\n\t */\r\n\tprivate _values: Array<T>;\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t */\r\n\tpublic events: EventDispatcher<AMEvent<this, IListEvents<T>>> = new EventDispatcher();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param initial  Inital list of values to add to list\r\n\t */\r\n\tconstructor(initial: Array<T> = []) {\r\n\t\tthis._values = initial;\r\n\t}\r\n\r\n\t/**\r\n\t * An array of values in the list.\r\n\t *\r\n\t * Do not use this property to add values. Rather use dedicated methods, like\r\n\t * `push()`, `removeIndex()`, etc.\r\n\t *\r\n\t * @readonly\r\n\t * @return List values\r\n\t */\r\n\tpublic get values(): Array<T> {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if list contains specific item reference.\r\n\t *\r\n\t * @param item  Item to search for\r\n\t * @return `true` if found, `false` if not found\r\n\t */\r\n\tpublic contains(value: T): boolean {\r\n\t\treturn this._values.indexOf(value) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes specific item from the list.\r\n\t *\r\n\t * @param item An item to remove\r\n\t */\r\n\tpublic removeValue(value: T): void {\r\n\t\tlet i = 0;\r\n\t\tlet length = this._values.length;\r\n\r\n\t\twhile (i < length) {\r\n\t\t\t// TODO handle NaN\r\n\t\t\tif (this._values[i] === value) {\r\n\t\t\t\tthis.removeIndex(i);\r\n\t\t\t\t--length;\r\n\r\n\t\t\t} else {\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Searches the list for specific item and returns its index.\r\n\t *\r\n\t * @param item  An item to search for\r\n\t * @return Index or -1 if not found\r\n\t */\r\n\tpublic indexOf(value: T): number {\r\n\t\treturn $array.indexOf(this._values, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Number of items in list.\r\n\t *\r\n\t * @readonly\r\n\t * @return Number of items\r\n\t */\r\n\tpublic get length(): number {\r\n\t\treturn this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if there's a value at specific index.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return Value exists?\r\n\t */\r\n\tpublic hasIndex(index: number): boolean {\r\n\t\treturn index >= 0 && index < this._values.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an item at specified index.\r\n\t *\r\n\t * @param index  Index\r\n\t * @return List item\r\n\t */\r\n\tpublic getIndex(index: number): T | undefined {\r\n\t\treturn this._values[index];\r\n\t}\r\n\r\n\t/**\r\n\t * Sets value at specific index.\r\n\t *\r\n\t * If there's already a value at the index, it is overwritten.\r\n\t *\r\n\t * @param index  Index\r\n\t * @param value  New value\r\n\t * @return New value\r\n\t */\r\n\tpublic setIndex(index: number, value: T): T {\r\n\t\tcheckBounds(index, this._values.length);\r\n\r\n\t\tconst oldValue = this._values[index];\r\n\r\n\t\t// Do nothing if the old value and the new value are the same\r\n\t\tif (oldValue !== value) {\r\n\t\t\tthis._values[index] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn oldValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item to the list at a specific index, which pushes all the other\r\n\t * items further down the list.\r\n\t *\r\n\t * @param index Index\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic insertIndex(index: number, value: T): void {\r\n\t\tcheckBounds(index, this._values.length + 1);\r\n\r\n\t\t$array.insertIndex(this._values, index, value);\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_sortQuicksort description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param low    [description]\r\n\t * @param high   [description]\r\n\t * @param order  [description]\r\n\t */\r\n\tprivate _sortQuicksort(low: number, high: number, order: (left: T, right: T) => Ordering): void {\r\n\t\tif (low < high) {\r\n\t\t\tconst p = this._sortPartition(low, high, order);\r\n\t\t\tthis._sortQuicksort(low, p, order);\r\n\t\t\tthis._sortQuicksort(p + 1, high, order);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [_sortPartition description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param low    [description]\r\n\t * @param high   [description]\r\n\t * @param order  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprivate _sortPartition(low: number, high: number, order: (left: T, right: T) => Ordering): number {\r\n\t\tconst values = this._values;\r\n\t\tconst pivot = values[low];\r\n\r\n\t\tlet i = low - 1;\r\n\t\tlet j = high + 1;\r\n\r\n\t\tfor (; ;) {\r\n\t\t\tdo {\r\n\t\t\t\t++i;\r\n\t\t\t} while (order(values[i], pivot) < 0);\r\n\r\n\t\t\tdo {\r\n\t\t\t\t--j;\r\n\t\t\t} while (order(values[j], pivot) > 0);\r\n\r\n\t\t\tif (i >= j) {\r\n\t\t\t\treturn j;\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.swap(i, j);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Reorders list items according to specific ordering function.\r\n\t *\r\n\t * @param order  Ordering function\r\n\t */\r\n\tpublic sort(order: (left: T, right: T) => Ordering): void {\r\n\t\t// https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\r\n\t\t// @todo faster implementation of this\r\n\t\t// @todo test this\r\n\t\tthis._sortQuicksort(0, this._values.length - 1, order);\r\n\t}\r\n\r\n\t/**\r\n\t * Swaps indexes of two items in the list.\r\n\t *\r\n\t * @param a  Item 1\r\n\t * @param b  Item 2\r\n\t */\r\n\tpublic swap(a: number, b: number): void {\r\n\t\tconst len = this._values.length;\r\n\r\n\t\tcheckBounds(a, len);\r\n\t\tcheckBounds(b, len);\r\n\r\n\t\tif (a !== b) {\r\n\t\t\tconst value_a = this._values[a];\r\n\t\t\tconst value_b = this._values[b];\r\n\r\n\t\t\tthis._values[a] = value_b;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: a,\r\n\t\t\t\t\toldValue: value_a,\r\n\t\t\t\t\tnewValue: value_b\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._values[b] = value_a;\r\n\r\n\t\t\tif (this.events.isEnabled(\"setIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"setIndex\", {\r\n\t\t\t\t\ttype: \"setIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: b,\r\n\t\t\t\t\toldValue: value_b,\r\n\t\t\t\t\tnewValue: value_a\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes a value at specific index.\r\n\t *\r\n\t * @param index  Index of value to remove\r\n\t * @return Removed value\r\n\t */\r\n\tpublic removeIndex(index: number): T {\r\n\t\tcheckBounds(index, this._values.length);\r\n\r\n\t\tconst oldValue = this._values[index];\r\n\r\n\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"removeIndex\", {\r\n\t\t\t\ttype: \"removeIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\toldValue: oldValue\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\ttype: \"removed\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\toldValue: oldValue\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn oldValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves an item to a specific index within the list.\r\n\t *\r\n\t * If the index is not specified it will move the item to the end of the\r\n\t * list.\r\n\t *\r\n\t * @param value  Item to move\r\n\t * @param index  Index to place item at\r\n\t */\r\n\tpublic moveValue(value: T, toIndex?: number): void {\r\n\t\t// TODO don't do anything if the desired index is the same as the current index\r\n\t\tlet index = this.indexOf(value);\r\n\r\n\t\t// TODO remove all old values rather than only the first ?\r\n\t\tif (index !== -1) {\r\n\t\t\tconst oldValue = this._values[index];\r\n\r\n\t\t\t$array.removeIndex(this._values, index);\r\n\r\n\t\t\tif (this.events.isEnabled(\"removeIndex\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removeIndex\", {\r\n\t\t\t\t\ttype: \"removeIndex\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\toldValue: oldValue\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (toIndex == null) {\r\n\t\t\ttoIndex = this._values.length;\r\n\t\t\tthis._values.push(value);\r\n\r\n\t\t} else {\r\n\t\t\t$array.insertIndex(this._values, toIndex, value);\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: toIndex,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (index === -1) {\r\n\t\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item to the end of the list.\r\n\t *\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic push<K extends T>(value: K): K {\r\n\t\tconst index = this._values.push(value) - 1;\r\n\r\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"insertIndex\", {\r\n\t\t\t\ttype: \"insertIndex\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\ttype: \"inserted\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tnewValue: value\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an item as a first item in the list.\r\n\t *\r\n\t * @param item  An item to add\r\n\t */\r\n\tpublic unshift(value: T): void {\r\n\t\tthis.insertIndex(0, value);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds multiple items to the list.\r\n\t *\r\n\t * @param items  An Array of items to add\r\n\t */\r\n\tpublic pushAll(values: Array<T>): void {\r\n\t\t$array.each(values, (value) => {\r\n\t\t\tthis.push(value);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies and adds items from abother list.\r\n\t *\r\n\t * @param source  A list top copy items from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tthis.pushAll(source._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the last item from the list, and removes it.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic pop(): $type.Optional<T> {\r\n\t\tlet index = this._values.length - 1;\r\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the first item from the list, and removes it.\r\n\t *\r\n\t * @return Item\r\n\t */\r\n\tpublic shift(): $type.Optional<T> {\r\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple items to the list.\r\n\t *\r\n\t * All current items are removed.\r\n\t *\r\n\t * @param newArray  New items\r\n\t */\r\n\tpublic setAll(newArray: Array<T>): void {\r\n\t\t// @tod if a value exists in both the new and old arrays, don't send remove/insert events\r\n\t\tconst oldArray = $array.copy(this._values);\r\n\r\n\t\tthis._values.length = 0;\r\n\r\n\t\t$array.each(newArray, (value) => {\r\n\t\t\tthis._values.push(value);\r\n\t\t});\r\n\r\n\t\tif (this.events.isEnabled(\"setAll\")) {\r\n\t\t\tthis.events.dispatchImmediately(\"setAll\", {\r\n\t\t\t\ttype: \"setAll\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\toldArray: oldArray,\r\n\t\t\t\tnewArray: this._values // TODO make a copy ?\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"removed\")) {\r\n\t\t\t$array.each(oldArray, (x) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"removed\", {\r\n\t\t\t\t\ttype: \"removed\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\toldValue: x\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.events.isEnabled(\"inserted\")) {\r\n\t\t\t$array.each(this._values, (x) => {\r\n\t\t\t\tthis.events.dispatchImmediately(\"inserted\", {\r\n\t\t\t\t\ttype: \"inserted\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tnewValue: x\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all items from the list.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis.setAll([]);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list iterator.\r\n\t *\r\n\t * @return Iterator\r\n\t */\r\n\tpublic iterator(): $iter.Iterator<T> {\r\n\t\treturn $iter.fromArray(this._values);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an ES6 iterator for the list.\r\n\t */\r\n\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\tconst length = this._values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tyield this._values[i];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calls `f` for each element in the list.\r\n\t *\r\n\t * `f` should have at least one parameter defined which will get a current\r\n\t * item, with optional second argument - index.\r\n\t */\r\n\tpublic each(f: (value: T, index: number) => void): void {\r\n\t\t$array.each(this._values, f);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a specific range of list items, which can be iterated.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Code duplication with IndexedIterable\r\n\t * @param start  Start index\r\n\t * @param end    End index\r\n\t * @return Range\r\n\t */\r\n\tpublic range(start: number, end: number): IndexedIterable<T> {\r\n\t\tif (start <= end) {\r\n\t\t\tconst diff = end - start;\r\n\r\n\t\t\tstart = Math.max(start, 0);\r\n\t\t\tend = Math.min(start + diff, this._values.length);\r\n\r\n\t\t\treturn new IndexedIterable(this._values, start, end);\r\n\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Start index must be lower than end index\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an iterator that has list items sorted backwards.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return List\r\n\t */\r\n\tpublic backwards(): IndexedIterable<T> {\r\n\t\treturn new IndexedIterable(this._values, this._values.length, 0);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * A version of a [[List]] that has a \"template\".\r\n *\r\n * A template is an instance of an object, that can be used to create new\r\n * elements in the list without actually needing to create instances for those.\r\n *\r\n * When new element is created in the list, e.g. by calling its `create()`\r\n * method, an exact copy of the element is created (including properties and\r\n * other attributes), inserted into the list and returned.\r\n */\r\nexport class ListTemplate<T extends IClone<T> & { isTemplate: boolean }> extends List<T> implements IClone<ListTemplate<T>> {\r\n\t/**\r\n\t * A template object.\r\n\t *\r\n\t * @todo Make this private\r\n\t */\r\n\tpublic _template!: T;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t *\r\n\t * @param t Template object\r\n\t */\r\n\tpublic constructor(t: T) {\r\n\t\tsuper();\r\n\t\tthis.template = t;\r\n\t}\r\n\r\n\t/**\r\n\t * A \"template\" object to copy all properties from when creating new list\r\n\t * items.\r\n\t *\r\n\t * @param v  Template object\r\n\t */\r\n\tpublic set template(v: T) {\r\n\t\tv.isTemplate = true;\r\n\t\tthis._template = v;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Template object\r\n\t */\r\n\tpublic get template(): T {\r\n\t\treturn this._template;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all elements from other list.\r\n\t *\r\n\t * @param source  Source list\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\t$iter.each(source.iterator(), (value) => {\r\n\t\t\tthis.push(value.clone());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a new object of the specified type, adds it to the end of\r\n\t * the list, and returns it.\r\n\t *\r\n\t * @param make  Item type to use. Will use the default type for the list if not specified.\r\n\t * @return      Newly created item\r\n\t */\r\n\tpublic create(make: { new(): T; }): T;\r\n\tpublic create(): T;\r\n\tpublic create(make?: { new(): T; }): T {\r\n\t\tconst clone =\r\n\t\t\t(make != null\r\n\t\t\t\t? new make()\r\n\t\t\t\t: this.template.clone());\r\n\r\n\t\tthis.push(clone);\r\n\r\n\t\treturn clone;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an exact clone of the list, including its items and template.\r\n\t *\r\n\t * @return New list\r\n\t */\r\n\tpublic clone(): ListTemplate<T> {\r\n\t\tconst out = new ListTemplate(this.template);\r\n\r\n\t\tconst values = this.values;\r\n\r\n\t\tconst length = values.length;\r\n\r\n\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\tout.push(values[i].clone());\r\n\t\t}\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}