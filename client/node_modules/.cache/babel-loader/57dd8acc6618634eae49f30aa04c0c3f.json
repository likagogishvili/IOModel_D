{"ast":null,"code":"/** @ignore */\n\n/** */\nimport * as $array from \"./Array\";\n/**\r\n * @ignore\r\n */\n\nvar Native =\n/** @class */\nfunction () {\n  function Native() {\n    var _this = this;\n\n    Object.defineProperty(this, \"_observer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_targets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    this._observer = new ResizeObserver(function (entries) {\n      $array.each(entries, function (entry) {\n        $array.each(_this._targets, function (x) {\n          if (x.target === entry.target) {\n            x.callback();\n          }\n        });\n      });\n    });\n  }\n\n  Object.defineProperty(Native.prototype, \"addTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target, callback) {\n      this._observer.observe(target, {\n        box: \"border-box\"\n      });\n\n      this._targets.push({\n        target: target,\n        callback: callback\n      });\n    }\n  });\n  Object.defineProperty(Native.prototype, \"removeTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      this._observer.unobserve(target);\n\n      $array.keepIf(this._targets, function (x) {\n        return x.target !== target;\n      });\n    }\n  });\n  return Native;\n}();\n/**\r\n * @ignore\r\n */\n\n\nvar Raf =\n/** @class */\nfunction () {\n  function Raf() {\n    Object.defineProperty(this, \"_timer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, \"_targets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n\n  Object.defineProperty(Raf.prototype, \"addTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target, callback) {\n      var _this = this;\n\n      if (this._timer === null) {\n        var lastTime_1 = null;\n\n        var loop_1 = function () {\n          var currentTime = Date.now();\n\n          if (lastTime_1 === null || currentTime > lastTime_1 + Raf.delay) {\n            lastTime_1 = currentTime;\n            $array.each(_this._targets, function (x) {\n              var newSize = x.target.getBoundingClientRect();\n\n              if (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n                x.size = newSize;\n                x.callback();\n              }\n            });\n          }\n\n          if (_this._targets.length === 0) {\n            _this._timer = null;\n          } else {\n            _this._timer = requestAnimationFrame(loop_1);\n          }\n        };\n\n        this._timer = requestAnimationFrame(loop_1);\n      } // We start off with fake bounds so that sensor always kicks in\n\n\n      var size = {\n        width: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n        x: 0,\n        y: 0\n      };\n\n      this._targets.push({\n        target: target,\n        callback: callback,\n        size: size\n      });\n    }\n  });\n  Object.defineProperty(Raf.prototype, \"removeTarget\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      $array.keepIf(this._targets, function (x) {\n        return x.target !== target;\n      });\n\n      if (this._targets.length === 0) {\n        if (this._timer !== null) {\n          cancelAnimationFrame(this._timer);\n          this._timer = null;\n        }\n      }\n    }\n  });\n  Object.defineProperty(Raf, \"delay\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: 200\n  });\n  return Raf;\n}();\n/**\r\n * @ignore\r\n */\n\n\nvar observer = null;\n/**\r\n * @ignore\r\n */\n\nfunction makeSensor() {\n  if (observer === null) {\n    if (typeof ResizeObserver !== \"undefined\") {\n      observer = new Native();\n    } else {\n      observer = new Raf();\n    }\n  }\n\n  return observer;\n}\n/**\r\n * @ignore\r\n */\n\n\nvar ResizeSensor =\n/** @class */\nfunction () {\n  function ResizeSensor(element, callback) {\n    Object.defineProperty(this, \"_sensor\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_element\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    this._sensor = makeSensor();\n    this._element = element;\n\n    this._sensor.addTarget(element, callback);\n  }\n\n  Object.defineProperty(ResizeSensor.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ResizeSensor.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._sensor.removeTarget(this._element);\n      }\n    }\n  });\n  Object.defineProperty(ResizeSensor.prototype, \"sensor\", {\n    get: function () {\n      return this._sensor;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ResizeSensor;\n}();\n\nexport { ResizeSensor };","map":{"version":3,"mappings":"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","names":["$array","Object","_observer","ResizeObserver","entries","each","entry","_this","_targets","x","target","callback","observe","box","push","unobserve","keepIf","_timer","lastTime_1","loop_1","currentTime","Date","now","Raf","delay","newSize","getBoundingClientRect","width","size","height","length","requestAnimationFrame","left","right","top","bottom","y","cancelAnimationFrame","observer","makeSensor","Native","element","_sensor","_element","addTarget","_disposed","removeTarget","ResizeSensor"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/ResizeSensor.ts"],"sourcesContent":["/** @ignore *//** */\n\nimport type { IDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\n\n/**\n * @ignore\n */\ninterface Sensor {\n\taddTarget(target: Element, callback: () => void): void;\n\tremoveTarget(target: Element): void;\n}\n\n/**\n * @ignore\n */\ndeclare const ResizeObserver: any;\n\n/**\n * @ignore\n */\nclass Native implements Sensor {\n\tprivate _observer: any;\n\tprivate _targets: Array<{ target: Element, callback: () => void }> = [];\n\n\tconstructor() {\n\t\tthis._observer = new ResizeObserver((entries: Array<any>) => {\n\t\t\t$array.each(entries, (entry) => {\n\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\tif (x.target === entry.target) {\n\t\t\t\t\t\tx.callback();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tthis._observer.observe(target, { box: \"border-box\" });\n\t\tthis._targets.push({ target, callback });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\tthis._observer.unobserve(target);\n\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\t}\n}\n\n/**\n * @ignore\n */\ninterface ClientBounds {\n\twidth: number,\n\theight: number,\n\tleft: number,\n\tright: number,\n\ttop: number,\n\tbottom: number,\n\tx: number,\n\ty: number\n}\n\n\n/**\n * @ignore\n */\nclass Raf implements Sensor {\n\tpublic static delay: number = 200;\n\n\tprivate _timer: number | null = null;\n\tprivate _targets: Array<{ target: Element, callback: () => void, size: ClientRect | DOMRect | ClientBounds }> = [];\n\n\taddTarget(target: Element, callback: () => void) {\n\t\tif (this._timer === null) {\n\t\t\tlet lastTime: number | null = null;\n\n\t\t\tconst loop = () => {\n\t\t\t\tconst currentTime = Date.now();\n\n\t\t\t\tif (lastTime === null || currentTime > (lastTime + Raf.delay)) {\n\t\t\t\t\tlastTime = currentTime;\n\n\t\t\t\t\t$array.each(this._targets, (x) => {\n\t\t\t\t\t\tlet newSize = x.target.getBoundingClientRect();\n\n\t\t\t\t\t\tif (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n\t\t\t\t\t\t\tx.size = newSize;\n\t\t\t\t\t\t\tx.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (this._targets.length === 0) {\n\t\t\t\t\tthis._timer = null;\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._timer = requestAnimationFrame(loop);\n\t\t}\n\n\t\t// We start off with fake bounds so that sensor always kicks in\n\t\tlet size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };\n\t\tthis._targets.push({ target, callback, size });\n\t}\n\n\tremoveTarget(target: Element) {\n\t\t$array.keepIf(this._targets, (x) => {\n\t\t\treturn x.target !== target;\n\t\t});\n\n\t\tif (this._targets.length === 0) {\n\t\t\tif (this._timer !== null) {\n\t\t\t\tcancelAnimationFrame(this._timer);\n\t\t\t\tthis._timer = null;\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @ignore\n */\nlet observer: Sensor | null = null;\n\n/**\n * @ignore\n */\nfunction makeSensor(): Sensor {\n\tif (observer === null) {\n\t\tif (typeof ResizeObserver !== \"undefined\") {\n\t\t\tobserver = new Native();\n\n\t\t} else {\n\t\t\tobserver = new Raf();\n\t\t}\n\t}\n\n\treturn observer;\n}\n\n/**\n * @ignore\n */\nexport class ResizeSensor implements IDisposer {\n\tprivate _sensor: Sensor;\n\tprivate _element: Element;\n\tprivate _disposed: boolean = false;\n\n\tconstructor(element: Element, callback: () => void) {\n\t\tthis._sensor = makeSensor();\n\t\tthis._element = element;\n\t\tthis._sensor.addTarget(element, callback);\n\t}\n\n\tpublic isDisposed() {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\t\t\tthis._sensor.removeTarget(this._element);\n\t\t}\n\t}\n\n\tpublic get sensor(): Sensor {\n\t\treturn this._sensor;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}