{"ast":null,"code":"/**\r\n * Module for building Gauge charts.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { RadarChart, RadarChartDataItem } from \"./RadarChart\";\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\nimport { ClockHand } from \"../elements/ClockHand\";\nimport { registry } from \"../../core/Registry\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar GaugeChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(GaugeChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GaugeChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"GaugeChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return GaugeChartDataItem;\n}(RadarChartDataItem);\n\nexport { GaugeChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\n\nvar GaugeChart =\n/** @class */\nfunction (_super) {\n  __extends(GaugeChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function GaugeChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"GaugeChart\";\n    _this.startAngle = 180;\n    _this.endAngle = 360;\n    _this.hands = new ListTemplate(new ClockHand());\n\n    _this.hands.events.on(\"inserted\", _this.processHand, _this, false);\n\n    _this._disposers.push(new ListDisposer(_this.hands));\n\n    _this._disposers.push(_this.hands.template); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  GaugeChart.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this); // Add a default screen reader title for accessibility\n    // This will be overridden in screen reader if there are any `titles` set\n\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Gauge chart\");\n    }\n  };\n  /**\r\n   * Decorates a [[ClockHand]] when it is added to the chart.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  GaugeChart.prototype.processHand = function (event) {\n    var hand = event.newValue;\n\n    if (!hand.axis) {\n      hand.axis = this.xAxes.getIndex(0);\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  GaugeChart.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"hands\") {\n      return 1;\n    } else if (b == \"hands\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n\n  return GaugeChart;\n}(RadarChart);\n\nexport { GaugeChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,UAAT,EAA2GC,kBAA3G,QAAqI,cAArI;AACA,SAASC,YAAT,EAAoCC,YAApC,QAAwD,uBAAxD;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AAEA;;;;;;;AAOA;;;;;;AAKA;AAAA;AAAA;EAAwCC;EAOvC;;;;;EAGA;IAAA,YACCC,qBAAO,IADR;;IAECC,KAAI,CAACC,SAAL,GAAiB,oBAAjB;;IACAD,KAAI,CAACE,UAAL;;;EACA;;EAEF;AAAC,CAhBD,CAAwCV,kBAAxC;;;AAiDA;;;;;;;AAOA;;;;;;;;;AAQA;AAAA;AAAA;EAAgCM;EA2B/B;;;;;EAGA;IAAA,YAEC;IACAC,qBAAO,IAHR;;IAICC,KAAI,CAACC,SAAL,GAAiB,YAAjB;IAEAD,KAAI,CAACG,UAAL,GAAkB,GAAlB;IACAH,KAAI,CAACI,QAAL,GAAgB,GAAhB;IAEAJ,KAAI,CAACK,KAAL,GAAa,IAAIZ,YAAJ,CAA4B,IAAIE,SAAJ,EAA5B,CAAb;;IACAK,KAAI,CAACK,KAAL,CAAWC,MAAX,CAAkBC,EAAlB,CAAqB,UAArB,EAAiCP,KAAI,CAACQ,WAAtC,EAAmDR,KAAnD,EAAyD,KAAzD;;IAEAA,KAAI,CAACS,UAAL,CAAgBC,IAAhB,CAAqB,IAAIhB,YAAJ,CAAiBM,KAAI,CAACK,KAAtB,CAArB;;IACAL,KAAI,CAACS,UAAL,CAAgBC,IAAhB,CAAqBV,KAAI,CAACK,KAAL,CAAWM,QAAhC,EAbD,CAeC;;;IACAX,KAAI,CAACE,UAAL;;;EACA;EAED;;;;;;EAIUU,6CAAV;IAECb,iBAAMc,qBAAN,CAA2BC,IAA3B,CAA2B,IAA3B,EAFD,CAIC;IACA;;;IACA,IAAI,CAACjB,KAAK,CAACkB,QAAN,CAAe,KAAKC,WAApB,CAAL,EAAuC;MACtC,KAAKA,WAAL,GAAmB,KAAKC,QAAL,CAAcC,SAAd,CAAwB,aAAxB,CAAnB;IACA;EAED,CAVS;EAYV;;;;;;;EAKUN,mCAAV,UAAsBO,KAAtB,EAA+D;IAC9D,IAAIC,IAAI,GAAcD,KAAK,CAACE,QAA5B;;IACA,IAAI,CAACD,IAAI,CAACE,IAAV,EAAgB;MACfF,IAAI,CAACE,IAAL,GAAY,KAAKC,KAAL,CAAWC,QAAX,CAAoB,CAApB,CAAZ;IACA;EACD,CALS;EAOV;;;;;;;;;;;;EAUUZ,mCAAV,UAAsBa,CAAtB,EAAiCC,CAAjC,EAA0C;IACzC,IAAID,CAAC,IAAIC,CAAT,EAAY;MACX,OAAO,CAAP;IACA,CAFD,CAGA;IAHA,KAIK,IAAID,CAAC,IAAI,OAAT,EAAkB;MACtB,OAAO,CAAP;IACA,CAFI,MAGA,IAAIC,CAAC,IAAI,OAAT,EAAkB;MACtB,OAAO,CAAC,CAAR;IACA,CAFI,MAGA;MACJ,OAAO3B,iBAAM4B,WAAN,CAAiBb,IAAjB,CAAiB,IAAjB,EAAkBW,CAAlB,EAAqBC,CAArB,CAAP;IACA;EACD,CAdS;;EAgBX;AAAC,CAvGD,CAAgCnC,UAAhC;;;AAyGA;;;;;;;AAMAK,QAAQ,CAACgC,iBAAT,CAA2B,YAA3B,IAA2ChB,UAA3C","names":["RadarChart","RadarChartDataItem","ListTemplate","ListDisposer","ClockHand","registry","$type","__extends","_super","_this","className","applyTheme","startAngle","endAngle","hands","events","on","processHand","_disposers","push","template","GaugeChart","applyInternalDefaults","call","hasValue","readerTitle","language","translate","event","hand","newValue","axis","xAxes","getIndex","a","b","configOrder","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/GaugeChart.ts"],"sourcesContent":["/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n"]},"metadata":{},"sourceType":"module"}