{"ast":null,"code":"/**\r\n * Line drawing functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Sprite } from \"../Sprite\";\nimport { color } from \"../utils/Color\";\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $math from \"../utils/Math\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Line() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Line\";\n    _this.element = _this.paper.add(\"line\");\n    _this.fill = color(); //\"none\";\n\n    _this.x1 = 0;\n    _this.y1 = 0;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the line.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Line.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (this.x1 == this.x2 || this.y1 == this.y2) {\n      this.pixelPerfect = true;\n    } else {\n      this.pixelPerfect = false;\n    }\n\n    this.x1 = this.x1;\n    this.x2 = this.x2;\n    this.y1 = this.y1;\n    this.y2 = this.y2;\n  };\n\n  Object.defineProperty(Line.prototype, \"x1\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x1\");\n    },\n\n    /**\r\n     * X coordinate of first end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      var delta = 0;\n\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n\n      this.setPropertyValue(\"x1\", value, true);\n      this.element.attr({\n        \"x1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"x2\", {\n    /**\r\n     * @return X\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"x2\");\n\n      if (!$type.isNumber(value)) {\n        value = this.pixelWidth;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * X coordinate of second end.\r\n     *\r\n     * @param value X\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"x2\", value, true);\n      this.element.attr({\n        \"x2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y1\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y1\");\n    },\n\n    /**\r\n     * Y coordinate of first end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      var delta = 0;\n\n      if (this.pixelPerfect && this.stroke instanceof LinearGradient) {\n        delta = 0.00001;\n      }\n\n      this.setPropertyValue(\"y1\", value, true);\n      this.element.attr({\n        \"y1\": value + delta\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Line.prototype, \"y2\", {\n    /**\r\n     * @return Y\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"y2\");\n\n      if (!$type.isNumber(value)) {\n        value = this.pixelHeight;\n      }\n\n      return value;\n    },\n\n    /**\r\n     * Y coordinate of second end.\r\n     *\r\n     * @param value Y\r\n     */\n    set: function (value) {\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"y2\", value, true);\n      this.element.attr({\n        \"y2\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Line.prototype.positionToPoint = function (position) {\n    var point1 = {\n      x: this.x1,\n      y: this.y1\n    };\n    var point2 = {\n      x: this.x2,\n      y: this.y2\n    };\n    var point = $math.getMidPoint(point1, point2, position);\n    var angle = $math.getAngle(point1, point2);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n\n  return Line;\n}(Sprite);\n\nexport { Line };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Line\"] = Line;","map":{"version":3,"mappings":"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","names":["Sprite","color","LinearGradient","registry","$type","$math","__extends","_super","_this","className","element","paper","add","fill","x1","y1","applyTheme","Line","draw","call","x2","y2","pixelPerfect","Object","getPropertyValue","value","isNumber","delta","stroke","setPropertyValue","attr","pixelWidth","pixelHeight","position","point1","x","y","point2","point","getMidPoint","angle","getAngle","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/Line.ts"],"sourcesContent":["/**\r\n * Line drawing functionality.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite, ISpriteProperties, ISpriteAdapters, ISpriteEvents } from \"../Sprite\";\r\nimport { color } from \"../utils/Color\";\r\nimport { LinearGradient } from \"../rendering/fills/LinearGradient\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $math from \"../utils/Math\";\r\nimport { IOrientationPoint } from \"../defs/IPoint\";\r\n\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Line]].\r\n */\r\nexport interface ILineProperties extends ISpriteProperties {\r\n\r\n\t/**\r\n\t * X coordinate of first end.\r\n\t */\r\n\tx1?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of first end.\r\n\t */\r\n\ty1?: number;\r\n\r\n\t/**\r\n\t * X coordinate of second end.\r\n\t */\r\n\tx2?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of second end.\r\n\t */\r\n\ty2?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Line]].\r\n */\r\nexport interface ILineEvents extends ISpriteEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Line]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineAdapters extends ISpriteAdapters, ILineProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a line.\r\n *\r\n * @see {@link ILineEvents} for a list of available events\r\n * @see {@link ILineAdapters} for a list of available Adapters\r\n */\r\nexport class Line extends Sprite {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Line\";\r\n\t\tthis.element = this.paper.add(\"line\");\r\n\t\tthis.fill = color(); //\"none\";\r\n\r\n\t\tthis.x1 = 0;\r\n\t\tthis.y1 = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (this.x1 == this.x2 || this.y1 == this.y2) {\r\n\t\t\tthis.pixelPerfect = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.pixelPerfect = false;\r\n\t\t}\r\n\r\n\t\tthis.x1 = this.x1;\r\n\t\tthis.x2 = this.x2;\r\n\r\n\t\tthis.y1 = this.y1;\r\n\t\tthis.y2 = this.y2;\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of first end.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tlet delta = 0;\r\n\t\tif (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n\t\t\tdelta = 0.00001;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"x1\", value, true);\r\n\t\tthis.element.attr({ \"x1\": value + delta });\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.getPropertyValue(\"x1\");\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of second end.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set x2(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"x2\", value, true);\r\n\t\tthis.element.attr({ \"x2\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x2(): number {\r\n\t\tlet value = this.getPropertyValue(\"x2\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.pixelWidth;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of first end.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\tlet delta = 0;\r\n\t\tif (this.pixelPerfect && this.stroke instanceof LinearGradient) {\r\n\t\t\tdelta = 0.00001;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"y1\", value, true);\r\n\t\tthis.element.attr({ \"y1\": value + delta });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.getPropertyValue(\"y1\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of second end.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set y2(value: number) {\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"y2\", value, true);\r\n\t\tthis.element.attr({ \"y2\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y2(): number {\r\n\t\tlet value = this.getPropertyValue(\"y2\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.pixelHeight;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet point1 = { x: this.x1, y: this.y1 };\r\n\t\tlet point2 = { x: this.x2, y: this.y2 };\r\n\t\tlet point = $math.getMidPoint(point1, point2, position);\r\n\t\tlet angle = $math.getAngle(point1, point2);\r\n\r\n\t\treturn {x:point.x, y:point.y, angle:angle};\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Line\"] = Line;\r\n"]},"metadata":{},"sourceType":"module"}