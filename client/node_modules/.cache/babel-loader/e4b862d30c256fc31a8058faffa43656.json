{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { List } from \"./List\";\nimport * as $array from \"./Array\";\n/**\r\n * A version of [[List]] to hold children of the [[Container]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\r\n */\n\nvar Children =\n/** @class */\nfunction (_super) {\n  __extends(Children, _super);\n\n  function Children(container) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_container\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"_events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this._container = container;\n    _this._events = _this.events.onAll(function (change) {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, function (x) {\n          _this._onRemoved(x);\n        });\n      } else if (change.type === \"push\") {\n        _this._onInserted(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        _this._onRemoved(change.oldValue);\n\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"insertIndex\") {\n        _this._onInserted(change.newValue, change.index);\n      } else if (change.type === \"removeIndex\") {\n        _this._onRemoved(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        _this._onRemoved(change.value);\n\n        _this._onInserted(change.value, change.newIndex);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Children.prototype, \"_onInserted\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child, index) {\n      child._setParent(this._container, true);\n\n      var childrenDisplay = this._container._childrenDisplay;\n\n      if (index === undefined) {\n        childrenDisplay.addChild(child._display);\n      } else {\n        childrenDisplay.addChildAt(child._display, index);\n      }\n    }\n  });\n  Object.defineProperty(Children.prototype, \"_onRemoved\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (child) {\n      this._container._childrenDisplay.removeChild(child._display);\n\n      this._container.markDirtyBounds();\n\n      this._container.markDirty();\n    }\n  });\n  /**\r\n   * Returns `true` if obejct is disposed.\r\n   */\n\n  Object.defineProperty(Children.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  /**\r\n   * Permanently dispose this object.\r\n   */\n\n  Object.defineProperty(Children.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        this._events.dispose();\n\n        $array.each(this.values, function (child) {\n          child.dispose();\n        });\n      }\n    }\n  });\n  return Children;\n}(List);\n\nexport { Children };","map":{"version":3,"mappings":"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","names":["List","$array","__extends","container","_super","Object","_this","_container","_events","events","onAll","change","type","each","oldValues","x","_onRemoved","_onInserted","newValue","oldValue","index","value","newIndex","Error","child","_setParent","childrenDisplay","_childrenDisplay","undefined","addChild","_display","addChildAt","removeChild","markDirtyBounds","markDirty","_disposed","dispose","values"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/Children.ts"],"sourcesContent":["import { List } from \"./List\";\nimport type { IDisposer } from \"./Disposer\";\nimport type { Container } from \"../render/Container\";\nimport type { Sprite } from \"../render/Sprite\";\nimport * as $array from \"./Array\";\n\n/**\n * A version of [[List]] to hold children of the [[Container]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/containers/} for more info\n */\nexport class Children<A extends Sprite> extends List<A> implements IDisposer {\n\tprivate _disposed: boolean = false;\n\tprivate _container: Container;\n\tprivate _events: IDisposer;\n\n\tpublic constructor(container: Container) {\n\t\tsuper();\n\n\t\tthis._container = container;\n\n\t\tthis._events = this.events.onAll((change) => {\n\t\t\tif (change.type === \"clear\") {\n\t\t\t\t$array.each(change.oldValues, (x) => {\n\t\t\t\t\tthis._onRemoved(x);\n\t\t\t\t});\n\n\t\t\t} else if (change.type === \"push\") {\n\t\t\t\tthis._onInserted(change.newValue);\n\n\t\t\t} else if (change.type === \"setIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"insertIndex\") {\n\t\t\t\tthis._onInserted(change.newValue, change.index);\n\n\t\t\t} else if (change.type === \"removeIndex\") {\n\t\t\t\tthis._onRemoved(change.oldValue);\n\n\t\t\t} else if (change.type === \"moveIndex\") {\n\t\t\t\tthis._onRemoved(change.value);\n\t\t\t\tthis._onInserted(change.value, change.newIndex);\n\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unknown IListEvent type\");\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _onInserted(child: A, index?: number) {\n\t\tchild._setParent(this._container, true);\n\t\tconst childrenDisplay = this._container._childrenDisplay;\n\t\tif (index === undefined) {\n\t\t\tchildrenDisplay.addChild(child._display);\n\n\t\t} else {\n\t\t\tchildrenDisplay.addChildAt(child._display, index);\n\t\t}\n\t}\n\n\tprotected _onRemoved(child: A) {\n\t\tthis._container._childrenDisplay.removeChild(child._display);\n\t\tthis._container.markDirtyBounds();\n\t\tthis._container.markDirty();\n\t}\n\n\t/**\n\t * Returns `true` if obejct is disposed.\n\t */\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\t/**\n\t * Permanently dispose this object.\n\t */\n\tpublic dispose() {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tthis._events.dispose();\n\n\t\t\t$array.each(this.values, (child) => {\n\t\t\t\tchild.dispose();\n\t\t\t});\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}