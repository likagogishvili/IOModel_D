{"ast":null,"code":"/**\r\n * Interaction Object module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { List } from \"../utils/List\";\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\nimport { getInteraction } from \"./Interaction\";\nimport * as $type from \"../utils/Type\";\n/**\r\n * Re-exports\r\n */\n\nexport { InteractionObjectEventDispatcher };\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\n\nvar InteractionObject =\n/** @class */\nfunction (_super) {\n  __extends(InteractionObject, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function InteractionObject(element) {\n    var _this = _super.call(this) || this;\n    /**\r\n     * @ignore\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n\n\n    _this._eventDispatcher = new InteractionObjectEventDispatcher(_this);\n    /**\r\n     * Collection of Disposers for various events. (so that those get disposed\r\n     * when the whole InteractionObject is disposed)\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.eventDisposers = new Dictionary();\n    /**\r\n     * A [[Dictionary]] that holds temporarily replaced original style values for\r\n     * HTML element, so that they can be restored when the functionality that\r\n     * replaced them is done.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.replacedStyles = new Dictionary();\n    _this._clickable = false;\n    _this._contextMenuDisabled = false;\n    _this._hoverable = false;\n    _this._trackable = false;\n    _this._draggable = false;\n    _this._swipeable = false;\n    _this._resizable = false;\n    _this._wheelable = false;\n    _this._inert = false;\n    /**\r\n     * Is element currently hovered?\r\n     */\n\n    _this._isHover = false;\n    /**\r\n     * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n     * hovered.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.isRealHover = false;\n    /**\r\n     * Is the element hovered by touch pointer?\r\n     */\n\n    _this._isHoverByTouch = false;\n    /**\r\n     * Has element got any pointers currently pressing down on it?\r\n     */\n\n    _this._isDown = false;\n    /**\r\n     * Does element have focus?\r\n     */\n\n    _this._isFocused = false;\n    /**\r\n     * Is element currently protected from touch interactions?\r\n     */\n\n    _this._isTouchProtected = false;\n    /**\r\n     * Options used for inertia functionality.\r\n     */\n\n    _this._inertiaOptions = new Dictionary();\n    /**\r\n     * A collection of different inertia types, currently playing out.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.inertias = new Dictionary();\n    /**\r\n     * Click/tap options.\r\n     */\n\n    _this._hitOptions = {};\n    /**\r\n     * Hover options.\r\n     */\n\n    _this._hoverOptions = {};\n    /**\r\n     * Swipe gesture options.\r\n     */\n\n    _this._swipeOptions = {};\n    /**\r\n     * Keyboard options.\r\n     */\n\n    _this._keyboardOptions = {};\n    /**\r\n     * Mouse options.\r\n     */\n\n    _this._mouseOptions = {};\n    /**\r\n     * Cursor options.\r\n     */\n\n    _this._cursorOptions = {\n      \"defaultStyle\": [{\n        \"property\": \"cursor\",\n        \"value\": \"default\"\n      }]\n    };\n\n    _this._disposers.push(_this._eventDispatcher);\n\n    _this._element = element;\n    _this.className = \"InteractionObject\";\n\n    _this._disposers.push(new DictionaryDisposer(_this.inertias));\n\n    _this._disposers.push(new DictionaryDisposer(_this.eventDisposers));\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  ;\n  Object.defineProperty(InteractionObject.prototype, \"events\", {\n    /**\r\n     * An [[EventDispatcher]] instance which holds events for this object\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHover\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHover;\n    },\n\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHover != value) {\n        this._isHover = value;\n\n        if (value) {\n          getInteraction().overObjects.moveValue(this);\n        } else {\n          this.isRealHover = false;\n          getInteraction().overObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isHoverByTouch\", {\n    /**\r\n     * @return Hovered?\r\n     */\n    get: function () {\n      return this._isHoverByTouch;\n    },\n\n    /**\r\n     * Indicates if this element is currently hovered.\r\n     *\r\n     * @param value Hovered?\r\n     */\n    set: function (value) {\n      if (this.isHoverByTouch != value) {\n        this._isHoverByTouch = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"overPointers\", {\n    /**\r\n     * A list of pointers currently over the element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List if pointers currently hovering the element\r\n     */\n    get: function () {\n      if (!this._overPointers) {\n        this._overPointers = new List();\n      }\n\n      return this._overPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isDown\", {\n    /**\r\n     * @return Has down pointers?\r\n     */\n    get: function () {\n      return this._isDown;\n    },\n\n    /**\r\n     * Indicates if this element has currently any pointers pressing on it.\r\n     *\r\n     * @param value Has down pointers?\r\n     */\n    set: function (value) {\n      if (this.isDown != value) {\n        this._isDown = value;\n\n        if (value) {\n          getInteraction().downObjects.moveValue(this);\n        } else {\n          getInteraction().downObjects.removeValue(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"downPointers\", {\n    /**\r\n     * A list of pointers currently pressing down on this element.\r\n     *\r\n     * @see {@link Pointer}\r\n     * @return List of down pointers\r\n     */\n    get: function () {\n      if (!this._downPointers) {\n        this._downPointers = new List();\n      }\n\n      return this._downPointers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isFocused\", {\n    /**\r\n     * @return Focused?\r\n     */\n    get: function () {\n      return this._isFocused;\n    },\n\n    /**\r\n     * Indicates if this element is currently focused.\r\n     *\r\n     * @param value Focused?\r\n     */\n    set: function (value) {\n      if (this.isFocused != value) {\n        this._isFocused = value;\n\n        if (value) {\n          getInteraction().focusedObject = this;\n        } else {\n          getInteraction().focusedObject = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"isTouchProtected\", {\n    /**\r\n     * @ignore\r\n     * @return Touch protected?\r\n     */\n    get: function () {\n      return this._isTouchProtected;\n    },\n\n    /**\r\n     * Indicates if this element is currently being protected from touch actions.\r\n     *\r\n     * @ignore\r\n     * @param value Touch protected?\r\n     */\n    set: function (value) {\n      if (this._isTouchProtected != value) {\n        this._isTouchProtected = value;\n\n        if (value) {\n          getInteraction().unprepElement(this);\n        } else if (this.draggable || this.swipeable || this.trackable || this.resizable) {\n          getInteraction().prepElement(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"clickable\", {\n    /**\r\n     * @return Clickable?\r\n     */\n    get: function () {\n      return this._clickable;\n    },\n\n    /**\r\n     * Is element clickable? Clickable elements will generate \"hit\" events when\r\n     * clicked or tapped.\r\n     *\r\n     * @param value Clickable?\r\n     */\n    set: function (value) {\n      if (this._clickable !== value) {\n        this._clickable = value;\n        getInteraction().processClickable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this._contextMenuDisabled;\n    },\n\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      if (this._contextMenuDisabled !== value) {\n        this._contextMenuDisabled = value;\n        getInteraction().processContextMenu(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverable\", {\n    /**\r\n     * @return Hoverable?\r\n     */\n    get: function () {\n      return this._hoverable;\n    },\n\n    /**\r\n     * Indicates if element should generate hover events.\r\n     *\r\n     * @param value Hoverable?\r\n     */\n    set: function (value) {\n      if (this._hoverable !== value) {\n        this._hoverable = value;\n        getInteraction().processHoverable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"trackable\", {\n    /**\r\n     * @return Track pointer?\r\n     */\n    get: function () {\n      return this._trackable;\n    },\n\n    /**\r\n     * Indicates if pointer movement over element should be tracked.\r\n     *\r\n     * @param value Track pointer?\r\n     */\n    set: function (value) {\n      if (this._trackable !== value) {\n        this._trackable = value;\n        getInteraction().processTrackable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"draggable\", {\n    /**\r\n     * @return Draggable?\r\n     */\n    get: function () {\n      return this._draggable;\n    },\n\n    /**\r\n     * Indicates if element can be dragged. (moved)\r\n     *\r\n     * @param value Draggable?\r\n     */\n    set: function (value) {\n      if (this._draggable !== value) {\n        this._draggable = value;\n        getInteraction().processDraggable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeable\", {\n    /**\r\n     * @return Track swipe?\r\n     */\n    get: function () {\n      return this._swipeable;\n    },\n\n    /**\r\n     * Indicates whether element should react to swipe gesture.\r\n     *\r\n     * @param value Track swipe?\r\n     */\n    set: function (value) {\n      if (this._swipeable !== value) {\n        this._swipeable = value;\n        getInteraction().processSwipeable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"resizable\", {\n    /**\r\n     * @return Resizeble?\r\n     */\n    get: function () {\n      return this._resizable;\n    },\n\n    /**\r\n     * Indicates if element can be resized.\r\n     *\r\n     * @param value Resizeable?\r\n     */\n    set: function (value) {\n      if (this._resizable !== value) {\n        this._resizable = value;\n        getInteraction().processResizable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"wheelable\", {\n    /**\r\n     * @return Track wheel?\r\n     */\n    get: function () {\n      return this._wheelable;\n    },\n\n    /**\r\n     * Indicates whether track moouse wheel rotation over element.\r\n     *\r\n     * @param value Track wheel?\r\n     */\n    set: function (value) {\n      if (this._wheelable !== value) {\n        this._wheelable = value;\n        getInteraction().processWheelable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inert\", {\n    /**\r\n     * @return Inert?\r\n     */\n    get: function () {\n      return this._inert;\n    },\n\n    /**\r\n     * Indicates if element is inert, i.e. if it should carry movement momentum\r\n     * after it is dragged and released.\r\n     *\r\n     * @param value Inert?\r\n     */\n    set: function (value) {\n      if (this._inert !== value) {\n        this._inert = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"focusable\", {\n    /**\r\n     * @return Focusable?\r\n     */\n    get: function () {\n      return this._focusable;\n    },\n\n    /**\r\n     * Indicates if element can gain focus.\r\n     *\r\n     * @param value Focusable?\r\n     */\n    set: function (value) {\n      if (this._focusable !== value) {\n        this._focusable = value;\n\n        if (this._focusable && this.tabindex == -1) {\n          this._tabindex = 1;\n        }\n\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"tabindex\", {\n    /**\r\n     * @return Tab index\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._tabindex, -1);\n    },\n\n    /**\r\n     * Element's tab index.\r\n     *\r\n     * @param value Tab index\r\n     */\n    set: function (value) {\n      if (this._tabindex !== value) {\n        this._tabindex = value;\n\n        if (value > -1) {\n          this.focusable = true;\n        }\n\n        getInteraction().processFocusable(this);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n\n    /**\r\n     * A DOM element associated with this element.\r\n     *\r\n     * @param element Element\r\n     */\n    set: function (element) {\n      this._element = element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalPosition\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Position.\r\n     */\n    get: function () {\n      return this._originalPosition || {\n        x: 0,\n        y: 0\n      };\n    },\n\n    /**\r\n     * Element's original position.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Position\r\n     */\n    set: function (value) {\n      this._originalPosition = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalScale\", {\n    /**\r\n     * @return Scale\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalScale, 1);\n    },\n\n    /**\r\n     * Element's original scale.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Scale\r\n     */\n    set: function (value) {\n      if (this._originalScale !== value) {\n        this._originalScale = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"originalAngle\", {\n    /**\r\n     * @return Angle\r\n     */\n    get: function () {\n      return $type.getValueDefault(this._originalAngle, 0);\n    },\n\n    /**\r\n     * Element's original angle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Angle\r\n     */\n    set: function (value) {\n      if (this._originalAngle !== value) {\n        this._originalAngle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"inertiaOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\n      } else {\n        return this._inertiaOptions;\n      }\n    },\n\n    /**\r\n     * Inertia options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._inertiaOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hitOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\n      } else {\n        return this._hitOptions;\n      }\n    },\n\n    /**\r\n     * Hit options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hitOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"hoverOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\n      } else {\n        return this._hoverOptions;\n      }\n    },\n\n    /**\r\n     * Hover options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._hoverOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"swipeOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\n      } else {\n        return this._swipeOptions;\n      }\n    },\n\n    /**\r\n     * Swipe options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._swipeOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"keyboardOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\n      } else {\n        return this._keyboardOptions;\n      }\n    },\n\n    /**\r\n     * Keyboard options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._keyboardOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"mouseOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\n      } else {\n        return this._mouseOptions;\n      }\n    },\n\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @since 4.5.14\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._mouseOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InteractionObject.prototype, \"cursorOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      if (this.sprite && this.sprite._adapterO) {\n        return this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\n      } else {\n        return this._cursorOptions;\n      }\n    },\n\n    /**\r\n     * Cursor options.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._cursorOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Copies all properties and related assets from another object of the same\r\n   * type.\r\n   *\r\n   * @param source Source object\r\n   */\n\n  InteractionObject.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.inertiaOptions = source.inertiaOptions;\n    this.hitOptions = source.hitOptions;\n    this.hoverOptions = source.hoverOptions;\n    this.swipeOptions = source.swipeOptions;\n    this.keyboardOptions = source.keyboardOptions;\n    this.cursorOptions = source.cursorOptions;\n    this.contextMenuDisabled = source.contextMenuDisabled;\n    getInteraction().applyCursorOverStyle(this);\n  };\n  /**\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  InteractionObject.prototype.setEventDisposer = function (key, value, f) {\n    var disposer = this.eventDisposers.getKey(key);\n\n    if (value) {\n      if (disposer == null) {\n        this.eventDisposers.setKey(key, f());\n      }\n    } else {\n      if (disposer != null) {\n        disposer.dispose();\n        this.eventDisposers.removeKey(key);\n      }\n    }\n  };\n  /**\r\n   * Disposes object.\r\n   */\n\n\n  InteractionObject.prototype.dispose = function () {\n    _super.prototype.dispose.call(this); // Remove from all interaction registries\n\n\n    var interaction = getInteraction();\n    interaction.overObjects.removeValue(this);\n    interaction.downObjects.removeValue(this);\n    interaction.trackedObjects.removeValue(this);\n    interaction.transformedObjects.removeValue(this); // Unlock document wheel\n\n    if (this.isHover && this.wheelable) {\n      interaction.unlockWheel();\n    }\n\n    if (interaction.focusedObject === this) {\n      interaction.focusedObject = undefined;\n    }\n  };\n\n  return InteractionObject;\n}(BaseObjectEvents);\n\nexport { InteractionObject };","map":{"version":3,"mappings":"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","names":["InteractionObjectEventDispatcher","BaseObjectEvents","List","Dictionary","DictionaryDisposer","getInteraction","$type","__extends","element","_super","_this","_disposers","push","_eventDispatcher","_element","className","inertias","eventDisposers","applyTheme","Object","InteractionObject","_isHover","value","isHover","overObjects","moveValue","isRealHover","removeValue","_isHoverByTouch","isHoverByTouch","_overPointers","_isDown","isDown","downObjects","_downPointers","_isFocused","isFocused","focusedObject","undefined","_isTouchProtected","unprepElement","draggable","swipeable","trackable","resizable","prepElement","_clickable","processClickable","_contextMenuDisabled","processContextMenu","_hoverable","processHoverable","_trackable","processTrackable","_draggable","processDraggable","_swipeable","processSwipeable","_resizable","processResizable","_wheelable","processWheelable","_inert","_focusable","tabindex","_tabindex","processFocusable","getValueDefault","focusable","_originalPosition","x","y","_originalScale","_originalAngle","sprite","_adapterO","apply","_inertiaOptions","_hitOptions","_hoverOptions","_swipeOptions","_keyboardOptions","_mouseOptions","_cursorOptions","source","copyFrom","call","inertiaOptions","hitOptions","hoverOptions","swipeOptions","keyboardOptions","cursorOptions","contextMenuDisabled","applyCursorOverStyle","key","f","disposer","getKey","setKey","dispose","removeKey","interaction","trackedObjects","transformedObjects","wheelable","unlockWheel"],"sourceRoot":"","sources":["../../../../../src/.internal/core/interaction/InteractionObject.ts"],"sourcesContent":["/**\r\n * Interaction Object module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IInteractionObjectEvents, InteractionObjectEventDispatcher } from \"./InteractionObjectEvents\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Sprite } from \"../Sprite\";\r\nimport { List } from \"../utils/List\";\r\nimport { Dictionary, DictionaryDisposer } from \"../utils/Dictionary\";\r\nimport { AMEvent } from \"../utils/EventDispatcher\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IPointer } from \"./Pointer\";\r\nimport { IInertiaOptions, ISwipeOptions, IHitOptions, IHoverOptions, ICursorOptions, IKeyboardOptions, IMouseOptions } from \"./InteractionOptions\";\r\nimport { getInteraction } from \"./Interaction\";\r\nimport { Inertia, InertiaTypes } from \"./Inertia\";\r\nimport { IDisposer } from \"../utils/Disposer\";\r\nimport { Optional } from \"../utils/Type\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n\r\n/**\r\n * Re-exports\r\n */\r\nexport { IInteractionObjectEvents, InteractionObjectEventDispatcher };\r\n\r\n/**\r\n * Interaction object represents an object that is subject for any kind of\r\n * interaction with it with any input devices: mouse, touch or keyboard.\r\n *\r\n * Any DOM element can be wrapped into an Internaction object which in turn\r\n * enables attaching various interaction events to it, such as: hit, drag,\r\n * swipe, etc.\r\n *\r\n * To create an [[InteractionObject]] out of a [[Sprite]], use:\r\n * `interaction.getInteractionFromSprite(sprite: Sprite)`\r\n *\r\n * To create an [[InteractionObject]] out of a a regular element:\r\n * `interaction.getInteraction(element: HTMLElement)`\r\n */\r\nexport class InteractionObject extends BaseObjectEvents {\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IInteractionObjectEvents;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * An [[EventDispatcher]] instance which holds events for this object\r\n\t */\r\n\tpublic _eventDispatcher: InteractionObjectEventDispatcher<AMEvent<this, this[\"_events\"]>> = new InteractionObjectEventDispatcher(this);;\r\n\r\n\t/**\r\n\t * An [[EventDispatcher]] instance which holds events for this object\r\n\t */\r\n\tpublic get events(): InteractionObjectEventDispatcher<AMEvent<this, this[\"_events\"]>> {\r\n\t\treturn this._eventDispatcher;\r\n\t}\r\n\r\n\t/**\r\n\t * A related [[Sprite]] if any.\r\n\t */\r\n\tpublic sprite!: Sprite;\r\n\r\n\t/**\r\n\t * Collection of Disposers for various events. (so that those get disposed\r\n\t * when the whole InteractionObject is disposed)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic eventDisposers: Dictionary<string, IDisposer> = new Dictionary<string, IDisposer>();\r\n\r\n\t/**\r\n\t * A [[Dictionary]] that holds temporarily replaced original style values for\r\n\t * HTML element, so that they can be restored when the functionality that\r\n\t * replaced them is done.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic replacedStyles: Dictionary<string, string> = new Dictionary<string, string>();\r\n\r\n\tprotected _clickable: boolean = false;\r\n\tprotected _contextMenuDisabled: boolean = false;\r\n\tprotected _hoverable: boolean = false;\r\n\tprotected _trackable: boolean = false;\r\n\tprotected _draggable: boolean = false;\r\n\tprotected _swipeable: boolean = false;\r\n\tprotected _resizable: boolean = false;\r\n\tprotected _wheelable: boolean = false;\r\n\tprotected _inert: boolean = false;\r\n\tprotected _focusable: $type.Optional<boolean>;\r\n\tprotected _tabindex: Optional<number>;\r\n\r\n\t/**\r\n\t * Element to attach events to.\r\n\t */\r\n\tprivate _element: HTMLElement | SVGSVGElement;\r\n\r\n\t/**\r\n\t * Original coordinates for the [[InteractionObject]]. (before application\r\n\t * of the drag)\r\n\t */\r\n\tpublic _originalPosition: Optional<IPoint>;\r\n\r\n\t/**\r\n\t * Original angle for the [[InteractionObject]]. (before rotation started)\r\n\t */\r\n\tpublic _originalAngle: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Original scale of the [[InteractionObject]]. (before resizing started)\r\n\t */\r\n\tpublic _originalScale: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * List of pointers current over element.\r\n\t */\r\n\tprotected _overPointers: $type.Optional<List<IPointer>>;\r\n\r\n\t/**\r\n\t * List of pointer currently pressing down on element.\r\n\t */\r\n\tprotected _downPointers: $type.Optional<List<IPointer>>;\r\n\r\n\t/**\r\n\t * Is element currently hovered?\r\n\t */\r\n\tprotected _isHover: boolean = false;\r\n\r\n\t/**\r\n\t * Was this element hovered via pointer or is it just \"pretenting\" to be\r\n\t * hovered.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic isRealHover: boolean = false;\r\n\r\n\t/**\r\n\t * Is the element hovered by touch pointer?\r\n\t */\r\n\tprotected _isHoverByTouch: boolean = false;\r\n\r\n\t/**\r\n\t * Has element got any pointers currently pressing down on it?\r\n\t */\r\n\tprotected _isDown: boolean = false;\r\n\r\n\t/**\r\n\t * Does element have focus?\r\n\t */\r\n\tprotected _isFocused: boolean = false;\r\n\r\n\t/**\r\n\t * Is element currently protected from touch interactions?\r\n\t */\r\n\tprotected _isTouchProtected: boolean = false;\r\n\r\n\t/**\r\n\t * A timestamp of the last hit.\r\n\t *\r\n\t * Used to calculate double-hit.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic lastHit: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * A pointer element that was used for the last hit.\r\n\t *\r\n\t * We need to keep this since only the same pointer can generate doublehit.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo still needed?\r\n\t */\r\n\tpublic lastHitPointer: $type.Optional<IPointer>;\r\n\r\n\t/**\r\n\t * Indicates whether object has delayed events initiated by touch.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hasDelayedOut?: boolean;\r\n\r\n\t/**\r\n\t * Options used for inertia functionality.\r\n\t */\r\n\tprivate _inertiaOptions: Dictionary<InertiaTypes, IInertiaOptions> = new Dictionary<InertiaTypes, IInertiaOptions>();\r\n\r\n\t/**\r\n\t * A collection of different inertia types, currently playing out.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic inertias: Dictionary<InertiaTypes, Inertia> = new Dictionary<InertiaTypes, Inertia>();\r\n\r\n\t/**\r\n\t * Click/tap options.\r\n\t */\r\n\tprivate _hitOptions: IHitOptions = {};\r\n\r\n\t/**\r\n\t * Hover options.\r\n\t */\r\n\tprivate _hoverOptions: IHoverOptions = {};\r\n\r\n\t/**\r\n\t * Swipe gesture options.\r\n\t */\r\n\tprivate _swipeOptions: ISwipeOptions = {};\r\n\r\n\t/**\r\n\t * Keyboard options.\r\n\t */\r\n\tprivate _keyboardOptions: IKeyboardOptions = {};\r\n\r\n\t/**\r\n\t * Mouse options.\r\n\t */\r\n\tprivate _mouseOptions: IMouseOptions = {};\r\n\r\n\t/**\r\n\t * Cursor options.\r\n\t */\r\n\tprivate _cursorOptions: ICursorOptions = {\r\n\t\t\"defaultStyle\": [{\r\n\t\t\t\"property\": \"cursor\",\r\n\t\t\t\"value\": \"default\"\r\n\t\t}]\r\n\t};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor(element: HTMLElement | SVGSVGElement) {\r\n\t\tsuper();\r\n\t\t\r\n\t\tthis._disposers.push(this._eventDispatcher);\r\n\r\n\t\tthis._element = element;\r\n\t\tthis.className = \"InteractionObject\";\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.inertias));\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.eventDisposers));\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently hovered.\r\n\t *\r\n\t * @param value Hovered?\r\n\t */\r\n\tpublic set isHover(value: boolean) {\r\n\t\tif (this.isHover != value) {\r\n\t\t\tthis._isHover = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().overObjects.moveValue(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.isRealHover = false;\r\n\t\t\t\tgetInteraction().overObjects.removeValue(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hovered?\r\n\t */\r\n\tpublic get isHover(): boolean {\r\n\t\treturn this._isHover;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently hovered.\r\n\t *\r\n\t * @param value Hovered?\r\n\t */\r\n\tpublic set isHoverByTouch(value: boolean) {\r\n\t\tif (this.isHoverByTouch != value) {\r\n\t\t\tthis._isHoverByTouch = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hovered?\r\n\t */\r\n\tpublic get isHoverByTouch(): boolean {\r\n\t\treturn this._isHoverByTouch;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of pointers currently over the element.\r\n\t *\r\n\t * @see {@link Pointer}\r\n\t * @return List if pointers currently hovering the element\r\n\t */\r\n\tpublic get overPointers(): List<IPointer> {\r\n\t\tif (!this._overPointers) {\r\n\t\t\tthis._overPointers = new List<IPointer>();\r\n\t\t}\r\n\t\treturn this._overPointers;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element has currently any pointers pressing on it.\r\n\t *\r\n\t * @param value Has down pointers?\r\n\t */\r\n\tpublic set isDown(value: boolean) {\r\n\t\tif (this.isDown != value) {\r\n\t\t\tthis._isDown = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().downObjects.moveValue(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgetInteraction().downObjects.removeValue(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Has down pointers?\r\n\t */\r\n\tpublic get isDown(): boolean {\r\n\t\treturn this._isDown;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of pointers currently pressing down on this element.\r\n\t *\r\n\t * @see {@link Pointer}\r\n\t * @return List of down pointers\r\n\t */\r\n\tpublic get downPointers(): List<IPointer> {\r\n\t\tif (!this._downPointers) {\r\n\t\t\tthis._downPointers = new List<IPointer>();\r\n\t\t}\r\n\t\treturn this._downPointers;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently focused.\r\n\t *\r\n\t * @param value Focused?\r\n\t */\r\n\tpublic set isFocused(value: boolean) {\r\n\t\tif (this.isFocused != value) {\r\n\t\t\tthis._isFocused = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().focusedObject = this;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tgetInteraction().focusedObject = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Focused?\r\n\t */\r\n\tpublic get isFocused(): boolean {\r\n\t\treturn this._isFocused;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently being protected from touch actions.\r\n\t *\r\n\t * @ignore\r\n\t * @param value Touch protected?\r\n\t */\r\n\tpublic set isTouchProtected(value: boolean) {\r\n\t\tif (this._isTouchProtected != value) {\r\n\t\t\tthis._isTouchProtected = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tgetInteraction().unprepElement(this);\r\n\t\t\t}\r\n\t\t\telse if (this.draggable || this.swipeable || this.trackable || this.resizable) {\r\n\t\t\t\tgetInteraction().prepElement(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Touch protected?\r\n\t */\r\n\tpublic get isTouchProtected(): boolean {\r\n\t\treturn this._isTouchProtected;\r\n\t}\r\n\r\n\t/**\r\n\t * Is element clickable? Clickable elements will generate \"hit\" events when\r\n\t * clicked or tapped.\r\n\t *\r\n\t * @param value Clickable?\r\n\t */\r\n\tpublic set clickable(value: boolean) {\r\n\t\tif (this._clickable !== value) {\r\n\t\t\tthis._clickable = value;\r\n\t\t\tgetInteraction().processClickable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clickable?\r\n\t */\r\n\tpublic get clickable(): boolean {\r\n\t\treturn this._clickable;\r\n\t}\r\n\r\n\t/**\r\n\t * Should element prevent context menu to be displayed, e.g. when\r\n\t * right-clicked?\r\n\t *\r\n\t * @default false\r\n\t * @param value Context menu disabled?\r\n\t */\r\n\tpublic set contextMenuDisabled(value: boolean) {\r\n\t\tif (this._contextMenuDisabled !== value) {\r\n\t\t\tthis._contextMenuDisabled = value;\r\n\t\t\tgetInteraction().processContextMenu(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Context menu disabled?\r\n\t */\r\n\tpublic get contextMenuDisabled(): boolean {\r\n\t\treturn this._contextMenuDisabled;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element should generate hover events.\r\n\t *\r\n\t * @param value Hoverable?\r\n\t */\r\n\tpublic set hoverable(value: boolean) {\r\n\t\tif (this._hoverable !== value) {\r\n\t\t\tthis._hoverable = value;\r\n\t\t\tgetInteraction().processHoverable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hoverable?\r\n\t */\r\n\tpublic get hoverable(): boolean {\r\n\t\treturn this._hoverable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if pointer movement over element should be tracked.\r\n\t *\r\n\t * @param value Track pointer?\r\n\t */\r\n\tpublic set trackable(value: boolean) {\r\n\t\tif (this._trackable !== value) {\r\n\t\t\tthis._trackable = value;\r\n\t\t\tgetInteraction().processTrackable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track pointer?\r\n\t */\r\n\tpublic get trackable(): boolean {\r\n\t\treturn this._trackable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can be dragged. (moved)\r\n\t *\r\n\t * @param value Draggable?\r\n\t */\r\n\tpublic set draggable(value: boolean) {\r\n\t\tif (this._draggable !== value) {\r\n\t\t\tthis._draggable = value;\r\n\t\t\tgetInteraction().processDraggable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Draggable?\r\n\t */\r\n\tpublic get draggable(): boolean {\r\n\t\treturn this._draggable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether element should react to swipe gesture.\r\n\t *\r\n\t * @param value Track swipe?\r\n\t */\r\n\tpublic set swipeable(value: boolean) {\r\n\t\tif (this._swipeable !== value) {\r\n\t\t\tthis._swipeable = value;\r\n\t\t\tgetInteraction().processSwipeable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track swipe?\r\n\t */\r\n\tpublic get swipeable(): boolean {\r\n\t\treturn this._swipeable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can be resized.\r\n\t *\r\n\t * @param value Resizeable?\r\n\t */\r\n\tpublic set resizable(value: boolean) {\r\n\t\tif (this._resizable !== value) {\r\n\t\t\tthis._resizable = value;\r\n\t\t\tgetInteraction().processResizable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Resizeble?\r\n\t */\r\n\tpublic get resizable(): boolean {\r\n\t\treturn this._resizable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether track moouse wheel rotation over element.\r\n\t *\r\n\t * @param value Track wheel?\r\n\t */\r\n\tpublic set wheelable(value: boolean) {\r\n\t\tif (this._wheelable !== value) {\r\n\t\t\tthis._wheelable = value;\r\n\t\t\tgetInteraction().processWheelable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track wheel?\r\n\t */\r\n\tpublic get wheelable(): boolean {\r\n\t\treturn this._wheelable;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element is inert, i.e. if it should carry movement momentum\r\n\t * after it is dragged and released.\r\n\t *\r\n\t * @param value Inert?\r\n\t */\r\n\tpublic set inert(value: boolean) {\r\n\t\tif (this._inert !== value) {\r\n\t\t\tthis._inert = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inert?\r\n\t */\r\n\tpublic get inert(): boolean {\r\n\t\treturn this._inert;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can gain focus.\r\n\t *\r\n\t * @param value Focusable?\r\n\t */\r\n\tpublic set focusable(value: $type.Optional<boolean>) {\r\n\t\tif (this._focusable !== value) {\r\n\t\t\tthis._focusable = value;\r\n\t\t\tif (this._focusable && this.tabindex == -1) {\r\n\t\t\t\tthis._tabindex = 1;\r\n\t\t\t}\r\n\t\t\tgetInteraction().processFocusable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Focusable?\r\n\t */\r\n\tpublic get focusable(): $type.Optional<boolean> {\r\n\t\treturn this._focusable;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's tab index.\r\n\t *\r\n\t * @param value Tab index\r\n\t */\r\n\tpublic set tabindex(value: number) {\r\n\t\tif (this._tabindex !== value) {\r\n\t\t\tthis._tabindex = value;\r\n\t\t\tif (value > -1) {\r\n\t\t\t\tthis.focusable = true;\r\n\t\t\t}\r\n\t\t\tgetInteraction().processFocusable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tab index\r\n\t */\r\n\tpublic get tabindex(): number {\r\n\t\treturn $type.getValueDefault(this._tabindex, -1 as number);\r\n\t}\r\n\r\n\t/**\r\n\t * A DOM element associated with this element.\r\n\t *\r\n\t * @param element Element\r\n\t */\r\n\tpublic set element(element: HTMLElement | SVGSVGElement) {\r\n\t\tthis._element = element;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get element(): HTMLElement | SVGSVGElement {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's original position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Position\r\n\t */\r\n\tpublic set originalPosition(value: Optional<IPoint>) {\r\n\t\tthis._originalPosition = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Position.\r\n\t */\r\n\tpublic get originalPosition(): Optional<IPoint> {\r\n\t\treturn this._originalPosition || { x: 0, y: 0 };\r\n\t}\r\n\r\n\t/**\r\n\t * Element's original scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Scale\r\n\t */\r\n\tpublic set originalScale(value: number) {\r\n\t\tif (this._originalScale !== value) {\r\n\t\t\tthis._originalScale = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scale\r\n\t */\r\n\tpublic get originalScale(): number {\r\n\t\treturn $type.getValueDefault(this._originalScale, 1 as number);\r\n\t}\r\n\r\n\t/**\r\n\t * Element's original angle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Angle\r\n\t */\r\n\tpublic set originalAngle(value: number) {\r\n\t\tif (this._originalAngle !== value) {\r\n\t\t\tthis._originalAngle = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get originalAngle(): number {\r\n\t\treturn $type.getValueDefault(this._originalAngle, 0 as number);\r\n\t}\r\n\r\n\t/**\r\n\t * Inertia options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set inertiaOptions(value: Dictionary<InertiaTypes, IInertiaOptions>) {\r\n\t\tthis._inertiaOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get inertiaOptions(): Dictionary<InertiaTypes, IInertiaOptions> {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"inertiaOptions\", this._inertiaOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._inertiaOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hit options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set hitOptions(value: IHitOptions) {\r\n\t\tthis._hitOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get hitOptions(): IHitOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"hitOptions\", this._hitOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._hitOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hover options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set hoverOptions(value: IHoverOptions) {\r\n\t\tthis._hoverOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get hoverOptions(): IHoverOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"hoverOptions\", this._hoverOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._hoverOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Swipe options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set swipeOptions(value: ISwipeOptions) {\r\n\t\tthis._swipeOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get swipeOptions(): ISwipeOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"swipeOptions\", this._swipeOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._swipeOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Keyboard options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set keyboardOptions(value: IKeyboardOptions) {\r\n\t\tthis._keyboardOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get keyboardOptions(): IKeyboardOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"keyboardOptions\", this._keyboardOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._keyboardOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Mouse options.\r\n\t *\r\n\t * Enables controlling options related to the mouse, for example sensitivity\r\n\t * of its mouse wheel.\r\n\t *\r\n\t * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n\t * speed:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"plotContainer\": {\r\n\t *     \"mouseOptions\": {\r\n\t *       \"sensitivity\": 0.5\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set mouseOptions(value: IMouseOptions) {\r\n\t\tthis._mouseOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get mouseOptions(): IMouseOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"mouseOptions\", this._mouseOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._mouseOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor options.\r\n\t *\r\n\t * @param value  Options\r\n\t */\r\n\tpublic set cursorOptions(value: ICursorOptions) {\r\n\t\tthis._cursorOptions = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Options\r\n\t */\r\n\tpublic get cursorOptions(): ICursorOptions {\r\n\t\tif (this.sprite && this.sprite._adapterO) {\r\n\t\t\treturn this.sprite._adapterO.apply(\"cursorOptions\", this._cursorOptions);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._cursorOptions;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related assets from another object of the same\r\n\t * type.\r\n\t *\r\n\t * @param source Source object\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.inertiaOptions = source.inertiaOptions;\r\n\t\tthis.hitOptions = source.hitOptions;\r\n\t\tthis.hoverOptions = source.hoverOptions;\r\n\t\tthis.swipeOptions = source.swipeOptions;\r\n\t\tthis.keyboardOptions = source.keyboardOptions;\r\n\t\tthis.cursorOptions = source.cursorOptions;\r\n\t\tthis.contextMenuDisabled = source.contextMenuDisabled;\r\n\t\tgetInteraction().applyCursorOverStyle(this);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic setEventDisposer(key: string, value: boolean, f: () => IDisposer): void {\r\n\t\tconst disposer = this.eventDisposers.getKey(key);\r\n\r\n\t\tif (value) {\r\n\t\t\tif (disposer == null) {\r\n\t\t\t\tthis.eventDisposers.setKey(key, f());\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tif (disposer != null) {\r\n\t\t\t\tdisposer.dispose();\r\n\t\t\t\tthis.eventDisposers.removeKey(key);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes object.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\r\n\t\t// Remove from all interaction registries\r\n\t\tconst interaction = getInteraction();\r\n\t\tinteraction.overObjects.removeValue(this);\r\n\t\tinteraction.downObjects.removeValue(this);\r\n\t\tinteraction.trackedObjects.removeValue(this);\r\n\t\tinteraction.transformedObjects.removeValue(this);\r\n\r\n\t\t// Unlock document wheel\r\n\t\tif (this.isHover && this.wheelable) {\r\n\t\t\tinteraction.unlockWheel();\r\n\t\t}\r\n\r\n\t\tif (interaction.focusedObject === this) {\r\n\t\t\tinteraction.focusedObject = undefined;\r\n\t\t}\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}