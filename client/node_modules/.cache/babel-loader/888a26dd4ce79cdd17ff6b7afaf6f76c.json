{"ast":null,"code":"/**\r\n * Functionality for drawing rectangles with waved edges.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Rectangle } from \"./Rectangle\";\nimport { wavedLine } from \"../rendering/Smoothing\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a rectangle with waved edges.\r\n *\r\n * @see {@link IWavedRectangleEvents} for a list of available events\r\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\r\n */\n\nvar WavedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(WavedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function WavedRectangle() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"WavedRectangle\"; // Add path element\n\n    _this.element = _this.paper.add(\"path\"); // Set defaults\n\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.tension = 0.8;\n\n    _this.setPropertyValue(\"wavedLeft\", true);\n\n    _this.setPropertyValue(\"wavedRight\", true);\n\n    _this.setPropertyValue(\"wavedTop\", true);\n\n    _this.setPropertyValue(\"wavedBottom\", true); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the waved rectangle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  WavedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n\n    if (w > 0 && h > 0) {\n      var p1 = {\n        x: 0,\n        y: 0\n      };\n      var p2 = {\n        x: w,\n        y: 0\n      };\n      var p3 = {\n        x: w,\n        y: h\n      };\n      var p4 = {\n        x: 0,\n        y: h\n      };\n      var waveLengthH = Math.min(w, this.waveLength);\n      var waveHeightH = Math.min(h, this.waveHeight);\n      var waveLengthV = Math.min(h, this.waveLength);\n      var waveHeightV = Math.min(w, this.waveHeight);\n      var td = \"\";\n      var rd = \"\";\n      var bd = \"\";\n      var ld = \"\";\n\n      if (this.wavedTop) {\n        td = wavedLine(p1, p2, waveLengthH, waveHeightH, this.tension, true);\n      }\n\n      if (this.wavedRight) {\n        rd = wavedLine(p2, p3, waveLengthV, waveHeightV, this.tension, true);\n      }\n\n      if (this.wavedBottom) {\n        bd = wavedLine(p3, p4, waveLengthH, waveHeightH, this.tension, true);\n      }\n\n      if (this.wavedLeft) {\n        ld = wavedLine(p4, p1, waveLengthV, waveHeightV, this.tension, true);\n      }\n\n      this.path = $path.moveTo(p1) + td + $path.lineTo(p2) + rd + $path.lineTo(p3) + bd + $path.lineTo(p4) + ld + \"z\";\n    }\n  };\n\n  Object.defineProperty(WavedRectangle.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets which side should be waved or not. If particular side is set to\r\n   * `false`, a straight line will be drawn on that side.\r\n   *\r\n   * @param top     Top waved?\r\n   * @param right   Right side waved?\r\n   * @param bottom  Bottom Waved?\r\n   * @param left    Left side waved?\r\n   */\n\n  WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {\n    this.wavedTop = top;\n    this.wavedRight = right;\n    this.wavedBottom = bottom;\n    this.wavedLeft = left;\n  };\n\n  Object.defineProperty(WavedRectangle.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedRight\", {\n    /**\r\n     * @return Wave right side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedRight\");\n    },\n\n    /**\r\n     * Specifies if right side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedLeft\", {\n    /**\r\n     * @return Wave left side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedLeft\");\n    },\n\n    /**\r\n     * Specifies if left side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedTop\", {\n    /**\r\n     * @return Wave top side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedTop\");\n    },\n\n    /**\r\n     * Specifies if top side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedTop\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedBottom\", {\n    /**\r\n     * @return Wave bottom side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedBottom\");\n    },\n\n    /**\r\n     * Specifies if bottom side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedBottom\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedRectangle;\n}(Rectangle);\n\nexport { WavedRectangle };","map":{"version":3,"mappings":"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","names":["Rectangle","wavedLine","$path","__extends","_super","_this","className","element","paper","add","waveLength","waveHeight","tension","setPropertyValue","applyTheme","WavedRectangle","draw","call","w","pixelWidth","h","pixelHeight","p1","x","y","p2","p3","p4","waveLengthH","Math","min","waveHeightH","waveLengthV","waveHeightV","td","rd","bd","ld","wavedTop","wavedRight","wavedBottom","wavedLeft","path","moveTo","lineTo","Object","getPropertyValue","value","invalidate","top","right","bottom","left"],"sourceRoot":"","sources":["../../../../../src/.internal/core/elements/WavedRectangle.ts"],"sourcesContent":["/**\r\n * Functionality for drawing rectangles with waved edges.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Rectangle, IRectangleProperties, IRectangleAdapters, IRectangleEvents } from \"./Rectangle\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IWavedShape } from \"../defs/IWavedShape\";\r\nimport { wavedLine } from \"../rendering/Smoothing\";\r\nimport * as $path from \"../rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[WavedRectangle]].\r\n */\r\nexport interface IWavedRectangleProperties extends IRectangleProperties {\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t */\r\n\twaveHeight?: number;\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t */\r\n\twaveLength?: number;\r\n\r\n\t/**\r\n\t * Wave tension.\r\n\t *\r\n\t * @default 0.8\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * If right side of a rectangle should be waved.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\twavedRight?: boolean;\r\n\r\n\t/**\r\n\t * If left side of a rectangle should be waved.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\twavedLeft?: boolean;\r\n\r\n\t/**\r\n\t * If top side of a rectangle should be waved.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\twavedTop?: boolean;\r\n\r\n\t/**\r\n\t * If bottom side of a rectangle should be waved.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\twavedBottom?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[WavedRectangle]].\r\n */\r\nexport interface IWavedRectangleEvents extends IRectangleEvents { }\r\n\r\n/**\r\n * Defines adapters for [[WavedRectangle]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IWavedRectangleAdapters extends IRectangleAdapters, IWavedRectangleProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a rectangle with waved edges.\r\n *\r\n * @see {@link IWavedRectangleEvents} for a list of available events\r\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\r\n */\r\nexport class WavedRectangle extends Rectangle implements IWavedShape {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IWavedRectangleProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IWavedRectangleAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IWavedRectangleEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"WavedRectangle\";\r\n\r\n\t\t// Add path element\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\t// Set defaults\r\n\t\tthis.waveLength = 16;\r\n\t\tthis.waveHeight = 4;\r\n\t\tthis.tension = 0.8;\r\n\r\n\t\tthis.setPropertyValue(\"wavedLeft\", true);\r\n\t\tthis.setPropertyValue(\"wavedRight\", true);\r\n\t\tthis.setPropertyValue(\"wavedTop\", true);\r\n\t\tthis.setPropertyValue(\"wavedBottom\", true);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved rectangle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet w: number = this.pixelWidth;\r\n\t\tlet h: number = this.pixelHeight;\r\n\r\n\t\tif (w > 0 && h > 0) {\r\n\t\t\tlet p1: IPoint = { x: 0, y: 0 };\r\n\t\t\tlet p2: IPoint = { x: w, y: 0 };\r\n\t\t\tlet p3: IPoint = { x: w, y: h };\r\n\t\t\tlet p4: IPoint = { x: 0, y: h };\r\n\r\n\t\t\tlet waveLengthH: number = Math.min(w, this.waveLength);\r\n\t\t\tlet waveHeightH: number = Math.min(h, this.waveHeight);\r\n\r\n\t\t\tlet waveLengthV: number = Math.min(h, this.waveLength);\r\n\t\t\tlet waveHeightV: number = Math.min(w, this.waveHeight);\t\t\t\r\n\r\n\t\t\tlet td: string = \"\";\r\n\t\t\tlet rd: string = \"\";\r\n\t\t\tlet bd: string = \"\";\r\n\t\t\tlet ld: string = \"\";\r\n\r\n\t\t\tif (this.wavedTop) {\r\n\t\t\t\ttd = wavedLine(p1, p2, waveLengthH, waveHeightH, this.tension, true);\r\n\t\t\t}\r\n\t\t\tif (this.wavedRight) {\r\n\t\t\t\trd = wavedLine(p2, p3, waveLengthV, waveHeightV, this.tension, true);\r\n\t\t\t}\r\n\t\t\tif (this.wavedBottom) {\r\n\t\t\t\tbd = wavedLine(p3, p4, waveLengthH, waveHeightH, this.tension, true);\r\n\t\t\t}\r\n\t\t\tif (this.wavedLeft) {\r\n\t\t\t\tld = wavedLine(p4, p1, waveLengthV, waveHeightV, this.tension, true);\r\n\t\t\t}\r\n\r\n\t\t\tthis.path = $path.moveTo(p1) + td + $path.lineTo(p2) + rd + $path.lineTo(p3) + bd + $path.lineTo(p4) + ld + \"z\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Wave length in pixels.\r\n\t *\r\n\t * @default 16\r\n\t * @param value  Wave length (px)\r\n\t */\r\n\tpublic set waveLength(value: number) {\r\n\t\tthis.setPropertyValue(\"waveLength\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave length (px)\r\n\t */\r\n\tpublic get waveLength(): number {\r\n\t\treturn this.getPropertyValue(\"waveLength\");\r\n\t}\r\n\r\n\t/**\r\n\t * Wave height in pixels.\r\n\t *\r\n\t * @default 4\r\n\t * @param value  Wave height (px)\r\n\t */\r\n\tpublic set waveHeight(value: number) {\r\n\t\tthis.setPropertyValue(\"waveHeight\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave height (px)\r\n\t */\r\n\tpublic get waveHeight(): number {\r\n\t\treturn this.getPropertyValue(\"waveHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets which side should be waved or not. If particular side is set to\r\n\t * `false`, a straight line will be drawn on that side.\r\n\t *\r\n\t * @param top     Top waved?\r\n\t * @param right   Right side waved?\r\n\t * @param bottom  Bottom Waved?\r\n\t * @param left    Left side waved?\r\n\t */\r\n\tpublic setWavedSides(top: boolean, right: boolean, bottom: boolean, left: boolean): void {\r\n\t\tthis.wavedTop = top;\r\n\t\tthis.wavedRight = right;\r\n\t\tthis.wavedBottom = bottom;\r\n\t\tthis.wavedLeft = left;\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of the wave.\r\n\t *\r\n\t * @default 0.8\r\n\t * @param value  Tension\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if right side should be waved.\r\n\t *\r\n\t * @default true\r\n\t * @param value Waved?\r\n\t */\r\n\tpublic set wavedRight(value: boolean) {\r\n\t\tthis.setPropertyValue(\"wavedRight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave right side?\r\n\t */\r\n\tpublic get wavedRight(): boolean {\r\n\t\treturn this.getPropertyValue(\"wavedRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if left side should be waved.\r\n\t *\r\n\t * @default true\r\n\t * @param value Waved?\r\n\t */\r\n\tpublic set wavedLeft(value: boolean) {\r\n\t\tthis.setPropertyValue(\"wavedLeft\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave left side?\r\n\t */\r\n\tpublic get wavedLeft(): boolean {\r\n\t\treturn this.getPropertyValue(\"wavedLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if top side should be waved.\r\n\t *\r\n\t * @default true\r\n\t * @param value Waved?\r\n\t */\r\n\tpublic set wavedTop(value: boolean) {\r\n\t\tthis.setPropertyValue(\"wavedTop\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave top side?\r\n\t */\r\n\tpublic get wavedTop(): boolean {\r\n\t\treturn this.getPropertyValue(\"wavedTop\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if bottom side should be waved.\r\n\t *\r\n\t * @default true\r\n\t * @param value Waved?\r\n\t */\r\n\tpublic set wavedBottom(value: boolean) {\r\n\t\tthis.setPropertyValue(\"wavedBottom\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Wave bottom side?\r\n\t */\r\n\tpublic get wavedBottom(): boolean {\r\n\t\treturn this.getPropertyValue(\"wavedBottom\");\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}