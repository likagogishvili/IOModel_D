{"ast":null,"code":"/**\r\n * Percent chart module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SerialChart, SerialChartDataItem } from \"./SerialChart\";\nimport { PercentSeries } from \"../series/PercentSeries\";\nimport { registry } from \"../../core/Registry\";\nimport * as $iter from \"../../core/utils/Iterator\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar PercentChartDataItem =\n/** @class */\nfunction (_super) {\n  __extends(PercentChartDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentChartDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"PercentChartDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return PercentChartDataItem;\n}(SerialChartDataItem);\n\nexport { PercentChartDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\n\nvar PercentChart =\n/** @class */\nfunction (_super) {\n  __extends(PercentChart, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function PercentChart() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"PercentChart\";\n    _this.align = \"none\";\n    _this.valign = \"none\"; // so that the chart is always drawn, even the legend wants all the space\n\n    _this.chartContainer.minHeight = 50;\n    _this.chartContainer.minWidth = 50; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * (Re)validates chart data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  PercentChart.prototype.validateData = function () {\n    _super.prototype.validateData.call(this);\n\n    this.feedLegend();\n  };\n  /**\r\n   * Setups the legend to use the chart's data.\r\n   * @ignore\r\n   */\n\n\n  PercentChart.prototype.feedLegend = function () {\n    var legend = this.legend;\n\n    if (legend) {\n      var legendData_1 = [];\n      $iter.each(this.series.iterator(), function (series) {\n        if (!series.hiddenInLegend) {\n          $iter.each(series.dataItems.iterator(), function (dataItem) {\n            if (!dataItem.hiddenInLegend) {\n              legendData_1.push(dataItem);\n\n              if (!dataItem.legendSettings) {\n                dataItem.legendSettings = series.legendSettings;\n              }\n            }\n          });\n        }\n      });\n      legend.data = legendData_1;\n      legend.dataFields.name = \"category\";\n    }\n  };\n  /**\r\n   * Creates a new [[PercentSeries]].\r\n   *\r\n   * @return New series\r\n   */\n\n\n  PercentChart.prototype.createSeries = function () {\n    return new PercentSeries();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  PercentChart.prototype.setLegend = function (legend) {\n    _super.prototype.setLegend.call(this, legend);\n\n    if (legend) {\n      legend.labels.template.text = \"{category}\";\n      legend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\n      legend.itemContainers.template.events.on(\"over\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n\n        if (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\n          var slice = percentSeriesDataItem.slice;\n          slice.dispatchImmediately(\"over\");\n          slice.isHover = true;\n          slice.interactions.isRealHover = true;\n        }\n      });\n      legend.itemContainers.template.events.on(\"out\", function (event) {\n        var percentSeriesDataItem = event.target.dataItem.dataContext;\n        var slice = percentSeriesDataItem.slice;\n        slice.dispatchImmediately(\"out\");\n        slice.isHover = false;\n      });\n    }\n  };\n\n  return PercentChart;\n}(SerialChart);\n\nexport { PercentChart };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\n\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;","map":{"version":3,"mappings":"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","names":["SerialChart","SerialChartDataItem","PercentSeries","registry","$iter","__extends","_super","_this","className","applyTheme","align","valign","chartContainer","minHeight","minWidth","PercentChart","validateData","call","feedLegend","legend","legendData_1","each","series","iterator","hiddenInLegend","dataItems","dataItem","push","legendSettings","data","dataFields","name","setLegend","labels","template","text","valueLabels","itemContainers","events","on","event","percentSeriesDataItem","target","dataContext","visible","isHiding","slice","dispatchImmediately","isHover","interactions","isRealHover","registeredClasses","PercentChartDataItem"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/types/PercentChart.ts"],"sourcesContent":["/**\r\n * Percent chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { PercentSeries, PercentSeriesDataItem } from \"../series/PercentSeries\";\r\nimport { Legend } from \"../Legend\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PercentChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PercentChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PercentChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PercentChart]].\r\n */\r\nexport interface IPercentChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PercentChart]]\r\n */\r\nexport interface IPercentChartProperties extends ISerialChartProperties { }\r\n\r\n/**\r\n * Defines events for [[PercentChart]].\r\n */\r\nexport interface IPercentChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PercentChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPercentChartAdapters extends ISerialChartAdapters, IPercentChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This is a base class for \"percent-based\" chart types like Pie and Funnel.\r\n *\r\n * @see {@link IPercentChartEvents} for a list of available Events\r\n * @see {@link IPercentChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for Pie chart documentation\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for Sliced chart documentation\r\n */\r\nexport class PercentChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IPercentChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPercentChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPercentChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPercentChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PercentSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PercentChart\";\r\n\r\n\t\tthis.align = \"none\";\r\n\t\tthis.valign = \"none\";\r\n\r\n\t\t// so that the chart is always drawn, even the legend wants all the space\r\n\t\tthis.chartContainer.minHeight = 50;\r\n\t\tthis.chartContainer.minWidth = 50;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tif (!series.hiddenInLegend) {\r\n\t\t\t\t\t$iter.each(series.dataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\t\tif (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\t\t\tlegendData.push(<PercentSeriesDataItem>dataItem);\r\n\t\t\t\t\t\t\tif(!dataItem.legendSettings){\r\n\t\t\t\t\t\t\t\tdataItem.legendSettings = series.legendSettings;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"category\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new [[PercentSeries]].\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PercentSeries();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setLegend(legend: Legend) {\r\n\t\tsuper.setLegend(legend);\r\n\t\tif (legend) {\r\n\t\t\tlegend.labels.template.text = \"{category}\";\r\n\t\t\tlegend.valueLabels.template.text = \"{value.percent.formatNumber('#.0')}%\";\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"over\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (percentSeriesDataItem.visible && !percentSeriesDataItem.isHiding) {\r\n\t\t\t\t\tlet slice = percentSeriesDataItem.slice;\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tslice.dispatchImmediately(\"over\");\t\t\t\t\t\r\n\t\t\t\t\tslice.isHover = true;\t\t\t\t\r\n\t\t\t\t\tslice.interactions.isRealHover = true;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tlegend.itemContainers.template.events.on(\"out\", (event) => {\r\n\t\t\t\tlet percentSeriesDataItem: PercentSeriesDataItem = <PercentSeriesDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tlet slice = percentSeriesDataItem.slice;\r\n\t\t\t\tslice.dispatchImmediately(\"out\");\r\n\t\t\t\tslice.isHover = false;\t\t\t\t\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @hidden\r\n */\r\nregistry.registeredClasses[\"PercentChart\"] = PercentChart;\r\nregistry.registeredClasses[\"PercentChartDataItem\"] = PercentChartDataItem;\r\n"]},"metadata":{},"sourceType":"module"}