{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport { TextFormatter } from \"./TextFormatter\";\nimport * as $type from \"./Type\";\nimport * as $utils from \"./Utils\";\n\nvar DateFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DateFormatter, _super);\n\n  function DateFormatter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(DateFormatter.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Defaults\n      this._setDefault(\"capitalize\", true);\n\n      this._setDefault(\"dateFormat\", \"yyyy-MM-dd\");\n\n      _super.prototype._setDefaults.call(this);\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"format\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source, format) {\n      // Locale?\n      // TODO\n      // No format passed in or it's empty\n      if (typeof format === \"undefined\" || format === \"\") {\n        format = this.get(\"dateFormat\", \"yyyy-MM-dd\");\n      } // Init return value\n\n\n      var formatted; // Cast?\n      // TODO: decide if we need to cast\n\n      var date = source; // Is it a built-in format or Intl.DateTimeFormat\n\n      if ($type.isObject(format)) {\n        try {\n          var locales = this.get(\"intlLocales\");\n\n          if (locales) {\n            return new Intl.DateTimeFormat(locales, format).format(date);\n          } else {\n            return new Intl.DateTimeFormat(undefined, format).format(date);\n          }\n        } catch (e) {\n          return \"Invalid\";\n        }\n      } // get format info (it will also deal with parser caching)\n\n\n      var info = this.parseFormat(format); // Should we apply custom time zone?\n\n      var timezone = this._root.timezone;\n\n      if (timezone && !this._root.utc) {\n        date = timezone.convertLocal(date);\n      } // Check if it's a valid date\n\n\n      if (!$type.isNumber(date.getTime())) {\n        // TODO translation\n        //return this._t(\"Invalid date\");\n        return \"Invalid date\";\n      } // Apply format\n\n\n      formatted = this.applyFormat(date, info); // Capitalize\n\n      if (this.get(\"capitalize\")) {\n        formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());\n      } // We're done\n\n\n      return formatted;\n    }\n  });\n  /**\r\n   * Applies format to Date.\r\n   *\r\n   * @param date      Date object\r\n   * @param info      Parsed format information\r\n   * @return Formatted date string\r\n   */\n\n  Object.defineProperty(DateFormatter.prototype, \"applyFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date, info) {\n      // Init return value\n      var res = info.template; // Get values\n\n      var fullYear,\n          month,\n          weekday,\n          day,\n          hours,\n          minutes,\n          seconds,\n          milliseconds,\n          offset = date.getTimezoneOffset(),\n          timestamp = date.getTime();\n\n      if (this._root.utc) {\n        fullYear = date.getUTCFullYear();\n        month = date.getUTCMonth();\n        weekday = date.getUTCDay();\n        day = date.getUTCDate();\n        hours = date.getUTCHours();\n        minutes = date.getUTCMinutes();\n        seconds = date.getUTCSeconds();\n        milliseconds = date.getUTCMilliseconds();\n      } else {\n        fullYear = date.getFullYear();\n        month = date.getMonth();\n        weekday = date.getDay();\n        day = date.getDate();\n        hours = date.getHours();\n        minutes = date.getMinutes();\n        seconds = date.getSeconds();\n        milliseconds = date.getMilliseconds();\n      } // Go through each part and format/replace it in template\n\n\n      for (var i = 0, len = info.parts.length; i < len; i++) {\n        var value = \"\";\n\n        switch (info.parts[i]) {\n          case \"G\":\n            value = this._t(fullYear < 0 ? \"_era_bc\" : \"_era_ad\");\n            break;\n\n          case \"yyyy\":\n            value = Math.abs(fullYear).toString();\n\n            if (fullYear < 0) {\n              value += this._t(\"_era_bc\");\n            }\n\n            break;\n\n          case \"yyy\":\n          case \"yy\":\n          case \"y\":\n            value = Math.abs(fullYear).toString().substr(-info.parts[i].length);\n\n            if (fullYear < 0) {\n              value += this._t(\"_era_bc\");\n            }\n\n            break;\n\n          case \"YYYY\":\n          case \"YYY\":\n          case \"YY\":\n          case \"Y\":\n            var week = $utils.getWeek(date);\n            var year = fullYear;\n\n            if (week == 1 && weekday > 4) {\n              year--;\n            }\n\n            if (info.parts[i] == \"YYYY\") {\n              value = Math.abs(year).toString();\n            } else {\n              value = Math.abs(year).toString().substr(-info.parts[i].length);\n            }\n\n            if (year < 0) {\n              value += this._t(\"_era_bc\");\n            }\n\n            break;\n\n          case \"u\":\n            // @todo\n            break;\n\n          case \"q\":\n            value = \"\" + Math.ceil((date.getMonth() + 1) / 3);\n            break;\n\n          case \"MMMMM\":\n            value = this._t(this._getMonth(month)).substr(0, 1);\n            break;\n\n          case \"MMMM\":\n            value = this._t(this._getMonth(month));\n            break;\n\n          case \"MMM\":\n            value = this._t(this._getShortMonth(month));\n            break;\n\n          case \"MM\":\n            value = $utils.padString(month + 1, 2, \"0\");\n            break;\n\n          case \"M\":\n            value = (month + 1).toString();\n            break;\n\n          case \"ww\":\n            value = $utils.padString($utils.getWeek(date, this._root.utc), 2, \"0\");\n            break;\n\n          case \"w\":\n            value = $utils.getWeek(date, this._root.utc).toString();\n            break;\n\n          case \"W\":\n            value = $utils.getMonthWeek(date, this._root.utc).toString();\n            break;\n\n          case \"dd\":\n            value = $utils.padString(day, 2, \"0\");\n            break;\n\n          case \"d\":\n            value = day.toString();\n            break;\n\n          case \"DD\":\n          case \"DDD\":\n            value = $utils.padString($utils.getYearDay(date, this._root.utc).toString(), info.parts[i].length, \"0\");\n            break;\n\n          case \"D\":\n            value = $utils.getYearDay(date, this._root.utc).toString();\n            break;\n\n          case \"F\":\n            // @todo\n            break;\n\n          case \"g\":\n            // @todo\n            break;\n\n          case \"t\":\n            value = this._root.language.translateFunc(\"_dateOrd\").call(this, day);\n            break;\n\n          case \"E\":\n            value = (weekday || 7).toString();\n            break;\n\n          case \"EE\":\n            value = $utils.padString((weekday || 7).toString(), 2, \"0\");\n            break;\n\n          case \"EEE\":\n          case \"eee\":\n            value = this._t(this._getShortWeekday(weekday));\n            break;\n\n          case \"EEEE\":\n          case \"eeee\":\n            value = this._t(this._getShortWeekday(weekday));\n            break;\n\n          case \"EEEEE\":\n          case \"eeeee\":\n            value = this._t(this._getShortWeekday(weekday)).substr(0, 1);\n            break;\n\n          case \"e\":\n          case \"ee\":\n            value = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();\n\n            if (info.parts[i] == \"ee\") {\n              value = $utils.padString(value, 2, \"0\");\n            }\n\n            break;\n\n          case \"a\":\n            if (hours >= 12) {\n              value = this._t(\"PM\");\n            } else {\n              value = this._t(\"AM\");\n            }\n\n            break;\n\n          case \"aa\":\n            if (hours >= 12) {\n              value = this._t(\"P.M.\");\n            } else {\n              value = this._t(\"A.M.\");\n            }\n\n            break;\n\n          case \"aaa\":\n            if (hours >= 12) {\n              value = this._t(\"P\");\n            } else {\n              value = this._t(\"A\");\n            }\n\n            break;\n\n          case \"h\":\n            value = $utils.get12Hours(hours).toString();\n            break;\n\n          case \"hh\":\n            value = $utils.padString($utils.get12Hours(hours), 2, \"0\");\n            break;\n\n          case \"H\":\n            value = hours.toString();\n            break;\n\n          case \"HH\":\n            value = $utils.padString(hours, 2, \"0\");\n            break;\n\n          case \"K\":\n            value = $utils.get12Hours(hours, 0).toString();\n            break;\n\n          case \"KK\":\n            value = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\n            break;\n\n          case \"k\":\n            value = (hours + 1).toString();\n            break;\n\n          case \"kk\":\n            value = $utils.padString(hours + 1, 2, \"0\");\n            break;\n\n          case \"m\":\n            value = minutes.toString();\n            break;\n\n          case \"mm\":\n            value = $utils.padString(minutes, 2, \"0\");\n            break;\n\n          case \"s\":\n            value = seconds.toString();\n            break;\n\n          case \"ss\":\n            value = $utils.padString(seconds, 2, \"0\");\n            break;\n\n          case \"S\":\n          case \"SS\":\n          case \"SSS\":\n            value = Math.round(milliseconds / 1000 * Math.pow(10, info.parts[i].length)).toString();\n            break;\n\n          case \"x\":\n            value = timestamp.toString();\n            break;\n\n          case \"n\":\n          case \"nn\":\n          case \"nnn\":\n            value = $utils.padString(milliseconds, info.parts[i].length, \"0\");\n            break;\n\n          case \"z\":\n            value = $utils.getTimeZone(date, false, false, this._root.utc);\n            break;\n\n          case \"zz\":\n            value = $utils.getTimeZone(date, true, false, this._root.utc);\n            break;\n\n          case \"zzz\":\n            value = $utils.getTimeZone(date, false, true, this._root.utc);\n            break;\n\n          case \"zzzz\":\n            value = $utils.getTimeZone(date, true, true, this._root.utc);\n            break;\n\n          case \"Z\":\n          case \"ZZ\":\n            var tz = Math.abs(offset) / 60;\n            var tzh = Math.floor(tz);\n            var tzm = tz * 60 - tzh * 60;\n\n            if (this._root.utc) {\n              tzh = 0;\n              tzm = 0;\n            }\n\n            if (info.parts[i] == \"Z\") {\n              value = \"GMT\";\n              value += offset > 0 ? \"-\" : \"+\";\n              value += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\n            } else {\n              value = offset > 0 ? \"-\" : \"+\";\n              value += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\n            }\n\n            break;\n\n          case \"i\":\n            value = date.toISOString();\n            break;\n\n          case \"I\":\n            value = date.toUTCString();\n            break;\n        }\n\n        res = res.replace($type.PLACEHOLDER, value);\n      }\n\n      return res;\n    }\n  });\n  /**\r\n   * Parses format into structured infromation.\r\n   *\r\n   * @param format Format template\r\n   */\n\n  Object.defineProperty(DateFormatter.prototype, \"parseFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (format) {\n      // Check cache\n      // TODO: implement caching of the parsed format\n      // Init format parse info holder\n      var info = {\n        \"template\": \"\",\n        \"parts\": []\n      }; // Let TextFormatter split into chunks\n\n      var chunks = TextFormatter.chunk(format, true);\n\n      for (var i = 0; i < chunks.length; i++) {\n        var chunk = chunks[i];\n\n        if (chunk.type === \"value\") {\n          // Just \"Date\"?\n          if (chunk.text.match(/^date$/i)) {\n            var dateFormat = this.get(\"dateFormat\", \"yyyy-MM-dd\");\n\n            if (!$type.isString(dateFormat)) {\n              dateFormat = \"yyyy-MM-dd\";\n            }\n\n            chunk.text = dateFormat;\n          } // Find all possible parts\n\n\n          var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g); // Found?\n\n          if (matches) {\n            // Populate template\n            for (var x = 0; x < matches.length; x++) {\n              info.parts.push(matches[x]);\n              chunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\n            }\n          }\n        } // Apply to template\n\n\n        info.template += chunk.text;\n      } // Save cache\n      // TODO\n\n\n      return info;\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_months\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_getMonth\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._months()[index];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_shortMonths\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_getShortMonth\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._shortMonths()[index];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_weekdays\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_getWeekday\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._weekdays()[index];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_shortWeekdays\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"_getShortWeekday\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._shortWeekdays()[index];\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"parse\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source, format) {\n      // Is it already a Date\n      if (source instanceof Date) {\n        return source;\n      } // Is it a numeric timestamp\n\n\n      if ($type.isNumber(source)) {\n        return new Date(source);\n      } // No? Let's check if it's string, and try converting to it if nec\n\n\n      if (!$type.isString(source)) {\n        source = source.toString();\n      } // Init return value\n\n\n      var res; // Init RegEx for parsing\n\n      var reg = \"\"; // Clean format\n\n      format = $utils.cleanFormat(format); // Clip format to length of the source string\n\n      format = format.substr(0, source.length); // Parse format\n\n      var info = this.parseFormat(format); // Init parsed items holder\n\n      var parsedIndexes = {\n        \"year\": -1,\n        \"year3\": -1,\n        \"year2\": -1,\n        \"year1\": -1,\n        \"month\": -1,\n        \"monthShort\": -1,\n        \"monthLong\": -1,\n        \"weekdayShort\": -1,\n        \"weekdayLong\": -1,\n        \"day\": -1,\n        \"yearDay\": -1,\n        \"week\": -1,\n        \"hourBase0\": -1,\n        \"hour12Base0\": -1,\n        \"hourBase1\": -1,\n        \"hour12Base1\": -1,\n        \"minute\": -1,\n        \"second\": -1,\n        \"millisecond\": -1,\n        \"millisecondDigits\": -1,\n        \"am\": -1,\n        \"zone\": -1,\n        \"timestamp\": -1,\n        \"iso\": -1\n      }; // Init values\n\n      var resValues = {\n        \"year\": 1970,\n        \"month\": 0,\n        \"day\": 1,\n        \"hour\": 0,\n        \"minute\": 0,\n        \"second\": 0,\n        \"millisecond\": 0,\n        \"timestamp\": null,\n        \"offset\": 0,\n        \"utc\": this._root.utc\n      }; // Index adjuster\n\n      var indexAdjust = 0;\n      var index = 0; // Iterate through all of the parts\n\n      for (var i = 0; i < info.parts.length; i++) {\n        // Set current match index\n        index = i + indexAdjust + 1;\n\n        switch (info.parts[i]) {\n          case \"yyyy\":\n          case \"YYYY\":\n            reg += \"([0-9]{4})\";\n            parsedIndexes.year = index;\n            break;\n\n          case \"yyy\":\n          case \"YYY\":\n            reg += \"([0-9]{3})\";\n            parsedIndexes.year3 = index;\n            break;\n\n          case \"yy\":\n          case \"YY\":\n            reg += \"([0-9]{2})\";\n            parsedIndexes.year2 = index;\n            break;\n\n          case \"y\":\n          case \"Y\":\n            reg += \"([0-9]{1})\";\n            parsedIndexes.year1 = index;\n            break;\n\n          case \"MMMM\":\n            reg += \"(\" + this.getStringList(this._months()).join(\"|\") + \")\";\n            parsedIndexes.monthLong = index;\n            break;\n\n          case \"MMM\":\n            reg += \"(\" + this.getStringList(this._shortMonths()).join(\"|\") + \")\";\n            parsedIndexes.monthShort = index;\n            break;\n\n          case \"MM\":\n          case \"M\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.month = index;\n            break;\n\n          case \"ww\":\n          case \"w\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.week = index;\n            break;\n\n          case \"dd\":\n          case \"d\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.day = index;\n            break;\n\n          case \"DDD\":\n          case \"DD\":\n          case \"D\":\n            reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n            parsedIndexes.yearDay = index;\n            break;\n\n          case \"dddd\":\n            reg += \"(\" + this.getStringList(this._weekdays()).join(\"|\") + \")\";\n            parsedIndexes.weekdayLong = index;\n            break;\n\n          case \"ddd\":\n            reg += \"(\" + this.getStringList(this._shortWeekdays()).join(\"|\") + \")\";\n            parsedIndexes.weekdayShort = index;\n            break;\n\n          case \"aaa\":\n          case \"aa\":\n          case \"a\":\n            // TODO: fix (escape regex)\n            reg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\n            parsedIndexes.am = index;\n            break;\n\n          case \"hh\":\n          case \"h\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.hour12Base1 = index;\n            break;\n\n          case \"HH\":\n          case \"H\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.hourBase0 = index;\n            break;\n\n          case \"KK\":\n          case \"K\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.hour12Base0 = index;\n            break;\n\n          case \"kk\":\n          case \"k\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.hourBase1 = index;\n            break;\n\n          case \"mm\":\n          case \"m\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.minute = index;\n            break;\n\n          case \"ss\":\n          case \"s\":\n            reg += \"([0-9]{2}|[0-9]{1})\";\n            parsedIndexes.second = index;\n            break;\n\n          case \"SSS\":\n          case \"SS\":\n          case \"S\":\n            reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n            parsedIndexes.millisecond = index;\n            parsedIndexes.millisecondDigits = info.parts[i].length;\n            break;\n\n          case \"nnn\":\n          case \"nn\":\n          case \"n\":\n            reg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n            parsedIndexes.millisecond = index;\n            break;\n\n          case \"x\":\n            reg += \"([0-9]{1,})\";\n            parsedIndexes.timestamp = index;\n            break;\n\n          case \"Z\":\n            reg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\n            parsedIndexes.zone = index;\n            break;\n\n          case \"ZZ\":\n            reg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\n            parsedIndexes.zone = index;\n            break;\n\n          case \"i\":\n            reg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\\\.?([0-9]{0,3})([zZ]|[+\\\\-][0-9]{2}:?[0-9]{2}|$)\";\n            parsedIndexes.iso = index;\n            indexAdjust += 7;\n            break;\n\n          case \"G\":\n          case \"YYYY\":\n          case \"YYY\":\n          case \"YY\":\n          case \"Y\":\n          case \"MMMMM\":\n          case \"W\":\n          case \"EEEEE\":\n          case \"EEEE\":\n          case \"EEE\":\n          case \"EE\":\n          case \"E\":\n          case \"eeeee\":\n          case \"eeee\":\n          case \"eee\":\n          case \"ee\":\n          case \"e\":\n          case \"zzzz\":\n          case \"zzz\":\n          case \"zz\":\n          case \"z\":\n          case \"t\":\n            // Ignore\n            indexAdjust--;\n            break;\n        }\n\n        reg += \"[^0-9]*\";\n      } // Try matching\n\n\n      var regex = new RegExp(reg);\n      var matches = source.match(regex);\n\n      if (matches) {\n        // Populate the date object\n        // Full year\n        if (parsedIndexes.year > -1) {\n          resValues.year = parseInt(matches[parsedIndexes.year]);\n        } // 3-digit year\n\n\n        if (parsedIndexes.year3 > -1) {\n          var val = parseInt(matches[parsedIndexes.year3]);\n          val += 1000;\n          resValues.year = val;\n        } // 2-digit year\n\n\n        if (parsedIndexes.year2 > -1) {\n          var val = parseInt(matches[parsedIndexes.year2]);\n\n          if (val > 50) {\n            val += 1000;\n          } else {\n            val += 2000;\n          }\n\n          resValues.year = val;\n        } // 1-digit year\n\n\n        if (parsedIndexes.year1 > -1) {\n          var val = parseInt(matches[parsedIndexes.year1]);\n          val = Math.floor(new Date().getFullYear() / 10) * 10 + val;\n          resValues.year = val;\n        } // Full month\n\n\n        if (parsedIndexes.monthLong > -1) {\n          resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);\n        } // Short month\n\n\n        if (parsedIndexes.monthShort > -1) {\n          resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);\n        } // Numeric month\n\n\n        if (parsedIndexes.month > -1) {\n          resValues.month = parseInt(matches[parsedIndexes.month]) - 1;\n        } // Weekday\n        // @todo\n        // Week\n\n\n        if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {\n          // We parse weeks ONLY if day is not explicitly set\n          // TODO: this needs work\n          // (but maybe later - I can hardly imagine anyone passing their dates in weeks)\n          resValues.month = 0;\n          resValues.day = $utils.getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this._root.utc);\n        } // Day\n\n\n        if (parsedIndexes.day > -1) {\n          resValues.day = parseInt(matches[parsedIndexes.day]);\n        } // Year day\n\n\n        if (parsedIndexes.yearDay > -1) {\n          resValues.month = 0;\n          resValues.day = parseInt(matches[parsedIndexes.yearDay]);\n        } // 24 Hour (0-23)\n\n\n        if (parsedIndexes.hourBase0 > -1) {\n          resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\n        } // 24 Hour (1-24)\n\n\n        if (parsedIndexes.hourBase1 > -1) {\n          resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\n        } // 12 Hour (0-11)\n\n\n        if (parsedIndexes.hour12Base0 > -1) {\n          var val = parseInt(matches[parsedIndexes.hour12Base0]);\n\n          if (val == 11) {\n            val = 0;\n          }\n\n          if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n            val += 12;\n          }\n\n          resValues.hour = val;\n        } // 12 Hour (1-12)\n\n\n        if (parsedIndexes.hour12Base1 > -1) {\n          var val = parseInt(matches[parsedIndexes.hour12Base1]);\n\n          if (val == 12) {\n            val = 0;\n          }\n\n          if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {\n            val += 12;\n          }\n\n          resValues.hour = val;\n        } // Minute\n\n\n        if (parsedIndexes.minute > -1) {\n          resValues.minute = parseInt(matches[parsedIndexes.minute]);\n        } // Second\n\n\n        if (parsedIndexes.second > -1) {\n          resValues.second = parseInt(matches[parsedIndexes.second]);\n        } // Millisecond\n\n\n        if (parsedIndexes.millisecond > -1) {\n          var val = parseInt(matches[parsedIndexes.millisecond]);\n\n          if (parsedIndexes.millisecondDigits == 2) {\n            val *= 10;\n          } else if (parsedIndexes.millisecondDigits == 1) {\n            val *= 100;\n          }\n\n          resValues.millisecond = val;\n        } // Timestamp\n\n\n        if (parsedIndexes.timestamp > -1) {\n          resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\n          var ts = new Date(resValues.timestamp);\n          resValues.year = ts.getUTCFullYear();\n          resValues.month = ts.getUTCMonth();\n          resValues.day = ts.getUTCDate();\n          resValues.hour = ts.getUTCHours();\n          resValues.minute = ts.getUTCMinutes();\n          resValues.second = ts.getUTCSeconds();\n          resValues.millisecond = ts.getUTCMilliseconds();\n        } // Adjust time zone\n\n\n        if (parsedIndexes.zone > -1) {\n          resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\n        } // ISO\n\n\n        if (parsedIndexes.iso > -1) {\n          resValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\n          resValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\n          resValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\n          resValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\n          resValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\n          resValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\n          resValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\n\n          if (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\n            resValues.utc = true;\n          } else if (matches[parsedIndexes.iso + 7] != \"\") {\n            resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\n          }\n        } // Create Date object\n\n\n        if (resValues.utc) {\n          res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));\n        } else {\n          res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);\n        }\n      } else {\n        // Didn't match anything\n        // Let's try dropping it into Date constructor and hope for the best\n        res = new Date(source);\n      }\n\n      return res;\n    }\n  });\n  Object.defineProperty(DateFormatter.prototype, \"resolveTimezoneOffset\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date, zone) {\n      var value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n\n      if (value) {\n        var match = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n        var dir = match[1];\n        var hour = match[2];\n        var minute = match[3];\n        var offset = parseInt(hour) * 60 + parseInt(minute); // Adjust offset\n        // Making it negative does not seem to make sense, but it's right\n        // because of how JavaScript calculates GMT offsets\n\n        if (dir == \"+\") {\n          offset *= -1;\n        } // Check the difference in offset\n\n\n        var originalOffset = (date || new Date()).getTimezoneOffset();\n        var diff = offset - originalOffset;\n        return diff;\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * Resolves month name (i.e. \"December\") into a month number (11).\r\n   *\r\n   * @param value  Month name\r\n   * @return Month number\r\n   */\n\n  Object.defineProperty(DateFormatter.prototype, \"resolveMonth\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      // Let's try English first\n      var month = this._months().indexOf(value);\n\n      if (month > -1) {\n        return month;\n      } // Try the translation\n\n\n      if (!this._root.language.isDefault()) {\n        month = this._root.language.translateAll(this._months()).indexOf(value);\n\n        if (month > -1) {\n          return month;\n        }\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * Resolves short month name (i.e. \"Dec\") into a month number.\r\n   *\r\n   * @param value  Short month name\r\n   * @return Month number\r\n   */\n\n  Object.defineProperty(DateFormatter.prototype, \"resolveShortMonth\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      // Let's try English first\n      var month = this._shortMonths().indexOf(value);\n\n      if (month > -1) {\n        return month;\n      } // Maybe long month (workaround for May)\n\n\n      month = this._months().indexOf(value);\n\n      if (month > -1) {\n        return month;\n      } // Try the translation\n\n\n      if (this._root.language && !this._root.language.isDefault()) {\n        month = this._root.language.translateAll(this._shortMonths()).indexOf(value);\n\n        if (month > -1) {\n          return month;\n        }\n      }\n\n      return 0;\n    }\n  });\n  /**\r\n   * Checks if passed in string represents AM/PM notation in many of its\r\n   * versions.\r\n   *\r\n   * @param value  Source string\r\n   * @return Is it AM/PM?\r\n   */\n\n  Object.defineProperty(DateFormatter.prototype, \"isAm\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\n      return list.indexOf(value.toUpperCase()) > -1;\n    }\n  });\n  /**\r\n   * Translates list of strings.\r\n   *\r\n   * @param list  Source strings\r\n   * @return Translated strings\r\n   */\n\n  Object.defineProperty(DateFormatter.prototype, \"getStringList\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (list) {\n      var res = [];\n\n      for (var i = 0; i < list.length; i++) {\n        // translate?\n        if (this._root.language) {\n          res.push($utils.escapeForRgex(this._t(list[i])));\n        } else {\n          res.push($utils.escapeForRgex(list[i]));\n        }\n      }\n\n      return res;\n    }\n  });\n  return DateFormatter;\n}(Entity);\n\nexport { DateFormatter };","map":{"version":3,"mappings":"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","names":["Entity","TextFormatter","$type","$utils","__extends","_setDefault","_super","_setDefaults","call","_beforeChanged","source","format","get","formatted","date","isObject","locales","Intl","DateTimeFormat","undefined","e","info","parseFormat","timezone","_root","utc","convertLocal","isNumber","getTime","applyFormat","replace","substr","toUpperCase","res","template","fullYear","month","weekday","day","hours","minutes","seconds","milliseconds","offset","getTimezoneOffset","timestamp","getUTCFullYear","getUTCMonth","getUTCDay","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","getFullYear","getMonth","getDay","getDate","getHours","getMinutes","getSeconds","getMilliseconds","i","len","parts","length","value","_t","Math","abs","toString","week","getWeek","year","ceil","_getMonth","_getShortMonth","padString","getMonthWeek","getYearDay","language","translateFunc","_getShortWeekday","locale","firstDayOfWeek","get12Hours","round","pow","getTimeZone","tz","tzh","floor","tzm","toISOString","toUTCString","PLACEHOLDER","chunks","chunk","type","text","match","dateFormat","isString","matches","x","push","index","_months","_shortMonths","_weekdays","_shortWeekdays","Date","reg","cleanFormat","parsedIndexes","resValues","indexAdjust","year3","year2","year1","getStringList","join","monthLong","monthShort","yearDay","weekdayLong","weekdayShort","am","hour12Base1","hourBase0","hour12Base0","hourBase1","minute","second","millisecond","millisecondDigits","zone","iso","regex","RegExp","parseInt","val","resolveMonth","resolveShortMonth","getDayFromWeek","hour","isAm","ts","resolveTimezoneOffset","toNumber","UTC","dir","originalOffset","diff","indexOf","isDefault","translateAll","list","escapeForRgex"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/DateFormatter.ts"],"sourcesContent":["import type { ILocaleSettings } from \"./Language\"\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\"\nimport { TextFormatter } from \"./TextFormatter\"\n\nimport * as $type from \"./Type\"\nimport * as $utils from \"./Utils\";\n\n/**\n * Interface describing parsed date format definition.\n *\n * @ignore\n */\nexport interface DateFormatInfo {\n\t\"template\": string;\n\t\"parts\": any[];\n}\n\nexport interface IDateFormatterSettings extends IEntitySettings {\n\n\t/**\n\t * Should the first letter of the formatted date be capitalized?\n\t *\n\t * @default true\n\t */\n\tcapitalize?: boolean;\n\n\t/**\n\t * A date format to be used when formatting dates.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-dates/} for more info\n\t */\n\tdateFormat?: string | Intl.DateTimeFormatOptions;\n\n\t/**\n\t * An array of data fields that hold date values and should be formatted\n\t * with a [[DateFormatter]].\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/data-placeholders/#Formatting_placeholders} for more info\n\t */\n\tdateFields?: string[];\n\n\t/**\n\t * Locales to use when formatting using `Intl.DateFormatter`.\n\t */\n\tintlLocales?: string;\n\n}\n\nexport interface IDateFormatterPrivate extends IEntityPrivate {\n}\n\ntype Months = \"January\" | \"February\" | \"March\" | \"April\" | \"May\" | \"June\" | \"July\" | \"August\" | \"September\" | \"October\" | \"November\" | \"December\";\ntype ShortMonths = \"Jan\" | \"Feb\" | \"Mar\" | \"Apr\" | \"May(short)\" | \"Jun\" | \"Jul\" | \"Aug\" | \"Sep\" | \"Oct\" | \"Nov\" | \"Dec\";\ntype Weekdays = \"Sunday\" | \"Monday\" | \"Tuesday\" | \"Wednesday\" | \"Thursday\" | \"Friday\" | \"Saturday\";\ntype ShortWeekdays = \"Sun\" | \"Mon\" | \"Tue\" | \"Wed\" | \"Thu\" | \"Fri\" | \"Sat\";\n\nexport class DateFormatter extends Entity {\n\tdeclare public _settings: IDateFormatterSettings;\n\tdeclare public _privateSettings: IDateFormatterPrivate;\n\n\tprotected _setDefaults() {\n\t\t// Defaults\n\t\tthis._setDefault(\"capitalize\", true);\n\t\tthis._setDefault(\"dateFormat\", \"yyyy-MM-dd\");\n\n\t\tsuper._setDefaults();\n\t}\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\t}\n\n\tpublic format(source: any, format?: string | Intl.DateTimeFormatOptions): string {\n\n\t\t// Locale?\n\t\t// TODO\n\n\t\t// No format passed in or it's empty\n\t\tif (typeof format === \"undefined\" || format === \"\") {\n\t\t\tformat = this.get(\"dateFormat\", \"yyyy-MM-dd\");\n\t\t}\n\n\t\t// Init return value\n\t\tlet formatted;\n\n\t\t// Cast?\n\t\t// TODO: decide if we need to cast\n\t\tlet date: Date = source;\n\n\t\t// Is it a built-in format or Intl.DateTimeFormat\n\t\tif ($type.isObject(format)) {\n\n\t\t\ttry {\n\t\t\t\tconst locales = this.get(\"intlLocales\");\n\t\t\t\tif (locales) {\n\t\t\t\t\treturn new Intl.DateTimeFormat(locales, <Intl.DateTimeFormatOptions>format).format(date);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn new Intl.DateTimeFormat(undefined, <Intl.DateTimeFormatOptions>format).format(date);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treturn \"Invalid\";\n\t\t\t}\n\n\t\t}\n\n\t\t// get format info (it will also deal with parser caching)\n\t\tlet info = this.parseFormat(format);\n\n\t\t// Should we apply custom time zone?\n\t\tconst timezone = this._root.timezone;\n\t\tif (timezone && !this._root.utc) {\n\t\t\tdate = timezone.convertLocal(date);\n\t\t}\n\n\n\t\t// Check if it's a valid date\n\t\tif (!$type.isNumber(date.getTime())) {\n\t\t\t// TODO translation\n\t\t\t//return this._t(\"Invalid date\");\n\t\t\treturn \"Invalid date\";\n\t\t}\n\n\t\t// Apply format\n\t\tformatted = this.applyFormat(date, info);\n\n\t\t// Capitalize\n\t\tif (this.get(\"capitalize\")) {\n\t\t\tformatted = formatted.replace(\n\t\t\t\t/^.{1}/, formatted.substr(0, 1).toUpperCase()\n\t\t\t);\n\t\t}\n\n\t\t// We're done\n\t\treturn formatted;\n\t}\n\n\t/**\n\t * Applies format to Date.\n\t *\n\t * @param date      Date object\n\t * @param info      Parsed format information\n\t * @return Formatted date string\n\t */\n\tprotected applyFormat(date: Date, info: DateFormatInfo): string {\n\n\t\t// Init return value\n\t\tlet res = info.template;\n\n\t\t// Get values\n\t\tlet fullYear: number,\n\t\t\tmonth: number,\n\t\t\tweekday: number,\n\t\t\tday: number,\n\t\t\thours: number,\n\t\t\tminutes: number,\n\t\t\tseconds: number,\n\t\t\tmilliseconds: number,\n\t\t\toffset: number = date.getTimezoneOffset(),\n\t\t\ttimestamp: number = date.getTime();\n\t\tif (this._root.utc) {\n\t\t\tfullYear = date.getUTCFullYear();\n\t\t\tmonth = date.getUTCMonth();\n\t\t\tweekday = date.getUTCDay();\n\t\t\tday = date.getUTCDate();\n\t\t\thours = date.getUTCHours();\n\t\t\tminutes = date.getUTCMinutes();\n\t\t\tseconds = date.getUTCSeconds();\n\t\t\tmilliseconds = date.getUTCMilliseconds();\n\t\t}\n\t\telse {\n\t\t\tfullYear = date.getFullYear();\n\t\t\tmonth = date.getMonth();\n\t\t\tweekday = date.getDay();\n\t\t\tday = date.getDate();\n\t\t\thours = date.getHours();\n\t\t\tminutes = date.getMinutes();\n\t\t\tseconds = date.getSeconds();\n\t\t\tmilliseconds = date.getMilliseconds();\n\t\t}\n\n\t\t// Go through each part and format/replace it in template\n\t\tfor (let i = 0, len = info.parts.length; i < len; i++) {\n\t\t\tlet value: string = \"\";\n\t\t\tswitch (info.parts[i]) {\n\n\t\t\t\tcase \"G\":\n\t\t\t\t\tvalue = this._t(\n\t\t\t\t\t\tfullYear < 0\n\t\t\t\t\t\t\t? \"_era_bc\"\n\t\t\t\t\t\t\t: \"_era_ad\"\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"yyyy\":\n\t\t\t\t\tvalue = Math.abs(fullYear).toString();\n\t\t\t\t\tif (fullYear < 0) {\n\t\t\t\t\t\tvalue += this._t(\"_era_bc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"yyy\":\n\t\t\t\tcase \"yy\":\n\t\t\t\tcase \"y\":\n\t\t\t\t\tvalue = Math.abs(fullYear).toString().substr(-info.parts[i].length);\n\t\t\t\t\tif (fullYear < 0) {\n\t\t\t\t\t\tvalue += this._t(\"_era_bc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"YYYY\":\n\t\t\t\tcase \"YYY\":\n\t\t\t\tcase \"YY\":\n\t\t\t\tcase \"Y\":\n\t\t\t\t\tlet week = $utils.getWeek(date);\n\t\t\t\t\tlet year = fullYear;\n\t\t\t\t\tif (week == 1 && (weekday > 4)) {\n\t\t\t\t\t\tyear--;\n\t\t\t\t\t}\n\t\t\t\t\tif (info.parts[i] == \"YYYY\") {\n\t\t\t\t\t\tvalue = Math.abs(year).toString();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = Math.abs(year).toString().substr(-info.parts[i].length);\n\t\t\t\t\t}\n\t\t\t\t\tif (year < 0) {\n\t\t\t\t\t\tvalue += this._t(\"_era_bc\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"u\":\n\t\t\t\t\t// @todo\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"q\":\n\t\t\t\t\tvalue = \"\" + Math.ceil((date.getMonth() + 1) / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MMMMM\":\n\t\t\t\t\tvalue = this._t(this._getMonth(month)).substr(0, 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MMMM\":\n\t\t\t\t\tvalue = this._t(this._getMonth(month));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MMM\":\n\t\t\t\t\tvalue = this._t(this._getShortMonth(month));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MM\":\n\t\t\t\t\tvalue = $utils.padString(month + 1, 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"M\":\n\t\t\t\t\tvalue = (month + 1).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ww\":\n\t\t\t\t\tvalue = $utils.padString($utils.getWeek(date, this._root.utc), 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"w\":\n\t\t\t\t\tvalue = $utils.getWeek(date, this._root.utc).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"W\":\n\t\t\t\t\tvalue = $utils.getMonthWeek(date, this._root.utc).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"dd\":\n\t\t\t\t\tvalue = $utils.padString(day, 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"d\":\n\t\t\t\t\tvalue = day.toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"DD\":\n\t\t\t\tcase \"DDD\":\n\t\t\t\t\tvalue = $utils.padString($utils.getYearDay(date, this._root.utc).toString(), info.parts[i].length, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"D\":\n\t\t\t\t\tvalue = $utils.getYearDay(date, this._root.utc).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"F\":\n\t\t\t\t\t// @todo\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"g\":\n\t\t\t\t\t// @todo\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"t\":\n\t\t\t\t\tvalue = this._root.language.translateFunc(\"_dateOrd\").call(this, day);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"E\":\n\t\t\t\t\tvalue = (weekday || 7).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"EE\":\n\t\t\t\t\tvalue = $utils.padString((weekday || 7).toString(), 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"EEE\":\n\t\t\t\tcase \"eee\":\n\t\t\t\t\tvalue = this._t(this._getShortWeekday(weekday));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"EEEE\":\n\t\t\t\tcase \"eeee\":\n\t\t\t\t\tvalue = this._t(this._getShortWeekday(weekday));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"EEEEE\":\n\t\t\t\tcase \"eeeee\":\n\t\t\t\t\tvalue = this._t(this._getShortWeekday(weekday)).substr(0, 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"e\":\n\t\t\t\tcase \"ee\":\n\t\t\t\t\tvalue = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();\n\t\t\t\t\tif (info.parts[i] == \"ee\") {\n\t\t\t\t\t\tvalue = $utils.padString(value, 2, \"0\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"a\":\n\t\t\t\t\tif (hours >= 12) {\n\t\t\t\t\t\tvalue = this._t(\"PM\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = this._t(\"AM\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"aa\":\n\t\t\t\t\tif (hours >= 12) {\n\t\t\t\t\t\tvalue = this._t(\"P.M.\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = this._t(\"A.M.\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"aaa\":\n\t\t\t\t\tif (hours >= 12) {\n\t\t\t\t\t\tvalue = this._t(\"P\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = this._t(\"A\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"h\":\n\t\t\t\t\tvalue = $utils.get12Hours(hours).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"hh\":\n\t\t\t\t\tvalue = $utils.padString($utils.get12Hours(hours), 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"H\":\n\t\t\t\t\tvalue = hours.toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"HH\":\n\t\t\t\t\tvalue = $utils.padString(hours, 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"K\":\n\t\t\t\t\tvalue = $utils.get12Hours(hours, 0).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"KK\":\n\t\t\t\t\tvalue = $utils.padString($utils.get12Hours(hours, 0), 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"k\":\n\t\t\t\t\tvalue = (hours + 1).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"kk\":\n\t\t\t\t\tvalue = $utils.padString(hours + 1, 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"m\":\n\t\t\t\t\tvalue = minutes.toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"mm\":\n\t\t\t\t\tvalue = $utils.padString(minutes, 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"s\":\n\t\t\t\t\tvalue = seconds.toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ss\":\n\t\t\t\t\tvalue = $utils.padString(seconds, 2, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"S\":\n\t\t\t\tcase \"SS\":\n\t\t\t\tcase \"SSS\":\n\t\t\t\t\tvalue = Math.round((milliseconds / 1000) * Math.pow(10, info.parts[i].length)).toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"x\":\n\t\t\t\t\tvalue = timestamp.toString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"n\":\n\t\t\t\tcase \"nn\":\n\t\t\t\tcase \"nnn\":\n\t\t\t\t\tvalue = $utils.padString(milliseconds, info.parts[i].length, \"0\");\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"z\":\n\t\t\t\t\tvalue = $utils.getTimeZone(date, false, false, this._root.utc);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"zz\":\n\t\t\t\t\tvalue = $utils.getTimeZone(date, true, false, this._root.utc);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"zzz\":\n\t\t\t\t\tvalue = $utils.getTimeZone(date, false, true, this._root.utc);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"zzzz\":\n\t\t\t\t\tvalue = $utils.getTimeZone(date, true, true, this._root.utc);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"Z\":\n\t\t\t\tcase \"ZZ\":\n\t\t\t\t\tlet tz = Math.abs(offset) / 60;\n\t\t\t\t\tlet tzh = Math.floor(tz);\n\t\t\t\t\tlet tzm = tz * 60 - tzh * 60;\n\n\t\t\t\t\tif (this._root.utc) {\n\t\t\t\t\t\ttzh = 0;\n\t\t\t\t\t\ttzm = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (info.parts[i] == \"Z\") {\n\t\t\t\t\t\tvalue = \"GMT\";\n\t\t\t\t\t\tvalue += offset > 0 ? \"-\" : \"+\";\n\t\t\t\t\t\tvalue += $utils.padString(tzh, 2) + \":\" + $utils.padString(tzm, 2);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvalue = offset > 0 ? \"-\" : \"+\";\n\t\t\t\t\t\tvalue += $utils.padString(tzh, 2) + $utils.padString(tzm, 2);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"i\":\n\t\t\t\t\tvalue = date.toISOString();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"I\":\n\t\t\t\t\tvalue = date.toUTCString();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\t\t\tres = res.replace($type.PLACEHOLDER, value);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\t/**\n\t * Parses format into structured infromation.\n\t *\n\t * @param format Format template\n\t */\n\tprotected parseFormat(format: string): DateFormatInfo {\n\n\t\t// Check cache\n\t\t// TODO: implement caching of the parsed format\n\n\t\t// Init format parse info holder\n\t\tlet info: DateFormatInfo = {\n\t\t\t\"template\": \"\",\n\t\t\t\"parts\": <any>[]\n\t\t};\n\n\t\t// Let TextFormatter split into chunks\n\t\tlet chunks = TextFormatter.chunk(format, true);\n\t\tfor (let i: number = 0; i < chunks.length; i++) {\n\t\t\tlet chunk = chunks[i];\n\n\t\t\tif (chunk.type === \"value\") {\n\n\t\t\t\t// Just \"Date\"?\n\t\t\t\tif (chunk.text.match(/^date$/i)) {\n\t\t\t\t\tlet dateFormat = this.get(\"dateFormat\", \"yyyy-MM-dd\");\n\t\t\t\t\tif (!$type.isString(dateFormat)) {\n\t\t\t\t\t\tdateFormat = \"yyyy-MM-dd\";\n\t\t\t\t\t}\n\t\t\t\t\tchunk.text = dateFormat;\n\t\t\t\t}\n\n\t\t\t\t// Find all possible parts\n\t\t\t\tlet matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);\n\n\t\t\t\t// Found?\n\t\t\t\tif (matches) {\n\n\t\t\t\t\t// Populate template\n\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\n\t\t\t\t\t\tinfo.parts.push(matches[x]);\n\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply to template\n\t\t\tinfo.template += chunk.text;\n\t\t}\n\n\t\t// Save cache\n\t\t// TODO\n\n\t\treturn info;\n\t}\n\n\tprotected _months(): Months[] {\n\t\treturn [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t}\n\n\tprotected _getMonth(index: number): Months {\n\t\treturn this._months()[index];\n\t}\n\n\tprotected _shortMonths(): ShortMonths[] {\n\t\treturn [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May(short)\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\t}\n\n\tprotected _getShortMonth(index: number): ShortMonths {\n\t\treturn this._shortMonths()[index];\n\t}\n\n\tprotected _weekdays(): Weekdays[] {\n\t\treturn [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\t}\n\n\tprotected _getWeekday(index: number): Weekdays {\n\t\treturn this._weekdays()[index];\n\t}\n\n\tprotected _shortWeekdays(): ShortWeekdays[] {\n\t\treturn [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\t}\n\n\tprotected _getShortWeekday(index: number): ShortWeekdays {\n\t\treturn this._shortWeekdays()[index];\n\t}\n\n\tpublic parse(source: any, format: string): Date {\n\n\t\t// Is it already a Date\n\t\tif (source instanceof Date) {\n\t\t\treturn source;\n\t\t}\n\n\t\t// Is it a numeric timestamp\n\t\tif ($type.isNumber(source)) {\n\t\t\treturn new Date(source);\n\t\t}\n\n\t\t// No? Let's check if it's string, and try converting to it if nec\n\t\tif (!$type.isString(source)) {\n\t\t\tsource = source.toString();\n\t\t}\n\n\t\t// Init return value\n\t\tlet res: Date;\n\n\t\t// Init RegEx for parsing\n\t\tlet reg: string = \"\";\n\n\t\t// Clean format\n\t\tformat = $utils.cleanFormat(format);\n\n\t\t// Clip format to length of the source string\n\t\tformat = format.substr(0, source.length);\n\n\t\t// Parse format\n\t\tlet info = this.parseFormat(format);\n\n\t\t// Init parsed items holder\n\t\tlet parsedIndexes = {\n\t\t\t\"year\": -1,\n\t\t\t\"year3\": -1,\n\t\t\t\"year2\": -1,\n\t\t\t\"year1\": -1,\n\t\t\t\"month\": -1,\n\t\t\t\"monthShort\": -1,\n\t\t\t\"monthLong\": -1,\n\t\t\t\"weekdayShort\": -1,\n\t\t\t\"weekdayLong\": -1,\n\t\t\t\"day\": -1,\n\t\t\t\"yearDay\": -1,\n\t\t\t\"week\": -1,\n\t\t\t\"hourBase0\": -1,\n\t\t\t\"hour12Base0\": -1,\n\t\t\t\"hourBase1\": -1,\n\t\t\t\"hour12Base1\": -1,\n\t\t\t\"minute\": -1,\n\t\t\t\"second\": -1,\n\t\t\t\"millisecond\": -1,\n\t\t\t\"millisecondDigits\": -1,\n\t\t\t\"am\": -1,\n\t\t\t\"zone\": -1,\n\t\t\t\"timestamp\": -1,\n\t\t\t\"iso\": -1\n\t\t};\n\n\t\t// Init values\n\t\tlet resValues = {\n\t\t\t\"year\": 1970,\n\t\t\t\"month\": 0,\n\t\t\t\"day\": 1,\n\t\t\t\"hour\": 0,\n\t\t\t\"minute\": 0,\n\t\t\t\"second\": 0,\n\t\t\t\"millisecond\": 0,\n\t\t\t\"timestamp\": <any>null,\n\t\t\t\"offset\": 0,\n\t\t\t\"utc\": this._root.utc\n\t\t}\n\n\t\t// Index adjuster\n\t\tlet indexAdjust: number = 0;\n\t\tlet index: number = 0;\n\n\t\t// Iterate through all of the parts\n\t\tfor (let i: number = 0; i < info.parts.length; i++) {\n\n\t\t\t// Set current match index\n\t\t\tindex = i + indexAdjust + 1;\n\n\t\t\tswitch (info.parts[i]) {\n\n\t\t\t\tcase \"yyyy\":\n\t\t\t\tcase \"YYYY\":\n\t\t\t\t\treg += \"([0-9]{4})\";\n\t\t\t\t\tparsedIndexes.year = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"yyy\":\n\t\t\t\tcase \"YYY\":\n\t\t\t\t\treg += \"([0-9]{3})\";\n\t\t\t\t\tparsedIndexes.year3 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"yy\":\n\t\t\t\tcase \"YY\":\n\t\t\t\t\treg += \"([0-9]{2})\";\n\t\t\t\t\tparsedIndexes.year2 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"y\":\n\t\t\t\tcase \"Y\":\n\t\t\t\t\treg += \"([0-9]{1})\";\n\t\t\t\t\tparsedIndexes.year1 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MMMM\":\n\t\t\t\t\treg += \"(\" + this.getStringList(this._months()).join(\"|\") + \")\";\n\t\t\t\t\tparsedIndexes.monthLong = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MMM\":\n\t\t\t\t\treg += \"(\" + this.getStringList(this._shortMonths()).join(\"|\") + \")\";\n\t\t\t\t\tparsedIndexes.monthShort = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"MM\":\n\t\t\t\tcase \"M\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.month = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ww\":\n\t\t\t\tcase \"w\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.week = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"dd\":\n\t\t\t\tcase \"d\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.day = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"DDD\":\n\t\t\t\tcase \"DD\":\n\t\t\t\tcase \"D\":\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.yearDay = index;\n\t\t\t\t\tbreak;\n\n\n\t\t\t\tcase \"dddd\":\n\t\t\t\t\treg += \"(\" + this.getStringList(this._weekdays()).join(\"|\") + \")\";\n\t\t\t\t\tparsedIndexes.weekdayLong = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ddd\":\n\t\t\t\t\treg += \"(\" + this.getStringList(this._shortWeekdays()).join(\"|\") + \")\";\n\t\t\t\t\tparsedIndexes.weekdayShort = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"aaa\":\n\t\t\t\tcase \"aa\":\n\t\t\t\tcase \"a\":\n\t\t\t\t\t// TODO: fix (escape regex)\n\t\t\t\t\treg += \"(\" + this.getStringList([\"AM\", \"PM\", \"A\\.M\\.\", \"P\\.M\\.\", \"A\", \"P\"]).join(\"|\") + \")\";\n\t\t\t\t\tparsedIndexes.am = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"hh\":\n\t\t\t\tcase \"h\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.hour12Base1 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"HH\":\n\t\t\t\tcase \"H\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.hourBase0 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"KK\":\n\t\t\t\tcase \"K\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.hour12Base0 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"kk\":\n\t\t\t\tcase \"k\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.hourBase1 = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"mm\":\n\t\t\t\tcase \"m\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.minute = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ss\":\n\t\t\t\tcase \"s\":\n\t\t\t\t\treg += \"([0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.second = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"SSS\":\n\t\t\t\tcase \"SS\":\n\t\t\t\tcase \"S\":\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.millisecond = index;\n\t\t\t\t\tparsedIndexes.millisecondDigits = info.parts[i].length;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"nnn\":\n\t\t\t\tcase \"nn\":\n\t\t\t\tcase \"n\":\n\t\t\t\t\treg += \"([0-9]{3}|[0-9]{2}|[0-9]{1})\";\n\t\t\t\t\tparsedIndexes.millisecond = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"x\":\n\t\t\t\t\treg += \"([0-9]{1,})\";\n\t\t\t\t\tparsedIndexes.timestamp = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"Z\":\n\t\t\t\t\treg += \"GMT([-+]+[0-9]{2}:[0-9]{2})\";\n\t\t\t\t\tparsedIndexes.zone = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ZZ\":\n\t\t\t\t\treg += \"([\\\\-+]+[0-9]{2}[0-9]{2})\";\n\t\t\t\t\tparsedIndexes.zone = index;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"i\":\n\t\t\t\t\treg += \"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\\\.?([0-9]{0,3})([zZ]|[+\\\\-][0-9]{2}:?[0-9]{2}|$)\";\n\t\t\t\t\tparsedIndexes.iso = index;\n\t\t\t\t\tindexAdjust += 7;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"G\":\n\t\t\t\tcase \"YYYY\":\n\t\t\t\tcase \"YYY\":\n\t\t\t\tcase \"YY\":\n\t\t\t\tcase \"Y\":\n\t\t\t\tcase \"MMMMM\":\n\t\t\t\tcase \"W\":\n\t\t\t\tcase \"EEEEE\":\n\t\t\t\tcase \"EEEE\":\n\t\t\t\tcase \"EEE\":\n\t\t\t\tcase \"EE\":\n\t\t\t\tcase \"E\":\n\t\t\t\tcase \"eeeee\":\n\t\t\t\tcase \"eeee\":\n\t\t\t\tcase \"eee\":\n\t\t\t\tcase \"ee\":\n\t\t\t\tcase \"e\":\n\t\t\t\tcase \"zzzz\":\n\t\t\t\tcase \"zzz\":\n\t\t\t\tcase \"zz\":\n\t\t\t\tcase \"z\":\n\t\t\t\tcase \"t\":\n\t\t\t\t\t// Ignore\n\t\t\t\t\tindexAdjust--;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treg += \"[^0-9]*\";\n\t\t}\n\n\t\t// Try matching\n\t\tlet regex = new RegExp(reg);\n\t\tlet matches: RegExpMatchArray = source.match(regex);\n\n\t\tif (matches) {\n\t\t\t// Populate the date object\n\n\t\t\t// Full year\n\t\t\tif (parsedIndexes.year > -1) {\n\t\t\t\tresValues.year = parseInt(matches[parsedIndexes.year]);\n\t\t\t}\n\n\t\t\t// 3-digit year\n\t\t\tif (parsedIndexes.year3 > -1) {\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year3]);\n\t\t\t\tval += 1000;\n\t\t\t\tresValues.year = val;\n\t\t\t}\n\n\t\t\t// 2-digit year\n\t\t\tif (parsedIndexes.year2 > -1) {\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year2]);\n\t\t\t\tif (val > 50) {\n\t\t\t\t\tval += 1000;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tval += 2000;\n\t\t\t\t}\n\t\t\t\tresValues.year = val;\n\t\t\t}\n\n\t\t\t// 1-digit year\n\t\t\tif (parsedIndexes.year1 > -1) {\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.year1]);\n\t\t\t\tval = Math.floor((new Date().getFullYear()) / 10) * 10 + val;\n\t\t\t\tresValues.year = val;\n\t\t\t}\n\n\t\t\t// Full month\n\t\t\tif (parsedIndexes.monthLong > -1) {\n\t\t\t\tresValues.month = this.resolveMonth(<any>matches[parsedIndexes.monthLong]);\n\t\t\t}\n\n\t\t\t// Short month\n\t\t\tif (parsedIndexes.monthShort > -1) {\n\t\t\t\tresValues.month = this.resolveShortMonth(<any>matches[parsedIndexes.monthShort]);\n\t\t\t}\n\n\t\t\t// Numeric month\n\t\t\tif (parsedIndexes.month > -1) {\n\t\t\t\tresValues.month = parseInt(matches[parsedIndexes.month]) - 1;\n\t\t\t}\n\n\t\t\t// Weekday\n\t\t\t// @todo\n\n\t\t\t// Week\n\t\t\tif ((parsedIndexes.week > -1) && (parsedIndexes.day === -1)) {\n\t\t\t\t// We parse weeks ONLY if day is not explicitly set\n\t\t\t\t// TODO: this needs work\n\t\t\t\t// (but maybe later - I can hardly imagine anyone passing their dates in weeks)\n\t\t\t\tresValues.month = 0;\n\t\t\t\tresValues.day = $utils.getDayFromWeek(\n\t\t\t\t\tparseInt(matches[parsedIndexes.week]),\n\t\t\t\t\tresValues.year,\n\t\t\t\t\t1,\n\t\t\t\t\tthis._root.utc\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Day\n\t\t\tif (parsedIndexes.day > -1) {\n\t\t\t\tresValues.day = parseInt(matches[parsedIndexes.day]);\n\t\t\t}\n\n\t\t\t// Year day\n\t\t\tif (parsedIndexes.yearDay > -1) {\n\t\t\t\tresValues.month = 0;\n\t\t\t\tresValues.day = parseInt(matches[parsedIndexes.yearDay]);\n\t\t\t}\n\n\t\t\t// 24 Hour (0-23)\n\t\t\tif (parsedIndexes.hourBase0 > -1) {\n\t\t\t\tresValues.hour = parseInt(matches[parsedIndexes.hourBase0]);\n\t\t\t}\n\n\t\t\t// 24 Hour (1-24)\n\t\t\tif (parsedIndexes.hourBase1 > -1) {\n\t\t\t\tresValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;\n\t\t\t}\n\n\t\t\t// 12 Hour (0-11)\n\t\t\tif (parsedIndexes.hour12Base0 > -1) {\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.hour12Base0]);\n\t\t\t\tif (val == 11) {\n\t\t\t\t\tval = 0;\n\t\t\t\t}\n\t\t\t\tif ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\n\t\t\t\t\tval += 12;\n\t\t\t\t}\n\t\t\t\tresValues.hour = val;\n\t\t\t}\n\n\t\t\t// 12 Hour (1-12)\n\t\t\tif (parsedIndexes.hour12Base1 > -1) {\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.hour12Base1]);\n\t\t\t\tif (val == 12) {\n\t\t\t\t\tval = 0;\n\t\t\t\t}\n\t\t\t\tif ((parsedIndexes.am > -1) && !this.isAm(matches[parsedIndexes.am])) {\n\t\t\t\t\tval += 12;\n\t\t\t\t}\n\t\t\t\tresValues.hour = val;\n\t\t\t}\n\n\t\t\t// Minute\n\t\t\tif (parsedIndexes.minute > -1) {\n\t\t\t\tresValues.minute = parseInt(matches[parsedIndexes.minute]);\n\t\t\t}\n\n\t\t\t// Second\n\t\t\tif (parsedIndexes.second > -1) {\n\t\t\t\tresValues.second = parseInt(matches[parsedIndexes.second]);\n\t\t\t}\n\n\t\t\t// Millisecond\n\t\t\tif (parsedIndexes.millisecond > -1) {\n\t\t\t\tlet val = parseInt(matches[parsedIndexes.millisecond]);\n\t\t\t\tif (parsedIndexes.millisecondDigits == 2) {\n\t\t\t\t\tval *= 10;\n\t\t\t\t}\n\t\t\t\telse if (parsedIndexes.millisecondDigits == 1) {\n\t\t\t\t\tval *= 100;\n\t\t\t\t}\n\t\t\t\tresValues.millisecond = val;\n\t\t\t}\n\n\t\t\t// Timestamp\n\t\t\tif (parsedIndexes.timestamp > -1) {\n\t\t\t\tresValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);\n\n\t\t\t\tconst ts = new Date(resValues.timestamp);\n\t\t\t\tresValues.year = ts.getUTCFullYear();\n\t\t\t\tresValues.month = ts.getUTCMonth();\n\t\t\t\tresValues.day = ts.getUTCDate();\n\t\t\t\tresValues.hour = ts.getUTCHours();\n\t\t\t\tresValues.minute = ts.getUTCMinutes();\n\t\t\t\tresValues.second = ts.getUTCSeconds();\n\t\t\t\tresValues.millisecond = ts.getUTCMilliseconds();\n\t\t\t}\n\n\t\t\t// Adjust time zone\n\t\t\tif (parsedIndexes.zone > -1) {\n\t\t\t\tresValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);\n\t\t\t}\n\n\t\t\t// ISO\n\t\t\tif (parsedIndexes.iso > -1) {\n\n\t\t\t\tresValues.year = $type.toNumber(matches[parsedIndexes.iso + 0]);\n\t\t\t\tresValues.month = $type.toNumber(matches[parsedIndexes.iso + 1]) - 1;\n\t\t\t\tresValues.day = $type.toNumber(matches[parsedIndexes.iso + 2]);\n\t\t\t\tresValues.hour = $type.toNumber(matches[parsedIndexes.iso + 3]);\n\t\t\t\tresValues.minute = $type.toNumber(matches[parsedIndexes.iso + 4]);\n\t\t\t\tresValues.second = $type.toNumber(matches[parsedIndexes.iso + 5]);\n\t\t\t\tresValues.millisecond = $type.toNumber(matches[parsedIndexes.iso + 6]);\n\n\t\t\t\tif (matches[parsedIndexes.iso + 7] == \"Z\" || matches[parsedIndexes.iso + 7] == \"z\") {\n\t\t\t\t\tresValues.utc = true;\n\t\t\t\t}\n\t\t\t\telse if (matches[parsedIndexes.iso + 7] != \"\") {\n\t\t\t\t\tresValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create Date object\n\t\t\tif (resValues.utc) {\n\t\t\t\tres = new Date(Date.UTC(\n\t\t\t\t\tresValues.year,\n\t\t\t\t\tresValues.month,\n\t\t\t\t\tresValues.day,\n\t\t\t\t\tresValues.hour,\n\t\t\t\t\tresValues.minute,\n\t\t\t\t\tresValues.second,\n\t\t\t\t\tresValues.millisecond\n\t\t\t\t));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres = new Date(\n\t\t\t\t\tresValues.year,\n\t\t\t\t\tresValues.month,\n\t\t\t\t\tresValues.day,\n\t\t\t\t\tresValues.hour,\n\t\t\t\t\tresValues.minute + resValues.offset,\n\t\t\t\t\tresValues.second,\n\t\t\t\t\tresValues.millisecond\n\t\t\t\t);\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\t// Didn't match anything\n\t\t\t// Let's try dropping it into Date constructor and hope for the best\n\t\t\tres = new Date(source);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tprotected resolveTimezoneOffset(date: Date, zone: string): number {\n\t\tlet value = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/);\n\t\tif (value) {\n\t\t\tlet match = zone.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/)!;\n\t\t\tlet dir = match[1];\n\t\t\tlet hour = match[2];\n\t\t\tlet minute = match[3];\n\t\t\tlet offset = parseInt(hour) * 60 + parseInt(minute);\n\n\t\t\t// Adjust offset\n\t\t\t// Making it negative does not seem to make sense, but it's right\n\t\t\t// because of how JavaScript calculates GMT offsets\n\t\t\tif (dir == \"+\") {\n\t\t\t\toffset *= -1;\n\t\t\t}\n\n\t\t\t// Check the difference in offset\n\t\t\tlet originalOffset = (date || new Date()).getTimezoneOffset();\n\t\t\tlet diff = offset - originalOffset;\n\t\t\treturn diff;\n\t\t}\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Resolves month name (i.e. \"December\") into a month number (11).\n\t *\n\t * @param value  Month name\n\t * @return Month number\n\t */\n\tprotected resolveMonth(value: Months): number {\n\n\t\t// Let's try English first\n\t\tlet month: number = this._months().indexOf(value);\n\t\tif (month > -1) {\n\t\t\treturn month;\n\t\t}\n\n\t\t// Try the translation\n\t\tif (!this._root.language.isDefault()) {\n\t\t\tmonth = this._root.language.translateAll(this._months()).indexOf(value);\n\t\t\tif (month > -1) {\n\t\t\t\treturn month\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Resolves short month name (i.e. \"Dec\") into a month number.\n\t *\n\t * @param value  Short month name\n\t * @return Month number\n\t */\n\tprotected resolveShortMonth(value: ShortMonths): number {\n\n\t\t// Let's try English first\n\t\tlet month: number = this._shortMonths().indexOf(value);\n\t\tif (month > -1) {\n\t\t\treturn month;\n\t\t}\n\n\t\t// Maybe long month (workaround for May)\n\t\tmonth = this._months().indexOf(<any>value);\n\t\tif (month > -1) {\n\t\t\treturn month;\n\t\t}\n\n\t\t// Try the translation\n\t\tif (this._root.language && !this._root.language.isDefault()) {\n\t\t\tmonth = this._root.language.translateAll(this._shortMonths()).indexOf(value);\n\t\t\tif (month > -1) {\n\t\t\t\treturn month\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Checks if passed in string represents AM/PM notation in many of its\n\t * versions.\n\t *\n\t * @param value  Source string\n\t * @return Is it AM/PM?\n\t */\n\tprotected isAm(value: string): boolean {\n\t\tlet list = this.getStringList([\"AM\", \"A.M.\", \"A\"]);\n\t\treturn list.indexOf(value.toUpperCase()) > -1;\n\t}\n\n\t/**\n\t * Translates list of strings.\n\t *\n\t * @param list  Source strings\n\t * @return Translated strings\n\t */\n\tprotected getStringList(list: Array<keyof ILocaleSettings>): Array<string> {\n\t\tlet res: string[] = [];\n\t\tfor (let i: number = 0; i < list.length; i++) {\n\t\t\t// translate?\n\t\t\tif (this._root.language) {\n\t\t\t\tres.push($utils.escapeForRgex(this._t(list[i])));\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres.push($utils.escapeForRgex(list[i]));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}