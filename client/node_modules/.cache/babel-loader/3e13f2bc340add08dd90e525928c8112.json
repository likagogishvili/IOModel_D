{"ast":null,"code":"/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Scrollbar } from \"../../core/elements/Scrollbar\";\nimport { Sprite } from \"../../core/Sprite\";\nimport { List } from \"../../core/utils/List\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { XYChart } from \"../types/XYChart\";\nimport { ValueAxis } from \"../axes/ValueAxis\";\nimport { DateAxis } from \"../axes/DateAxis\";\nimport { registry } from \"../../core/Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { color } from \"../../core/utils/Color\";\nimport { options } from \"../../core/Options\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar XYChartScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(XYChartScrollbar, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function XYChartScrollbar() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * A chart element Scrollbar is for.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    _this.className = \"XYChartScrollbar\";\n    var interfaceColors = new InterfaceColorSet();\n\n    _this.padding(0, 0, 0, 0);\n\n    var scrollbarChart = _this.createChild(XYChart);\n\n    scrollbarChart.shouldClone = false;\n    scrollbarChart.margin(0, 0, 0, 0);\n    scrollbarChart.padding(0, 0, 0, 0);\n    scrollbarChart.interactionsEnabled = false;\n    _this._scrollbarChart = scrollbarChart;\n\n    if (!$utils.isIE()) {\n      var filter = new DesaturateFilter();\n      filter.filterUnits = \"userSpaceOnUse\";\n      scrollbarChart.plotContainer.filters.push(filter);\n    }\n\n    _this._disposers.push(_this._scrollbarChart);\n\n    _this.minHeight = 60;\n    _this.minWidth = 60;\n\n    var unselectedOverlay = _this.createChild(Sprite);\n\n    unselectedOverlay.shouldClone = false;\n    unselectedOverlay.setElement(_this.paper.add(\"path\"));\n    unselectedOverlay.fill = interfaceColors.getFor(\"background\");\n    unselectedOverlay.fillOpacity = 0.8;\n    unselectedOverlay.interactionsEnabled = false;\n    unselectedOverlay.isMeasured = false;\n    unselectedOverlay.toBack();\n    _this._unselectedOverlay = unselectedOverlay;\n\n    _this._disposers.push(_this._unselectedOverlay);\n\n    scrollbarChart.toBack();\n\n    _this.background.cornerRadius(0, 0, 0, 0);\n\n    var thumbBackground = _this.thumb.background;\n    thumbBackground.cornerRadius(0, 0, 0, 0);\n    thumbBackground.fillOpacity = 0;\n    thumbBackground.fill = interfaceColors.getFor(\"background\");\n    var hoverState = thumbBackground.states.getKey(\"hover\");\n\n    if (hoverState) {\n      hoverState.properties.fillOpacity = 0.2;\n    }\n\n    var downState = thumbBackground.states.getKey(\"down\");\n\n    if (downState) {\n      downState.properties.fillOpacity = 0.4;\n    }\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(XYChartScrollbar.prototype, \"series\", {\n    /**\r\n     * A list of series that are used to draw graph(s) on the scrollbar.\r\n     *\r\n     * @readonly\r\n     * @return Series\r\n     */\n    get: function () {\n      if (!this._series) {\n        this._series = new List();\n\n        this._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\n\n        this._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\n      }\n\n      return this._series;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Decorates a new series when they are pushed into a `series` list.\r\n   *\r\n   * @param event Event\r\n   */\n\n  XYChartScrollbar.prototype.handleSeriesAdded = function (event) {\n    var _this = this;\n\n    var sourceSeries = event.newValue;\n\n    if (!sourceSeries.xAxis || !sourceSeries.yAxis) {\n      return;\n    }\n\n    var scrollbarChart = this.scrollbarChart;\n    scrollbarChart.zoomOutButton.disabled = true;\n    this.chart = sourceSeries.chart;\n    scrollbarChart.dateFormatter.inputDateFormat = this.chart.dateFormatter.inputDateFormat; // Ensure that scrollbar chart shares the same locale as parent chart\n\n    scrollbarChart.language.locale = this.chart.language.locale;\n    var addXAxis = true;\n    var addYAxis = true; // check if we haven't added clone of x or y axis before\n\n    $iter.each(this.series.iterator(), function (series) {\n      if (series != sourceSeries) {\n        if (series.xAxis == sourceSeries.xAxis && _this.scrollbarChart.xAxes.length > 0) {\n          addXAxis = false;\n        }\n\n        if (series.yAxis == sourceSeries.yAxis && _this.scrollbarChart.yAxes.length > 0) {\n          addYAxis = false;\n        }\n      }\n    });\n    sourceSeries.events.on(\"beforedisposed\", function () {\n      _this.series.removeValue(sourceSeries);\n    });\n    var interfaceColors = new InterfaceColorSet();\n    var series = sourceSeries.clone();\n\n    if (options.onlyShowOnViewport || options.queue) {\n      this.addDisposer(this.chart.events.on(\"removedfromqueue\", function () {\n        scrollbarChart.invalidateData();\n      }));\n    }\n\n    if ($utils.isIE()) {\n      series.stroke = color(\"#aaaaaa\");\n      series.fill = series.stroke;\n      series.propertyFields.fill = undefined;\n      series.propertyFields.stroke = undefined;\n    }\n\n    sourceSeries.scrollbarSeries = series;\n\n    if (addXAxis) {\n      var xAxis = sourceSeries.xAxis.clone();\n      scrollbarChart.xAxes.moveValue(xAxis);\n      xAxis.title.disabled = true;\n      xAxis.rangeChangeDuration = 0; //xAxis.id = sourceSeries.uid;\n\n      var renderer = xAxis.renderer;\n      renderer.ticks.template.disabled = true;\n      renderer.inside = true;\n      renderer.labels.template.inside = true;\n      renderer.line.strokeOpacity = 0;\n      renderer.minLabelPosition = 0.02;\n      renderer.maxLabelPosition = 0.98;\n      renderer.line.disabled = true;\n      renderer.axisFills.template.disabled = true;\n      renderer.baseGrid.disabled = true;\n      renderer.grid.template.strokeOpacity = 0.05;\n      renderer.minWidth = undefined;\n      renderer.minHeight = undefined;\n      renderer.padding(0, 0, 0, 0);\n      renderer.chart = scrollbarChart;\n      renderer.margin(0, 0, 0, 0);\n      xAxis.width = percent(100);\n      var labelsTemplate = renderer.labels.template;\n      labelsTemplate.fillOpacity = 0.5;\n      xAxis.maxZoomCount = undefined;\n      xAxis.minZoomCount = undefined;\n\n      if (xAxis instanceof DateAxis) {\n        var vAxis_1 = xAxis;\n        var sourceAxis = sourceSeries.xAxis;\n        vAxis_1.groupCount = sourceAxis.groupCount * 5;\n        vAxis_1.min = undefined;\n        vAxis_1.max = undefined;\n\n        this._disposers.push(vAxis_1.clonedFrom.events.on(\"extremeschanged\", function () {\n          if ($type.isNumber(vAxis_1.clonedFrom.minDefined)) {\n            vAxis_1.min = vAxis_1.clonedFrom.minDefined;\n          }\n\n          if ($type.isNumber(vAxis_1.clonedFrom.maxDefined)) {\n            vAxis_1.max = vAxis_1.clonedFrom.maxDefined;\n          }\n        }, undefined, false));\n      } else if (xAxis instanceof ValueAxis) {\n        var vAxis_2 = xAxis;\n        vAxis_2.min = undefined;\n        vAxis_2.max = undefined;\n\n        if (!$type.isNumber(vAxis_2.clonedFrom.minDefined)) {\n          vAxis_2.min = undefined;\n        }\n\n        if (!$type.isNumber(vAxis_2.clonedFrom.maxDefined)) {\n          vAxis_2.max = undefined;\n        }\n\n        this._disposers.push(vAxis_2.clonedFrom.events.on(\"extremeschanged\", function () {\n          if ($type.isNumber(vAxis_2.clonedFrom.minDefined)) {\n            vAxis_2.min = vAxis_2.clonedFrom.min;\n          }\n\n          if ($type.isNumber(vAxis_2.clonedFrom.maxDefined)) {\n            vAxis_2.max = vAxis_2.clonedFrom.max;\n          }\n        }, undefined, false));\n      }\n\n      series.xAxis = xAxis;\n    } else {\n      this.scrollbarChart.xAxes.each(function (xAxis) {\n        if (xAxis.clonedFrom == sourceSeries.xAxis) {\n          series.xAxis = xAxis;\n        }\n      });\n    }\n\n    if (addYAxis) {\n      var yAxis = sourceSeries.yAxis.clone();\n      scrollbarChart.yAxes.moveValue(yAxis);\n      yAxis.title.disabled = true;\n      yAxis.rangeChangeDuration = 0;\n      var renderer = yAxis.renderer;\n      renderer.ticks.template.disabled = true;\n      renderer.inside = true;\n      renderer.labels.template.inside = true;\n      renderer.line.strokeOpacity = 0;\n      renderer.minLabelPosition = 0.02;\n      renderer.maxLabelPosition = 0.98;\n      renderer.line.disabled = true;\n      renderer.axisFills.template.disabled = true;\n      renderer.grid.template.stroke = interfaceColors.getFor(\"background\");\n      renderer.baseGrid.disabled = true;\n      renderer.grid.template.strokeOpacity = 0.05;\n      renderer.minWidth = undefined;\n      renderer.minHeight = undefined;\n      renderer.chart = scrollbarChart;\n      renderer.padding(0, 0, 0, 0);\n      renderer.margin(0, 0, 0, 0);\n      yAxis.height = percent(100);\n      var labelsTemplate = renderer.labels.template;\n      labelsTemplate.fillOpacity = 0.5;\n      series.yAxis = yAxis;\n      yAxis.maxZoomCount = undefined;\n      yAxis.minZoomCount = undefined;\n\n      if (yAxis instanceof DateAxis) {\n        var vAxis_3 = yAxis;\n        vAxis_3.min = undefined;\n        vAxis_3.max = undefined;\n        var sourceAxis = sourceSeries.yAxis;\n        yAxis.groupCount = sourceAxis.groupCount * 5;\n\n        this._disposers.push(vAxis_3.clonedFrom.events.on(\"extremeschanged\", function () {\n          if ($type.isNumber(vAxis_3.clonedFrom.minDefined)) {\n            vAxis_3.min = vAxis_3.clonedFrom.minDefined;\n          }\n\n          if ($type.isNumber(vAxis_3.clonedFrom.maxDefined)) {\n            vAxis_3.max = vAxis_3.clonedFrom.maxDefined;\n          }\n        }));\n      } else if (yAxis instanceof ValueAxis) {\n        var vAxis_4 = yAxis;\n        vAxis_4.min = undefined;\n        vAxis_4.max = undefined;\n\n        if (!$type.isNumber(vAxis_4.clonedFrom.minDefined)) {\n          vAxis_4.min = undefined;\n        }\n\n        if (!$type.isNumber(vAxis_4.clonedFrom.maxDefined)) {\n          vAxis_4.max = undefined;\n        }\n\n        this._disposers.push(vAxis_4.clonedFrom.events.on(\"extremeschanged\", function () {\n          if ($type.isNumber(vAxis_4.clonedFrom.minDefined)) {\n            vAxis_4.min = vAxis_4.clonedFrom.minDefined;\n          }\n\n          if ($type.isNumber(vAxis_4.clonedFrom.maxDefined)) {\n            vAxis_4.max = vAxis_4.clonedFrom.maxDefined;\n          }\n        }));\n      }\n    } else {\n      this.scrollbarChart.yAxes.each(function (yAxis) {\n        if (yAxis.clonedFrom == sourceSeries.yAxis) {\n          series.yAxis = yAxis;\n        }\n      });\n    }\n\n    series.rangeChangeDuration = 0;\n    series.interpolationDuration = 0;\n    series.defaultState.transitionDuration = 0;\n    series.showOnInit = false;\n\n    this._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false)); // data might be set drectly on series\n\n\n    this._disposers.push(sourceSeries.events.on(\"datavalidated\", function () {\n      if (series.data != sourceSeries.data) {\n        // data setter doesn't check this\n        series.data = sourceSeries.data;\n      }\n    }, undefined, false));\n\n    series.defaultState.properties.visible = true;\n    scrollbarChart.series.push(series);\n    this.updateByOrientation();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  XYChartScrollbar.prototype.updateByOrientation = function () {\n    var _this = this;\n\n    if (this._scrollbarChart) {\n      $iter.each(this._scrollbarChart.xAxes.iterator(), function (xAxis) {\n        var renderer = xAxis.renderer;\n\n        if (_this.orientation == \"vertical\") {\n          renderer.grid.template.disabled = true;\n          renderer.labels.template.disabled = true;\n          renderer.minGridDistance = 10;\n        } else {\n          renderer.grid.template.disabled = false;\n          renderer.labels.template.disabled = false;\n          renderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\n        }\n      });\n      $iter.each(this._scrollbarChart.yAxes.iterator(), function (yAxis) {\n        var renderer = yAxis.renderer;\n\n        if (_this.orientation == \"horizontal\") {\n          renderer.grid.template.disabled = true;\n          renderer.labels.template.disabled = true;\n          renderer.minGridDistance = 10;\n        } else {\n          renderer.grid.template.disabled = false;\n          renderer.labels.template.disabled = false;\n          renderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\n        }\n      });\n    }\n  };\n  /**\r\n   * Cleans up after series are removed from Scrollbar.\r\n   *\r\n   * @param event  Event\r\n   */\n\n\n  XYChartScrollbar.prototype.handleSeriesRemoved = function (event) {\n    var sourceSeries = event.oldValue;\n    var scrollbarChart = this.scrollbarChart;\n    scrollbarChart.series.each(function (series) {\n      if (series && series.clonedFrom == sourceSeries) {\n        scrollbarChart.series.removeValue(series);\n      }\n    });\n\n    if (scrollbarChart.series.length == 0) {\n      scrollbarChart.xAxes.clear();\n      scrollbarChart.yAxes.clear();\n    }\n\n    try {\n      sourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\n    } catch (err) {}\n  };\n\n  Object.defineProperty(XYChartScrollbar.prototype, \"scrollbarChart\", {\n    /**\r\n     * A chart element that is used to display graphs in the Scrollbar.\r\n     *\r\n     * This is not the same as `chart`. It's a totally independent instance of\r\n     * [[XYChart]] with separate config, series, etc.\r\n     *\r\n     * It can be configured just like any other [[XYChart]].\r\n     *\r\n     * @readonly\r\n     * @return Scrollbar's internal chart\r\n     */\n    get: function () {\n      return this._scrollbarChart;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChartScrollbar.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart that Scrollbar belongs to.\r\n     *\r\n     * @param chart  Chart\r\n     */\n    set: function (chart) {\n      if (this._chart.get() !== chart) {\n        this._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\n\n        this.handleDataChanged();\n        this._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(XYChartScrollbar.prototype, \"unselectedOverlay\", {\n    /**\r\n     * A [[Sprite]] object representing overlay that is used to dim area of the\r\n     * scrollbar that is currently not selected.\r\n     *\r\n     * Use its `fillOpacity` to set opacity of the fill, with `0` (zero)\r\n     * completely disabling the dimming, and `1` making unselected area completely\r\n     * blank.\r\n     *\r\n     * @since 4.6.1\r\n     * @readonly\r\n     * @return Unselected area curtain element\r\n     */\n    get: function () {\n      return this._unselectedOverlay;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates Scrollbar's internal chart's data when the main chart's data\r\n   * changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  XYChartScrollbar.prototype.handleDataChanged = function () {\n    if (this.chart.data != this.scrollbarChart.data) {\n      this.scrollbarChart.data = this.chart.data;\n    } else {\n      // add data is handled in XYChart\n      // invalidating all data caused the problem: https://github.com/amcharts/amcharts4/issues/2096\n      this.scrollbarChart.invalidateRawData();\n    }\n  };\n  /**\r\n   * Zooms out all axes on the internal chart.\r\n   */\n\n\n  XYChartScrollbar.prototype.zoomOutAxes = function () {\n    var scrollbarChart = this.scrollbarChart;\n    $iter.each(scrollbarChart.xAxes.iterator(), function (x) {\n      x.zoom({\n        start: 0,\n        end: 1\n      }, true, true);\n    });\n    $iter.each(scrollbarChart.yAxes.iterator(), function (y) {\n      y.zoom({\n        start: 0,\n        end: 1\n      }, true, true);\n    });\n  };\n  /**\r\n   * Updates scrollbar thumb.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  XYChartScrollbar.prototype.updateThumb = function (dispatchEvents) {\n    if (dispatchEvents === void 0) {\n      dispatchEvents = true;\n    }\n\n    _super.prototype.updateThumb.call(this, dispatchEvents);\n\n    if (this._unselectedOverlay) {\n      var thumb = this.thumb;\n      var x = thumb.pixelX || 0;\n      var y = thumb.pixelY || 0;\n      var w = thumb.pixelWidth || 0;\n      var h = thumb.pixelHeight || 0;\n      var path = \"\";\n\n      if (this.orientation == \"horizontal\") {\n        path = $path.rectToPath({\n          x: -1,\n          y: 0,\n          width: x,\n          height: h\n        });\n        path += $path.rectToPath({\n          x: x + w,\n          y: 0,\n          width: (this.pixelWidth || 0) - x - w,\n          height: h\n        });\n      } else {\n        path = $path.rectToPath({\n          x: 0,\n          y: 0,\n          width: w,\n          height: y\n        });\n        path += $path.rectToPath({\n          x: 0,\n          y: y + h,\n          width: w,\n          height: (this.pixelHeight || 0) - y - h\n        });\n      }\n\n      this._unselectedOverlay.path = path;\n    }\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  XYChartScrollbar.prototype.processConfig = function (config) {\n    if (config) {\n      if ($type.hasValue(config.series) && $type.isArray(config.series)) {\n        for (var i = 0, len = config.series.length; i < len; i++) {\n          var series = config.series[i];\n\n          if ($type.hasValue(series) && $type.isString(series)) {\n            if (this.map.hasKey(series)) {\n              config.series[i] = this.map.getKey(series);\n            } else {\n              throw Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\n            }\n          }\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return XYChartScrollbar;\n}(Scrollbar);\n\nexport { XYChartScrollbar };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;","map":{"version":3,"mappings":"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","names":["Scrollbar","Sprite","List","MutableValueDisposer","XYChart","ValueAxis","DateAxis","registry","InterfaceColorSet","DesaturateFilter","$iter","$type","$path","$utils","percent","color","options","__extends","_super","_this","className","interfaceColors","padding","scrollbarChart","createChild","shouldClone","margin","interactionsEnabled","_scrollbarChart","isIE","filter","filterUnits","plotContainer","filters","push","_disposers","minHeight","minWidth","unselectedOverlay","setElement","paper","add","fill","getFor","fillOpacity","isMeasured","toBack","_unselectedOverlay","background","cornerRadius","thumbBackground","thumb","hoverState","states","getKey","properties","downState","_chart","applyTheme","Object","XYChartScrollbar","_series","events","on","handleSeriesAdded","handleSeriesRemoved","event","sourceSeries","newValue","xAxis","yAxis","zoomOutButton","disabled","chart","dateFormatter","inputDateFormat","language","locale","addXAxis","addYAxis","each","series","iterator","xAxes","length","yAxes","removeValue","clone","onlyShowOnViewport","queue","addDisposer","invalidateData","stroke","propertyFields","undefined","scrollbarSeries","moveValue","title","rangeChangeDuration","renderer","ticks","template","inside","labels","line","strokeOpacity","minLabelPosition","maxLabelPosition","axisFills","baseGrid","grid","width","labelsTemplate","maxZoomCount","minZoomCount","vAxis_1","sourceAxis","groupCount","min","max","clonedFrom","isNumber","minDefined","maxDefined","vAxis_2","height","vAxis_3","vAxis_4","interpolationDuration","defaultState","transitionDuration","showOnInit","zoomOutAxes","data","visible","updateByOrientation","orientation","minGridDistance","oldValue","clear","off","err","get","set","handleDataChanged","dataProvider","invalidateRawData","x","zoom","start","end","y","dispatchEvents","updateThumb","call","pixelX","pixelY","w","pixelWidth","h","pixelHeight","path","rectToPath","config","hasValue","isArray","i","len","isString","map","hasKey","Error","processConfig","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/XYChartScrollbar.ts"],"sourcesContent":["/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { options } from \"../../core/Options\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tif (!$utils.isIE()) {\r\n\t\t\tlet filter = new DesaturateFilter();\r\n\t\t\tfilter.filterUnits = \"userSpaceOnUse\";\r\n\t\t\tscrollbarChart.plotContainer.filters.push(filter);\r\n\t\t}\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tif (!sourceSeries.xAxis || !sourceSeries.yAxis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tscrollbarChart.dateFormatter.inputDateFormat = this.chart.dateFormatter.inputDateFormat;\r\n\r\n\t\t// Ensure that scrollbar chart shares the same locale as parent chart\r\n\t\tscrollbarChart.language.locale = this.chart.language.locale;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis && this.scrollbarChart.xAxes.length > 0) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis && this.scrollbarChart.yAxes.length > 0) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsourceSeries.events.on(\"beforedisposed\", () => {\r\n\t\t\tthis.series.removeValue(sourceSeries)\r\n\t\t})\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif(options.onlyShowOnViewport || options.queue){\r\n\t\t\tthis.addDisposer(this.chart.events.on(\"removedfromqueue\", function(){\r\n\t\t\t\tscrollbarChart.invalidateData();\r\n\t\t\t}))\r\n\t\t}\r\n\r\n\t\tif($utils.isIE()){\r\n\t\t\tseries.stroke = color(\"#aaaaaa\");\r\n\t\t\tseries.fill = series.stroke;\r\n\t\t\tseries.propertyFields.fill = undefined;\r\n\t\t\tseries.propertyFields.stroke = undefined;\r\n\t\t}\r\n\t\tsourceSeries.scrollbarSeries = series;\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\t//xAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\r\n\t\t\txAxis.width = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\t\t\txAxis.maxZoomCount = undefined;\r\n\t\t\txAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <DateAxis>xAxis;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.xAxis;\r\n\t\t\t\tvAxis.groupCount = sourceAxis.groupCount * 5;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>xAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.xAxes.each((xAxis) => {\r\n\t\t\t\tif (xAxis.clonedFrom == sourceSeries.xAxis) {\r\n\t\t\t\t\tseries.xAxis = xAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\t\t\tyAxis.height = percent(100);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\r\n\t\t\tyAxis.maxZoomCount = undefined;\r\n\t\t\tyAxis.minZoomCount = undefined;\r\n\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\tlet sourceAxis = <DateAxis>sourceSeries.yAxis;\r\n\t\t\t\tyAxis.groupCount = sourceAxis.groupCount * 5;\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\tvAxis.max = undefined;\r\n\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\tvAxis.min = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\tvAxis.max = undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.minDefined)) {\r\n\t\t\t\t\t\tvAxis.min = vAxis.clonedFrom.minDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.isNumber(vAxis.clonedFrom.maxDefined)) {\r\n\t\t\t\t\t\tvAxis.max = vAxis.clonedFrom.maxDefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.yAxes.each((yAxis) => {\r\n\t\t\t\tif (yAxis.clonedFrom == sourceSeries.yAxis) {\r\n\t\t\t\t\tseries.yAxis = yAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tlet scrollbarChart = this.scrollbarChart;\r\n\r\n\t\tscrollbarChart.series.each((series) => {\r\n\t\t\tif (series && series.clonedFrom == sourceSeries) {\r\n\t\t\t\tscrollbarChart.series.removeValue(series);\r\n\t\t\t}\r\n\t\t})\r\n\t\tif (scrollbarChart.series.length == 0) {\r\n\t\t\tscrollbarChart.xAxes.clear();\r\n\t\t\tscrollbarChart.yAxes.clear();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t\t}\r\n\t\tcatch (err) {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] object representing overlay that is used to dim area of the\r\n\t * scrollbar that is currently not selected.\r\n\t *\r\n\t * Use its `fillOpacity` to set opacity of the fill, with `0` (zero)\r\n\t * completely disabling the dimming, and `1` making unselected area completely\r\n\t * blank.\r\n\t *\r\n\t * @since 4.6.1\r\n\t * @readonly\r\n\t * @return Unselected area curtain element\r\n\t */\r\n\tpublic get unselectedOverlay(): Sprite {\r\n\t\treturn this._unselectedOverlay;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// add data is handled in XYChart\r\n\t\t\t// invalidating all data caused the problem: https://github.com/amcharts/amcharts4/issues/2096\r\n\t\t\tthis.scrollbarChart.invalidateRawData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t * \r\n\t * @ignore\r\n\t */\r\n\tpublic updateThumb(dispatchEvents: boolean = true) {\r\n\t\tsuper.updateThumb(dispatchEvents);\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n"]},"metadata":{},"sourceType":"module"}