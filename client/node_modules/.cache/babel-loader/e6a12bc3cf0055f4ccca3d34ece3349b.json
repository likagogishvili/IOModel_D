{"ast":null,"code":"/**\r\n * @ignore\r\n */\nvar Registry =\n/** @class */\nfunction () {\n  function Registry() {\n    /**\r\n     * List of applied licenses.\r\n     * @ignore\r\n     */\n    Object.defineProperty(this, \"licenses\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    /**\r\n     * Entities that have their `id` setting set.\r\n     */\n\n    Object.defineProperty(this, \"entitiesById\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    /**\r\n     * All created [[Root]] elements.\r\n     */\n\n    Object.defineProperty(this, \"rootElements\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n\n  return Registry;\n}();\n\nexport { Registry };\n/**\r\n    * @ignore\r\n */\n\nexport var registry = new Registry();\n/**\r\n * Adds a license, e.g.:\r\n *\r\n * ```TypeScript\r\n * am5.addLicense(\"xxxxxxxx\");\r\n * ```\r\n * ```JavaScript\r\n * am5.addLicense(\"xxxxxxxx\");\r\n * ```\r\n *\r\n * Multiple licenses can be added to cover for multiple products.\r\n *\r\n * @param  license  License key\r\n */\n\nexport function addLicense(license) {\n  registry.licenses.push(license);\n}\n/**\r\n * Disposes all [[Root]] elements.\r\n */\n\nexport function disposeAllRootElements() {\n  var root;\n\n  while (root = registry.rootElements.pop()) {\n    root.dispose();\n  }\n}","map":{"version":3,"mappings":"AACA;;;AAGA;AAAA;AAAA;EAAA;IAEC;;;;IAIAA;sBAAA;wBAAA;oBAAA;aAAqB;IAArB;IAEA;;;;IAGAA;sBAAA;wBAAA;oBAAA;aAAyC;IAAzC;IAEA;;;;IAGAA;sBAAA;wBAAA;oBAAA;aAAsB;IAAtB;EAEA;;EAAD;AAAC,CAlBD;;;AAoBA;;;;AAGA,OAAO,IAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AAEP;;;;;;;;;;;;;;;AAcA,OAAM,SAAUC,UAAV,CAAqBC,OAArB,EAAoC;EACzCH,QAAQ,CAACI,QAAT,CAAkBC,IAAlB,CAAuBF,OAAvB;AACA;AAGD;;;;AAGA,OAAM,SAAUG,sBAAV,GAAgC;EACrC,IAAIC,IAAJ;;EACA,OAAMA,IAAI,GAAGP,QAAQ,CAACQ,YAAT,CAAsBC,GAAtB,EAAb,EAA0C;IACzCF,IAAI,CAACG,OAAL;EACA;AACD","names":["Object","registry","Registry","addLicense","license","licenses","push","disposeAllRootElements","root","rootElements","pop","dispose"],"sourceRoot":"","sources":["../../../../src/.internal/core/Registry.ts"],"sourcesContent":["\r\n/**\r\n * @ignore\r\n */\r\nexport class Registry {\r\n\r\n\t/**\r\n\t * List of applied licenses.\r\n\t * @ignore\r\n\t */\r\n\tlicenses: String[] = [];\r\n\r\n\t/**\r\n\t * Entities that have their `id` setting set.\r\n\t */\r\n\tentitiesById: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * All created [[Root]] elements.\r\n\t */\r\n\trootElements: any[] = [];\r\n\r\n}\r\n\r\n/**\r\n\t* @ignore\r\n */\r\nexport const registry = new Registry();\r\n\r\n/**\r\n * Adds a license, e.g.:\r\n *\r\n * ```TypeScript\r\n * am5.addLicense(\"xxxxxxxx\");\r\n * ```\r\n * ```JavaScript\r\n * am5.addLicense(\"xxxxxxxx\");\r\n * ```\r\n *\r\n * Multiple licenses can be added to cover for multiple products.\r\n *\r\n * @param  license  License key\r\n */\r\nexport function addLicense(license: string): void {\r\n\tregistry.licenses.push(license);\r\n}\r\n\r\n\r\n/**\r\n * Disposes all [[Root]] elements.\r\n */\r\nexport function disposeAllRootElements(): void {\r\n\tlet root;\r\n\twhile(root = registry.rootElements.pop()) {\r\n\t\troot.dispose();\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}