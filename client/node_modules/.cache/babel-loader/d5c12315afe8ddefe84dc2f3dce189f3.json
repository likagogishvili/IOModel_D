{"ast":null,"code":"/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter } from \"./utils/Adapter\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $array from \"./utils/Array\"; //import * as $object from \"./utils/Object\";\n\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\n\nvar DataItem =\n/** @class */\nfunction (_super) {\n  __extends(DataItem, _super);\n  /**\r\n   * Constructor\r\n   * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n   */\n\n\n  function DataItem() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * This Data Item is currently disabled.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n\n    _this._disabled = false;\n    /**\r\n     * Indicates whether Data Item has any properties set.\r\n     *\r\n     * If it does not have any, the code can use this property to check whether\r\n     * they need to apply costly operation of re-applying properties, whenever\r\n     * Data Item-related element is redrawn, e.g. series.\r\n     */\n\n    _this.hasProperties = false;\n    /**\r\n     * An object containing calculated values.\r\n     */\n\n    _this.values = {};\n    /**\r\n     * An object container current working values.\r\n     */\n    //public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\n\n    /**\r\n     * An object containing categories.\r\n     */\n\n    _this.categories = {};\n    /**\r\n     * An object containing dates.\r\n     */\n\n    _this.dates = {};\n    /**\r\n     * An object containing locations for the Data Item.\r\n     *\r\n     * A location is a position within date or category, or, in some other cases,\r\n     * where there is no single point but rather some period.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n     */\n\n    _this.locations = {};\n    /**\r\n     * Current working locations.\r\n     */\n\n    _this.workingLocations = {};\n    /**\r\n     * An object containing Data Item specific appearance properties in key-value\r\n     * pairs.\r\n     *\r\n     * Sometimes a single Data Item needs to apply different properties than the\r\n     * rest of the data [[Series]] it is part of. E.g. a single column,\r\n     * represented by a Data Item needs to be filled with a different color than\r\n     * the reset of the [[ColumnSeries]] it belongs to.\r\n     *\r\n     * That's where Data Item's `properties` come into play.\r\n     *\r\n     * Please note that you should set Data Item-specific properties using\r\n     * `setProperty()` method, rather than access `properties` object directly.\r\n     */\n\n    _this.properties = {};\n    /**\r\n     * A list of [[Sprite]] elements that are associated with this Data Item.\r\n     *\r\n     * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n     * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n     *\r\n     * Data Item keeps track of all of them, so it can toggle all related visual\r\n     * elements when it itself is toggled.\r\n     */\n\n    _this.sprites = [];\n    /**\r\n     * Identifies if this object is a \"template\" and should not be treated as\r\n     * real object that is drawn or actually used in the chart.\r\n     */\n\n    _this.isTemplate = false;\n    /**\r\n     * The current index within the dataItems\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._index = null;\n    /**\r\n     * Is Data Item currently visible?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._visible = true;\n    /**\r\n     * Is Data Item currently hidden?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._hidden = false;\n    /**\r\n     * Should this Data Item be used when calculating data ranges and scales?\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._ignoreMinMax = false;\n    /**\r\n     * Some of the Data Item's data fields may contain an array of children. This\r\n     * property contains an object indicating which fields hold an array, so that\r\n     * they can be processed properly.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.hasChildren = {};\n    /**\r\n     * Indicates whether Data Item is currently animiting from visible to hidden\r\n     * state.\r\n     */\n\n    _this.isHiding = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._valueAnimations = {};\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._locationAnimations = {};\n    _this.className = \"DataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(DataItem.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"index\", {\n    /**\r\n     * Data Item's position index in Component's data.\r\n     *\r\n     * @return Index\r\n     */\n    get: function () {\n      if (this.component) {\n        if (this._index != null) {\n          return this._index;\n        } else {\n          return -1;\n        }\n      } else {\n        return -1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"animations\", {\n    /**\r\n     * A list of [[Animations]] objects currently mutating Data Item's values.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"visible\", {\n    /**\r\n     * Returns `true` if this Data Item is currently visible.\r\n     *\r\n     * @return Visible?\r\n     */\n    get: function () {\n      if (this._hidden) {\n        return false;\n      }\n\n      return this._visible;\n    },\n\n    /**\r\n     * Sets visibility of the Data Item.\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      if (value) {\n        this.hidden = false;\n      }\n\n      if (this._visible != value) {\n        this.setVisibility(value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"hidden\", {\n    /**\r\n     * Returns `true` if this Data Item is currently hidden.\r\n     *\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this._hidden;\n    },\n\n    /**\r\n     * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n     *\r\n     * @param value Hidden?\r\n     */\n    set: function (value) {\n      if (this._hidden != value) {\n        this._hidden = value;\n\n        if (value) {\n          this.setVisibility(false);\n        } else {\n          this.setVisibility(true, true);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"__disabled\", {\n    /**\r\n     * Is this Data Item currently disabled?\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    get: function () {\n      return this._disabled;\n    },\n\n    /**\r\n     * Disables all Sprites associated with this Data Item.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param {boolean}\r\n     */\n    set: function (value) {\n      //\tif (this._disabled != value) { // not good\n      this._disabled = value;\n      $array.each(this.sprites, function (sprite) {\n        sprite.__disabled = value;\n      }); //\t}\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets visibility of the Data Item.\r\n   *\r\n   * @param value Data Item\r\n   */\n\n  DataItem.prototype.setVisibility = function (value, noChangeValues) {\n    $array.each(this.sprites, function (sprite) {\n      if (value) {\n        sprite.visible = sprite.defaultState.properties.visible;\n      } else {\n        if (sprite.hiddenState) {\n          sprite.visible = sprite.hiddenState.properties.visible;\n        } else {\n          sprite.visible = false;\n        }\n      }\n    });\n    this._visible = value;\n\n    if (this._eventDispatcher && !this.__disabled) {\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_1 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_1);\n      }\n    }\n  };\n  /**\r\n   * Shows the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param fields    A list of fields to set values of\r\n   */\n\n\n  DataItem.prototype.show = function (duration, delay, fields) {\n    var _this = this;\n\n    if (!this.hidden) {\n      this.setVisibility(true, true);\n      this.isHiding = false;\n\n      if (this._hideDisposer) {\n        this.removeDispose(this._hideDisposer);\n      }\n\n      var animation_1;\n\n      if (fields) {\n        $array.each(fields, function (field) {\n          animation_1 = _this.setWorkingValue(field, _this.values[field].value, duration, delay);\n        });\n      }\n\n      $array.each(this.sprites, function (sprite) {\n        var animation = sprite.show(duration);\n\n        if (animation != null && !animation.isFinished()) {\n          _this._disposers.push(animation);\n\n          if (delay != null && delay > 0) {\n            animation.delay(delay);\n          }\n        }\n      });\n      return animation_1;\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  DataItem.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    $array.each(this.sprites, function (sprite) {\n      sprite.dispose();\n    });\n    this.sprites = [];\n  };\n  /**\r\n   * Hides the Data Item and related visual elements.\r\n   *\r\n   * @param duration  Animation duration (ms)\r\n   * @param delay     Delay animation (ms)\r\n   * @param toValue   A value to set to `fields` when hiding\r\n   * @param fields    A list of data fields to set value to `toValue`\r\n   */\n\n\n  DataItem.prototype.hide = function (duration, delay, toValue, fields) {\n    var _this = this;\n\n    this.isHiding = true;\n    $array.each(this.sprites, function (sprite) {\n      var animation = sprite.hide(duration);\n\n      if (animation != null && !animation.isFinished()) {\n        _this._disposers.push(animation);\n\n        if (delay != null && delay > 0) {\n          animation.delay(delay);\n        }\n      }\n    });\n\n    if ($type.isNumber(toValue) && fields) {\n      var animation_2;\n      $array.each(fields, function (field) {\n        var anim = _this.setWorkingValue(field, toValue, duration, delay);\n\n        if (anim) {\n          animation_2 = anim;\n        }\n      });\n\n      if (animation_2 && !animation_2.isFinished()) {\n        this._hideDisposer = animation_2.events.on(\"animationended\", function () {\n          _this.setVisibility(false, true);\n\n          _this.isHiding = false;\n        });\n\n        this._disposers.push(this._hideDisposer);\n\n        return animation_2;\n      } else {\n        this.isHiding = false;\n        this.setVisibility(false, true);\n      }\n    } else {\n      this.isHiding = false;\n      this.setVisibility(false);\n    }\n  };\n  /**\r\n   * Returns a duration (ms) the Data Item should take to animate from one\r\n   * value to another.\r\n   *\r\n   * If the duration is not specified via parameter, this method will try to\r\n   * request a default duration from the related `Component`.\r\n   *\r\n   * @param duration  Default duration (ms)\r\n   * @return Duration (ms)\r\n   */\n\n\n  DataItem.prototype.getDuration = function (duration) {\n    if (!$type.isNumber(duration)) {\n      var component = this.component;\n\n      if (component) {\n        duration = component.interpolationDuration;\n      }\n    }\n\n    if (duration != null) {\n      if (!this._adapterO) {\n        return duration;\n      } else {\n        return this._adapterO.apply(\"duration\", duration);\n      }\n    }\n  };\n  /**\r\n   * Returns a numeric value for specific data field.\r\n   *\r\n   * If `calculated` is not set, it will return a raw value, as it is in\r\n   * source data.\r\n   *\r\n   * If `calculated` is set, it will return a pre-calculated specific value.\r\n   *\r\n   * @param name        Data field name\r\n   * @param calculated  A calculated value name\r\n   * @return Value\r\n   */\n\n\n  DataItem.prototype.getValue = function (name, calculated) {\n    if (name && this.component) {\n      if (!calculated) {\n        calculated = this.component.dataFields[name + \"Show\"];\n\n        if (!calculated) {\n          calculated = \"value\";\n        }\n      }\n\n      var value = this.values[name][calculated];\n\n      if (this._adapterO && this._adapterO.isEnabled(\"value\")) {\n        return this._adapterO.apply(\"value\", {\n          value: value,\n          field: name\n        }).value;\n      } else {\n        return value;\n      }\n    }\n  };\n  /**\r\n   * Returns a current working value for a specific data field.\r\n   *\r\n   * The actual value may differ from the one returned by `getValue()`. The\r\n   * latter returns static values from the data source.\r\n   *\r\n   * `getWorkingValue()` returns current value, which is usually different if\r\n   * Data Item is animating from one state to another.\r\n   *\r\n   * @param name        Data field name\r\n   * @return Value\r\n   */\n\n\n  DataItem.prototype.getWorkingValue = function (name) {\n    if (name && this.component) {\n      var realName = this.component.dataFields[name + \"Show\"];\n\n      if (!realName) {\n        realName = \"workingValue\";\n      }\n\n      if (this._adapterO) {\n        return this._adapterO.apply(\"workingValue\", {\n          workingValue: this.values[name][realName],\n          field: name\n        }).workingValue;\n      } else {\n        return this.values[name][realName];\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   * @return Value\r\n   */\n\n\n  DataItem.prototype.getActualWorkingValue = function (name) {\n    return this.values[name].workingValue;\n  };\n  /**\r\n   * Sets a numeric value for specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   */\n\n\n  DataItem.prototype.setValue = function (name, value, duration, delay) {\n    var currentValue = this.values[name].value;\n    var newDuration = this.getDuration(duration);\n    value = $type.toNumber(value);\n\n    if (currentValue !== value) {\n      this.values[name].value = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"valuechanged\")) {\n          var event_2 = {\n            type: \"valuechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"valuechanged\", event_2);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name);\n      }\n    }\n\n    this.setWorkingValue(name, value, newDuration, delay);\n  };\n\n  DataItem.prototype.setCalculatedValue = function (name, value, calculated) {\n    var currentValue = this.values[name][calculated];\n\n    if (currentValue !== value && $type.isNumber(value)) {\n      this.values[name][calculated] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"calculatedvaluechanged\")) {\n          var event_3 = {\n            type: \"calculatedvaluechanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"calculatedvaluechanged\", event_3);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemCalculatedValueChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Set current working numeric value for a specific data field.\r\n   *\r\n   * @param name        Data field name\r\n   * @param value       Value\r\n   * @param calculated  Calculated data field name\r\n   * @param duration    Duration (ms) to animate to new value to\r\n   * @param delay       Delay animation (ms)\r\n   * @return An [[Animation]] object used for transition to new values\r\n   */\n\n\n  DataItem.prototype.setWorkingValue = function (name, value, duration, delay) {\n    if ($type.isNumber(this.values[name].value)) {\n      var newDuration = this.getDuration(duration);\n      var workingValue = this.values[name].workingValue;\n\n      if (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) {\n        // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n        if (workingValue != value) {\n          var animation = this.animate({\n            childObject: this.values[name],\n            property: \"workingValue\",\n            from: workingValue,\n            to: value,\n            dummyData: name\n          }, newDuration, this.component.interpolationEasing);\n\n          if (delay != null) {\n            animation.delay(delay);\n          }\n\n          animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n          animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n          this._valueAnimations[name] = animation;\n          return animation;\n        } else {\n          var valueAnimation = this._valueAnimations[name];\n\n          if (valueAnimation) {\n            valueAnimation.stop();\n          }\n\n          this.values[name].workingValue = value;\n        }\n      } else {\n        var valueAnimation = this._valueAnimations[name];\n\n        if (valueAnimation) {\n          valueAnimation.stop();\n        }\n\n        this.values[name].workingValue = value;\n\n        if (this._eventDispatcher && !this.__disabled) {\n          if (this.events.isEnabled(\"workingvaluechanged\")) {\n            var event_4 = {\n              type: \"workingvaluechanged\",\n              target: this,\n              property: name\n            };\n            this.events.dispatchImmediately(\"workingvaluechanged\", event_4);\n          }\n        }\n\n        if (this.component) {\n          this.component.handleDataItemWorkingValueChange(this, name);\n        }\n      }\n    }\n  };\n  /**\r\n   * Sets a relative location for a data field.\r\n   *\r\n   * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n   * 0.5 middle and 1 end.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n\n\n  DataItem.prototype.setLocation = function (name, value, duration, delay) {\n    var currentLocation = this.locations[name];\n\n    if (currentLocation !== value) {\n      this.locations[name] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"locationchanged\")) {\n          var event_5 = {\n            type: \"locationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"locationchanged\", event_5);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemValueChange(this, name); // correct\n      }\n\n      this.setWorkingLocation(name, value, duration, delay);\n    }\n  };\n  /**\r\n   * Sets a current working location for a data field.\r\n   *\r\n   * @todo Rewiew description\r\n   * @param name      Data field name\r\n   * @param value     Location (0-1)\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   * @param delay     Delay animation (ms)\r\n   */\n\n\n  DataItem.prototype.setWorkingLocation = function (name, value, duration, delay) {\n    var newDuration = this.getDuration(duration);\n    var workingLocation = this.workingLocations[name];\n\n    if (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) {\n      // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\n      if (workingLocation != value) {\n        var animation = this.animate({\n          childObject: this.workingLocations,\n          property: name,\n          from: workingLocation,\n          to: value,\n          dummyData: name\n        }, newDuration, this.component.interpolationEasing);\n\n        if (delay != null) {\n          animation.delay(delay);\n        }\n\n        animation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\n        animation.events.on(\"animationended\", this.handleInterpolationProgress, this);\n        this._locationAnimations[name] = animation;\n        return animation;\n      } else {\n        var locationAnimation = this._locationAnimations[name];\n\n        if (locationAnimation) {\n          locationAnimation.stop();\n        }\n\n        this.workingLocations[name] = value;\n      }\n    } else {\n      var locationAnimation = this._locationAnimations[name];\n\n      if (locationAnimation) {\n        locationAnimation.stop();\n      }\n\n      this.workingLocations[name] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workinglocationchanged\")) {\n          var event_6 = {\n            type: \"workinglocationchanged\",\n            target: this,\n            property: name\n          };\n          this.events.dispatchImmediately(\"workinglocationchanged\", event_6);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemWorkingLocationChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets Date value to a data field.\r\n   *\r\n   * @param name      Data field name\r\n   * @param date      Date object\r\n   * @param duration  Duration (ms) to animate to new value to\r\n   */\n\n\n  DataItem.prototype.setDate = function (name, date, duration) {\n    if (!$type.isDate(date) && this.component) {\n      date = this.component.dateFormatter.parse(date);\n    }\n\n    var currentDate = this.dates[name];\n\n    if (currentDate !== date) {\n      this.dates[name] = date;\n      this.setValue(name, date.getTime(), duration);\n    }\n  };\n  /**\r\n   * Returns a Date value of the data field.\r\n   *\r\n   * @param name  Data field name\r\n   * @return Date object\r\n   */\n\n\n  DataItem.prototype.getDate = function (name) {\n    if (this._adapterO) {\n      return this._adapterO.apply(\"date\", {\n        date: this.dates[name],\n        field: name\n      }).date;\n    } else {\n      return this.dates[name];\n    }\n  };\n  /**\r\n   * Sets a Data Item-specific visual properties to apply to related elements.\r\n   *\r\n   * @param name   Property name\r\n   * @param value  Property value\r\n   */\n\n\n  DataItem.prototype.setProperty = function (name, value) {\n    if (this.properties[name] !== value) {\n      this.hasProperties = true;\n      this.properties[name] = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_7 = {\n            type: \"propertychanged\",\n            target: this,\n            property: name,\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_7);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, name);\n      }\n    }\n  };\n  /**\r\n   * Sets a related category for this Data Item.\r\n   *\r\n   * @todo Review description\r\n   * @param name   Data field name\r\n   * @param value  Category\r\n   */\n\n\n  DataItem.prototype.setCategory = function (name, value) {\n    if (!$type.isString(value)) {\n      value = $type.castString(value);\n    }\n\n    if (this.categories[name] !== value) {\n      this.categories[name] = value;\n    }\n  };\n  /**\r\n   * Clones the Data Item, including all related data.\r\n   *\r\n   * @return New Data Item clone\r\n   */\n  //public clone(cloneId?: string): this {\n  //\tlet dataItem: this = super.clone(cloneId);\n  //\tdataItem.copyFrom(this);\n  //\treturn dataItem;\n  //}\n\n  /**\r\n   * Copies all properties and related data from different data item.\r\n   *\r\n   * @param object Source data item\r\n   */\n\n\n  DataItem.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (source.dataContext) {\n      this.dataContext = $utils.copy(source.dataContext, {});\n    }\n\n    $utils.copyProperties(source.locations, this.locations);\n    /*\r\n    $utils.copyProperties(source.properties, this.properties);\r\n    $utils.copyProperties(source.categories, this.categories);\r\n    $utils.copyProperties(source.values, this.values);\r\n    $utils.copyProperties(source.dates, this.dates);\r\n      $object.each(source.values, (name, value) => {\r\n        this.values[name] = $object.copy(value);\r\n    });*/\n\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    } //this.events.copyFrom(source.events); // because copied in Base\n\n\n    this.component = source.component;\n  };\n\n  Object.defineProperty(DataItem.prototype, \"opacity\", {\n    /**\r\n     * Sets opacity for all Data Item's related elements (Sprites).\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      $array.each(this.sprites, function (sprite) {\n        sprite.opacity = value;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"ignoreMinMax\", {\n    /**\r\n     * Exclude from min/max calculations?\r\n     * @return Exclude from min/max calculations?\r\n     */\n    get: function () {\n      return this._ignoreMinMax;\n    },\n\n    /**\r\n     * Sets whether this data point should not be included in the scale and\r\n     * minimum/maximum calculations.\r\n     *\r\n     * E.g. some we may want to exclude a particular data point from influencing\r\n     * [[ValueAxis]] scale.\r\n     *\r\n     * @param value  Exclude from min/max calculations?\r\n     */\n    set: function (value) {\n      this._ignoreMinMax = value;\n\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"propertychanged\")) {\n          var event_8 = {\n            type: \"propertychanged\",\n            target: this,\n            property: \"ignoreMinMax\",\n            value: value\n          };\n          this.events.dispatchImmediately(\"propertychanged\", event_8);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n   * properties and/or values.\r\n   *\r\n   * @see {@link Animation}\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Animation duration (ms)\r\n   * @param easing            Easing function\r\n   * @return Animation\r\n   */\n\n  DataItem.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n   * one value to another.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event object\r\n   */\n\n\n  DataItem.prototype.handleInterpolationProgress = function (event) {\n    var animation = event.target; // it's always only one options, no need cycle\n\n    var animationOptions = animation.animationOptions[0];\n\n    if (animationOptions) {\n      if (this._eventDispatcher && !this.__disabled) {\n        if (this.events.isEnabled(\"workingvaluechanged\")) {\n          var event_9 = {\n            type: \"workingvaluechanged\",\n            target: this,\n            property: animationOptions.dummyData\n          };\n          this.events.dispatchImmediately(\"workingvaluechanged\", event_9);\n        }\n      }\n\n      if (this.component) {\n        this.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\n      }\n    }\n  };\n  /**\r\n   * Checks whether Data Item has values set for all of the data fields,\r\n   * supplied via argument.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param fields  Field list to check\r\n   * @return Has values for all fields?\r\n   */\n\n\n  DataItem.prototype.hasValue = function (fields) {\n    // todo: what about categories?\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var values = this.values[fields[i]];\n\n      if (!values || !$type.hasValue(values.value)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  Object.defineProperty(DataItem.prototype, \"depth\", {\n    /**\r\n     * Depth of the Data Item.\r\n     *\r\n     * In nested data structures, like TreeMap, this indicates the level this\r\n     * data point is at, in relation to the parent Data Item.\r\n     *\r\n     * @return Depth\r\n     */\n    get: function () {\n      if (!this.parent) {\n        return 0;\n      } else {\n        return this.parent.depth + 1;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataItem.prototype, \"dataContext\", {\n    /**\r\n     * Sets to a reference to an original object from Component's data.\r\n     *\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._dataContext;\n    },\n\n    /**\r\n     * A reference to an original object in Component's data, that this Data Item\r\n     * is derived from.\r\n     *\r\n     * @param value Original data object\r\n     */\n    set: function (value) {\n      this._dataContext = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * adds a sprite to dataItem.sprites array\r\n   * @ignore\r\n   */\n\n  DataItem.prototype.addSprite = function (sprite) {\n    if (sprite.dataItem && sprite.dataItem != this) {\n      $array.remove(sprite.dataItem.sprites, sprite);\n    }\n\n    if (!this.visible) {\n      sprite.hide(0);\n    }\n\n    if (this.isHiding) {\n      sprite.hide();\n    }\n\n    this.sprites.push(sprite);\n    sprite.dataItem = this;\n  };\n\n  return DataItem;\n}(BaseObjectEvents);\n\nexport { DataItem };","map":{"version":3,"mappings":"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","names":["BaseObjectEvents","Adapter","Animation","AnimationDisposer","$utils","$array","$type","__extends","_super","_this","className","applyTheme","Object","DataItem","_adapterO","component","_index","_animations","_disposers","push","_hidden","_visible","value","hidden","setVisibility","_disabled","each","sprites","sprite","__disabled","noChangeValues","visible","defaultState","properties","hiddenState","_eventDispatcher","events","isEnabled","event_1","type","target","dispatchImmediately","duration","delay","fields","isHiding","_hideDisposer","removeDispose","animation_1","field","setWorkingValue","values","animation","show","isFinished","dispose","call","toValue","hide","isNumber","animation_2","anim","on","interpolationDuration","apply","name","calculated","dataFields","realName","workingValue","currentValue","newDuration","getDuration","toNumber","event_2","property","handleDataItemValueChange","event_3","handleDataItemCalculatedValueChange","animate","childObject","from","to","dummyData","interpolationEasing","handleInterpolationProgress","_valueAnimations","valueAnimation","stop","event_4","handleDataItemWorkingValueChange","currentLocation","locations","event_5","setWorkingLocation","workingLocation","workingLocations","_locationAnimations","locationAnimation","event_6","handleDataItemWorkingLocationChange","date","isDate","dateFormatter","parse","currentDate","dates","setValue","getTime","hasProperties","event_7","handleDataItemPropertyChange","isString","castString","categories","source","copyFrom","dataContext","copy","copyProperties","adapter","opacity","_ignoreMinMax","event_8","animationOptions","easing","start","event","event_9","i","len","length","hasValue","parent","depth","_dataContext","dataItem","remove"],"sourceRoot":"","sources":["../../../../src/.internal/core/DataItem.ts"],"sourcesContent":["/**\r\n * Defines functionality for \"Data Item\"\r\n *\r\n * A Data Item can be any object that can hold data. For example [[LineSeries]]\r\n * holds a number of values, that comprise a line graph. Each of those values\r\n * (data points) is a {DataItem}.\r\n *\r\n * Furthermore the [[LineSeries]] itself can be represented as a entry in the\r\n * legend. Since legend needs access to Line Series' value, a DataItem is\r\n * created for the series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents, IBaseObjectEvents } from \"./Base\";\r\nimport { AMEvent } from \"./utils/EventDispatcher\";\r\nimport { Adapter } from \"./utils/Adapter\";\r\nimport { Component, CalculatedValue } from \"./Component\";\r\nimport { IAnimatable, Animation, IAnimationOptions, IAnimationEvents, AnimationDisposer } from \"./utils/Animation\";\r\nimport { Sprite } from \"./Sprite\";\r\nimport { IDisposer } from \"./utils/Disposer\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $array from \"./utils/Array\";\r\n//import * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n *\r\n * @todo Description\r\n  */\r\nexport interface IValues { }\r\n\r\n/**\r\n * Defines data events for [[DataItem]]\r\n */\r\nexport interface IDataItemEvents extends IBaseObjectEvents {\r\n\r\n\t/**\r\n\t * Invoked when the visibility of the Data Item changes, i.e. Series is\r\n\t * hidden\r\n\t */\r\n\tvisibilitychanged: {\r\n\t\tvisible: boolean;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the value is changed\r\n\t */\r\n\tvaluechanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the internal/intermediate value has changed\r\n\t */\r\n\tworkingvaluechanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the calculated value has changed\r\n\t */\r\n\tcalculatedvaluechanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when the location of Data Item changes\r\n\t */\r\n\tlocationchanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when working location of Data Item changes\r\n\t */\r\n\tworkinglocationchanged: {\r\n\t\tproperty: string;\r\n\t};\r\n\r\n\t/**\r\n\t * Invoked when a property of the Data Item changes\r\n\t */\r\n\tpropertychanged: {\r\n\t\tproperty: string;\r\n\t\tvalue: any; // TODO don't make this any\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDataItemAdapters {\r\n\r\n\tduration: number;\r\n\r\n\tvalue: {\r\n\t\tvalue: number,\r\n\t\tfield: string\r\n\t};\r\n\r\n\tworkingValue: {\r\n\t\tworkingValue: number,\r\n\t\tfield: string\r\n\t};\r\n\r\n\tdate: {\r\n\t\tdate: Date,\r\n\t\tfield: string\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * DataItem represents single element in data, for example a data point in a\r\n * Serial Chart Series, e.g. a column.\r\n *\r\n * DataItem defines relationship between structured data, required for specific\r\n * chart type or task, and raw source data.\r\n *\r\n * It also implements required calculations, updates related visual elements,\r\n * etc.\r\n *\r\n * @todo Description\r\n * @important\r\n */\r\nexport class DataItem extends BaseObjectEvents implements IAnimatable {\r\n\r\n\t/**\r\n\t * When we are using a nested data structure, like for example in a TreeMap,\r\n\t * this property points to a parent Data Item of this one.\r\n\t */\r\n\tpublic parent: $type.Optional<this>;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDataItemEvents;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDataItemAdapters;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapterO: Adapter<this, this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic get adapter(): Adapter<this, this[\"_adapter\"]> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\tthis._adapterO = new Adapter<this, this[\"_adapter\"]>(this);\r\n\t\t}\r\n\t\treturn this._adapterO;\r\n\t}\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this Data Item is used for.\r\n\t */\r\n\tpublic _component!: Component;\r\n\r\n\t/**\r\n\t * A reference to a [[Component]] this Data Item belongs to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic component: $type.Optional<this[\"_component\"]>;\r\n\r\n\t/**\r\n\t * A reference to the original Data Item in raw data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataContext: Object;\r\n\r\n\t/**\r\n\t * This Data Item is currently disabled.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _disabled: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates whether Data Item has any properties set.\r\n\t *\r\n\t * If it does not have any, the code can use this property to check whether\r\n\t * they need to apply costly operation of re-applying properties, whenever\r\n\t * Data Item-related element is redrawn, e.g. series.\r\n\t */\r\n\tpublic hasProperties: boolean = false;\r\n\r\n\t/**\r\n\t * An object containing calculated values.\r\n\t */\r\n\tpublic readonly values: { [index: string]: { [index: string]: number } } = {};\r\n\r\n\t/**\r\n\t * An object container current working values.\r\n\t */\r\n\t//public readonly workingValues: { [index: string]: { [index: string]: number } } = {};\r\n\r\n\t/**\r\n\t * An object containing categories.\r\n\t */\r\n\tpublic readonly categories: { [index: string]: string } = {};\r\n\r\n\t/**\r\n\t * An object containing dates.\r\n\t */\r\n\tpublic readonly dates: { [index: string]: Date } = {};\r\n\r\n\t/**\r\n\t * An object containing locations for the Data Item.\r\n\t *\r\n\t * A location is a position within date or category, or, in some other cases,\r\n\t * where there is no single point but rather some period.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/series/#Data_item_locations} for info how data item locations work\r\n\t */\r\n\tpublic readonly locations: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * Current working locations.\r\n\t */\r\n\tpublic readonly workingLocations: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * An object containing Data Item specific appearance properties in key-value\r\n\t * pairs.\r\n\t *\r\n\t * Sometimes a single Data Item needs to apply different properties than the\r\n\t * rest of the data [[Series]] it is part of. E.g. a single column,\r\n\t * represented by a Data Item needs to be filled with a different color than\r\n\t * the reset of the [[ColumnSeries]] it belongs to.\r\n\t *\r\n\t * That's where Data Item's `properties` come into play.\r\n\t *\r\n\t * Please note that you should set Data Item-specific properties using\r\n\t * `setProperty()` method, rather than access `properties` object directly.\r\n\t */\r\n\tpublic readonly properties: { [index: string]: any } = {};\r\n\r\n\t/**\r\n\t * A list of [[Sprite]] elements that are associated with this Data Item.\r\n\t *\r\n\t * E.g. an [[Axis]] Data Item has several separate elements associated with\r\n\t * it, like [[AxisTick]], [[AxisLabel]], and [[Grid]].\r\n\t *\r\n\t * Data Item keeps track of all of them, so it can toggle all related visual\r\n\t * elements when it itself is toggled.\r\n\t */\r\n\tpublic sprites: Sprite[] = [];\r\n\r\n\t/**\r\n\t * Identifies if this object is a \"template\" and should not be treated as\r\n\t * real object that is drawn or actually used in the chart.\r\n\t */\r\n\tpublic isTemplate: boolean = false;\r\n\r\n\t/**\r\n\t * List of animations currently animating Data Item's values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * The current index within the dataItems\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _index: number | null = null;\r\n\r\n\t/**\r\n\t * Is Data Item currently visible?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _visible: boolean = true;\r\n\r\n\t/**\r\n\t * Is Data Item currently hidden?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _hidden: boolean = false;\r\n\r\n\t/**\r\n\t * Should this Data Item be used when calculating data ranges and scales?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _ignoreMinMax: boolean = false;\r\n\r\n\t/**\r\n\t * Some of the Data Item's data fields may contain an array of children. This\r\n\t * property contains an object indicating which fields hold an array, so that\r\n\t * they can be processed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic hasChildren: { [index: string]: boolean } = {};\r\n\r\n\t/**\r\n\t * Indicates whether Data Item is currently animiting from visible to hidden\r\n\t * state.\r\n\t */\r\n\tpublic isHiding: boolean = false;\r\n\r\n\t/**\r\n\t * Holds a Disposer reference to hiding [[Animation]] currently playing.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _hideDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _valueAnimations: { [key: string]: Animation } = {};\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _locationAnimations: { [key: string]: Animation } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t * @todo Adding events to disposers produces errors in some cases, which means that chart is using disposed Data Items which is not right\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Data Item's position index in Component's data.\r\n\t *\r\n\t * @return Index\r\n\t */\r\n\tpublic get index(): number {\r\n\t\tif (this.component) {\r\n\t\t\tif (this._index != null) {\r\n\t\t\t\treturn this._index;\r\n\t\t\t} else {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of [[Animations]] objects currently mutating Data Item's values.\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Visible?\r\n\t */\r\n\tpublic set visible(value: boolean) {\r\n\t\tif (value) {\r\n\t\t\tthis.hidden = false;\r\n\t\t}\r\n\t\tif (this._visible != value) {\r\n\t\t\tthis.setVisibility(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets hidden flag for data item. Mostly used to initially hide data item.\r\n\t *\r\n\t * @param value Hidden?\r\n\t */\r\n\tpublic set hidden(value: boolean) {\r\n\t\tif (this._hidden != value) {\r\n\t\t\tthis._hidden = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.setVisibility(false);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setVisibility(true, true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this Data Item is currently hidden.\r\n\t *\r\n\t * @return Hidden?\r\n\t */\r\n\tpublic get hidden(): boolean {\r\n\t\treturn this._hidden;\r\n\t}\r\n\r\n\t/**\r\n\t * Disables all Sprites associated with this Data Item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {boolean}\r\n\t */\r\n\tpublic set __disabled(value: boolean) {\r\n\t\t//\tif (this._disabled != value) { // not good\r\n\t\tthis._disabled = value;\r\n\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tsprite.__disabled = value;\r\n\t\t});\r\n\t\t//\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is this Data Item currently disabled?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param {boolean}\r\n\t */\r\n\tpublic get __disabled(): boolean {\r\n\t\treturn this._disabled;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets visibility of the Data Item.\r\n\t *\r\n\t * @param value Data Item\r\n\t */\r\n\tpublic setVisibility(value: boolean, noChangeValues?: boolean): void {\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tif (value) {\r\n\t\t\t\tsprite.visible = sprite.defaultState.properties.visible;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (sprite.hiddenState) {\r\n\t\t\t\t\tsprite.visible = sprite.hiddenState.properties.visible;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tsprite.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._visible = value;\r\n\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tvisible: value\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this Data Item is currently visible.\r\n\t *\r\n\t * @return Visible?\r\n\t */\r\n\tpublic get visible(): boolean {\r\n\t\tif (this._hidden) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn this._visible;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tif (!this.hidden) {\r\n\t\t\tthis.setVisibility(true, true);\r\n\r\n\t\t\tthis.isHiding = false;\r\n\r\n\t\t\tif (this._hideDisposer) {\r\n\t\t\t\tthis.removeDispose(this._hideDisposer);\r\n\t\t\t}\r\n\r\n\t\t\tlet animation: $type.Optional<Animation>;\r\n\r\n\t\t\tif (fields) {\r\n\t\t\t\t$array.each(fields, (field) => {\r\n\t\t\t\t\tanimation = this.setWorkingValue(field, this.values[field].value, duration, delay);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\t\tlet animation = sprite.show(duration);\r\n\r\n\t\t\t\tif (animation != null && !animation.isFinished()) {\r\n\t\t\t\t\tthis._disposers.push(animation);\r\n\r\n\t\t\t\t\tif (delay != null && delay > 0) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn animation;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tsuper.dispose();\r\n\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tsprite.dispose();\r\n\t\t});\r\n\r\n\t\tthis.sprites = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.isHiding = true;\r\n\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\r\n\t\t\tlet animation = sprite.hide(duration);\r\n\r\n\t\t\tif (animation != null && !animation.isFinished()) {\r\n\t\t\t\tthis._disposers.push(animation);\r\n\r\n\t\t\t\tif (delay != null && delay > 0) {\r\n\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif ($type.isNumber(toValue) && fields) {\r\n\t\t\tlet animation: $type.Optional<Animation>;\r\n\r\n\t\t\t$array.each(fields, (field) => {\r\n\t\t\t\tlet anim = this.setWorkingValue(field, toValue, duration, delay);\r\n\t\t\t\tif (anim) {\r\n\t\t\t\t\tanimation = anim;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tthis._hideDisposer = animation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.setVisibility(false, true);\r\n\t\t\t\t\tthis.isHiding = false;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._disposers.push(this._hideDisposer);\r\n\t\t\t\treturn animation;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.isHiding = false;\r\n\t\t\t\tthis.setVisibility(false, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.isHiding = false;\r\n\t\t\tthis.setVisibility(false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(duration?: number): $type.Optional<number> {\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tlet component: $type.Optional<Component> = this.component;\r\n\t\t\tif (component) {\r\n\t\t\t\tduration = component.interpolationDuration;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (duration != null) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn duration;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"duration\", duration);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a numeric value for specific data field.\r\n\t *\r\n\t * If `calculated` is not set, it will return a raw value, as it is in\r\n\t * source data.\r\n\t *\r\n\t * If `calculated` is set, it will return a pre-calculated specific value.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @param calculated  A calculated value name\r\n\t * @return Value\r\n\t */\r\n\tpublic getValue(name: string, calculated?: CalculatedValue): $type.Optional<number> {\r\n\t\tif (name && this.component) {\r\n\t\t\tif (!calculated) {\r\n\t\t\t\tcalculated = (<any>this.component.dataFields)[name + \"Show\"];\r\n\t\t\t\tif (!calculated) {\r\n\t\t\t\t\tcalculated = \"value\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst value = this.values[name][calculated];\r\n\r\n\t\t\tif (this._adapterO && this._adapterO.isEnabled(\"value\")) {\r\n\t\t\t\treturn this._adapterO.apply(\"value\", {\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tfield: name\r\n\t\t\t\t}).value;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a current working value for a specific data field.\r\n\t *\r\n\t * The actual value may differ from the one returned by `getValue()`. The\r\n\t * latter returns static values from the data source.\r\n\t *\r\n\t * `getWorkingValue()` returns current value, which is usually different if\r\n\t * Data Item is animating from one state to another.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @return Value\r\n\t */\r\n\tpublic getWorkingValue(name: string): $type.Optional<number> {\r\n\t\tif (name && this.component) {\r\n\t\t\tlet realName = (<any>this.component.dataFields)[name + \"Show\"];\r\n\r\n\t\t\tif (!realName) {\r\n\t\t\t\trealName = \"workingValue\";\r\n\t\t\t}\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\treturn this._adapterO.apply(\"workingValue\", {\r\n\t\t\t\t\tworkingValue: this.values[name][realName],\r\n\t\t\t\t\tfield: name\r\n\t\t\t\t}).workingValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.values[name][realName];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Value\r\n\t */\r\n\tpublic getActualWorkingValue(name: string): $type.Optional<number> {\r\n\t\treturn this.values[name].workingValue;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets a numeric value for specific data field.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @param value       Value\r\n\t * @param calculated  Calculated data field name\r\n\t * @param duration    Duration (ms) to animate to new value to\r\n\t * @param delay       Delay animation (ms)\r\n\t */\r\n\tpublic setValue(name: string, value: number, duration?: number, delay?: number): void {\r\n\t\tlet currentValue: number = this.values[name].value;\r\n\t\tlet newDuration: $type.Optional<number> = this.getDuration(duration);\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (currentValue !== value) {\r\n\t\t\tthis.values[name].value = value;\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"valuechanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"valuechanged\"] = {\r\n\t\t\t\t\t\ttype: \"valuechanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"valuechanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemValueChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setWorkingValue(name, value, newDuration, delay);\r\n\t}\r\n\r\n\tsetCalculatedValue(name: string, value: number, calculated: CalculatedValue): void {\r\n\t\tlet currentValue: number = this.values[name][calculated];\r\n\r\n\t\tif (currentValue !== value && $type.isNumber(value)) {\r\n\t\t\tthis.values[name][calculated] = value;\r\n\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"calculatedvaluechanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"calculatedvaluechanged\"] = {\r\n\t\t\t\t\t\ttype: \"calculatedvaluechanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"calculatedvaluechanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemCalculatedValueChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set current working numeric value for a specific data field.\r\n\t *\r\n\t * @param name        Data field name\r\n\t * @param value       Value\r\n\t * @param calculated  Calculated data field name\r\n\t * @param duration    Duration (ms) to animate to new value to\r\n\t * @param delay       Delay animation (ms)\r\n\t * @return An [[Animation]] object used for transition to new values\r\n\t */\r\n\tpublic setWorkingValue(name: string, value: number, duration?: number, delay?: number): $type.Optional<Animation> {\r\n\t\tif ($type.isNumber(this.values[name].value)) {\r\n\t\t\tlet newDuration: $type.Optional<number> = this.getDuration(duration);\r\n\r\n\t\t\tlet workingValue: number = this.values[name].workingValue;\r\n\r\n\t\t\tif (newDuration != null && newDuration > 0 && $type.isNumber(workingValue) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n\r\n\t\t\t\tif (workingValue != value) {\r\n\t\t\t\t\tlet animation: Animation = this.animate({ childObject: this.values[name], property: \"workingValue\", from: workingValue, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n\t\t\t\t\tif (delay != null) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tanimation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n\t\t\t\t\tanimation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n\t\t\t\t\tanimation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n\t\t\t\t\tthis._valueAnimations[name] = animation;\r\n\t\t\t\t\treturn animation;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet valueAnimation = this._valueAnimations[name];\r\n\t\t\t\t\tif (valueAnimation) {\r\n\t\t\t\t\t\tvalueAnimation.stop();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.values[name].workingValue = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tlet valueAnimation = this._valueAnimations[name];\r\n\t\t\t\tif (valueAnimation) {\r\n\t\t\t\t\tvalueAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.values[name].workingValue = value;\r\n\t\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\t\tif (this.events.isEnabled(\"workingvaluechanged\")) {\r\n\t\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"workingvaluechanged\"] = {\r\n\t\t\t\t\t\t\ttype: \"workingvaluechanged\",\r\n\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis.events.dispatchImmediately(\"workingvaluechanged\", event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.handleDataItemWorkingValueChange(this, name);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a relative location for a data field.\r\n\t *\r\n\t * A location is always relative on a 0 to 1 scale, with 0 being beginning,\r\n\t * 0.5 middle and 1 end.\r\n\t *\r\n\t * @todo Rewiew description\r\n\t * @param name      Data field name\r\n\t * @param value     Location (0-1)\r\n\t * @param duration  Duration (ms) to animate to new value to\r\n\t * @param delay     Delay animation (ms)\r\n\t */\r\n\tpublic setLocation(name: string, value: number, duration?: number, delay?: number) {\r\n\t\tlet currentLocation: number = this.locations[name];\r\n\r\n\t\tif (currentLocation !== value) {\r\n\t\t\tthis.locations[name] = value;\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"locationchanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"locationchanged\"] = {\r\n\t\t\t\t\t\ttype: \"locationchanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"locationchanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemValueChange(this, name); // correct\r\n\t\t\t}\r\n\r\n\t\t\tthis.setWorkingLocation(name, value, duration, delay);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a current working location for a data field.\r\n\t *\r\n\t * @todo Rewiew description\r\n\t * @param name      Data field name\r\n\t * @param value     Location (0-1)\r\n\t * @param duration  Duration (ms) to animate to new value to\r\n\t * @param delay     Delay animation (ms)\r\n\t */\r\n\tpublic setWorkingLocation(name: string, value: number, duration?: number, delay?: number): $type.Optional<Animation> {\r\n\t\tlet newDuration: $type.Optional<number> = this.getDuration(duration);\r\n\t\tlet workingLocation: number = this.workingLocations[name];\r\n\r\n\t\tif (newDuration != null && newDuration > 0 && $type.isNumber(workingLocation) && this.component) { // sometimes NaN is passed, so only change this to != null if all cases of NaN are handled, otherwise animation won't stop\r\n\t\t\tif (workingLocation != value) {\r\n\t\t\t\tlet animation: Animation = this.animate({ childObject: this.workingLocations, property: name, from: workingLocation, to: value, dummyData: name }, newDuration, this.component.interpolationEasing);\r\n\t\t\t\tif (delay != null) {\r\n\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t}\r\n\t\t\t\tanimation.events.on(\"animationstarted\", this.handleInterpolationProgress, this);\r\n\t\t\t\tanimation.events.on(\"animationprogress\", this.handleInterpolationProgress, this);\r\n\t\t\t\tanimation.events.on(\"animationended\", this.handleInterpolationProgress, this);\r\n\t\t\t\tthis._locationAnimations[name] = animation;\r\n\t\t\t\treturn animation;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet locationAnimation = this._locationAnimations[name];\r\n\t\t\t\tif (locationAnimation) {\r\n\t\t\t\t\tlocationAnimation.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.workingLocations[name] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet locationAnimation = this._locationAnimations[name];\r\n\t\t\tif (locationAnimation) {\r\n\t\t\t\tlocationAnimation.stop();\r\n\t\t\t}\r\n\r\n\t\t\tthis.workingLocations[name] = value;\r\n\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"workinglocationchanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"workinglocationchanged\"] = {\r\n\t\t\t\t\t\ttype: \"workinglocationchanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"workinglocationchanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemWorkingLocationChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets Date value to a data field.\r\n\t *\r\n\t * @param name      Data field name\r\n\t * @param date      Date object\r\n\t * @param duration  Duration (ms) to animate to new value to\r\n\t */\r\n\tpublic setDate(name: string, date: Date, duration?: number) {\r\n\r\n\t\tif (!$type.isDate(date) && this.component) {\r\n\t\t\tdate = this.component.dateFormatter.parse(date);\r\n\t\t}\r\n\r\n\t\tlet currentDate: Date = this.dates[name];\r\n\t\tif (currentDate !== date) {\r\n\t\t\tthis.dates[name] = date;\r\n\t\t\tthis.setValue(name, date.getTime(), duration);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Date value of the data field.\r\n\t *\r\n\t * @param name  Data field name\r\n\t * @return Date object\r\n\t */\r\n\tpublic getDate(name: string): Date {\r\n\t\tif (this._adapterO) {\r\n\t\t\treturn this._adapterO.apply(\"date\", {\r\n\t\t\t\tdate: this.dates[name],\r\n\t\t\t\tfield: name\r\n\t\t\t}).date;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dates[name];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a Data Item-specific visual properties to apply to related elements.\r\n\t *\r\n\t * @param name   Property name\r\n\t * @param value  Property value\r\n\t */\r\n\tpublic setProperty(name: string, value: any) {\r\n\t\tif (this.properties[name] !== value) {\r\n\t\t\tthis.hasProperties = true;\r\n\t\t\tthis.properties[name] = value;\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"propertychanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"propertychanged\"] = {\r\n\t\t\t\t\t\ttype: \"propertychanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: name,\r\n\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"propertychanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemPropertyChange(this, name);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a related category for this Data Item.\r\n\t *\r\n\t * @todo Review description\r\n\t * @param name   Data field name\r\n\t * @param value  Category\r\n\t */\r\n\tpublic setCategory(name: string, value: string) {\r\n\t\tif (!$type.isString(value)) {\r\n\t\t\tvalue = $type.castString(value);\r\n\t\t}\r\n\r\n\t\tif (this.categories[name] !== value) {\r\n\t\t\tthis.categories[name] = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the Data Item, including all related data.\r\n\t *\r\n\t * @return New Data Item clone\r\n\t */\r\n\t//public clone(cloneId?: string): this {\r\n\t//\tlet dataItem: this = super.clone(cloneId);\r\n\t//\tdataItem.copyFrom(this);\r\n\t//\treturn dataItem;\r\n\t//}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from different data item.\r\n\t *\r\n\t * @param object Source data item\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tif (source.dataContext) {\r\n\t\t\tthis.dataContext = $utils.copy(source.dataContext, {});\r\n\t\t}\r\n\r\n\t\t$utils.copyProperties(source.locations, this.locations);\r\n\t\t/*\r\n\t\t$utils.copyProperties(source.properties, this.properties);\r\n\t\t$utils.copyProperties(source.categories, this.categories);\r\n\t\t$utils.copyProperties(source.values, this.values);\r\n\t\t$utils.copyProperties(source.dates, this.dates);\r\n\r\n\t\t$object.each(source.values, (name, value) => {\r\n\t\t\tthis.values[name] = $object.copy(value);\r\n\t\t});*/\r\n\t\tif (source._adapterO) {\r\n\t\t\tthis.adapter.copyFrom(source._adapterO);\r\n\t\t}\r\n\t\t//this.events.copyFrom(source.events); // because copied in Base\r\n\t\tthis.component = source.component;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets opacity for all Data Item's related elements (Sprites).\r\n\t *\r\n\t * @param value Opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: number) {\r\n\t\t$array.each(this.sprites, (sprite) => {\r\n\t\t\tsprite.opacity = value;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets whether this data point should not be included in the scale and\r\n\t * minimum/maximum calculations.\r\n\t *\r\n\t * E.g. some we may want to exclude a particular data point from influencing\r\n\t * [[ValueAxis]] scale.\r\n\t *\r\n\t * @param value  Exclude from min/max calculations?\r\n\t */\r\n\tpublic set ignoreMinMax(value: boolean) {\r\n\t\tthis._ignoreMinMax = value;\r\n\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\tif (this.events.isEnabled(\"propertychanged\")) {\r\n\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"propertychanged\"] = {\r\n\t\t\t\t\ttype: \"propertychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tproperty: \"ignoreMinMax\",\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"propertychanged\", event);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.component) {\r\n\t\t\tthis.component.handleDataItemPropertyChange(this, \"ignoreMinMax\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Exclude from min/max calculations?\r\n\t * @return Exclude from min/max calculations?\r\n\t */\r\n\tpublic get ignoreMinMax(): boolean {\r\n\t\treturn this._ignoreMinMax;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and starts an [[Animation]] to interpolate (morph) Data Item's\r\n\t * properties and/or values.\r\n\t *\r\n\t * @see {@link Animation}\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Animation duration (ms)\r\n\t * @param easing            Easing function\r\n\t * @return Animation\r\n\t */\r\n\tpublic animate(animationOptions: IAnimationOptions[] | IAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\treturn new Animation(this, animationOptions, duration, easing).start();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles intermediate steps when Data Item is interpolating (morphing) from\r\n\t * one value to another.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event object\r\n\t */\r\n\tpublic handleInterpolationProgress(event: AMEvent<Animation, IAnimationEvents>[\"animationstarted\" | \"animationended\" | \"animationprogress\"]) {\r\n\t\tlet animation: Animation = event.target;\r\n\r\n\t\t// it's always only one options, no need cycle\r\n\t\tlet animationOptions: IAnimationOptions = animation.animationOptions[0];\r\n\t\tif (animationOptions) {\r\n\t\t\tif (this._eventDispatcher && !this.__disabled) {\r\n\t\t\t\tif (this.events.isEnabled(\"workingvaluechanged\")) {\r\n\t\t\t\t\tconst event: AMEvent<this, IDataItemEvents>[\"workingvaluechanged\"] = {\r\n\t\t\t\t\t\ttype: \"workingvaluechanged\",\r\n\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\tproperty: animationOptions.dummyData\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.events.dispatchImmediately(\"workingvaluechanged\", event);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.component) {\r\n\t\t\t\tthis.component.handleDataItemWorkingValueChange(this, animationOptions.dummyData);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether Data Item has values set for all of the data fields,\r\n\t * supplied via argument.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields  Field list to check\r\n\t * @return Has values for all fields?\r\n\t */\r\n\tpublic hasValue(fields: string[]): boolean {\r\n\t\t// todo: what about categories?\r\n\t\tfor (let i = 0, len = fields.length; i < len; i++) {\r\n\t\t\tlet values = this.values[fields[i]];\r\n\t\t\tif (!values || !$type.hasValue(values.value)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the Data Item.\r\n\t *\r\n\t * In nested data structures, like TreeMap, this indicates the level this\r\n\t * data point is at, in relation to the parent Data Item.\r\n\t *\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\r\n\t\t} else {\r\n\t\t\treturn this.parent.depth + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets to a reference to an original object from Component's data.\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get dataContext(): Object {\r\n\t\treturn this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to an original object in Component's data, that this Data Item\r\n\t * is derived from.\r\n\t *\r\n\t * @param value Original data object\r\n\t */\r\n\tpublic set dataContext(value: Object) {\r\n\t\tthis._dataContext = value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * adds a sprite to dataItem.sprites array\r\n\t * @ignore\r\n\t */\r\n\taddSprite(sprite: Sprite) {\r\n\t\tif (sprite.dataItem && sprite.dataItem != this) {\r\n\t\t\t$array.remove(sprite.dataItem.sprites, sprite);\r\n\t\t}\r\n\t\tif (!this.visible) {\r\n\t\t\tsprite.hide(0);\r\n\t\t}\r\n\r\n\t\tif (this.isHiding) {\r\n\t\t\tsprite.hide();\r\n\t\t}\r\n\t\tthis.sprites.push(sprite);\r\n\t\tsprite.dataItem = this;\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}