{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle } from \"./Rectangle\";\n/**\r\n * Draws a rectangle with rounded corners.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar RoundedRectangle =\n/** @class */\nfunction (_super) {\n  __extends(RoundedRectangle, _super);\n\n  function RoundedRectangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(RoundedRectangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var width = this.width();\n      var height = this.height();\n      var w = width;\n      var h = height;\n      var wSign = w / Math.abs(width);\n      var hSign = h / Math.abs(height);\n\n      if ($type.isNumber(w) && $type.isNumber(h)) {\n        var minSide = Math.min(w, h) / 2;\n        var crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n        var crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n        var crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n        var crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n        var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n        crtl = $math.fitToRange(crtl, 0, maxcr);\n        crtr = $math.fitToRange(crtr, 0, maxcr);\n        crbr = $math.fitToRange(crbr, 0, maxcr);\n        crbl = $math.fitToRange(crbl, 0, maxcr);\n\n        this._display.moveTo(crtl * wSign, 0);\n\n        this._display.lineTo(w - crtr * wSign, 0);\n\n        if (crtr > 0) {\n          this._display.arcTo(w, 0, w, crtr * hSign, crtr);\n        }\n\n        this._display.lineTo(w, h - crbr * hSign);\n\n        if (crbr > 0) {\n          this._display.arcTo(w, h, w - crbr * wSign, h, crbr);\n        }\n\n        this._display.lineTo(crbl * wSign, h);\n\n        if (crbl > 0) {\n          this._display.arcTo(0, h, 0, h - crbl * hSign, crbl);\n        }\n\n        this._display.lineTo(0, crtl * hSign);\n\n        if (crtl > 0) {\n          this._display.arcTo(0, 0, crtl * wSign, 0, crtl);\n        }\n      }\n    }\n  });\n  Object.defineProperty(RoundedRectangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RoundedRectangle\"\n  });\n  Object.defineProperty(RoundedRectangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Rectangle.classNames.concat([RoundedRectangle.className])\n  });\n  return RoundedRectangle;\n}(Rectangle);\n\nexport { RoundedRectangle };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,SAASC,SAAT,QAAiE,aAAjE;AA8BA;;;;;;;AAMA;AAAA;AAAA;EAAsCC;;EAAtC;;EA6DC;;;;;;WArDA;MACCC,iBAAMC,cAAN,CAAoBC,IAApB,CAAoB,IAApB;;MAEA,IAAI,KAAKC,OAAL,CAAa,gBAAb,KAAkC,KAAKA,OAAL,CAAa,gBAAb,CAAlC,IAAoE,KAAKA,OAAL,CAAa,gBAAb,CAApE,IAAsG,KAAKA,OAAL,CAAa,gBAAb,CAA1G,EAA0I;QACzI,KAAKC,MAAL,GAAc,IAAd;MACA;IACD;;;;;;WAED;MACC,IAAIC,KAAK,GAAG,KAAKA,KAAL,EAAZ;MACA,IAAIC,MAAM,GAAG,KAAKA,MAAL,EAAb;MAEA,IAAIC,CAAC,GAAGF,KAAR;MACA,IAAIG,CAAC,GAAGF,MAAR;MAEA,IAAIG,KAAK,GAAGF,CAAC,GAAGG,IAAI,CAACC,GAAL,CAASN,KAAT,CAAhB;MACA,IAAIO,KAAK,GAAGJ,CAAC,GAAGE,IAAI,CAACC,GAAL,CAASL,MAAT,CAAhB;;MAEA,IAAIX,KAAK,CAACkB,QAAN,CAAeN,CAAf,KAAqBZ,KAAK,CAACkB,QAAN,CAAeL,CAAf,CAAzB,EAA4C;QAE3C,IAAIM,OAAO,GAAGJ,IAAI,CAACK,GAAL,CAASR,CAAT,EAAYC,CAAZ,IAAiB,CAA/B;QAEA,IAAIQ,IAAI,GAAGnB,MAAM,CAACoB,eAAP,CAAuB,KAAKC,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsDJ,OAAtD,CAAX;QACA,IAAIK,IAAI,GAAGtB,MAAM,CAACoB,eAAP,CAAuB,KAAKC,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsDJ,OAAtD,CAAX;QACA,IAAIM,IAAI,GAAGvB,MAAM,CAACoB,eAAP,CAAuB,KAAKC,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsDJ,OAAtD,CAAX;QACA,IAAIO,IAAI,GAAGxB,MAAM,CAACoB,eAAP,CAAuB,KAAKC,GAAL,CAAS,gBAAT,EAA2B,CAA3B,CAAvB,EAAsDJ,OAAtD,CAAX;QAEA,IAAIQ,KAAK,GAAGZ,IAAI,CAACK,GAAL,CAASL,IAAI,CAACC,GAAL,CAASJ,CAAC,GAAG,CAAb,CAAT,EAA0BG,IAAI,CAACC,GAAL,CAASH,CAAC,GAAG,CAAb,CAA1B,CAAZ;QAEAQ,IAAI,GAAGpB,KAAK,CAAC2B,UAAN,CAAiBP,IAAjB,EAAuB,CAAvB,EAA0BM,KAA1B,CAAP;QACAH,IAAI,GAAGvB,KAAK,CAAC2B,UAAN,CAAiBJ,IAAjB,EAAuB,CAAvB,EAA0BG,KAA1B,CAAP;QACAF,IAAI,GAAGxB,KAAK,CAAC2B,UAAN,CAAiBH,IAAjB,EAAuB,CAAvB,EAA0BE,KAA1B,CAAP;QACAD,IAAI,GAAGzB,KAAK,CAAC2B,UAAN,CAAiBF,IAAjB,EAAuB,CAAvB,EAA0BC,KAA1B,CAAP;;QAEA,KAAKE,QAAL,CAAcC,MAAd,CAAqBT,IAAI,GAAGP,KAA5B,EAAmC,CAAnC;;QACA,KAAKe,QAAL,CAAcE,MAAd,CAAqBnB,CAAC,GAAGY,IAAI,GAAGV,KAAhC,EAAuC,CAAvC;;QACA,IAAIU,IAAI,GAAG,CAAX,EAAc;UACb,KAAKK,QAAL,CAAcG,KAAd,CAAoBpB,CAApB,EAAuB,CAAvB,EAA0BA,CAA1B,EAA6BY,IAAI,GAAGP,KAApC,EAA2CO,IAA3C;QACA;;QACD,KAAKK,QAAL,CAAcE,MAAd,CAAqBnB,CAArB,EAAwBC,CAAC,GAAGY,IAAI,GAAGR,KAAnC;;QACA,IAAIQ,IAAI,GAAG,CAAX,EAAc;UACb,KAAKI,QAAL,CAAcG,KAAd,CAAoBpB,CAApB,EAAuBC,CAAvB,EAA0BD,CAAC,GAAGa,IAAI,GAAGX,KAArC,EAA4CD,CAA5C,EAA+CY,IAA/C;QACA;;QACD,KAAKI,QAAL,CAAcE,MAAd,CAAqBL,IAAI,GAAGZ,KAA5B,EAAmCD,CAAnC;;QACA,IAAIa,IAAI,GAAG,CAAX,EAAc;UACb,KAAKG,QAAL,CAAcG,KAAd,CAAoB,CAApB,EAAuBnB,CAAvB,EAA0B,CAA1B,EAA6BA,CAAC,GAAGa,IAAI,GAAGT,KAAxC,EAA+CS,IAA/C;QACA;;QACD,KAAKG,QAAL,CAAcE,MAAd,CAAqB,CAArB,EAAwBV,IAAI,GAAGJ,KAA/B;;QACA,IAAII,IAAI,GAAG,CAAX,EAAc;UACb,KAAKQ,QAAL,CAAcG,KAAd,CAAoB,CAApB,EAAuB,CAAvB,EAA0BX,IAAI,GAAGP,KAAjC,EAAwC,CAAxC,EAA2CO,IAA3C;QACA;MACD;IACD;;EAvDDY;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0C9B,SAAS,CAAC+B,UAAV,CAAqBC,MAArB,CAA4B,CAACC,gBAAgB,CAACC,SAAlB,CAA5B;EAA1C;EAuDD;AAAC,CA7DD,CAAsClC,SAAtC;;SAAaiC","names":["$type","$math","$utils","Rectangle","__extends","_super","_beforeChanged","call","isDirty","_clear","width","height","w","h","wSign","Math","abs","hSign","isNumber","minSide","min","crtl","relativeToValue","get","crtr","crbr","crbl","maxcr","fitToRange","_display","moveTo","lineTo","arcTo","Object","classNames","concat","RoundedRectangle","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/RoundedRectangle.ts"],"sourcesContent":["import * as $type from \"../util/Type\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\nimport { Rectangle, IRectangleSettings, IRectanglePrivate } from \"./Rectangle\";\n\n\nexport interface IRoundedRectangleSettings extends IRectangleSettings {\n\n\t/**\n\t * Radius of the top-left corner in pixels.\n\t */\n\tcornerRadiusTL?: number;\n\n\t/**\n\t * Radius of the top-right corner in pixels.\n\t */\n\tcornerRadiusTR?: number;\n\n\t/**\n\t * Radius of the botttom-right corner in pixels.\n\t */\n\tcornerRadiusBR?: number;\n\n\t/**\n\t * Radius of the bottom-left corner in pixels.\n\t */\n\tcornerRadiusBL?: number;\n\n}\n\nexport interface IRoundedRectanglePrivate extends IRectanglePrivate {\n}\n\n/**\n * Draws a rectangle with rounded corners.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n * @important\n */\nexport class RoundedRectangle extends Rectangle {\n\n\tdeclare public _settings: IRoundedRectangleSettings;\n\tdeclare public _privateSettings: IRoundedRectanglePrivate;\n\n\tpublic static className: string = \"RoundedRectangle\";\n\tpublic static classNames: Array<string> = Rectangle.classNames.concat([RoundedRectangle.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"cornerRadiusTL\") || this.isDirty(\"cornerRadiusTR\") || this.isDirty(\"cornerRadiusBR\") || this.isDirty(\"cornerRadiusBL\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _draw() {\t\t\n\t\tlet width = this.width();\n\t\tlet height = this.height();\n\n\t\tlet w = width;\n\t\tlet h = height;\n\n\t\tlet wSign = w / Math.abs(width);\n\t\tlet hSign = h / Math.abs(height);\n\n\t\tif ($type.isNumber(w) && $type.isNumber(h)) {\n\n\t\t\tlet minSide = Math.min(w, h) / 2;\n\n\t\t\tlet crtl = $utils.relativeToValue(this.get(\"cornerRadiusTL\", 8), minSide);\n\t\t\tlet crtr = $utils.relativeToValue(this.get(\"cornerRadiusTR\", 8), minSide);\n\t\t\tlet crbr = $utils.relativeToValue(this.get(\"cornerRadiusBR\", 8), minSide);\n\t\t\tlet crbl = $utils.relativeToValue(this.get(\"cornerRadiusBL\", 8), minSide);\n\n\t\t\tlet maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));\n\n\t\t\tcrtl = $math.fitToRange(crtl, 0, maxcr);\n\t\t\tcrtr = $math.fitToRange(crtr, 0, maxcr);\n\t\t\tcrbr = $math.fitToRange(crbr, 0, maxcr);\n\t\t\tcrbl = $math.fitToRange(crbl, 0, maxcr);\n\n\t\t\tthis._display.moveTo(crtl * wSign, 0);\n\t\t\tthis._display.lineTo(w - crtr * wSign, 0);\n\t\t\tif (crtr > 0) {\n\t\t\t\tthis._display.arcTo(w, 0, w, crtr * hSign, crtr);\n\t\t\t}\n\t\t\tthis._display.lineTo(w, h - crbr * hSign);\n\t\t\tif (crbr > 0) {\n\t\t\t\tthis._display.arcTo(w, h, w - crbr * wSign, h, crbr);\n\t\t\t}\n\t\t\tthis._display.lineTo(crbl * wSign, h);\n\t\t\tif (crbl > 0) {\n\t\t\t\tthis._display.arcTo(0, h, 0, h - crbl * hSign, crbl);\n\t\t\t}\n\t\t\tthis._display.lineTo(0, crtl * hSign);\n\t\t\tif (crtl > 0) {\n\t\t\t\tthis._display.arcTo(0, 0, crtl * wSign, 0, crtl);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}