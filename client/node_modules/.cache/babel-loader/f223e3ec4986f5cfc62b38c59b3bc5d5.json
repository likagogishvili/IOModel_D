{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\n\nvar Triangle =\n/** @class */\nfunction (_super) {\n  __extends(Triangle, _super);\n\n  function Triangle() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(Triangle.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear && !this.get(\"draw\")) {\n        this._draw();\n      }\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var w = this.width();\n      var h = this.height();\n      var display = this._display;\n      display.moveTo(-w / 2, h / 2);\n      display.lineTo(0, -h / 2);\n      display.lineTo(w / 2, h / 2);\n      display.lineTo(-w / 2, h / 2);\n    }\n  });\n  Object.defineProperty(Triangle.prototype, \"_updateSize\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.markDirty();\n      this._clear = true;\n    }\n  });\n  Object.defineProperty(Triangle, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Triangle\"\n  });\n  Object.defineProperty(Triangle, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Triangle.className])\n  });\n  return Triangle;\n}(Graphics);\n\nexport { Triangle };","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAA8D,YAA9D;AAQA;;;;;;;AAMA;AAAA;AAAA;EAA8BC;;EAA9B;;EAuCC;;;;;;WA/BA;MACCC,iBAAMC,cAAN,CAAoBC,IAApB,CAAoB,IAApB;;MAEA,IAAI,KAAKC,OAAL,CAAa,OAAb,KAAyB,KAAKA,OAAL,CAAa,QAAb,CAAzB,IAAmD,KAAKC,cAAL,CAAoB,OAApB,CAAnD,IAAmF,KAAKA,cAAL,CAAoB,QAApB,CAAvF,EAAsH;QACrH,KAAKC,MAAL,GAAc,IAAd;MACA;IACD;;;;;;WAED;MACCL,iBAAMM,QAAN,CAAcJ,IAAd,CAAc,IAAd;;MAEA,IAAI,KAAKG,MAAL,IAAe,CAAC,KAAKE,GAAL,CAAS,MAAT,CAApB,EAAsC;QACrC,KAAKC,KAAL;MACA;IACD;;;;;;WAED;MACC,IAAMC,CAAC,GAAG,KAAKC,KAAL,EAAV;MACA,IAAMC,CAAC,GAAG,KAAKC,MAAL,EAAV;MACA,IAAMC,OAAO,GAAG,KAAKC,QAArB;MACAD,OAAO,CAACE,MAAR,CAAe,CAACN,CAAD,GAAK,CAApB,EAAuBE,CAAC,GAAG,CAA3B;MACAE,OAAO,CAACG,MAAR,CAAe,CAAf,EAAkB,CAACL,CAAD,GAAK,CAAvB;MACAE,OAAO,CAACG,MAAR,CAAeP,CAAC,GAAG,CAAnB,EAAsBE,CAAC,GAAG,CAA1B;MACAE,OAAO,CAACG,MAAR,CAAe,CAACP,CAAD,GAAK,CAApB,EAAuBE,CAAC,GAAG,CAA3B;IAEA;;;;;;WAED;MACC,KAAKM,SAAL;MACA,KAAKZ,MAAL,GAAc,IAAd;IACA;;EAjCDa;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0CpB,QAAQ,CAACqB,UAAT,CAAoBC,MAApB,CAA2B,CAACC,QAAQ,CAACC,SAAV,CAA3B;EAA1C;EAiCD;AAAC,CAvCD,CAA8BxB,QAA9B;;SAAauB","names":["Graphics","__extends","_super","_beforeChanged","call","isDirty","isPrivateDirty","_clear","_changed","get","_draw","w","width","h","height","display","_display","moveTo","lineTo","markDirty","Object","classNames","concat","Triangle","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/Triangle.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\r\n\r\nexport interface ITriangleSettings extends IGraphicsSettings {\r\n}\r\n\r\nexport interface ITrianglePrivate extends IGraphicsPrivate {\r\n}\r\n\r\n/**\r\n * Draws a triangle.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n * @important\r\n */\r\nexport class Triangle extends Graphics {\r\n\r\n\tdeclare public _settings: ITriangleSettings;\r\n\tdeclare public _privateSettings: ITrianglePrivate;\r\n\r\n\tpublic static className: string = \"Triangle\";\r\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Triangle.className]);\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\r\n\t\tif (this.isDirty(\"width\") || this.isDirty(\"height\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\r\n\t\t\tthis._clear = true;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic _changed() {\r\n\t\tsuper._changed();\r\n\r\n\t\tif (this._clear && !this.get(\"draw\")) {\r\n\t\t\tthis._draw();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _draw() {\r\n\t\tconst w = this.width();\r\n\t\tconst h = this.height();\r\n\t\tconst display = this._display;\r\n\t\tdisplay.moveTo(-w / 2, h / 2);\r\n\t\tdisplay.lineTo(0, -h / 2);\r\n\t\tdisplay.lineTo(w / 2, h / 2);\r\n\t\tdisplay.lineTo(-w / 2, h / 2);\r\n\r\n\t}\r\n\r\n\tpublic _updateSize() {\r\n\t\tthis.markDirty()\r\n\t\tthis._clear = true;\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}