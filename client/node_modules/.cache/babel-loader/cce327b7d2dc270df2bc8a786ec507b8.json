{"ast":null,"code":"/**\r\n * 3D column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { Column3D } from \"../elements/Column3D\";\nimport { registry } from \"../../core/Registry\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\nvar ColumnSeries3DDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSeries3DDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeries3DDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeries3DDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return ColumnSeries3DDataItem;\n}(ColumnSeriesDataItem);\n\nexport { ColumnSeries3DDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar ColumnSeries3D =\n/** @class */\nfunction (_super) {\n  __extends(ColumnSeries3D, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ColumnSeries3D() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeries3D\";\n    _this.columns.template.column3D.applyOnClones = true;\n    _this.columns.template.hiddenState.properties.visible = true;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ColumnSeries3D.prototype, \"columnsContainer\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      var chart = this.chart;\n\n      if (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\n        return chart.columnsContainer;\n      } else {\n        return this._columnsContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n  ColumnSeries3D.prototype.validateDataElementReal = function (dataItem) {\n    _super.prototype.validateDataElementReal.call(this, dataItem);\n\n    if (dataItem.column) {\n      dataItem.column.dx = this.dx;\n      dataItem.column.dy = this.dy;\n      dataItem.column.visible = this.visible;\n    }\n  };\n  /**\r\n   * Validates data item's elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ColumnSeries3D.prototype.validateDataElements = function () {\n    _super.prototype.validateDataElements.call(this);\n\n    if (this.chart) {\n      this.chart.invalidateLayout();\n    }\n  };\n  /**\r\n   * Returns an element to use for 3D bar.\r\n   * @ignore\r\n   * @return Element.\r\n   */\n\n\n  ColumnSeries3D.prototype.createColumnTemplate = function () {\n    return new Column3D();\n  };\n\n  Object.defineProperty(ColumnSeries3D.prototype, \"depth\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Depth (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"depth\");\n    },\n\n    /**\r\n     * Depth (height) of the slices in the series in pixels.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Depth (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"depth\", value, true);\n      var template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\n\n      template.column3D.depth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnSeries3D.prototype, \"angle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Angle (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"angle\");\n    },\n\n    /**\r\n     * Angle of view for the slices in series. (0-360)\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Angle (0-360)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"angle\", value);\n      var template = this.columns.template;\n      template.column3D.angle = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnSeries3D;\n}(ColumnSeries);\n\nexport { ColumnSeries3D };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;","map":{"version":3,"mappings":"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","names":["ColumnSeries","ColumnSeriesDataItem","Column3D","registry","__extends","_super","_this","className","applyTheme","columns","template","column3D","applyOnClones","hiddenState","properties","visible","Object","ColumnSeries3D","chart","columnsContainer","leftAxesContainer","layout","rightAxesContainer","bottomAxesContainer","topAxesContainer","_columnsContainer","dataItem","validateDataElementReal","call","column","dx","dy","validateDataElements","invalidateLayout","getPropertyValue","value","setPropertyValue","depth","angle","registeredClasses","ColumnSeries3DDataItem"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/ColumnSeries3D.ts"],"sourcesContent":["/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && chart.columnsContainer && chart.leftAxesContainer.layout != \"vertical\" && chart.rightAxesContainer.layout != \"vertical\" && chart.bottomAxesContainer.layout != \"horizontal\" && chart.topAxesContainer.layout != \"horizontal\") {\r\n\t\t\treturn chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif (dataItem.column) {\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\r\n\t\t\tdataItem.column.visible = this.visible;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif (this.chart) {\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n"]},"metadata":{},"sourceType":"module"}