{"ast":null,"code":"/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\nimport { CSVParser } from \"./CSVParser\";\nimport { JSONParser } from \"./JSONParser\";\nimport { Adapter } from \"../utils/Adapter\";\nimport * as $net from \"../utils/Net\";\nimport * as $array from \"../utils/Array\";\n;\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n     Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\n\nvar DataLoader =\n/** @class */\nfunction () {\n  function DataLoader() {\n    /**\r\n     * Adapter.\r\n     */\n    this.adapter = new Adapter(this);\n  }\n  /**\r\n   * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n   * their respective `parse` methods.\r\n   *\r\n   * @param source  A single data source or an array of multiple of data sources\r\n   */\n\n\n  DataLoader.prototype.load = function (source) {\n    var sources = Array.isArray(source) ? source : [source]; // Add each Source to the list to be loaded simultaneously\n\n    var promises = $array.map(sources, function (x) {\n      // Dispatch events\n      x.dispatchImmediately(\"started\");\n      x.dispatchImmediately(\"loadstarted\");\n      return $net.load(x.url, x, x.requestOptions);\n    }); // Run all promises in parallel\n\n    Promise.all(promises).then(function (res) {\n      // Process each loaded source\n      $array.each(res, function (result) {\n        // Get Source\n        var source = result.target; // Dispatch events\n\n        source.dispatchImmediately(\"loadended\");\n\n        if (result.error) {\n          if (source.events.isEnabled(\"error\")) {\n            source.events.dispatchImmediately(\"error\", {\n              type: \"error\",\n              code: result.xhr.status,\n              message: source.language.translate(\"Unable to load file: %1\", null, source.url),\n              target: source\n            });\n          }\n        } else {\n          // Initiate parsing of the loaded data\n          source.processData(result.response, result.type);\n        }\n\n        source.dispatchImmediately(\"ended\");\n      });\n    }).catch(function (res) {\n      if (res.target) {\n        res.target.dispatchImmediately(\"loadended\");\n\n        if (res.target.events.isEnabled(\"error\")) {\n          res.target.events.dispatchImmediately(\"error\", {\n            type: \"error\",\n            code: res.xhr.status,\n            message: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\n            target: res.target\n          });\n        }\n\n        res.target.dispatchImmediately(\"ended\");\n      }\n    });\n  };\n  /**\r\n   * Instantiates a [[DataParser]] object based on the data type.\r\n   * Built-in parser types are as follows:\r\n   *\r\n   * * \"csv\" or \"text/csv\"\r\n   * * \"json\" or \"application/json\"\r\n   *\r\n   * @param contentType  A format type\r\n   * @return A parser object\r\n   */\n\n\n  DataLoader.prototype.getParserByType = function (contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByType\", {\n      parser: null,\n      type: contentType\n    }).parser;\n\n    if (parser) {\n      return parser;\n    }\n\n    if (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\n      return new CSVParser();\n    }\n\n    if (contentType == \"json\" || contentType == \"application/json\") {\n      return new JSONParser();\n    }\n\n    return;\n  };\n  /**\r\n   * Tries to determine a parser out of content type and/or actual data.\r\n   *\r\n   * @param data         Data\r\n   * @param contentType  Content-type\r\n   * @return Parser instance\r\n   */\n\n\n  DataLoader.prototype.getParserByData = function (data, contentType) {\n    // Let some plugin decide\n    var parser = this.adapter.apply(\"getParserByData\", {\n      parser: null,\n      data: data,\n      type: contentType\n    }).parser; // Check if we have parser from outside code\n\n    if (!parser) {\n      // No, let's try to figure it out\n      parser = this.getParserByType(contentType);\n\n      if (parser) {\n        // We're able to figure out parser by content-type\n        return parser;\n      } else if (JSONParser.isJSON(data)) {\n        return this.getParserByType(\"json\");\n      } else if (CSVParser.isCSV(data)) {\n        return this.getParserByType(\"csv\");\n      }\n    }\n\n    return parser;\n  };\n\n  return DataLoader;\n}();\n\nexport { DataLoader };\n/**\r\n * Create instance of Data Loader\r\n */\n\nexport var dataLoader = new DataLoader();","map":{"version":3,"mappings":"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","names":["CSVParser","JSONParser","Adapter","$net","$array","DataLoader","source","sources","Array","isArray","promises","map","x","dispatchImmediately","load","url","requestOptions","Promise","all","then","res","each","result","target","error","events","isEnabled","type","code","xhr","status","message","language","translate","processData","response","catch","contentType","parser","adapter","apply","data","getParserByType","isJSON","isCSV","dataLoader"],"sourceRoot":"","sources":["../../../../../src/.internal/core/data/DataLoader.ts"],"sourcesContent":["/**\r\n * Data Loader is responsible for loading and parsing external data\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { DataSource } from \"./DataSource\";\r\nimport { DataParser } from \"./DataParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport * as $net from \"../utils/Net\";\r\nimport * as $array from \"../utils/Array\";\r\n\r\n/**\r\n * Represents a list of available adapters for Sprite\r\n */\r\nexport interface IDataLoaderAdapters {\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type by data\r\n\t * source's URL extension.\r\n\t */\r\n\tgetParserByType: {\r\n\t\tparser: DataParser,\r\n\t\ttype?: string\r\n\t},\r\n\r\n\t/**\r\n\t * Applied after the Data Loader determines suitable parser type based on\r\n\t * its data examination.\r\n\t */\r\n\tgetParserByData: {\r\n\t\tparser: DataParser,\r\n\t\tdata?: string,\r\n\t\ttype?: string\r\n\t}\r\n\r\n};\r\n\r\n/**\r\n * Data Loader is responsible for loading and parsing external data.\r\n *\r\n * There is just one instance of DataLoader per system. Unless you have a\r\n * speicific reason, do not instantiate additional instances.\r\n *\r\n * The global instance of Data Loader is accessible via:\r\n *\r\n * ```TypeScript\r\n * am4core.dataLoader;\r\n * ```\r\n * ```JavaScript\r\n * am4core.dataLoader;\r\n * ```\r\n *\r\n * A loading of specific data source is done via [[DataSource]].\r\n *\r\n \t Please refer to [[DataSource]] for information how to use it.\r\n *\r\n * @see {@link IDataLoaderAdapters} for a list of available Adapters\r\n */\r\nexport class DataLoader {\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDataLoaderAdapters;\r\n\r\n\t/**\r\n\t * Adapter.\r\n\t */\r\n\tpublic adapter: Adapter<DataLoader, IDataLoaderAdapters> = new Adapter<DataLoader, IDataLoaderAdapters>(this);\r\n\r\n\t/**\r\n\t * Loads a supplied [[DataSource]] or an array of data sources, then calls\r\n\t * their respective `parse` methods.\r\n\t *\r\n\t * @param source  A single data source or an array of multiple of data sources\r\n\t */\r\n\tpublic load(source: DataSource | DataSource[]): void {\r\n\t\tlet sources = Array.isArray(source) ? source : [source];\r\n\r\n\t\t// Add each Source to the list to be loaded simultaneously\r\n\t\tlet promises = $array.map(sources, (x) => {\r\n\t\t\t// Dispatch events\r\n\t\t\tx.dispatchImmediately(\"started\");\r\n\t\t\tx.dispatchImmediately(\"loadstarted\");\r\n\r\n\t\t\treturn $net.load(x.url, x, x.requestOptions);\r\n\t\t});\r\n\r\n\t\t// Run all promises in parallel\r\n\t\tPromise.all(promises).then((res) => {\r\n\t\t\t// Process each loaded source\r\n\t\t\t$array.each(res, (result) => {\r\n\t\t\t\t// Get Source\r\n\t\t\t\tlet source = result.target;\r\n\r\n\t\t\t\t// Dispatch events\r\n\t\t\t\tsource.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (result.error) {\r\n\t\t\t\t\tif (source.events.isEnabled(\"error\")) {\r\n\t\t\t\t\t\tsource.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\t\tcode: result.xhr.status,\r\n\t\t\t\t\t\t\tmessage: source.language.translate(\"Unable to load file: %1\", null, source.url),\r\n\t\t\t\t\t\t\ttarget: source\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// Initiate parsing of the loaded data\r\n\t\t\t\t\tsource.processData(result.response, result.type);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsource.dispatchImmediately(\"ended\");\r\n\t\t\t});\r\n\t\t}).catch((res) => {\r\n\r\n\t\t\tif (res.target) {\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"loadended\");\r\n\r\n\t\t\t\tif (res.target.events.isEnabled(\"error\")) {\r\n\t\t\t\t\tres.target.events.dispatchImmediately(\"error\", {\r\n\t\t\t\t\t\ttype: \"error\",\r\n\t\t\t\t\t\tcode: res.xhr.status,\r\n\t\t\t\t\t\tmessage: res.target.language.translate(\"Unable to load file: %1\", null, res.target.url),\r\n\t\t\t\t\t\ttarget: res.target\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tres.target.dispatchImmediately(\"ended\");\r\n\r\n\t\t\t}\r\n\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Instantiates a [[DataParser]] object based on the data type.\r\n\t * Built-in parser types are as follows:\r\n\t *\r\n\t * * \"csv\" or \"text/csv\"\r\n\t * * \"json\" or \"application/json\"\r\n\t *\r\n\t * @param contentType  A format type\r\n\t * @return A parser object\r\n\t */\r\n\tpublic getParserByType(contentType: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByType\", {\r\n\t\t\tparser: null,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\tif (parser) {\r\n\t\t\treturn parser;\r\n\t\t}\r\n\r\n\t\tif (contentType == \"csv\" || contentType == \"text/csv\" || contentType == \"application/vnd.ms-excel\") {\r\n\t\t\treturn new CSVParser();\r\n\t\t}\r\n\t\tif (contentType == \"json\" || contentType == \"application/json\") {\r\n\t\t\treturn new JSONParser();\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to determine a parser out of content type and/or actual data.\r\n\t *\r\n\t * @param data         Data\r\n\t * @param contentType  Content-type\r\n\t * @return Parser instance\r\n\t */\r\n\tpublic getParserByData(data: string, contentType?: string): DataParser {\r\n\r\n\t\t// Let some plugin decide\r\n\t\tlet parser = this.adapter.apply(\"getParserByData\", {\r\n\t\t\tparser: null,\r\n\t\t\tdata: data,\r\n\t\t\ttype: contentType\r\n\t\t}).parser;\r\n\r\n\t\t// Check if we have parser from outside code\r\n\t\tif (!parser) {\r\n\t\t\t// No, let's try to figure it out\r\n\t\t\tparser = this.getParserByType(contentType)\r\n\r\n\t\t\tif (parser) {\r\n\t\t\t\t// We're able to figure out parser by content-type\r\n\t\t\t\treturn parser;\r\n\t\t\t}\r\n\t\t\telse if (JSONParser.isJSON(data)) {\r\n\t\t\t\treturn this.getParserByType(\"json\");\r\n\t\t\t}\r\n\t\t\telse if (CSVParser.isCSV(data)) {\r\n\t\t\t\treturn this.getParserByType(\"csv\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn parser;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Create instance of Data Loader\r\n */\r\nexport let dataLoader: DataLoader = new DataLoader();\r\n"]},"metadata":{},"sourceType":"module"}