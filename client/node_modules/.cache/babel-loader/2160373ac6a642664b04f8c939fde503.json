{"ast":null,"code":"/**\r\n * Cursor module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { getInteraction } from \"../../core/interaction/Interaction\";\nimport { registry } from \"../../core/Registry\";\nimport { percent } from \"../../core/utils/Percent\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $dom from \"../../core/utils/DOM\";\nimport { system } from \"../../core/System\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\n\nvar Cursor =\n/** @class */\nfunction (_super) {\n  __extends(Cursor, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Cursor() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Current cursor position during selection.\r\n     *\r\n     * @todo Better description\r\n     */\n\n\n    _this.point = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Specifies the rules when cursor needs to be moved or hidden.\r\n     */\n\n    _this._stick = \"none\";\n    _this.className = \"Cursor\"; // Set defaults\n\n    _this.width = percent(100);\n    _this.height = percent(100);\n    _this.shouldClone = false;\n\n    _this.hide(0);\n\n    _this.trackable = true;\n    _this.clickable = true;\n    _this.isMeasured = false; // Add events on body to trigger down and up events (to start zooming or\n    // selection)\n\n    var interaction = getInteraction();\n\n    _this._disposers.push(interaction.body.events.on(\"down\", _this.handleCursorDown, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"up\", _this.handleCursorUp, _this));\n\n    _this._disposers.push(interaction.body.events.on(\"track\", _this.handleCursorMove, _this)); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Handle pointer movement in document and update cursor position as needed.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Event\r\n   */\n\n\n  Cursor.prototype.handleCursorMove = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch) {\n      return;\n    }\n\n    if ((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\" || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      // We want to let zoom/pan continue even if cursor is outside chart area\n      if (!this.isHidden || !this.isHiding) {\n        this.hide();\n      }\n\n      return;\n    }\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    if (this._stick == \"soft\" && this._stickPoint) {\n      if (!this.fitsToBounds(local)) {\n        local = this._stickPoint;\n      }\n    }\n\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n\n    this.triggerMove(local);\n    return local;\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n\n\n  Cursor.prototype.hideReal = function (duration) {\n    if ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\n      return;\n    }\n\n    return _super.prototype.hideReal.call(this, duration);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * The second parameter has following options:\r\n   *\r\n   * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n   * it either moves to a new place (if pointer over plot area) or is hidden.\r\n   *\r\n   * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n   * outside chart, but will move to a new place whe plot area is hovered or\r\n   * touched.\r\n   *\r\n   * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n   * another `triggerMove()` call.\r\n   *\r\n   * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n   * make cursor execute all of the actions associated with cursor move,\r\n   * including line redraws, tooltip updates, etc. Useful when underlying\r\n   * chart data is dynamically being updated.\r\n   *\r\n   * @param point  Point to place cursor at\r\n   * @param stick  Level of cursor stickiness to the place\r\n   * @param force  Force cursor move\r\n   */\n\n\n  Cursor.prototype.triggerMove = function (point, stick, force) {\n    point.x = $math.round(point.x, 1);\n    point.y = $math.round(point.y, 1);\n\n    if (stick) {\n      this._stick = stick;\n    }\n\n    if (stick == \"hard\" || stick == \"soft\") {\n      this._stickPoint = point;\n    }\n\n    this.triggerMoveReal(point, force);\n  };\n  /**\r\n   * Places the cursor at specific point.\r\n   *\r\n   * @param point Point to place cursor at\r\n   */\n\n\n  Cursor.prototype.triggerMoveReal = function (point, force) {\n    if (this.point.x != point.x || this.point.y != point.y || force) {\n      this.point = point;\n      this.invalidatePosition(); // hide cursor if it's out of bounds\n\n      if (this.fitsToBounds(point)) {\n        this.show(0);\n      } else {\n        // unless we are selecting (mouse is down)\n        if (!this.downPoint) {\n          this.hide(0);\n        }\n      }\n\n      if (this.visible) {\n        this.getPositions();\n        this.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\n      }\n    }\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerDown = function (point) {\n    this.triggerDownReal(point);\n  };\n  /**\r\n   * Simulates pressing down (click/touch) action by a cursor.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerDownReal = function (point) {\n    switch (this._generalBehavior) {\n      case \"zoom\":\n        this.dispatchImmediately(\"zoomstarted\");\n        break;\n\n      case \"select\":\n        this.dispatchImmediately(\"selectstarted\");\n        break;\n\n      case \"pan\":\n        this.dispatchImmediately(\"panstarted\");\n        getInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\n        break;\n    }\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerUp = function (point) {\n    this.triggerUpReal(point);\n  };\n  /**\r\n   * Simulates the action of release of the mouse down / touch.\r\n   *\r\n   * @param point               Point of action\r\n   */\n\n\n  Cursor.prototype.triggerUpReal = function (point) {\n    system.requestFrame();\n    this.updatePoint(this.upPoint);\n    var interaction = getInteraction();\n\n    if ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\n      switch (this._generalBehavior) {\n        case \"zoom\":\n          this.dispatch(\"zoomended\");\n          break;\n\n        case \"select\":\n          this.dispatch(\"selectended\");\n          break;\n\n        case \"pan\":\n          this.dispatch(\"panended\");\n          interaction.setGlobalStyle(MouseCursorStyle.default);\n          break;\n      }\n\n      this.downPoint = undefined;\n      this.updateSelection();\n    }\n    /*\r\n    else {\r\n        \r\n        if(this._generalBehavior == \"select\"){\r\n            this.dispatchImmediately(\"selectended\");\r\n        }\r\n        this.dispatchImmediately(\"behaviorcanceled\");\r\n        interaction.setGlobalStyle(MouseCursorStyle.default);\r\n        this.downPoint = undefined;\r\n    }*/\n\n  };\n  /**\r\n   * Updates selection dimensions on size change.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Cursor.prototype.updateSelection = function () {};\n  /**\r\n   * Updates cursors current positions.\r\n   */\n\n\n  Cursor.prototype.getPositions = function () {\n    // positions are used by axes or series\n    this.xPosition = this.point.x / this.innerWidth;\n    this.yPosition = 1 - this.point.y / this.innerHeight;\n  };\n  /**\r\n   * Handles pointer down event so we can start zoom or selection.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n\n\n  Cursor.prototype.handleCursorDown = function (event) {\n    if (!this.interactionsEnabled || this.interactions.isTouchProtected && event.touch || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    } // Initiate blur so that whatever focused element on the page is unselected\n\n\n    $dom.blur(); // Get local point\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n\n    if (!this.fitsToBounds(local)) {\n      return;\n    }\n\n    this._downPointOrig = {\n      x: local.x,\n      y: local.y\n    }; // We need to cancel the event to prevent gestures on touch devices\n\n    if (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\n      event.event.preventDefault();\n    } // Make this happen\n\n\n    this.triggerMove(local);\n    this.triggerDown(local);\n  };\n  /**\r\n   * Determines whether Cursor should prevent default action on move.\r\n   *\r\n   * Child classes should override this as necessary.\r\n   *\r\n   * @return Prevent default?\r\n   */\n\n\n  Cursor.prototype.shouldPreventGestures = function (touch) {\n    return true;\n  };\n  /**\r\n   * Updates the coordinates of where pointer down event occurred\r\n   * (was pressed).\r\n   */\n\n\n  Cursor.prototype.updatePoint = function (point) {};\n  /**\r\n   * Handles pointer up event - finishes zoom or selection action.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event Original event\r\n   */\n\n\n  Cursor.prototype.handleCursorUp = function (event) {\n    if (!this.interactionsEnabled) {\n      return;\n    }\n\n    if (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\n      return;\n    }\n\n    var local = $utils.documentPointToSprite(event.pointer.point, this);\n\n    if (this._adapterO) {\n      this._adapterO.apply(\"cursorPoint\", local);\n    }\n\n    if (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\n      return;\n    }\n\n    if (this._stick == \"hard\" && this._stickPoint) {\n      local = this._stickPoint;\n    }\n\n    this._upPointOrig = {\n      x: local.x,\n      y: local.y\n    };\n    this.triggerMove(local);\n    this.triggerUp(local);\n  };\n\n  Object.defineProperty(Cursor.prototype, \"chart\", {\n    /**\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart;\n    },\n\n    /**\r\n     * A reference to a [[Chart]] the cursor belongs to.\r\n     *\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart = value;\n\n      if ($type.hasValue(this._chart.plotContainer)) {\n        getInteraction().lockElement(this._chart.plotContainer.interactions);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Cursor;\n}(Container);\n\nexport { Cursor };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Cursor\"] = Cursor;","map":{"version":3,"mappings":"AAAA;;;;AAIA;;;;;;;AAMA,SAASA,SAAT,QAAsF,sBAAtF;AACA,SAASC,cAAT,QAAmD,oCAAnD;AAIA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,wBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,uBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,sBAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAsFA;;;;;;;AAOA;;;;;;;;;;;AAUA;AAAA;AAAA;EAA4BC;EAuF3B;;;;;EAGA;IAAA,YAEC;IACAC,qBAAO,IAHR;IA/DA;;;;;;;IAKOC,cAAgB;MAAEC,CAAC,EAAE,CAAL;MAAQC,CAAC,EAAE;IAAX,CAAhB;IAiCP;;;;IAGUF,eAAmC,MAAnC;IA0BTA,KAAI,CAACG,SAAL,GAAiB,QAAjB,CAJD,CAMC;;IACAH,KAAI,CAACI,KAAL,GAAab,OAAO,CAAC,GAAD,CAApB;IACAS,KAAI,CAACK,MAAL,GAAcd,OAAO,CAAC,GAAD,CAArB;IACAS,KAAI,CAACM,WAAL,GAAmB,KAAnB;;IAEAN,KAAI,CAACO,IAAL,CAAU,CAAV;;IAEAP,KAAI,CAACQ,SAAL,GAAiB,IAAjB;IACAR,KAAI,CAACS,SAAL,GAAiB,IAAjB;IAEAT,KAAI,CAACU,UAAL,GAAkB,KAAlB,CAhBD,CAkBC;IACA;;IACA,IAAMC,WAAW,GAAGtB,cAAc,EAAlC;;IACAW,KAAI,CAACY,UAAL,CAAgBC,IAAhB,CAAqBF,WAAW,CAACG,IAAZ,CAAiBC,MAAjB,CAAwBC,EAAxB,CAA2B,MAA3B,EAAmChB,KAAI,CAACiB,gBAAxC,EAA0DjB,KAA1D,CAArB;;IACAA,KAAI,CAACY,UAAL,CAAgBC,IAAhB,CAAqBF,WAAW,CAACG,IAAZ,CAAiBC,MAAjB,CAAwBC,EAAxB,CAA2B,IAA3B,EAAiChB,KAAI,CAACkB,cAAtC,EAAsDlB,KAAtD,CAArB;;IACAA,KAAI,CAACY,UAAL,CAAgBC,IAAhB,CAAqBF,WAAW,CAACG,IAAZ,CAAiBC,MAAjB,CAAwBC,EAAxB,CAA2B,OAA3B,EAAoChB,KAAI,CAACmB,gBAAzC,EAA2DnB,KAA3D,CAArB,EAvBD,CAyBC;;;IACAA,KAAI,CAACoB,UAAL;;;EAEA;EAED;;;;;;;;EAMOC,oCAAP,UAAwBC,KAAxB,EAAgE;IAG/D,IAAI,CAAC,KAAKC,mBAAN,IAA8B,KAAKC,YAAL,CAAkBC,gBAAlB,IAAsCH,KAAK,CAACI,KAA9E,EAAsF;MACrF;IACA;;IAED,IAAI,CAAE,KAAKC,gBAAL,IAAyB,MAAzB,IAAmC,KAAKA,gBAAL,IAAyB,KAA7D,IAAuE,CAAC,KAAKC,SAA9E,KAA4F,CAACvC,cAAc,GAAGwC,cAAjB,CAAgCP,KAAK,CAACQ,OAAtC,EAA+C,KAAKC,KAAL,CAAWC,GAA1D,EAA+D,KAAKC,GAApE,CAAjG,EAA2K;MAC1K;MACA,IAAI,CAAC,KAAKC,QAAN,IAAkB,CAAC,KAAKC,QAA5B,EAAsC;QACrC,KAAK5B,IAAL;MACA;;MACD;IACA;;IAED,IAAI6B,KAAK,GAAW1C,MAAM,CAAC2C,qBAAP,CAA6Bf,KAAK,CAACQ,OAAN,CAAcQ,KAA3C,EAAkD,IAAlD,CAApB;;IAEA,IAAI,KAAKC,MAAL,IAAe,MAAf,IAAyB,KAAKC,WAAlC,EAA+C;MAC9CJ,KAAK,GAAG,KAAKI,WAAb;IACA;;IAED,IAAI,KAAKD,MAAL,IAAe,MAAf,IAAyB,KAAKC,WAAlC,EAA+C;MAC9C,IAAI,CAAC,KAAKC,YAAL,CAAkBL,KAAlB,CAAL,EAA+B;QAC9BA,KAAK,GAAG,KAAKI,WAAb;MACA;IACD;;IAED,IAAI,KAAKE,SAAT,EAAoB;MACnB,KAAKA,SAAL,CAAeC,KAAf,CAAqB,aAArB,EAAoCP,KAApC;IACA;;IAED,KAAKQ,WAAL,CAAiBR,KAAjB;IACA,OAAOA,KAAP;EACA,CAjCM;EAqCP;;;;;;;;;EAOUf,4BAAV,UAAmBwB,QAAnB,EAAoC;IACnC,IAAI,CAAC,KAAKN,MAAL,IAAe,MAAf,IAAyB,KAAKA,MAAL,IAAe,MAAzC,KAAoD,KAAKC,WAA7D,EAA0E;MACzE;IACA;;IACD,OAAOzC,iBAAM+C,QAAN,CAAcC,IAAd,CAAc,IAAd,EAAeF,QAAf,CAAP;EACA,CALS;EAQV;;;;;;;;;;;;;;;;;;;;;;;;;;EAwBOxB,+BAAP,UAAmBiB,KAAnB,EAAkCU,KAAlC,EAAoEC,KAApE,EAAmF;IAElFX,KAAK,CAACrC,CAAN,GAAUR,KAAK,CAACyD,KAAN,CAAYZ,KAAK,CAACrC,CAAlB,EAAqB,CAArB,CAAV;IACAqC,KAAK,CAACpC,CAAN,GAAUT,KAAK,CAACyD,KAAN,CAAYZ,KAAK,CAACpC,CAAlB,EAAqB,CAArB,CAAV;;IAEA,IAAI8C,KAAJ,EAAW;MACV,KAAKT,MAAL,GAAcS,KAAd;IACA;;IAED,IAAIA,KAAK,IAAI,MAAT,IAAmBA,KAAK,IAAI,MAAhC,EAAwC;MACvC,KAAKR,WAAL,GAAmBF,KAAnB;IACA;;IAED,KAAKa,eAAL,CAAqBb,KAArB,EAA4BW,KAA5B;EACA,CAdM;EAgBP;;;;;;;EAKU5B,mCAAV,UAA0BiB,KAA1B,EAAyCW,KAAzC,EAAwD;IACvD,IAAI,KAAKX,KAAL,CAAWrC,CAAX,IAAgBqC,KAAK,CAACrC,CAAtB,IAA2B,KAAKqC,KAAL,CAAWpC,CAAX,IAAgBoC,KAAK,CAACpC,CAAjD,IAAsD+C,KAA1D,EAAiE;MAChE,KAAKX,KAAL,GAAaA,KAAb;MACA,KAAKc,kBAAL,GAFgE,CAGhE;;MACA,IAAI,KAAKX,YAAL,CAAkBH,KAAlB,CAAJ,EAA8B;QAC7B,KAAKe,IAAL,CAAU,CAAV;MACA,CAFD,MAGK;QACJ;QACA,IAAI,CAAC,KAAKzB,SAAV,EAAqB;UACpB,KAAKrB,IAAL,CAAU,CAAV;QACA;MACD;;MAED,IAAI,KAAK+C,OAAT,EAAkB;QACjB,KAAKC,YAAL;QACA,KAAKC,QAAL,CAAc,uBAAd,EAFiB,CAEuB;MACxC;IACD;EACD,CApBS;EAsBV;;;;;;;EAKOnC,+BAAP,UAAmBiB,KAAnB,EAAgC;IAC/B,KAAKmB,eAAL,CAAqBnB,KAArB;EACA,CAFM;EAIP;;;;;;;EAKUjB,mCAAV,UAA0BiB,KAA1B,EAAuC;IACtC,QAAQ,KAAKX,gBAAb;MACC,KAAK,MAAL;QACC,KAAK+B,mBAAL,CAAyB,aAAzB;QACA;;MACD,KAAK,QAAL;QACC,KAAKA,mBAAL,CAAyB,eAAzB;QACA;;MACD,KAAK,KAAL;QACC,KAAKA,mBAAL,CAAyB,YAAzB;QACArE,cAAc,GAAGsE,cAAjB,CAAgCnE,gBAAgB,CAACoE,QAAjD;QACA;IAVF;EAYA,CAbS;EAeV;;;;;;;EAKOvC,6BAAP,UAAiBiB,KAAjB,EAA8B;IAC7B,KAAKuB,aAAL,CAAmBvB,KAAnB;EACA,CAFM;EAIP;;;;;;;EAKUjB,iCAAV,UAAwBiB,KAAxB,EAAqC;IACpCzC,MAAM,CAACiE,YAAP;IACA,KAAKC,WAAL,CAAiB,KAAKC,OAAtB;IACA,IAAIrD,WAAW,GAAGtB,cAAc,EAAhC;;IAEA,IAAII,KAAK,CAACwE,WAAN,CAAkB,KAAKC,YAAvB,EAAqC,KAAKC,cAA1C,IAA4DxD,WAAW,CAACyD,YAAZ,CAAyB,KAAK5C,YAA9B,EAA4C,cAA5C,CAAhE,EAA6H;MAC5H,QAAQ,KAAKG,gBAAb;QACC,KAAK,MAAL;UACC,KAAK6B,QAAL,CAAc,WAAd;UACA;;QAED,KAAK,QAAL;UACC,KAAKA,QAAL,CAAc,aAAd;UACA;;QAED,KAAK,KAAL;UACC,KAAKA,QAAL,CAAc,UAAd;UACA7C,WAAW,CAACgD,cAAZ,CAA2BnE,gBAAgB,CAAC6E,OAA5C;UACA;MAZF;;MAcA,KAAKzC,SAAL,GAAiB0C,SAAjB;MACA,KAAKC,eAAL;IACA;IACD;;;;;;;;;;;EAUA,CAjCS;EAmCV;;;;;;;EAKOlD,mCAAP,aACC,CADM;EAGP;;;;;EAGUA,gCAAV;IACC;IACA,KAAKmD,SAAL,GAAiB,KAAKlC,KAAL,CAAWrC,CAAX,GAAe,KAAKwE,UAArC;IACA,KAAKC,SAAL,GAAiB,IAAI,KAAKpC,KAAL,CAAWpC,CAAX,GAAe,KAAKyE,WAAzC;EACA,CAJS;EAMV;;;;;;;;EAMOtD,oCAAP,UAAwBC,KAAxB,EAAyD;IAExD,IAAI,CAAC,KAAKC,mBAAN,IAA8B,KAAKC,YAAL,CAAkBC,gBAAlB,IAAsCH,KAAK,CAACI,KAA1E,IAAoF,CAACrC,cAAc,GAAGwC,cAAjB,CAAgCP,KAAK,CAACQ,OAAtC,EAA+C,KAAKC,KAAL,CAAWC,GAA1D,EAA+D,KAAKC,GAApE,CAAzF,EAAmK;MAClK;IACA,CAJuD,CAMxD;;;IACArC,IAAI,CAACgF,IAAL,GAPwD,CASxD;;IACA,IAAIxC,KAAK,GAAW1C,MAAM,CAAC2C,qBAAP,CAA6Bf,KAAK,CAACQ,OAAN,CAAcQ,KAA3C,EAAkD,IAAlD,CAApB;;IAEA,IAAI,KAAKC,MAAL,IAAe,MAAf,IAAyB,KAAKC,WAAlC,EAA+C;MAC9CJ,KAAK,GAAG,KAAKI,WAAb;IACA;;IAED,IAAI,KAAKE,SAAT,EAAoB;MACnB,KAAKA,SAAL,CAAeC,KAAf,CAAqB,aAArB,EAAoCP,KAApC;IACA;;IAED,IAAI,CAAC,KAAKK,YAAL,CAAkBL,KAAlB,CAAL,EAA+B;MAC9B;IACA;;IAGD,KAAK+B,cAAL,GAAsB;MAAElE,CAAC,EAAEmC,KAAK,CAACnC,CAAX;MAAcC,CAAC,EAAEkC,KAAK,CAAClC;IAAvB,CAAtB,CAzBwD,CA2BxD;;IACA,IAAIoB,KAAK,CAACA,KAAN,CAAYuD,UAAZ,IAA0B,KAAKC,qBAAL,CAA2BxD,KAAK,CAACI,KAAjC,CAA1B,IAAqE,KAAKe,YAAL,CAAkBL,KAAlB,CAAzE,EAAmG;MAClGd,KAAK,CAACA,KAAN,CAAYyD,cAAZ;IACA,CA9BuD,CAgCxD;;;IACA,KAAKnC,WAAL,CAAiBR,KAAjB;IACA,KAAK4C,WAAL,CAAiB5C,KAAjB;EACA,CAnCM;EAqCP;;;;;;;;;EAOUf,yCAAV,UAAgCK,KAAhC,EAA8C;IAC7C,OAAO,IAAP;EACA,CAFS;EAIV;;;;;;EAIUL,+BAAV,UAAsBiB,KAAtB,EAAmC,CAClC,CADS;EAGV;;;;;;;;EAMOjB,kCAAP,UAAsBC,KAAtB,EAAqD;IACpD,IAAI,CAAC,KAAKC,mBAAV,EAA+B;MAC9B;IACA;;IACD,IAAI,CAAC,KAAKK,SAAN,IAAmB,CAACvC,cAAc,GAAGwC,cAAjB,CAAgCP,KAAK,CAACQ,OAAtC,EAA+C,KAAKC,KAAL,CAAWC,GAA1D,EAA+D,KAAKC,GAApE,CAAxB,EAAkG;MACjG;IACA;;IACD,IAAIG,KAAK,GAAW1C,MAAM,CAAC2C,qBAAP,CAA6Bf,KAAK,CAACQ,OAAN,CAAcQ,KAA3C,EAAkD,IAAlD,CAApB;;IAEA,IAAI,KAAKI,SAAT,EAAoB;MACnB,KAAKA,SAAL,CAAeC,KAAf,CAAqB,aAArB,EAAoCP,KAApC;IACA;;IAED,IAAI,CAAC,KAAKR,SAAN,IAAmB,CAAC,KAAKa,YAAL,CAAkB,KAAKb,SAAvB,CAAxB,EAA2D;MAC1D;IACA;;IAED,IAAI,KAAKW,MAAL,IAAe,MAAf,IAAyB,KAAKC,WAAlC,EAA+C;MAC9CJ,KAAK,GAAG,KAAKI,WAAb;IACA;;IAED,KAAK0B,YAAL,GAAoB;MAAEjE,CAAC,EAAEmC,KAAK,CAACnC,CAAX;MAAcC,CAAC,EAAEkC,KAAK,CAAClC;IAAvB,CAApB;IAEA,KAAK0C,WAAL,CAAiBR,KAAjB;IACA,KAAK6C,SAAL,CAAe7C,KAAf;EACA,CAzBM;;EAgCP8C,sBAAW7D,gBAAX,EAAW,OAAX,EAAgB;IAOhB;;;SAGA;MACC,OAAO,KAAK8D,MAAZ;IACA,CAZe;;IALhB;;;;;SAKA,UAAiBC,KAAjB,EAAsC;MACrC,KAAKD,MAAL,GAAcC,KAAd;;MACA,IAAIzF,KAAK,CAAC0F,QAAN,CAAqB,KAAKF,MAAL,CAAaG,aAAlC,CAAJ,EAAsD;QACrDjG,cAAc,GAAGkG,WAAjB,CAAmC,KAAKJ,MAAL,CAAaG,aAAb,CAA2B9D,YAA9D;MACA;IACD,CALe;oBAAA;;EAAA,CAAhB;EAaD;AAAC,CApcD,CAA4BpC,SAA5B;;;AAscA;;;;;;;AAMAE,QAAQ,CAACkG,iBAAT,CAA2B,QAA3B,IAAuCnE,MAAvC","names":["Container","getInteraction","registry","percent","MouseCursorStyle","$math","$utils","$type","$dom","system","__extends","_super","_this","x","y","className","width","height","shouldClone","hide","trackable","clickable","isMeasured","interaction","_disposers","push","body","events","on","handleCursorDown","handleCursorUp","handleCursorMove","applyTheme","Cursor","event","interactionsEnabled","interactions","isTouchProtected","touch","_generalBehavior","downPoint","isLocalElement","pointer","paper","svg","uid","isHidden","isHiding","local","documentPointToSprite","point","_stick","_stickPoint","fitsToBounds","_adapterO","apply","triggerMove","duration","hideReal","call","stick","force","round","triggerMoveReal","invalidatePosition","show","visible","getPositions","dispatch","triggerDownReal","dispatchImmediately","setGlobalStyle","grabbing","triggerUpReal","requestFrame","updatePoint","upPoint","getDistance","_upPointOrig","_downPointOrig","getHitOption","default","undefined","updateSelection","xPosition","innerWidth","yPosition","innerHeight","blur","cancelable","shouldPreventGestures","preventDefault","triggerDown","triggerUp","Object","_chart","value","hasValue","plotContainer","lockElement","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/cursors/Cursor.ts"],"sourcesContent":["/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $dom from \"../../core/utils/DOM\";\r\nimport { system } from \"../../core/System\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties {\r\n\r\n\t/**\r\n\t * Can be used to modify cursor position point dynamically using custom code.\r\n\t *\r\n\t * @since 4.9.35\r\n\t */\r\n\tcursorPoint: IPoint;\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * The third parameter - `force` (since `4.9.5`) - if set to `true` will\r\n\t * make cursor execute all of the actions associated with cursor move,\r\n\t * including line redraws, tooltip updates, etc. Useful when underlying\r\n\t * chart data is dynamically being updated.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t * @param force  Force cursor move\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\", force?: boolean): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point, force);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint, force?: boolean): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y || force) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tsystem.requestFrame();\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatch(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatch(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatch(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\t/*\r\n\t\telse {\r\n\t\t\t\r\n\t\t\tif(this._generalBehavior == \"select\"){\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}*/\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Initiate blur so that whatever focused element on the page is unselected\r\n\t\t$dom.blur();\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.downPoint && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tthis._adapterO.apply(\"cursorPoint\", local);\r\n\t\t}\r\n\r\n\t\tif (!this.downPoint || !this.fitsToBounds(this.downPoint)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n"]},"metadata":{},"sourceType":"module"}