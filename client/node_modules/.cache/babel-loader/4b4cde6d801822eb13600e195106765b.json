{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n/**\r\n * Line pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar LinePattern =\n/** @class */\nfunction (_super) {\n  __extends(LinePattern, _super);\n\n  function LinePattern() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(LinePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"gap\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(LinePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n\n      var w = this.get(\"width\", 100);\n      var h = this.get(\"height\", 100);\n      var gap = this.get(\"gap\", 0);\n      var strokeWidth = this.get(\"strokeWidth\", 1);\n\n      if (!gap) {\n        this._display.moveTo(0, 0);\n\n        this._display.lineTo(w, 0);\n      } else {\n        var step = gap + strokeWidth;\n        var count = h / step;\n\n        for (var i = -count; i < count * 2; i++) {\n          var y = Math.round(i * step - step / 2) + 0.5;\n\n          this._display.moveTo(-w, y);\n\n          this._display.lineTo(w * 2, y);\n        }\n      }\n\n      this._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n      var strokeDasharray = this.get(\"strokeDasharray\");\n\n      if ($type.isNumber(strokeDasharray)) {\n        if (strokeDasharray < 0.5) {\n          strokeDasharray = [0];\n        } else {\n          strokeDasharray = [strokeDasharray];\n        }\n      }\n\n      this._display.setLineDash(strokeDasharray);\n\n      var strokeDashoffset = this.get(\"strokeDashoffset\");\n\n      if (strokeDashoffset) {\n        this._display.setLineDashOffset(strokeDashoffset);\n      }\n\n      this._display.endStroke();\n    }\n  });\n  Object.defineProperty(LinePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinePattern\"\n  });\n  Object.defineProperty(LinePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([LinePattern.className])\n  });\n  return LinePattern;\n}(Pattern);\n\nexport { LinePattern };","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAA2D,WAA3D;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AAgBA;;;;;;AAKA;AAAA;AAAA;EAAiCC;;EAAjC;;EA2DC;;;;;;WAnDA;MACCC,iBAAMC,cAAN,CAAoBC,IAApB,CAAoB,IAApB;;MAEA,IAAI,KAAKC,OAAL,CAAa,KAAb,CAAJ,EAAyB;QACxB,KAAKC,MAAL,GAAc,IAAd;MACA;IACD;;;;;;WAED;MACCJ,iBAAMK,KAAN,CAAWH,IAAX,CAAW,IAAX;;MAEA,IAAMI,CAAC,GAAG,KAAKC,GAAL,CAAS,OAAT,EAAkB,GAAlB,CAAV;MACA,IAAMC,CAAC,GAAG,KAAKD,GAAL,CAAS,QAAT,EAAmB,GAAnB,CAAV;MACA,IAAME,GAAG,GAAG,KAAKF,GAAL,CAAS,KAAT,EAAgB,CAAhB,CAAZ;MACA,IAAMG,WAAW,GAAG,KAAKH,GAAL,CAAS,aAAT,EAAwB,CAAxB,CAApB;;MAEA,IAAI,CAACE,GAAL,EAAU;QACT,KAAKE,QAAL,CAAcC,MAAd,CAAqB,CAArB,EAAwB,CAAxB;;QACA,KAAKD,QAAL,CAAcE,MAAd,CAAqBP,CAArB,EAAwB,CAAxB;MACA,CAHD,MAIK;QACJ,IAAIQ,IAAI,GAAGL,GAAG,GAAGC,WAAjB;QACA,IAAIK,KAAK,GAAGP,CAAC,GAAGM,IAAhB;;QAEA,KAAK,IAAIE,CAAC,GAAG,CAACD,KAAd,EAAqBC,CAAC,GAAGD,KAAK,GAAG,CAAjC,EAAoCC,CAAC,EAArC,EAAyC;UACxC,IAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGF,IAAJ,GAAWA,IAAI,GAAG,CAA7B,IAAkC,GAA5C;;UACA,KAAKH,QAAL,CAAcC,MAAd,CAAqB,CAACN,CAAtB,EAAyBW,CAAzB;;UACA,KAAKN,QAAL,CAAcE,MAAd,CAAqBP,CAAC,GAAG,CAAzB,EAA4BW,CAA5B;QACA;MACD;;MAED,KAAKN,QAAL,CAAcS,SAAd,CAAwBV,WAAxB,EAAqC,KAAKH,GAAL,CAAS,OAAT,CAArC,EAAwD,KAAKA,GAAL,CAAS,cAAT,CAAxD;;MAEA,IAAIc,eAAe,GAAG,KAAKd,GAAL,CAAS,iBAAT,CAAtB;;MACA,IAAIT,KAAK,CAACwB,QAAN,CAAeD,eAAf,CAAJ,EAAqC;QACpC,IAAIA,eAAe,GAAG,GAAtB,EAA2B;UAC1BA,eAAe,GAAG,CAAC,CAAD,CAAlB;QACA,CAFD,MAGK;UACJA,eAAe,GAAG,CAACA,eAAD,CAAlB;QACA;MACD;;MACD,KAAKV,QAAL,CAAcY,WAAd,CAA0BF,eAA1B;;MAEA,IAAMG,gBAAgB,GAAG,KAAKjB,GAAL,CAAS,kBAAT,CAAzB;;MACA,IAAIiB,gBAAJ,EAAsB;QACrB,KAAKb,QAAL,CAAcc,iBAAd,CAAgCD,gBAAhC;MACA;;MAED,KAAKb,QAAL,CAAce,SAAd;IACA;;EArDDC;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0C9B,OAAO,CAAC+B,UAAR,CAAmBC,MAAnB,CAA0B,CAACC,WAAW,CAACC,SAAb,CAA1B;EAA1C;EAqDD;AAAC,CA3DD,CAAiClC,OAAjC;;SAAaiC","names":["Pattern","$type","__extends","_super","_beforeChanged","call","isDirty","_clear","_draw","w","get","h","gap","strokeWidth","_display","moveTo","lineTo","step","count","i","y","Math","round","lineStyle","strokeDasharray","isNumber","setLineDash","strokeDashoffset","setLineDashOffset","endStroke","Object","classNames","concat","LinePattern","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/render/patterns/LinePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\nimport * as $type from \"../../util//Type\";\n\nexport interface ILinePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between  lines, in pixels.\n\t *\n\t * @default 6\n\t */\n\tgap?: number;\n\n}\n\nexport interface ILinePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Line pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class LinePattern extends Pattern {\n\n\tdeclare public _settings: ILinePatternSettings;\n\tdeclare public _privateSettings: ILinePatternPrivate;\n\n\tpublic static className: string = \"LinePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([LinePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst w = this.get(\"width\", 100);\n\t\tconst h = this.get(\"height\", 100);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst strokeWidth = this.get(\"strokeWidth\", 1);\n\n\t\tif (!gap) {\n\t\t\tthis._display.moveTo(0, 0);\n\t\t\tthis._display.lineTo(w, 0);\n\t\t}\n\t\telse {\n\t\t\tlet step = gap + strokeWidth;\n\t\t\tlet count = h / step;\n\n\t\t\tfor (let i = -count; i < count * 2; i++) {\n\t\t\t\tconst y = Math.round(i * step - step / 2) + 0.5;\n\t\t\t\tthis._display.moveTo(-w, y);\n\t\t\t\tthis._display.lineTo(w * 2, y);\n\t\t\t}\n\t\t}\n\n\t\tthis._display.lineStyle(strokeWidth, this.get(\"color\"), this.get(\"colorOpacity\"));\n\n\t\tlet strokeDasharray = this.get(\"strokeDasharray\");\n\t\tif ($type.isNumber(strokeDasharray)) {\n\t\t\tif (strokeDasharray < 0.5) {\n\t\t\t\tstrokeDasharray = [0];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstrokeDasharray = [strokeDasharray]\n\t\t\t}\n\t\t}\n\t\tthis._display.setLineDash(strokeDasharray as number[]);\n\n\t\tconst strokeDashoffset = this.get(\"strokeDashoffset\");\n\t\tif (strokeDashoffset) {\n\t\t\tthis._display.setLineDashOffset(strokeDashoffset);\n\t\t}\n\n\t\tthis._display.endStroke();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}