{"ast":null,"code":"/**\r\n * Value Axis module\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Axis, AxisDataItem } from \"./Axis\";\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { MultiDisposer } from \"../../core/utils/Disposer\";\nimport { registry } from \"../../core/Registry\";\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $utils from \"../../core/utils/Utils\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar ValueAxisDataItem =\n/** @class */\nfunction (_super) {\n  __extends(ValueAxisDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ValueAxisDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ValueAxisDataItem\";\n    _this.values.value = {};\n    _this.values.endValue = {};\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  Object.defineProperty(ValueAxisDataItem.prototype, \"value\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"value\"].value;\n    },\n\n    /**\r\n     * A data point's numeric value.\r\n     *\r\n     * @param value  Value\r\n     */\n    set: function (value) {\n      this.setValue(\"value\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxisDataItem.prototype, \"endValue\", {\n    /**\r\n     * @return Value\r\n     */\n    get: function () {\n      return this.values[\"endValue\"].value;\n    },\n\n    /**\r\n     * Data point's numeric end value.\r\n     *\r\n     * @param value  End value\r\n     */\n    set: function (value) {\n      this.setValue(\"endValue\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ValueAxisDataItem;\n}(AxisDataItem);\n\nexport { ValueAxisDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar ValueAxis =\n/** @class */\nfunction (_super) {\n  __extends(ValueAxis, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function ValueAxis() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * [_stepDecimalPlaces description]\r\n     *\r\n     * @todo Description\r\n     */\n\n\n    _this._stepDecimalPlaces = 0;\n    _this._prevStepDecimalPlaces = 0;\n    _this._adjustLabelPrecision = true;\n    /**\r\n     * Base value for the axis.\r\n     */\n\n    _this._baseValue = 0;\n    /**\r\n     * Adjusted start in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._adjustedStart = 0;\n    /**\r\n     * Adjusted end in case we have breaks.\r\n     *\r\n     * @todo Description\r\n     */\n\n    _this._adjustedEnd = 1;\n    _this._extremesChanged = false;\n    _this._deltaMinMax = 1;\n    _this._dsc = false;\n    /**\r\n     * As calculating totals is expensive operation and not often needed, we\r\n     * don't do it by default.\r\n     *\r\n     * In case you use `totalPercent` or `total` in your charts, this must be set\r\n     * to `true`.\r\n     *\r\n     * @default false\r\n     * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n     */\n\n    _this.calculateTotals = false;\n    _this.className = \"ValueAxis\"; // Set field name\n\n    _this.axisFieldName = \"value\"; // Set defaults\n\n    _this.setPropertyValue(\"maxZoomFactor\", 1000);\n\n    _this.setPropertyValue(\"extraMin\", 0);\n\n    _this.setPropertyValue(\"extraMax\", 0);\n\n    _this.setPropertyValue(\"strictMinMax\", false);\n\n    _this.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\n\n    _this.setPropertyValue(\"adjustLabelPrecision\", true);\n\n    _this.setPropertyValue(\"extraTooltipPrecision\", 0);\n\n    _this.keepSelection = false;\n    _this.includeRangesInMinMax = false; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Holds reference to a function that accepts a DataItem as parameter.\r\n   *\r\n   * It can either return a fill opacity for a fill, or manipulate data item\r\n   * directly, to create various highlighting scenarios.\r\n   */\n\n\n  ValueAxis.prototype.fillRule = function (dataItem) {\n    var value = dataItem.value;\n    var axis = dataItem.component;\n\n    if (!dataItem.axisFill.disabled) {\n      // rounding in left to solve floating point number\n      if ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\n        dataItem.axisFill.__disabled = true;\n      } else {\n        dataItem.axisFill.__disabled = false;\n      }\n    }\n  };\n  /**\r\n   * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  ValueAxis.prototype.createDataItem = function () {\n    return new ValueAxisDataItem();\n  };\n  /**\r\n   * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n   *\r\n   * @return Axis break\r\n   */\n\n\n  ValueAxis.prototype.createAxisBreak = function () {\n    return new ValueAxisBreak();\n  };\n  /**\r\n   * [dataChangeUpdate description]\r\n   *\r\n   * This is a placeholder to override for extending classes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  ValueAxis.prototype.dataChangeUpdate = function () {\n    this.clearCache();\n\n    if (!this.keepSelection) {\n      if (this._start != 0 || this._end != 1) {\n        this._start = 0;\n        this._end = 1;\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    } else {\n      if (this._start != 0) {\n        this.dispatchImmediately(\"startchanged\");\n      }\n\n      if (this._end != 1) {\n        this.dispatchImmediately(\"endchanged\");\n      }\n\n      if (this._start != 0 || this._end != 1) {\n        this.dispatchImmediately(\"startendchanged\");\n      }\n    }\n\n    this._maxZoomed = this._maxDefined;\n    this._minZoomed = this._minDefined;\n    this._maxAdjusted = this._maxDefined;\n    this._minAdjusted = this._minDefined;\n  };\n  /**\r\n   * Processes data items of the related Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ValueAxis.prototype.processSeriesDataItems = function () {\n    // @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\n    if (this.calculateTotals) {\n      var series = this.series.getIndex(0);\n      var startIndex = series.startIndex;\n\n      if (series.dataItems.length > 0) {\n        if (startIndex > 0) {\n          startIndex--;\n        }\n\n        var endIndex = series.endIndex;\n\n        if (endIndex < series.dataItems.length) {\n          endIndex++;\n        }\n\n        var _loop_1 = function (i) {\n          // This has to be `var` in order to avoid garbage collection\n          var total = {};\n          var sum = {};\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_1 = series.dataItems.getIndex(i);\n\n              if (dataItem_1) {\n                $object.each(dataItem_1.values, function (key) {\n                  var value = dataItem_1.values[key].workingValue; // can not use getWorkingValue here!\n\n                  if ($type.isNumber(value)) {\n                    if (!$type.isNumber(total[key])) {\n                      total[key] = Math.abs(value);\n                    } else {\n                      total[key] += Math.abs(value);\n                    }\n\n                    if (!$type.isNumber(sum[key])) {\n                      sum[key] = value;\n                    } else {\n                      sum[key] += value;\n                    }\n                  }\n                });\n              }\n            }\n          });\n          this_1.series.each(function (series) {\n            if (!series.excludeFromTotal) {\n              var dataItem_2 = series.dataItems.getIndex(i);\n\n              if (dataItem_2) {\n                $object.each(dataItem_2.values, function (key) {\n                  var value = dataItem_2.values[key].workingValue; // can not use getWorkingValue here!\n\n                  if ($type.isNumber(value)) {\n                    dataItem_2.setCalculatedValue(key, total[key], \"total\");\n                    dataItem_2.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\n                    dataItem_2.setCalculatedValue(key, sum[key], \"sum\");\n                  }\n                });\n              }\n            }\n          });\n        };\n\n        var this_1 = this; // This has to be `var` in order to avoid garbage collection\n\n        for (var i = startIndex; i < endIndex; ++i) {\n          _loop_1(i);\n        }\n      }\n    }\n  };\n  /**\r\n   * Validates the whole axis. Causes it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   */\n\n\n  ValueAxis.prototype.validate = function () {\n    if (this.axisLength <= 0) {\n      return;\n    }\n\n    _super.prototype.validate.call(this);\n\n    this.getMinMax();\n\n    if (!$type.isNumber(this._minAdjusted)) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = null;\n      });\n    }\n\n    this.fixAxisBreaks();\n    this.calculateZoom();\n    this.validateAxisElements();\n    this.validateAxisRanges();\n    this.validateBreaks();\n    this.hideUnusedDataItems();\n    this.renderer.invalidateLayout(); // hide too close\n    //this.hideTooCloseDataItems();\n  };\n  /**\r\n   * Calculates all positions, related to axis as per current zoom.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  ValueAxis.prototype.calculateZoom = function () {\n    if ($type.isNumber(this.min) && $type.isNumber(this.max)) {\n      var min = this.positionToValue(this.start);\n      var max = this.positionToValue(this.end);\n      var differece = this.adjustDifference(min, max);\n      var minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n      this._stepDecimalPlaces = stepDecimalPlaces;\n      min = $math.round(min, stepDecimalPlaces);\n      max = $math.round(max, stepDecimalPlaces);\n      minMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\n      var step = minMaxStep.step;\n\n      if (this.syncWithAxis) {\n        var calculated = this.getCache(min + \"-\" + max);\n\n        if ($type.isNumber(calculated)) {\n          step = calculated;\n        }\n      } else {\n        min = minMaxStep.min;\n        max = minMaxStep.max;\n      }\n\n      if (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\n        this._dsc = false;\n        this._minZoomed = min;\n        this._maxZoomed = max;\n        this._step = step;\n        this.dispatchImmediately(\"selectionextremeschanged\");\n      }\n    }\n  };\n\n  ValueAxis.prototype.fixSmallStep = function (step) {\n    if (1 + step == 1) {\n      step *= 2;\n      return this.fixSmallStep(step);\n    }\n\n    return step;\n  };\n  /**\r\n   * Validates Axis elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  ValueAxis.prototype.validateAxisElements = function () {\n    var _this = this;\n\n    if ($type.isNumber(this.max) && $type.isNumber(this.min)) {\n      // first regular items\n      var value_1 = this.minZoomed - this._step * 2;\n\n      if (!this.logarithmic) {\n        value_1 = Math.floor(value_1 / this._step) * this._step;\n      } else {\n        var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n\n        if (differencePower > 1) {\n          value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E);\n        } else {\n          value_1 = Math.floor(this.minZoomed / this._step) * this._step;\n\n          if (value_1 == 0) {\n            value_1 = this.minZoomed;\n          }\n        }\n      }\n\n      var maxZoomed = this._maxZoomed + this._step;\n      this.resetIterators();\n      var dataItemsIterator_1 = this._dataItemsIterator;\n\n      if (this._step == 0) {\n        return;\n      }\n\n      this._step = this.fixSmallStep(this._step);\n      var i = 0;\n      var precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\n      this._prevStepDecimalPlaces = this._stepDecimalPlaces;\n\n      while (value_1 <= maxZoomed) {\n        var axisBreak = this.isInBreak(value_1);\n\n        if (!axisBreak) {\n          var dataItem = dataItemsIterator_1.find(function (x) {\n            return x.value === value_1;\n          });\n\n          if (dataItem.__disabled) {\n            dataItem.__disabled = false;\n          } //this.processDataItem(dataItem);\n\n\n          this.appendDataItem(dataItem);\n          dataItem.axisBreak = undefined;\n\n          if (dataItem.value != value_1 || precisionChanged) {\n            dataItem.value = value_1;\n            dataItem.text = this.formatLabel(value_1);\n\n            if (dataItem.label && dataItem.label.invalid) {\n              dataItem.label.validate();\n            }\n\n            if (dataItem.value >= this.min && dataItem.value <= this.max) {\n              if (dataItem.label) {\n                if (this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth || this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight) {\n                  this.ghostLabel.text = dataItem.label.currentText;\n                  this.ghostLabel.validate();\n                }\n              }\n            }\n          }\n\n          this.validateDataElement(dataItem);\n        }\n\n        i++;\n        var oldValue = value_1;\n\n        if (!this.logarithmic) {\n          value_1 += this._step;\n        } else {\n          var differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\n\n          if (differencePower > 1) {\n            value_1 = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\n          } else {\n            value_1 += this._step;\n          }\n        }\n\n        var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\n\n        if (stepPower < 1) {\n          // exponent is less then 1 too. Count decimals of exponent\n          var decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n          decCount = Math.min(13, decCount); // round value to avoid floating point issues\n\n          value_1 = $math.round(value_1, decCount); // ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\n\n          if (oldValue == value_1) {\n            value_1 = maxZoomed;\n            break;\n          }\n        }\n      }\n\n      var axisBreaks = this._axisBreaks;\n\n      if (axisBreaks) {\n        // breaks later\n        var renderer_1 = this.renderer;\n        $iter.each(axisBreaks.iterator(), function (axisBreak) {\n          if (axisBreak.breakSize > 0) {\n            // only add grid if gap is bigger then minGridDistance\n            if ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer_1.minGridDistance) {\n              var breakValue_1 = axisBreak.adjustedMin;\n\n              while (breakValue_1 <= axisBreak.adjustedMax) {\n                if (breakValue_1 >= axisBreak.adjustedStartValue && breakValue_1 <= axisBreak.adjustedEndValue) {\n                  var dataItem = dataItemsIterator_1.find(function (x) {\n                    return x.value === breakValue_1;\n                  });\n\n                  if (dataItem.__disabled) {\n                    dataItem.__disabled = false;\n                  } //this.processDataItem(dataItem);\n\n\n                  _this.appendDataItem(dataItem);\n\n                  dataItem.axisBreak = axisBreak;\n\n                  if (dataItem.value != breakValue_1) {\n                    dataItem.value = breakValue_1;\n                    dataItem.text = _this.formatLabel(breakValue_1);\n\n                    if (dataItem.label && dataItem.label.invalid) {\n                      dataItem.label.validate();\n                    }\n                  }\n\n                  _this.validateDataElement(dataItem);\n                }\n\n                breakValue_1 += axisBreak.adjustedStep;\n              }\n            }\n          }\n        });\n      }\n    }\n  };\n  /**\r\n   * Validates axis data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param dataItem  Data item\r\n   */\n\n\n  ValueAxis.prototype.validateDataElement = function (dataItem) {\n    _super.prototype.validateDataElement.call(this, dataItem); //dataItem.__disabled = false;\n\n\n    dataItem.itemIndex = this._axisItemCount;\n    this._axisItemCount++;\n    var renderer = this.renderer;\n    var value = dataItem.value;\n    var endValue = dataItem.endValue;\n    var position = this.valueToPosition(value);\n    dataItem.position = position;\n    var endPosition = position;\n    var fillEndPosition = this.valueToPosition(value + this._step);\n\n    if ($type.isNumber(endValue)) {\n      endPosition = this.valueToPosition(endValue);\n      fillEndPosition = endPosition;\n    } // this point is needed to calculate distance to satisfy minGridDistance\n\n\n    dataItem.point = renderer.positionToPoint(position);\n    var tick = dataItem.tick;\n\n    if (tick && !tick.disabled) {\n      renderer.updateTickElement(tick, position, endPosition);\n    }\n\n    var grid = dataItem.grid;\n\n    if (grid && !grid.disabled) {\n      renderer.updateGridElement(grid, position, endPosition);\n    }\n\n    var label = dataItem.label;\n\n    if (label && !label.disabled) {\n      renderer.updateLabelElement(label, position, endPosition);\n    }\n\n    var fill = dataItem.axisFill;\n\n    if (fill && !fill.disabled) {\n      renderer.updateFillElement(fill, position, fillEndPosition);\n\n      if (!dataItem.isRange) {\n        this.fillRule(dataItem);\n      }\n    }\n\n    if (dataItem.bullet) {\n      renderer.updateBullet(dataItem.bullet, position, endPosition);\n    }\n\n    var mask = dataItem.mask;\n\n    if (mask) {\n      renderer.updateFillElement(mask, position, fillEndPosition);\n    }\n  };\n  /**\r\n   * Formats the value according to axis' own [[NumberFormatter]].\r\n   *\r\n   * @param value  Source value\r\n   * @return Formatted value\r\n   */\n\n\n  ValueAxis.prototype.formatLabel = function (value) {\n    if (this.adjustLabelPrecision && value != 0) {\n      return this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\n    } else {\n      return this.numberFormatter.format(value);\n    }\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"basePoint\", {\n    /**\r\n     * Coordinates of the actual axis start.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Base point\r\n     */\n    get: function () {\n      var baseValue = this.baseValue;\n      var position = this.valueToPosition(baseValue);\n      var basePoint = this.renderer.positionToPoint(position);\n      return basePoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"baseValue\", {\n    /**\r\n     * @return base value\r\n     */\n    get: function () {\n      var baseValue = this._baseValue;\n\n      if (this.logarithmic) {\n        baseValue = this.min;\n      }\n\n      if (!this._adapterO) {\n        return baseValue;\n      } else {\n        return this._adapterO.apply(\"baseValue\", baseValue);\n      }\n    },\n\n    /**\r\n     * A base value.\r\n     *\r\n     * This is a threshold value that will divide \"positive\" and \"negative\"\r\n     * value ranges.\r\n     *\r\n     * Other scale-related functionality also depend on base value. E.g. stacks,\r\n     * value-dependent coloring, etc.\r\n     *\r\n     * @param value Base value\r\n     */\n    set: function (value) {\n      this._baseValue = value;\n      this.invalidateLayout();\n      this.invalidateSeries();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts a numeric value to relative position on axis\r\n   *\r\n   * An alias to `valueToPosition()`.\r\n   *\r\n   * @param value  Value\r\n   * @return Position\r\n   */\n\n  ValueAxis.prototype.anyToPosition = function (value) {\n    return this.valueToPosition(value);\n  };\n  /**\r\n   * Converts a numeric value to orientation point (x, y, angle) on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n\n\n  ValueAxis.prototype.valueToPoint = function (value) {\n    var position = this.valueToPosition(value);\n    var point = this.renderer.positionToPoint(position);\n    var angle = this.renderer.positionToAngle(position);\n    return {\n      x: point.x,\n      y: point.y,\n      angle: angle\n    };\n  };\n  /**\r\n   * Converts a numeric value to orientation (x, y, angle) point on axis\r\n   *\r\n   * @param value  Value\r\n   * @return Orientation point\r\n   */\n\n\n  ValueAxis.prototype.anyToPoint = function (value) {\n    return this.valueToPoint(value);\n  };\n  /**\r\n   * Converts a numeric value to relative position on axis.\r\n   *\r\n   * @param value  Value\r\n   * @return relative position\r\n   */\n\n\n  ValueAxis.prototype.valueToPosition = function (value) {\n    if ($type.isNumber(value)) {\n      // todo: think if possible to take previous value and do not go through all previous breaks\n      var min_1 = this.min;\n      var max_1 = this.max;\n\n      if ($type.isNumber(min_1) && $type.isNumber(max_1)) {\n        var difference = this._difference;\n        var axisBreaks = this._axisBreaks;\n\n        if (axisBreaks && axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var startValue = axisBreak.adjustedStartValue;\n            var endValue = axisBreak.adjustedEndValue;\n\n            if ($type.isNumber(startValue) && $type.isNumber(endValue)) {\n              if (value < startValue) {\n                return false;\n              }\n\n              if ($math.intersect({\n                start: startValue,\n                end: endValue\n              }, {\n                start: min_1,\n                end: max_1\n              })) {\n                // todo: check this once and set some flag in axisBreak\n                startValue = Math.max(startValue, min_1);\n                endValue = Math.min(endValue, max_1);\n                var breakSize = axisBreak.breakSize; // value to the right of break end\n\n                if (value > endValue) {\n                  min_1 += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\n                } // value to the left of break start\n                else if (value < startValue) {} // value within break\n                else {\n                  value = startValue + (value - startValue) * breakSize;\n                }\n              }\n            }\n\n            return true;\n          });\n        }\n\n        var position = void 0;\n\n        if (!this.logarithmic) {\n          position = (value - min_1) / difference;\n        } else {\n          var treatZeroAs = this.treatZeroAs;\n\n          if ($type.isNumber(treatZeroAs)) {\n            if (value <= treatZeroAs) {\n              value = treatZeroAs;\n            }\n          }\n\n          position = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E);\n        } //position = $math.round(position, 10);\n\n\n        return position;\n      }\n    }\n\n    return 0;\n  };\n  /**\r\n   * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n   */\n\n\n  ValueAxis.prototype.invalidateLabels = function () {\n    _super.prototype.invalidateLabels.call(this);\n\n    if (this.dataItems) {\n      this.dataItems.each(function (dataItem) {\n        dataItem.value = undefined;\n      });\n      this.invalidate();\n    }\n  };\n  /**\r\n   * Converts an relative position to a corresponding value within\r\n   * axis' scale.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Value\r\n   */\n\n\n  ValueAxis.prototype.positionToValue = function (position) {\n    var min = this.min;\n    var max = this.max;\n\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      var difference_1 = max - min; //no need to adjust!\n\n      var value_2 = null;\n      var axisBreaks = this._axisBreaks;\n\n      if (axisBreaks) {\n        // in case we have some axis breaks\n        if (axisBreaks.length > 0) {\n          $iter.eachContinue(axisBreaks.iterator(), function (axisBreak) {\n            var breakStartPosition = axisBreak.startPosition;\n            var breakEndPosition = axisBreak.endPosition;\n            var breakStartValue = axisBreak.adjustedStartValue;\n            var breakEndValue = axisBreak.adjustedEndValue;\n\n            if ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\n              if (breakStartValue > max) {\n                return false;\n              }\n\n              if ($math.intersect({\n                start: breakStartValue,\n                end: breakEndValue\n              }, {\n                start: min,\n                end: max\n              })) {\n                breakStartValue = $math.max(breakStartValue, min);\n                breakEndValue = $math.min(breakEndValue, max);\n                var breakSize = axisBreak.breakSize;\n                difference_1 -= (breakEndValue - breakStartValue) * (1 - breakSize); // position to the right of break end\n\n                if (position > breakEndPosition) {\n                  min += (breakEndValue - breakStartValue) * (1 - breakSize);\n                } // position to the left of break start\n                else if (position < breakStartPosition) {} // value within break\n                else {\n                  var breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\n                  value_2 = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\n                  return false;\n                }\n              }\n\n              return true;\n            }\n          });\n        }\n      }\n\n      if (!$type.isNumber(value_2)) {\n        if (this.logarithmic) {\n          value_2 = Math.pow(Math.E, (position * (Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\n        } else {\n          value_2 = position * difference_1 + min;\n        }\n      }\n\n      return value_2;\n    } //}\n\n  };\n  /**\r\n   * Converts an X coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param x  X (px)\r\n   * @return Value\r\n   */\n\n\n  ValueAxis.prototype.xToValue = function (x) {\n    return this.positionToValue(this.pointToPosition({\n      x: x,\n      y: 0\n    }));\n  };\n  /**\r\n   * Converts an Y coordinate to a relative value in axis' scale.\r\n   *\r\n   * @param y  Y (px)\r\n   * @return Value\r\n   */\n\n\n  ValueAxis.prototype.yToValue = function (y) {\n    return this.positionToValue(this.pointToPosition({\n      x: 0,\n      y: y\n    }));\n  };\n  /**\r\n   * Converts pixel coordinates to a relative position. (0-1)\r\n   *\r\n   * @param point  Coorinates (px)\r\n   * @return Position (0-1)\r\n   */\n\n\n  ValueAxis.prototype.pointToPosition = function (point) {\n    if (this.renderer instanceof AxisRendererY) {\n      return 1 - this.renderer.pointToPosition(point);\n    } else {\n      return this.renderer.pointToPosition(point);\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  ValueAxis.prototype.animateMinMax = function (min, max) {\n    return this.animate([{\n      property: \"_minAdjusted\",\n      from: this._minAdjusted,\n      to: min\n    }, {\n      property: \"_maxAdjusted\",\n      from: this._maxAdjusted,\n      to: max\n    }], this.rangeChangeDuration, this.rangeChangeEasing);\n  };\n  /**\r\n   * Calculates smallest and biggest value for the axis scale.\r\n   * @ignore\r\n   * @todo Description (review)\r\n   */\n\n\n  ValueAxis.prototype.getMinMax = function () {\n    var _this = this;\n\n    this.updateGridCount();\n    var min = Number.POSITIVE_INFINITY;\n    var max = Number.NEGATIVE_INFINITY; // only if min and max are not set from outside, we go through min and max influencers\n\n    if (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\n      this.series.each(function (series) {\n        if (!series.ignoreMinMax) {\n          // check min\n          var seriesMin = series.min(_this);\n\n          if ($type.isNumber(seriesMin) && seriesMin < min) {\n            min = seriesMin;\n          } // check max\n\n\n          var seriesMax = series.max(_this);\n\n          if ($type.isNumber(seriesMax) && seriesMax > max) {\n            max = seriesMax;\n          }\n        }\n      });\n\n      if (this.includeRangesInMinMax) {\n        this.axisRanges.each(function (range) {\n          if (!range.ignoreMinMax) {\n            var minValue = $math.min(range.value, range.endValue);\n            var maxValue = $math.max(range.value, range.endValue);\n\n            if (minValue < min || !$type.isNumber(min)) {\n              min = minValue;\n            }\n\n            if (maxValue > max || !$type.isNumber(max)) {\n              max = maxValue;\n            }\n          }\n        });\n      }\n    }\n\n    if (this.logarithmic) {\n      var treatZeroAs = this.treatZeroAs;\n\n      if ($type.isNumber(treatZeroAs)) {\n        if (min <= 0) {\n          min = treatZeroAs;\n        }\n      }\n\n      if (min <= 0) {\n        this.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\n      }\n    }\n\n    if (min == 0 && max == 0) {\n      max = 0.9;\n      min = -0.9;\n    } // if defined from outside\n\n\n    if ($type.isNumber(this._minDefined)) {\n      min = this._minDefined;\n    }\n\n    if ($type.isNumber(this._maxDefined)) {\n      max = this._maxDefined;\n    }\n\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n\n    if (!$type.isNumber(min) || !$type.isNumber(max)) {\n      return;\n    }\n\n    this._minReal = min;\n    this._maxReal = max;\n\n    if (min == Number.POSITIVE_INFINITY) {\n      min = undefined;\n    }\n\n    if (max == Number.NEGATIVE_INFINITY) {\n      max = undefined;\n    }\n\n    var dif = this.adjustDifference(min, max); // previously it was max-min, but not worked well\n\n    min = this.fixMin(min);\n    max = this.fixMax(max); // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\n\n    if (max - min <= 1 / Math.pow(10, 15)) {\n      if (max - min != 0) {\n        this._deltaMinMax = (max - min) / 2;\n      } else {\n        // the number by which we need to raise 10 to get difference\n        var exponent = Math.log(Math.abs(max)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n        var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n        power = power / 10;\n        this._deltaMinMax = power;\n      }\n\n      min -= this._deltaMinMax;\n      max += this._deltaMinMax;\n    }\n\n    min -= (max - min) * this.extraMin;\n    max += (max - min) * this.extraMax;\n    var strict = this.strictMinMax;\n\n    if ($type.isNumber(this._maxDefined)) {\n      strict = true;\n    }\n\n    var minMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    dif = max - min; //new\n    // do it for the second time (importat!)\n\n    minMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\n    min = minMaxStep.min;\n    max = minMaxStep.max; // return min max if strict\n\n    if (this.strictMinMax) {\n      if ($type.isNumber(this._minDefined)) {\n        min = this._minDefined;\n      } else {\n        min = this._minReal;\n      }\n\n      if ($type.isNumber(this._maxDefined)) {\n        max = this._maxDefined;\n      } else {\n        max = this._maxReal;\n      }\n\n      if (max - min <= 0.00000001) {\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      }\n\n      min -= (max - min) * this.extraMin;\n      max += (max - min) * this.extraMax;\n    }\n\n    if (this._adapterO) {\n      min = this._adapterO.apply(\"min\", min);\n    }\n\n    if (this._adapterO) {\n      max = this._adapterO.apply(\"max\", max);\n    }\n\n    this._step = minMaxStep.step;\n\n    if (!$type.isNumber(min) && !$type.isNumber(max)) {\n      this.start = 0;\n      this.end = 1;\n      this.renderer.labels.each(function (label) {\n        label.dataItem.text = \"\";\n      });\n    } // checking isNumber is good when all series are hidden\n\n\n    if ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\n      var animation = this._minMaxAnimation;\n\n      if (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._finalMin = min;\n          this._finalMax = max;\n          animation = this.animateMinMax(min, max);\n\n          if (animation && !animation.isFinished()) {\n            animation.events.on(\"animationprogress\", this.validateDataItems, this);\n            animation.events.on(\"animationended\", function () {\n              //this.validateDataItems();\n              _this.series.each(function (series) {\n                series.validate();\n              });\n\n              _this.validateDataItems();\n\n              _this.handleSelectionExtremesChange();\n            });\n            this._minMaxAnimation = animation;\n          } else {\n            this.series.each(function (series) {\n              series.invalidate();\n            });\n          }\n\n          this.validateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n          this.handleSelectionExtremesChange();\n        }\n      } else {\n        if (animation && !animation.isFinished() && this._finalMax == max && this._finalMin == min) {\n          return;\n        } else {\n          this._minAdjusted = min;\n          this._maxAdjusted = max;\n          this._finalMin = min;\n          this._finalMax = max;\n          this.invalidateDataItems();\n          this.dispatchImmediately(\"extremeschanged\");\n        }\n      }\n    }\n\n    this._extremesChanged = false;\n    this._difference = this.adjustDifference(min, max);\n  };\n  /**\r\n   * Adjusts the minimum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n\n\n  ValueAxis.prototype.fixMin = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts the maximum value.\r\n   *\r\n   * This is a placeholder method for extending classes to override.\r\n   *\r\n   * For numeric values this does nothing, however for more complex types, like\r\n   * dates, it may be necessary to adjust.\r\n   *\r\n   * @param value  Value\r\n   * @return Adjusted value\r\n   */\n\n\n  ValueAxis.prototype.fixMax = function (value) {\n    return value;\n  };\n  /**\r\n   * Adjusts actual min and max scale values so that the axis starts and ends\r\n   * at \"nice\" values, unless `strictMinMax` is set.\r\n   *\r\n   * The `difference` can be something else than `max - min`, because of the\r\n   * axis breaks.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param min        [description]\r\n   * @param max        [description]\r\n   * @param difference [description]\r\n   * @param gridCount  [description]\r\n   * @param strictMode [description]\r\n   * @return [description]\r\n   */\n\n\n  ValueAxis.prototype.adjustMinMax = function (min, max, difference, gridCount, strictMode) {\n    // will fail if 0\n    if (gridCount <= 1) {\n      gridCount = 1;\n    }\n\n    gridCount = Math.round(gridCount);\n    var initialMin = min;\n    var initialMax = max; // in case min and max is the same, use max\n\n    if (difference === 0) {\n      difference = Math.abs(max);\n    } // the number by which we need to raise 10 to get difference\n\n\n    var exponent = Math.log(Math.abs(difference)) * Math.LOG10E; // here we find a number which is power of 10 and has the same count of numbers as difference has\n\n    var power = Math.pow(10, Math.floor(exponent)); // reduce this number by 10 times\n\n    power = power / 10;\n    var extra = power;\n\n    if (strictMode) {\n      extra = 0;\n    }\n\n    if (!this.logarithmic) {\n      // round down min\n      if (strictMode) {\n        min = Math.floor(min / power) * power; // round up max\n\n        max = Math.ceil(max / power) * power;\n      } else {\n        min = Math.ceil(min / power) * power - extra; // round up max\n\n        max = Math.floor(max / power) * power + extra;\n      } // don't let min go below 0 if real min is >= 0\n\n\n      if (min < 0 && initialMin >= 0) {\n        min = 0;\n      } // don't let max go above 0 if real max is <= 0\n\n\n      if (max > 0 && initialMax <= 0) {\n        max = 0;\n      }\n    } else {\n      if (min <= 0) {\n        //throw Error(\"Logarithmic value axis can not have values <= 0.\");\n        min = this.baseValue;\n      } // @todo: think of a better way or to restrict zooming when no series are selected\n\n\n      if (min == Infinity) {\n        min = 1;\n      }\n\n      if (max == -Infinity) {\n        max = 10;\n      }\n\n      if (this.strictMinMax) {\n        if (this._minDefined > 0) {\n          min = this._minDefined;\n        } else {\n          min = min;\n        }\n\n        if (this._maxDefined > 0) {\n          max = max;\n        }\n      } else {\n        min = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\n        max = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\n      }\n    } // repeat diff, exponent and power again with rounded values\n    //difference = this.adjustDifference(min, max);\n\n    /*\r\n              if(min > initialMin){\r\n                min = initialMin;\r\n            }\r\n              if(max < initialMax){\r\n                max = initialMax;\r\n            }\r\n    */\n\n\n    exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    power = Math.pow(10, Math.floor(exponent));\n    power = power / 10; // approximate difference between two grid lines\n\n    var step = Math.ceil(difference / gridCount / power) * power;\n    var stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E)); // TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\n    // the step should divide by  2, 5, and 10.\n\n    var stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n\n    if (stepDivisor > 5) {\n      stepDivisor = 10;\n    } else if (stepDivisor <= 5 && stepDivisor > 2) {\n      stepDivisor = 5;\n    } // now get real step\n\n\n    step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n\n    if (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\n      step = $math.ceil(step, this.maxPrecision);\n    }\n\n    var decCount = 0; // in case numbers are smaller than 1\n\n    if (stepPower < 1) {\n      // exponent is less then 1 too. Count decimals of exponent\n      decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1; // round step\n\n      step = $math.round(step, decCount);\n    }\n\n    if (!this.logarithmic) {\n      // final min and max\n      var minCount = Math.floor(min / step);\n      min = $math.round(step * minCount, decCount);\n      var maxCount = void 0;\n\n      if (!strictMode) {\n        maxCount = Math.ceil(max / step);\n      } else {\n        maxCount = Math.floor(max / step);\n      }\n\n      if (maxCount == minCount) {\n        maxCount++;\n      }\n\n      max = $math.round(step * maxCount, decCount);\n\n      if (max < initialMax) {\n        max = max + step;\n      }\n\n      if (min > initialMin) {\n        min = min - step;\n      }\n    }\n\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"min\", {\n    /**\r\n     * @return Min value\r\n     */\n    get: function () {\n      var min = this._minAdjusted;\n\n      if (!$type.isNumber(min)) {\n        min = this._minDefined;\n      }\n\n      return min;\n    },\n\n    /**\r\n     * A minimum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Min value\r\n     */\n    set: function (value) {\n      if (this._minDefined != value) {\n        this._minDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"minDefined\", {\n    /**\r\n     * Min value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Min value\r\n     */\n    get: function () {\n      return this._minDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxDefined\", {\n    /**\r\n     * Max value as defined by user's code, not auto-calculated.\r\n     *\r\n     * @readonly\r\n     * @return Man value\r\n     */\n    get: function () {\n      return this._maxDefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMin\", {\n    /**\r\n     * @return {number}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMin\");\n    },\n\n    /**\r\n     * Allows relatively adjusting minimum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n     * we asked to expand minimum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMin\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraMax\", {\n    /**\r\n     * @return Min multiplier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraMax\");\n    },\n\n    /**\r\n     * Allows relatively adjusting maximum value of the axis' scale.\r\n     *\r\n     * The value is relative to the actual range of values currently displayed\r\n     * on the axis.\r\n     *\r\n     * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n     * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n     * we asked to expand maximum value by 50% (0.5).\r\n     *\r\n     * NOTE: this setting is not compatible with `strictMinMax`.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraMax\", value)) {\n        this.invalidateDataItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"step\", {\n    /**\r\n     * Current calculated delta in values between two adjacent grid lines (step).\r\n     *\r\n     * This is a read-only value and cannot be used to set actual step.\r\n     *\r\n     * @readonly\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._step;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"max\", {\n    /**\r\n     * @return Max value\r\n     */\n    get: function () {\n      var max = this._maxAdjusted;\n\n      if (!$type.isNumber(max)) {\n        max = this._maxDefined;\n      }\n\n      return max;\n    },\n\n    /**\r\n     * A maximum value for the axis scale.\r\n     *\r\n     * This value might be auto-adjusted by the Axis in order to accomodate the\r\n     * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n     *\r\n     * The above might be overridden by `strictMinMax` which will force exact\r\n     * user-defined min and max values to be used for scale.\r\n     *\r\n     * @param value  Max value\r\n     */\n    set: function (value) {\n      if (this._maxDefined != value) {\n        this._maxDefined = value;\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"adjustLabelPrecision\", {\n    /**\r\n     * @return Adjust precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"adjustLabelPrecision\");\n    },\n\n    /**\r\n     * By default the axis will adjust precision of all numbers to match number\r\n     * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n     *\r\n     * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n     * precision or number format settings are set.\r\n     *\r\n     * IMPORTANT: This setting will be ignored if your number format uses\r\n     * modifiers, e.g. `\"#a\"`.\r\n     *\r\n     * @default true\r\n     * @since 4.9.14\r\n     * @param  value  Adjust precision\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Used for the Series to register itself as the user of this Axis.\r\n   *\r\n   * This will also decorate both the Series and Axis with event handlers, used\r\n   * to redraw on Axis position/zoom change.\r\n   *\r\n   * A disposer for those events is returned, so that they can be disposed\r\n   * together with Series.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param series  Series\r\n   * @return Disposer for events\r\n   */\n\n  ValueAxis.prototype.registerSeries = function (series) {\n    return new MultiDisposer([_super.prototype.registerSeries.call(this, series), series.events.on(\"extremeschanged\", this.handleExtremesChange, this, false), series.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false), this.events.on(\"extremeschanged\", series.invalidate, series, false)]);\n  };\n  /**\r\n   * Perform tasks after Axis zoom.\r\n   */\n\n\n  ValueAxis.prototype.handleSelectionExtremesChange = function () {\n    var _this = this;\n\n    var selectionMin;\n    var selectionMax;\n    var allHidden = true;\n    $iter.each(this.series.iterator(), function (series) {\n      if (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\n        if (series.visible && !series.isHiding) {\n          allHidden = false;\n        }\n\n        var seriesSelectionMin = series.selectionMin(_this);\n        var seriesSelectionMax = series.selectionMax(_this);\n\n        if ($type.isNumber(seriesSelectionMin)) {\n          if (!$type.isNumber(selectionMin) || seriesSelectionMin < selectionMin) {\n            selectionMin = seriesSelectionMin;\n          }\n        } // check max\n\n\n        if ($type.isNumber(seriesSelectionMax)) {\n          if (!$type.isNumber(selectionMax) || seriesSelectionMax > selectionMax) {\n            selectionMax = seriesSelectionMax;\n          }\n        }\n      }\n    });\n\n    if (this.includeRangesInMinMax) {\n      this.axisRanges.each(function (range) {\n        if (!range.ignoreMinMax) {\n          var minValue = $math.min(range.value, range.endValue);\n          var maxValue = $math.max(range.value, range.endValue);\n\n          if (minValue < selectionMin) {\n            selectionMin = minValue;\n          }\n\n          if (maxValue > selectionMax) {\n            selectionMax = maxValue;\n          }\n        }\n      });\n    } // this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\n    //$iter.each(this.series.iterator(), (series) => {\n    //\tif (!series.appeared) {\n    //\t\tallHidden = true;\n    //\t}\n    //})\n\n\n    if ($type.isNumber(this._minDefined)) {\n      if (this.strictMinMax) {\n        selectionMin = this._minDefined;\n      } else {\n        selectionMin = this.min;\n      }\n    } else if (this.strictMinMax) {\n      selectionMin = this._minReal;\n    }\n\n    if ($type.isNumber(this._maxDefined)) {\n      if (this.strictMinMax) {\n        selectionMax = this._maxDefined;\n      } else {\n        selectionMax = this.max;\n      }\n    } else if (this.strictMinMax) {\n      selectionMax = this._maxReal;\n    }\n\n    if (selectionMin == selectionMax) {\n      selectionMin -= this._deltaMinMax;\n      selectionMax += this._deltaMinMax;\n      var minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\n      selectionMin = minMaxStep2.min;\n      selectionMax = minMaxStep2.max;\n    }\n\n    var dif = this.adjustDifference(selectionMin, selectionMax);\n    var minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    selectionMin -= (selectionMax - selectionMin) * this.extraMin;\n    selectionMax += (selectionMax - selectionMin) * this.extraMax;\n    selectionMin = $math.fitToRange(selectionMin, this.min, this.max);\n    selectionMax = $math.fitToRange(selectionMax, this.min, this.max); // do it for the second time !important\n\n    dif = this.adjustDifference(selectionMin, selectionMax);\n    minMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n\n    if (this.strictMinMax) {\n      selectionMin = $math.max(selectionMin, this._minDefined);\n      selectionMax = $math.min(selectionMax, this._maxDefined);\n    }\n\n    var step = minMaxStep.step;\n\n    if (this.syncWithAxis) {\n      minMaxStep = this.syncAxes(selectionMin, selectionMax, step);\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n      this.invalidate();\n    }\n\n    step = minMaxStep.step; // needed because of grouping\n\n    this._difference = this.adjustDifference(this.min, this.max);\n    var start = this.valueToPosition(selectionMin);\n    var end = this.valueToPosition(selectionMax); // in case all series are hidden or hiding, full zoomout\n\n    if (allHidden && !this.syncWithAxis) {\n      start = 0;\n      end = 1;\n    }\n\n    var declination = 0;\n\n    if (this.syncWithAxis) {\n      declination = 5;\n      this.setCache(selectionMin + \"-\" + selectionMax, step);\n    } else {\n      if (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\n        this._dsc = true;\n      }\n\n      this._step = step;\n      this._minZoomed = selectionMin;\n      this._maxZoomed = selectionMax;\n    }\n\n    if (!this.keepSelection) {\n      this.zoom({\n        start: start,\n        end: end\n      }, false, false, declination);\n    }\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"strictMinMax\", {\n    /**\r\n     * @return Use exact values?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strictMinMax\");\n    },\n\n    /**\r\n     * Indicates whether to blindly use exact `min` and `max` values set by user\r\n     * when generating Axis scale.\r\n     *\r\n     * If not set, the Axis might slightly adjust those values to accomodate a\r\n     * better looking grid.\r\n     *\r\n     * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n     * will result in fixing the scale of the axis to actual lowest and highest\r\n     * values in the series within currently selected scope.\r\n     *\r\n     * @default false\r\n     * @param value Use exact values?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strictMinMax\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"logarithmic\", {\n    /**\r\n     * @return Logarithmic scale?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"logarithmic\");\n    },\n\n    /**\r\n     * Indicates if this axis should use a logarithmic scale.\r\n     *\r\n     * Please note that logarithmic axis can **only** accommodate values bigger\r\n     * than zero.\r\n     *\r\n     * Having zero or negative values will result in error and failure of the\r\n     * whole chart.\r\n     *\r\n     * @param value Logarithmic scale?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"logarithmic\", value)) {\n        this.invalidate();\n        this.series.each(function (series) {\n          series.invalidateDataItems();\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"keepSelection\", {\n    /**\r\n     * @return Preseve zoom after data update?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"keepSelection\");\n    },\n\n    /**\r\n     * Indicates if a current selection (zoom) should be kept across data updates.\r\n     *\r\n     * If your axis is zoomed while chart's data is updated, the axis will try\r\n     * to retain the same start and end values.\r\n     *\r\n     * You can also use this to initially pre-zoom axis:\r\n     *\r\n     * ```TypeScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JavaScript\r\n     * axis.keepSelection = true;\r\n     * axis.start = 0.5;\r\n     * axis.end = 0.7;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   \"xAxes\": [{\r\n     *     // ...\r\n     *     \"keepSelection\": true,\r\n     *     \"start\": 0.5,\r\n     *     \"end\": 0.7\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * The above will start the chart zoomed from the middle of the actual scope\r\n     * to 70%.\r\n     *\r\n     * @since 4.1.1\r\n     * @default false\r\n     * @param  value  Preseve zoom after data update?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"keepSelection\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"includeRangesInMinMax\", {\n    /**\r\n     * @return Include ranges?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"includeRangesInMinMax\");\n    },\n\n    /**\r\n     * If set to `true`, values of axis ranges will be included when calculating\r\n     * range of values / scale of the [[ValueAxis]].\r\n     *\r\n     * @default false\r\n     * @since 4.4.9\r\n     * @param  value  Include ranges?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"includeRangesInMinMax\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxPrecision\", {\n    /**\r\n     * @return max precision\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxPrecision\");\n    },\n\n    /**\r\n     * Maximum number of decimals to allow when placing grid lines and labels\r\n     * on axis.\r\n     *\r\n     * Set it to `0` (zero) to force integer-only axis labels.\r\n     *\r\n     * @param {number}\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"extraTooltipPrecision\", {\n    /**\r\n     * @return Extra decimals\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"extraTooltipPrecision\");\n    },\n\n    /**\r\n     * This setting allows using bigger precision for numbers displayed in axis\r\n     * tooltip.\r\n     *\r\n     * Please note that this setting indicates additional decimal places to\r\n     * automatically-calculated axis number precision.\r\n     *\r\n     * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n     * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n     * like 0.12, 0.25, etc. (two decimal places).\r\n     *\r\n     * @default 0\r\n     * @since 4.8.3\r\n     * @param  value  Extra decimals\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\n        this.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Invalidates axis data items when series extremes change\r\n   */\n\n  ValueAxis.prototype.handleExtremesChange = function () {\n    var _this = this;\n\n    this._extremesChanged = true;\n    this.getMinMax();\n\n    if (this.ghostLabel) {\n      var mw_1 = 0;\n      this.dataItems.each(function (dataItem) {\n        if (dataItem.label && dataItem.label.pixelWidth > mw_1) {\n          _this.ghostLabel.text = dataItem.label.currentText;\n        }\n      });\n    }\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  ?\r\n   * @return X coordinate (px)\r\n   */\n\n\n  ValueAxis.prototype.getX = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\n  };\n  /**\r\n   * Returns the X coordinate for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  ?\r\n   * @return           Relative position\r\n   */\n\n\n  ValueAxis.prototype.getPositionX = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueX\";\n    }\n\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns the Y coordinate for series' data item's value.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @return Y coordinate (px)\r\n   */\n\n\n  ValueAxis.prototype.getY = function (dataItem, key, location, stackKey, range) {\n    return this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\n  };\n  /**\r\n   * Returns relative position on axis for series' data item's value.\r\n   *\r\n   * @since 4.5.14\r\n   * @param  dataItem  Data item\r\n   * @param  key       Data field to get value from\r\n   * @param  location  Location (0-1)\r\n   * @param  stackKey  Stack ID\r\n   * @return           Relative position\r\n   */\n\n\n  ValueAxis.prototype.getPositionY = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n\n    if (!$type.hasValue(stackKey)) {\n      stackKey = \"valueY\";\n    }\n\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n\n      if (this.logarithmic) {\n        if (stack > 0) {\n          value = 0;\n        }\n      }\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return position;\n  };\n  /**\r\n   * Returns an angle for series data item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (review)\r\n   * @param dataItem  Data item\r\n   * @param key       Data field to get value from\r\n   * @param location  Location (0-1)\r\n   * @param stackKey  Stack ID\r\n   * @param range Range to fit in\r\n   * @return Angle\r\n   */\n\n\n  ValueAxis.prototype.getAngle = function (dataItem, key, location, stackKey, range) {\n    var value = dataItem.getWorkingValue(key);\n    var stack = dataItem.getValue(stackKey, \"stack\");\n\n    if (!$type.isNumber(value)) {\n      value = this.baseValue;\n    }\n\n    var position = this.valueToPosition(value + stack);\n\n    if (range) {\n      position = $math.fitToRange(position, range.start, range.end);\n    }\n\n    return this.positionToAngle(position);\n  };\n  /**\r\n   * [getAnyRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param start     [description]\r\n   * @param end       [description]\r\n   * @param location  [description]\r\n   * @return [description]\r\n   */\n\n\n  ValueAxis.prototype.getAnyRangePath = function (start, end, location) {\n    var startPosition = this.valueToPosition(start);\n    var endPosition = this.valueToPosition(end);\n    return this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\n  };\n  /**\r\n   * Returns text to show in a axis tooltip, based on specific position within\r\n   * axis.\r\n   *\r\n   * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n   * chart, or explicitly for this Axis.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (px)\r\n   * @return Label (numeric value)\r\n   */\n\n\n  ValueAxis.prototype.getTooltipText = function (position) {\n    var value = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\n    var valueStr = this.tooltip.numberFormatter.format(value);\n\n    if (!this._adapterO) {\n      return valueStr;\n    } else {\n      return this._adapterO.apply(\"getTooltipText\", valueStr);\n    }\n  };\n  /**\r\n   * Zooms axis to specific values.\r\n   *\r\n   * @param startValue      Start value\r\n   * @param endValue        End value\r\n   * @param skipRangeEvent  Do not invoke events\r\n   * @param instantly       Do not play zoom animations\r\n   */\n\n\n  ValueAxis.prototype.zoomToValues = function (startValue, endValue, skipRangeEvent, instantly) {\n    var start = (startValue - this.min) / (this.max - this.min);\n    var end = (endValue - this.min) / (this.max - this.min);\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"minZoomed\", {\n    /**\r\n     * A smallest value in axis scale within current zoom.\r\n     *\r\n     * @return Min zoom value\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.max(this.min, this._minZoomed);\n      } else {\n        return this._minZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"maxZoomed\", {\n    /**\r\n     * A biggest value in axis scale within current zoom.\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this.syncWithAxis) {\n        return $math.min(this.max, this._maxZoomed);\n      } else {\n        return this._maxZoomed;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates positioning of Axis breaks after something changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ValueAxis.prototype.fixAxisBreaks = function () {\n    var _this = this;\n\n    _super.prototype.fixAxisBreaks.call(this);\n\n    var axisBreaks = this._axisBreaks;\n\n    if (axisBreaks && axisBreaks.length > 0) {\n      // process breaks\n      axisBreaks.each(function (axisBreak) {\n        var startValue = axisBreak.adjustedStartValue;\n        var endValue = axisBreak.adjustedEndValue; // break difference\n\n        var axisBreakDif = endValue - startValue;\n\n        var axisBreakGridCount = Math.ceil(axisBreakDif * axisBreak.breakSize) * _this._gridCount / (_this.max - _this.min); // calculate min, max and step for axis break\n\n\n        var breakMinMaxStep = _this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\n\n        axisBreak.adjustedStep = breakMinMaxStep.step;\n        axisBreak.adjustedMin = breakMinMaxStep.min;\n        axisBreak.adjustedMax = breakMinMaxStep.max;\n      });\n    }\n\n    this._difference = this.adjustDifference(this.min, this.max);\n  };\n  /**\r\n   * Returns value based on position.\r\n   *\r\n   * Please note that `position` represents position within axis which may be\r\n   * zoomed and not correspond to Cursor's `position`.\r\n   *\r\n   * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n   * @param position  Relative position on axis (0-1)\r\n   * @return Position label\r\n   */\n\n\n  ValueAxis.prototype.getPositionLabel = function (position) {\n    var value = this.positionToValue(position);\n    return this.numberFormatter.format(value);\n  };\n  /**\r\n   * Shows Axis tooltip at specific value\r\n   *\r\n   * @param value Value\r\n   */\n\n\n  ValueAxis.prototype.showTooltipAt = function (value) {\n    this.showTooltipAtPosition(this.valueToPosition(value));\n  };\n  /**\r\n   * Copies all properties and related data from a different instance of Axis.\r\n   *\r\n   * @param source Source Axis\r\n   */\n\n\n  ValueAxis.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.min = source.min;\n    this.max = source.max;\n    this.calculateTotals = source.calculateTotals;\n    this._baseValue = source.baseValue;\n  };\n\n  Object.defineProperty(ValueAxis.prototype, \"syncWithAxis\", {\n    /**\r\n     * @return Target axis\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"syncWithAxis\");\n    },\n\n    /**\r\n     * Enables syncing of grid with another axis.\r\n     *\r\n     * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n     * to maintain its scale in such way that its grid matches target axis grid.\r\n     *\r\n     * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n     * own risk, as it may not work in 100% of the scenarios.\r\n     *\r\n     * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n     * `sequencedInterpolation` settings.\r\n     *\r\n     * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n     * you do not add a scrollbar in the same direction as synced axes. For\r\n     * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n     * your chart. It will create anomalies when used.\r\n     *\r\n     * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n     * its `behavior` set to either `zoomY` or `zoomXY`.\r\n     *\r\n     * @since 4.8.1\r\n     * @param  axis  Target axis\r\n     */\n    set: function (axis) {\n      var _this = this;\n\n      if (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\n        if (axis) {\n          this._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\n\n          this._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\n\n          this._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\n\n          this.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\n          this.events.on(\"maxsizechanged\", function () {\n            _this.clearCache();\n\n            _this._disposers.push(registry.events.once(\"exitframe\", function () {\n              _this.handleSelectionExtremesChange();\n            }));\n          }, this, false);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValueAxis.prototype, \"treatZeroAs\", {\n    /**\r\n     * @return Zero replacement value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"treatZeroAs\");\n    },\n\n    /**\r\n     * If set, zero values will be treated as this value.\r\n     *\r\n     * It is useful if you need to use data with zero-values on a logarithmic\r\n     * axis scale.\r\n     *\r\n     * @since 4.9.34\r\n     * @param  value  Zero replacement value\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"treatZeroAs\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n\n  ValueAxis.prototype.syncAxes = function (min, max, step) {\n    var axis = this.syncWithAxis;\n\n    if (axis) {\n      if (!$type.isNumber(min)) {\n        min = this.min;\n      }\n\n      if (!$type.isNumber(max)) {\n        max = this.max;\n      }\n\n      if (!$type.isNumber(step)) {\n        step = this._step;\n      }\n\n      var count = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\n      var currentCount = Math.round((max - min) / step);\n\n      if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n        var synced = false;\n        var c = 0;\n        var diff = (max - min) * 0.01;\n        var omin = min;\n        var omax = max;\n        var ostep = step;\n\n        while (synced != true) {\n          synced = this.checkSync(omin, omax, ostep, count);\n          c++;\n\n          if (c > 1000) {\n            synced = true;\n          }\n\n          if (!synced) {\n            //omin = min - diff * c;\n            if (c / 3 == Math.round(c / 3)) {\n              omin = min - diff * c;\n\n              if (min >= 0 && omin < 0) {\n                omin = 0;\n              }\n            } else {\n              omax = max + diff * c;\n\n              if (omax <= 0 && omax > 0) {\n                omax = 0;\n              }\n            }\n\n            var minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\n            omin = minMaxStep.min;\n            omax = minMaxStep.max;\n            ostep = minMaxStep.step;\n          } else {\n            min = omin;\n            max = omax;\n            step = ostep;\n          }\n        }\n      }\n    }\n\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  };\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n\n\n  ValueAxis.prototype.checkSync = function (min, max, step, count) {\n    var currentCount = (max - min) / step;\n\n    for (var i = 1; i < count; i++) {\n      if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  ValueAxis.prototype.processConfig = function (config) {\n    if (config) {\n      // Set up axes\n      if ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\n        if (this.map.hasKey(config.syncWithAxis)) {\n          config.syncWithAxis = this.map.getKey(config.syncWithAxis);\n        } else {\n          this.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\n          delete config.xAxis;\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return ValueAxis;\n}(Axis);\n\nexport { ValueAxis };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;","map":{"version":3,"mappings":"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","names":["Axis","AxisDataItem","AxisRendererY","MultiDisposer","registry","ValueAxisBreak","$math","$iter","$object","$type","$utils","__extends","_super","_this","className","values","value","endValue","applyTheme","Object","ValueAxisDataItem","setValue","axisFieldName","setPropertyValue","Number","MAX_VALUE","keepSelection","includeRangesInMinMax","ValueAxis","dataItem","axis","component","axisFill","disabled","round","step","Math","__disabled","clearCache","_start","_end","dispatchImmediately","_maxZoomed","_maxDefined","_minZoomed","_minDefined","_maxAdjusted","_minAdjusted","calculateTotals","series","getIndex","startIndex","dataItems","length","endIndex","i","total","sum","this_1","each","excludeFromTotal","dataItem_1","key","workingValue","isNumber","abs","dataItem_2","setCalculatedValue","axisLength","validate","call","getMinMax","fixAxisBreaks","calculateZoom","validateAxisElements","validateAxisRanges","validateBreaks","hideUnusedDataItems","renderer","invalidateLayout","min","max","positionToValue","start","end","differece","adjustDifference","minMaxStep","adjustMinMax","_gridCount","stepDecimalPlaces","decimalPlaces","_stepDecimalPlaces","syncWithAxis","calculated","getCache","_step","_dsc","fixSmallStep","value_1","minZoomed","logarithmic","floor","differencePower","log","LOG10E","pow","maxZoomed","resetIterators","dataItemsIterator_1","_dataItemsIterator","precisionChanged","_prevStepDecimalPlaces","axisBreak","isInBreak","find","x","appendDataItem","undefined","text","formatLabel","label","invalid","axisLetter","measuredWidth","ghostLabel","measuredHeight","currentText","validateDataElement","oldValue","stepPower","decCount","axisBreaks","_axisBreaks","renderer_1","iterator","breakSize","getDistance","startPoint","endPoint","minGridDistance","breakValue_1","adjustedMin","adjustedMax","adjustedStartValue","adjustedEndValue","adjustedStep","itemIndex","_axisItemCount","position","valueToPosition","endPosition","fillEndPosition","point","positionToPoint","tick","updateTickElement","grid","updateGridElement","updateLabelElement","fill","updateFillElement","isRange","fillRule","bullet","updateBullet","mask","adjustLabelPrecision","numberFormatter","format","baseValue","basePoint","_baseValue","_adapterO","apply","invalidateSeries","angle","positionToAngle","y","valueToPoint","min_1","max_1","difference","_difference","eachContinue","startValue","intersect","treatZeroAs","invalidateLabels","invalidate","difference_1","value_2","breakStartPosition","startPosition","breakEndPosition","breakStartValue","breakEndValue","breakPosition","E","pointToPosition","animate","property","from","to","rangeChangeDuration","rangeChangeEasing","updateGridCount","POSITIVE_INFINITY","NEGATIVE_INFINITY","ignoreMinMax","seriesMin","seriesMax","axisRanges","range","minValue","maxValue","raiseCriticalError","Error","_minReal","_maxReal","dif","fixMin","fixMax","_deltaMinMax","exponent","power","extraMin","extraMax","strict","strictMinMax","labels","animation","_minMaxAnimation","_extremesChanged","inited","isFinished","_finalMax","_finalMin","animateMinMax","events","on","validateDataItems","handleSelectionExtremesChange","invalidateDataItems","gridCount","strictMode","initialMin","initialMax","extra","ceil","Infinity","stepDivisor","maxPrecision","minCount","maxCount","getPropertyValue","registerSeries","handleExtremesChange","selectionMin","selectionMax","allHidden","isHidden","outOfRange","visible","isHiding","seriesSelectionMin","seriesSelectionMax","minMaxStep2","fitToRange","syncAxes","declination","setCache","zoom","mw_1","pixelWidth","location","stackKey","getPositionX","getWorkingValue","hasValue","stack","getValue","getPositionY","getPositionRangePath","extraTooltipPrecision","valueStr","tooltip","skipRangeEvent","instantly","axisBreakDif","axisBreakGridCount","breakMinMaxStep","showTooltipAtPosition","source","copyFrom","_disposers","push","once","count","currentCount","synced","c","diff","omin","omax","ostep","checkSync","config","isString","map","hasKey","getKey","processingErrors","xAxis","processConfig","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/ValueAxis.ts"],"sourcesContent":["/**\r\n * Value Axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { IDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ValueAxisBreak } from \"./ValueAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ValueAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ValueAxisDataItem extends AxisDataItem {\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ValueAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxisDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\t\tthis.values.endValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A data point's numeric value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values[\"value\"].value;\r\n\t}\r\n\r\n\t/**\r\n\t * Data point's numeric end value.\r\n\t *\r\n\t * @param value  End value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tthis.setValue(\"endValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\treturn this.values[\"endValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n */\r\nexport interface IMinMaxStep {\r\n\tmin: number;\r\n\tmax: number;\r\n\tstep: number;\r\n}\r\n\r\n/**\r\n * Defines data fields for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisDataFields extends IAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisProperties extends IAxisProperties {\r\n\tstrictMinMax?: boolean;\r\n\tlogarithmic?: boolean;\r\n\tmaxPrecision?: number;\r\n\tadjustLabelPrecision?: boolean;\r\n\textraTooltipPrecision?: number;\r\n\textraMin?: number;\r\n\textraMax?: number;\r\n\tkeepSelection?: boolean;\r\n\tincludeRangesInMinMax?: boolean;\r\n\tsyncWithAxis?: ValueAxis;\r\n\ttreatZeroAs?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ValueAxis]].\r\n */\r\nexport interface IValueAxisEvents extends IAxisEvents {\r\n\r\n\t/**\r\n\t * Invoked when selection/zoom on axis occurs and start/end coordinates\r\n\t * change.\r\n\t */\r\n\tselectionextremeschanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start/end coordinates of the axis change.\r\n\t */\r\n\textremeschanged: {};\r\n\r\n}\r\n\r\n/**\r\n * Defines adapters for [[ValueAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IValueAxisAdapters extends IAxisAdapters, IValueAxisProperties {\r\n\t/**\r\n\t * Applied to the base value of the axis\r\n\t */\r\n\tbaseValue: number,\r\n\r\n\t/**\r\n\t * Applied to the min value of the axis\r\n\t */\r\n\tmin: number\r\n\r\n\t/**\r\n\t * Applied to the max value of the axis\r\n\t */\r\n\tmax: number\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a value axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Monthly Sales\";\r\n * ```\r\n * ```JSON\r\n * \"yAxes\": [{\r\n *   \"type\": \"ValueAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Monthly Sales\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IValueAxisEvents} for a list of available Events\r\n * @see {@link IValueAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ValueAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IValueAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IValueAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IValueAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: ValueAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: ValueAxisBreak;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IValueAxisEvents;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: XYChart;\r\n\r\n\t/**\r\n\t * A list of Series that are using this Axis.\r\n\t */\r\n\tpublic series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * Minimum value for the axis scale.\r\n\t */\r\n\tprotected _min: number;\r\n\r\n\t/**\r\n\t * Maximum value for the axis scale.\r\n\t */\r\n\tprotected _max: number;\r\n\r\n\t/**\r\n\t * User-defined min value for axis.\r\n\t */\r\n\tprotected _minDefined: number;\r\n\r\n\t/**\r\n\t * User-defined max value for axis.\r\n\t */\r\n\tprotected _maxDefined: number;\r\n\r\n\t/**\r\n\t * [_minAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minAdjusted: number;\r\n\r\n\t/**\r\n\t * [_maxAdjusted description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _maxAdjusted: number;\r\n\r\n\t/**\r\n\t * Min real value. (lowest value of all data points)\r\n\t */\r\n\tprotected _minReal: number;\r\n\r\n\t/**\r\n\t * Max real value. (highest value of all data points)\r\n\t */\r\n\tprotected _maxReal: number;\r\n\r\n\t/**\r\n\t * Min value within current zoom.\r\n\t */\r\n\tprotected _minZoomed: number;\r\n\r\n\t/**\r\n\t * Max value within current zoom.\r\n\t */\r\n\tprotected _maxZoomed: number\r\n\r\n\t/**\r\n\t * [_step description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _step: number;\r\n\r\n\t/**\r\n\t * [_stepDecimalPlaces description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _stepDecimalPlaces: number = 0;\r\n\tprotected _prevStepDecimalPlaces: number = 0;\r\n\tprotected _adjustLabelPrecision: boolean = true;\r\n\r\n\t/**\r\n\t * [_difference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _difference: number;\r\n\r\n\t/**\r\n\t * Base value for the axis.\r\n\t */\r\n\tprotected _baseValue: number = 0;\r\n\r\n\t/**\r\n\t * [_previousValue description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousValue: number;\r\n\r\n\t/**\r\n\t * [_previousPoint description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _previousPoint: IPoint;\r\n\r\n\t/**\r\n\t * Adjusted start in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedStart: number = 0;\r\n\r\n\t/**\r\n\t * Adjusted end in case we have breaks.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _adjustedEnd: number = 1;\r\n\r\n\tprotected _finalMin: number;\r\n\tprotected _finalMax: number;\r\n\r\n\tprotected _extremesChanged: boolean = false;\r\n\r\n\tprotected _deltaMinMax: number = 1;\r\n\r\n\tprotected _dsc: boolean = false;\r\n\r\n\t/**\r\n\t * Holds reference to a function that accepts a DataItem as parameter.\r\n\t *\r\n\t * It can either return a fill opacity for a fill, or manipulate data item\r\n\t * directly, to create various highlighting scenarios.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tif (!dataItem.axisFill.disabled) {\r\n\t\t\t// rounding in left to solve floating point number\r\n\t\t\tif ($math.round(value / axis.step / 2, 5) == Math.round(value / axis.step / 2)) {\r\n\t\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * As calculating totals is expensive operation and not often needed, we\r\n\t * don't do it by default.\r\n\t *\r\n\t * In case you use `totalPercent` or `total` in your charts, this must be set\r\n\t * to `true`.\r\n\t *\r\n\t * @default false\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#100_stacks} For using `calculateTotals` for 100% stacked series.\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-strings/#Placeholders_for_numeric_values} For using `calculateTotals` in labels.\r\n\t */\r\n\tpublic calculateTotals: boolean = false;\r\n\r\n\r\n\tprotected _minMaxAnimation: Animation;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ValueAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"value\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000);\r\n\t\tthis.setPropertyValue(\"extraMin\", 0);\r\n\t\tthis.setPropertyValue(\"extraMax\", 0);\r\n\t\tthis.setPropertyValue(\"strictMinMax\", false);\r\n\t\tthis.setPropertyValue(\"maxPrecision\", Number.MAX_VALUE);\r\n\t\tthis.setPropertyValue(\"adjustLabelPrecision\", true);\r\n\t\tthis.setPropertyValue(\"extraTooltipPrecision\", 0);\r\n\t\tthis.keepSelection = false;\r\n\t\tthis.includeRangesInMinMax = false;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ValueAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new ValueAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t * This is a placeholder to override for extending classes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataChangeUpdate(): void {\r\n\t\tthis.clearCache();\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis._start = 0;\r\n\t\t\t\tthis._end = 1;\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._start != 0) {\r\n\t\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\t}\r\n\t\t\tif (this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\r\n\t\t\t}\r\n\t\t\tif (this._start != 0 || this._end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"startendchanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._maxZoomed = this._maxDefined;\r\n\t\tthis._minZoomed = this._minDefined;\r\n\r\n\t\tthis._maxAdjusted = this._maxDefined;\r\n\t\tthis._minAdjusted = this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data items of the related Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processSeriesDataItems(): void {\r\n\t\t// @todo: add some boolean (maybe autodedect) if we need these calculations or not. this place uses a lot of cpu\r\n\t\tif (this.calculateTotals) {\r\n\t\t\tlet series: XYSeries = this.series.getIndex(0);\r\n\t\t\tlet startIndex: number = series.startIndex;\r\n\r\n\t\t\tif (series.dataItems.length > 0) {\r\n\r\n\t\t\t\tif (startIndex > 0) {\r\n\t\t\t\t\tstartIndex--;\r\n\t\t\t\t}\r\n\t\t\t\tlet endIndex: number = series.endIndex;\r\n\t\t\t\tif (endIndex < series.dataItems.length) {\r\n\t\t\t\t\tendIndex++;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\tfor (let i: number = startIndex; i < endIndex; ++i) {\r\n\t\t\t\t\t// This has to be `var` in order to avoid garbage collection\r\n\t\t\t\t\tconst total: { [index: string]: number } = {};\r\n\t\t\t\t\tconst sum: { [index: string]: number } = {};\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(total[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] = Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\ttotal[key] += Math.abs(value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!$type.isNumber(sum[key])) {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] = value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tsum[key] += value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\r\n\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\tif (!series.excludeFromTotal) {\r\n\t\t\t\t\t\t\tlet dataItem: XYSeriesDataItem = series.dataItems.getIndex(i);\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\t$object.each(dataItem.values, (key) => {\r\n\t\t\t\t\t\t\t\t\tlet value: number = dataItem.values[key].workingValue; // can not use getWorkingValue here!\r\n\t\t\t\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, total[key], \"total\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, 100 * value / total[key], \"totalPercent\");\r\n\t\t\t\t\t\t\t\t\t\tdataItem.setCalculatedValue(key, sum[key], \"sum\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (!$type.isNumber(this._minAdjusted)) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = null;\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tthis.calculateZoom();\r\n\r\n\t\tthis.validateAxisElements();\r\n\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.validateBreaks();\r\n\r\n\t\tthis.hideUnusedDataItems();\r\n\r\n\t\tthis.renderer.invalidateLayout();\r\n\t\t// hide too close\r\n\t\t//this.hideTooCloseDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tif ($type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet min: number = this.positionToValue(this.start);\r\n\t\t\tlet max: number = this.positionToValue(this.end);\r\n\r\n\t\t\tlet differece: number = this.adjustDifference(min, max);\r\n\t\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\r\n\t\t\tlet stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\r\n\t\t\tthis._stepDecimalPlaces = stepDecimalPlaces;\r\n\r\n\t\t\tmin = $math.round(min, stepDecimalPlaces);\r\n\t\t\tmax = $math.round(max, stepDecimalPlaces);\r\n\r\n\t\t\tminMaxStep = this.adjustMinMax(min, max, differece, this._gridCount, true);\r\n\t\t\tlet step = minMaxStep.step;\r\n\r\n\t\t\tif (this.syncWithAxis) {\r\n\t\t\t\tlet calculated = this.getCache(min + \"-\" + max);\r\n\t\t\t\tif ($type.isNumber(calculated)) {\r\n\t\t\t\t\tstep = calculated;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = minMaxStep.min;\r\n\t\t\t\tmax = minMaxStep.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._minZoomed != min || this._maxZoomed != max || this._step != step || this._dsc) {\r\n\t\t\t\tthis._dsc = false;\r\n\t\t\t\tthis._minZoomed = min;\r\n\t\t\t\tthis._maxZoomed = max;\r\n\r\n\t\t\t\tthis._step = step;\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected fixSmallStep(step: number): number {\r\n\t\tif (1 + step == 1) {\r\n\t\t\tstep *= 2;\r\n\t\t\treturn this.fixSmallStep(step);\r\n\t\t}\r\n\t\treturn step;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\t// first regular items\r\n\t\t\tlet value: number = this.minZoomed - this._step * 2;\r\n\r\n\t\t\tif (!this.logarithmic) {\r\n\t\t\t\tvalue = Math.floor(value / this._step) * this._step;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = Math.floor(this.minZoomed / this._step) * this._step;\r\n\t\t\t\t\tif (value == 0) {\r\n\t\t\t\t\t\tvalue = this.minZoomed;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet maxZoomed = this._maxZoomed + this._step;\r\n\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\r\n\t\t\tif (this._step == 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._step = this.fixSmallStep(this._step);\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\tconst precisionChanged = this._prevStepDecimalPlaces != this._stepDecimalPlaces;\r\n\t\t\tthis._prevStepDecimalPlaces = this._stepDecimalPlaces;\r\n\r\n\t\t\twhile (value <= maxZoomed) {\r\n\t\t\t\tlet axisBreak: ValueAxisBreak = <ValueAxisBreak>this.isInBreak(value);\r\n\r\n\t\t\t\tif (!axisBreak) {\r\n\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === value);\r\n\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tdataItem.axisBreak = undefined;\r\n\r\n\t\t\t\t\tif (dataItem.value != value || precisionChanged) {\r\n\t\t\t\t\t\tdataItem.value = value;\r\n\t\t\t\t\t\tdataItem.text = this.formatLabel(value);\r\n\r\n\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (dataItem.value >= this.min && dataItem.value <= this.max) {\r\n\t\t\t\t\t\t\tif (dataItem.label) {\r\n\t\t\t\t\t\t\t\tif ((this.axisLetter == \"Y\" && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (this.axisLetter == \"X\" && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t\t\t\t\t\tthis.ghostLabel.validate();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\r\n\t\t\t\tlet oldValue = value;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet differencePower = Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E;\r\n\t\t\t\t\tif (differencePower > 1) {\r\n\t\t\t\t\t\tvalue = Math.pow(10, Math.log(this.min) * Math.LOG10E + i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalue += this._step;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(this._step)) * Math.LOG10E));\r\n\r\n\t\t\t\tif (stepPower < 1) {\r\n\t\t\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\t\t\tlet decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\r\n\t\t\t\t\tdecCount = Math.min(13, decCount);\r\n\t\t\t\t\t// round value to avoid floating point issues\r\n\t\t\t\t\tvalue = $math.round(value, decCount);\r\n\t\t\t\t\t// ceil causes problems: https://codepen.io/team/amcharts/pen/XWMjZwy?editors=1010\r\n\t\t\t\t\tif (oldValue == value) {\r\n\t\t\t\t\t\tvalue = maxZoomed;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// breaks later\r\n\t\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t\t$iter.each(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance) {\r\n\t\t\t\t\t\t\tlet breakValue: number = axisBreak.adjustedMin;\r\n\r\n\t\t\t\t\t\t\twhile (breakValue <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\t\tif (breakValue >= axisBreak.adjustedStartValue && breakValue <= axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.value === breakValue);\r\n\t\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\t\tif (dataItem.value != breakValue) {\r\n\t\t\t\t\t\t\t\t\t\tdataItem.value = breakValue;\r\n\t\t\t\t\t\t\t\t\t\tdataItem.text = this.formatLabel(breakValue);\r\n\t\t\t\t\t\t\t\t\t\tif (dataItem.label && dataItem.label.invalid) {\r\n\t\t\t\t\t\t\t\t\t\t\tdataItem.label.validate();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreakValue += axisBreak.adjustedStep;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tdataItem.itemIndex = this._axisItemCount;\r\n\t\tthis._axisItemCount++;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tlet value: number = dataItem.value;\r\n\t\tlet endValue: number = dataItem.endValue;\r\n\r\n\t\tlet position: number = this.valueToPosition(value);\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet endPosition: number = position;\r\n\t\tlet fillEndPosition: number = this.valueToPosition(value + this._step);\r\n\r\n\t\tif ($type.isNumber(endValue)) {\r\n\t\t\tendPosition = this.valueToPosition(endValue);\r\n\t\t\tfillEndPosition = endPosition;\r\n\t\t}\r\n\r\n\t\t// this point is needed to calculate distance to satisfy minGridDistance\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, position, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[NumberFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\tif (this.adjustLabelPrecision && value != 0) {\r\n\t\t\treturn this.numberFormatter.format(value, undefined, this._stepDecimalPlaces);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.numberFormatter.format(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\tlet baseValue: number = this.baseValue;\r\n\t\tlet position: number = this.valueToPosition(baseValue);\r\n\t\tlet basePoint: IPoint = this.renderer.positionToPoint(position);\r\n\r\n\t\treturn basePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * A base value.\r\n\t *\r\n\t * This is a threshold value that will divide \"positive\" and \"negative\"\r\n\t * value ranges.\r\n\t *\r\n\t * Other scale-related functionality also depend on base value. E.g. stacks,\r\n\t * value-dependent coloring, etc.\r\n\t *\r\n\t * @param value Base value\r\n\t */\r\n\tpublic set baseValue(value: number) {\r\n\t\tthis._baseValue = value;\r\n\t\tthis.invalidateLayout();\r\n\t\tthis.invalidateSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\r\n\t\tlet baseValue = this._baseValue;\r\n\t\tif (this.logarithmic) {\r\n\t\t\tbaseValue = this.min;\r\n\t\t}\r\n\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn baseValue;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"baseValue\", baseValue);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis\r\n\t *\r\n\t * An alias to `valueToPosition()`.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Position\r\n\t */\r\n\tpublic anyToPosition(value: number): number {\r\n\t\treturn this.valueToPosition(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic valueToPoint(value: number): IOrientationPoint {\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(value: number): IOrientationPoint {\r\n\t\treturn this.valueToPoint(value);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to relative position on axis.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return relative position\r\n\t */\r\n\tpublic valueToPosition(value: number): number {\r\n\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t// todo: think if possible to take previous value and do not go through all previous breaks\r\n\t\t\tlet min: number = this.min;\r\n\t\t\tlet max: number = this.max;\r\n\r\n\t\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\t\t\t\tlet difference: number = this._difference;\r\n\r\n\t\t\t\tlet axisBreaks = this._axisBreaks;\r\n\t\t\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(startValue) && $type.isNumber(endValue)) {\r\n\r\n\t\t\t\t\t\t\tif (value < startValue) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: startValue, end: endValue }, { start: min, end: max })) { // todo: check this once and set some flag in axisBreak\r\n\t\t\t\t\t\t\t\tstartValue = Math.max(startValue, min);\r\n\t\t\t\t\t\t\t\tendValue = Math.min(endValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\t// value to the right of break end\r\n\t\t\t\t\t\t\t\tif (value > endValue) {\r\n\t\t\t\t\t\t\t\t\tmin += (endValue - startValue) * (1 - breakSize); // todo: maybe this can be done differently?\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value to the left of break start\r\n\t\t\t\t\t\t\t\telse if (value < startValue) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tvalue = startValue + (value - startValue) * breakSize;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet position;\r\n\r\n\t\t\t\tif (!this.logarithmic) {\r\n\t\t\t\t\tposition = (value - min) / difference;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\t\t\tif (value <= treatZeroAs) {\r\n\t\t\t\t\t\t\tvalue = treatZeroAs;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tposition = (Math.log(value) * Math.LOG10E - Math.log(this.min) * Math.LOG10E) / ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//position = $math.round(position, 10);\r\n\r\n\t\t\t\treturn position;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * When fontSize of fontFamily changes we need to hard-invalidate all Labels of this container to position them properly.\r\n\t */\r\n\tpublic invalidateLabels() {\r\n\t\tsuper.invalidateLabels();\r\n\t\tif (this.dataItems) {\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tdataItem.value = undefined;\r\n\t\t\t})\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an relative position to a corresponding value within\r\n\t * axis' scale.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic positionToValue(position: number): number {\r\n\r\n\t\tlet min: number = this.min;\r\n\t\tlet max: number = this.max;\r\n\r\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet difference: number = max - min; //no need to adjust!\r\n\r\n\t\t\tlet value: number = null;\r\n\r\n\t\t\tlet axisBreaks = this._axisBreaks;\r\n\r\n\t\t\tif (axisBreaks) {\r\n\t\t\t\t// in case we have some axis breaks\r\n\t\t\t\tif (axisBreaks.length > 0) {\r\n\t\t\t\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\t\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\t\t\t\tlet breakStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\t\t\tlet breakEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t\t\tif ($type.isNumber(breakStartValue) && $type.isNumber(breakEndValue)) {\r\n\r\n\t\t\t\t\t\t\tif (breakStartValue > max) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ($math.intersect({ start: breakStartValue, end: breakEndValue }, { start: min, end: max })) {\r\n\r\n\t\t\t\t\t\t\t\tbreakStartValue = $math.max(breakStartValue, min);\r\n\t\t\t\t\t\t\t\tbreakEndValue = $math.min(breakEndValue, max);\r\n\r\n\t\t\t\t\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t\t\t\t\tdifference -= (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\r\n\t\t\t\t\t\t\t\t// position to the right of break end\r\n\t\t\t\t\t\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\t\t\t\t\t\tmin += (breakEndValue - breakStartValue) * (1 - breakSize);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// position to the left of break start\r\n\t\t\t\t\t\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// value within break\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tlet breakPosition: number = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\t\t\t\t\t\tvalue = breakStartValue + breakPosition * (breakEndValue - breakStartValue);\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tif (this.logarithmic) {\r\n\t\t\t\t\tvalue = Math.pow(Math.E, (position * ((Math.log(this.max) * Math.LOG10E - Math.log(this.min) * Math.LOG10E)) + Math.log(this.min) * Math.LOG10E) / Math.LOG10E);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvalue = position * difference + min;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an X coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param x  X (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic xToValue(x: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: x, y: 0 }));\r\n\t}\r\n\r\n\t/**\r\n\t * Converts an Y coordinate to a relative value in axis' scale.\r\n\t *\r\n\t * @param y  Y (px)\r\n\t * @return Value\r\n\t */\r\n\tpublic yToValue(y: number): number {\r\n\t\treturn this.positionToValue(this.pointToPosition({ x: 0, y: y }));\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts pixel coordinates to a relative position. (0-1)\r\n\t *\r\n\t * @param point  Coorinates (px)\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint): number {\r\n\t\tif (this.renderer instanceof AxisRendererY) {\r\n\t\t\treturn 1 - this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.pointToPosition(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected animateMinMax(min: number, max: number): Animation {\r\n\t\treturn this.animate([{ property: \"_minAdjusted\", from: this._minAdjusted, to: min }, { property: \"_maxAdjusted\", from: this._maxAdjusted, to: max }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates smallest and biggest value for the axis scale.\r\n\t * @ignore\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic getMinMax() {\r\n\r\n\t\tthis.updateGridCount();\r\n\r\n\t\tlet min: number = Number.POSITIVE_INFINITY;\r\n\t\tlet max: number = Number.NEGATIVE_INFINITY;\r\n\r\n\t\t// only if min and max are not set from outside, we go through min and max influencers\r\n\t\tif (!$type.isNumber(this._minDefined) || !$type.isNumber(this._maxDefined)) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (!series.ignoreMinMax) {\r\n\t\t\t\t\t// check min\r\n\t\t\t\t\tlet seriesMin: number = series.min(this);\r\n\t\t\t\t\tif ($type.isNumber(seriesMin) && (seriesMin < min)) {\r\n\t\t\t\t\t\tmin = seriesMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// check max\r\n\t\t\t\t\tlet seriesMax: number = series.max(this);\r\n\r\n\t\t\t\t\tif ($type.isNumber(seriesMax) && (seriesMax > max)) {\r\n\t\t\t\t\t\tmax = seriesMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.includeRangesInMinMax) {\r\n\t\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\r\n\t\t\t\t\t\tif (minValue < min || !$type.isNumber(min)) {\r\n\t\t\t\t\t\t\tmin = minValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (maxValue > max || !$type.isNumber(max)) {\r\n\t\t\t\t\t\t\tmax = maxValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.logarithmic) {\r\n\t\t\tlet treatZeroAs = this.treatZeroAs;\r\n\t\t\tif ($type.isNumber(treatZeroAs)) {\r\n\t\t\t\tif (min <= 0) {\r\n\t\t\t\t\tmin = treatZeroAs;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\tthis.raiseCriticalError(new Error(\"Logarithmic value axis can not have values <= 0.\"), true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (min == 0 && max == 0) {\r\n\t\t\tmax = 0.9;\r\n\t\t\tmin = -0.9;\r\n\t\t}\r\n\r\n\t\t// if defined from outside\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(min) || !$type.isNumber(max)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._minReal = min;\r\n\t\tthis._maxReal = max;\r\n\r\n\t\tif (min == Number.POSITIVE_INFINITY) {\r\n\t\t\tmin = undefined;\r\n\t\t}\r\n\t\tif (max == Number.NEGATIVE_INFINITY) {\r\n\t\t\tmax = undefined;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(min, max); // previously it was max-min, but not worked well\r\n\r\n\r\n\t\tmin = this.fixMin(min);\r\n\t\tmax = this.fixMax(max);\r\n\r\n\t\t// this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\r\n\t\tif (max - min <= 1 / Math.pow(10, 15)) {\r\n\t\t\tif (max - min != 0) {\r\n\t\t\t\tthis._deltaMinMax = (max - min) / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// the number by which we need to raise 10 to get difference\r\n\t\t\t\tlet exponent: number = Math.log(Math.abs(max)) * Math.LOG10E;\r\n\r\n\t\t\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\t\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t\t\t// reduce this number by 10 times\r\n\t\t\t\tpower = power / 10;\r\n\r\n\t\t\t\tthis._deltaMinMax = power;\r\n\t\t\t}\r\n\t\t\tmin -= this._deltaMinMax;\r\n\t\t\tmax += this._deltaMinMax;\r\n\t\t}\r\n\r\n\t\tmin -= (max - min) * this.extraMin;\r\n\t\tmax += (max - min) * this.extraMax;\r\n\r\n\t\tlet strict = this.strictMinMax;\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tstrict = true;\r\n\t\t}\r\n\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(min, max, dif, this._gridCount, strict);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\tdif = max - min;  //new\r\n\r\n\t\t// do it for the second time (importat!)\r\n\t\tminMaxStep = this.adjustMinMax(min, max, max - min, this._gridCount, true);\r\n\r\n\t\tmin = minMaxStep.min;\r\n\t\tmax = minMaxStep.max;\r\n\r\n\t\t// return min max if strict\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\t\tmin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = this._minReal;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\t\tmax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmax = this._maxReal;\r\n\t\t\t}\r\n\r\n\t\t\tif (max - min <= 0.00000001) {\r\n\t\t\t\tmin -= this._deltaMinMax;\r\n\t\t\t\tmax += this._deltaMinMax;\r\n\t\t\t}\r\n\r\n\t\t\tmin -= (max - min) * this.extraMin;\r\n\t\t\tmax += (max - min) * this.extraMax;\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmin = this._adapterO.apply(\"min\", min);\r\n\t\t}\r\n\r\n\t\tif (this._adapterO) {\r\n\t\t\tmax = this._adapterO.apply(\"max\", max);\r\n\t\t}\r\n\r\n\t\tthis._step = minMaxStep.step;\r\n\r\n\t\tif (!$type.isNumber(min) && !$type.isNumber(max)) {\r\n\t\t\tthis.start = 0;\r\n\t\t\tthis.end = 1;\r\n\r\n\t\t\tthis.renderer.labels.each((label) => {\r\n\t\t\t\tlabel.dataItem.text = \"\";\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// checking isNumber is good when all series are hidden\r\n\t\tif ((this._minAdjusted != min || this._maxAdjusted != max) && $type.isNumber(min) && $type.isNumber(max)) {\r\n\r\n\t\t\tlet animation = this._minMaxAnimation;\r\n\r\n\t\t\tif (this._extremesChanged && $type.isNumber(this._minAdjusted) && $type.isNumber(this._maxAdjusted) && this.inited) {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tanimation = this.animateMinMax(min, max);\r\n\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.events.on(\"animationprogress\", this.validateDataItems, this);\r\n\r\n\t\t\t\t\t\tanimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\t\t//this.validateDataItems();\r\n\t\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\t\tseries.validate();\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tthis._minMaxAnimation = animation;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.series.each((series) => {\r\n\t\t\t\t\t\t\tseries.invalidate();\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.validateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ((animation && !animation.isFinished()) && this._finalMax == max && this._finalMin == min) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._minAdjusted = min;\r\n\t\t\t\t\tthis._maxAdjusted = max;\r\n\r\n\t\t\t\t\tthis._finalMin = min;\r\n\t\t\t\t\tthis._finalMax = max;\r\n\r\n\t\t\t\t\tthis.invalidateDataItems();\r\n\t\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._extremesChanged = false;\r\n\t\tthis._difference = this.adjustDifference(min, max);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum value.\r\n\t *\r\n\t * This is a placeholder method for extending classes to override.\r\n\t *\r\n\t * For numeric values this does nothing, however for more complex types, like\r\n\t * dates, it may be necessary to adjust.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number): number {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\t// will fail if 0\r\n\t\tif (gridCount <= 1) {\r\n\t\t\tgridCount = 1;\r\n\t\t}\r\n\r\n\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\tlet initialMin: number = min;\r\n\t\tlet initialMax: number = max;\r\n\r\n\t\t// in case min and max is the same, use max\r\n\t\tif (difference === 0) {\r\n\t\t\tdifference = Math.abs(max);\r\n\t\t}\r\n\r\n\t\t// the number by which we need to raise 10 to get difference\r\n\t\tlet exponent: number = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\r\n\t\t// here we find a number which is power of 10 and has the same count of numbers as difference has\r\n\t\tlet power = Math.pow(10, Math.floor(exponent));\r\n\r\n\t\t// reduce this number by 10 times\r\n\t\tpower = power / 10;\r\n\r\n\t\tlet extra: number = power;\r\n\t\tif (strictMode) {\r\n\t\t\textra = 0;\r\n\t\t}\r\n\r\n\t\tif (!this.logarithmic) {\r\n\r\n\t\t\t// round down min\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin = Math.floor(min / power) * power;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.ceil(max / power) * power;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.ceil(min / power) * power - extra;\r\n\t\t\t\t// round up max\r\n\t\t\t\tmax = Math.floor(max / power) * power + extra;\r\n\t\t\t}\r\n\r\n\t\t\t// don't let min go below 0 if real min is >= 0\r\n\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\tmin = 0;\r\n\t\t\t}\r\n\t\t\t// don't let max go above 0 if real max is <= 0\r\n\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\tmax = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (min <= 0) {\r\n\t\t\t\t//throw Error(\"Logarithmic value axis can not have values <= 0.\");\r\n\t\t\t\tmin = this.baseValue;\r\n\t\t\t}\r\n\r\n\t\t\t// @todo: think of a better way or to restrict zooming when no series are selected\r\n\t\t\tif (min == Infinity) {\r\n\t\t\t\tmin = 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (max == -Infinity) {\r\n\t\t\t\tmax = 10;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tif (this._minDefined > 0) {\r\n\t\t\t\t\tmin = this._minDefined;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tmin = min;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._maxDefined > 0) {\r\n\t\t\t\t\tmax = max;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmin = Math.pow(10, Math.floor(Math.log(Math.abs(min)) * Math.LOG10E));\r\n\t\t\t\tmax = Math.pow(10, Math.ceil(Math.log(Math.abs(max)) * Math.LOG10E));\r\n\t\t\t}\r\n\t\t}\r\n\t\t// repeat diff, exponent and power again with rounded values\r\n\t\t//difference = this.adjustDifference(min, max);\r\n\t\t/*\r\n\r\n\t\t\t\tif(min > initialMin){\r\n\t\t\t\t\tmin = initialMin;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(max < initialMax){\r\n\t\t\t\t\tmax = initialMax;\r\n\t\t\t\t}\r\n\t\t*/\r\n\r\n\t\texponent = Math.log(Math.abs(difference)) * Math.LOG10E;\r\n\t\tpower = Math.pow(10, Math.floor(exponent));\r\n\t\tpower = power / 10;\r\n\r\n\t\t// approximate difference between two grid lines\r\n\t\tlet step = Math.ceil((difference / gridCount) / power) * power;\r\n\r\n\t\tlet stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\r\n\r\n\t\t// TODO: in v3 I had fixStepE here, ommiting it for a while, need to think about other solution\r\n\t\t// the step should divide by  2, 5, and 10.\r\n\t\tlet stepDivisor: number = Math.ceil(step / stepPower); // number 0 - 10\r\n\r\n\r\n\t\tif (stepDivisor > 5) {\r\n\t\t\tstepDivisor = 10;\r\n\t\t}\r\n\t\telse if (stepDivisor <= 5 && stepDivisor > 2) {\r\n\t\t\tstepDivisor = 5;\r\n\t\t}\r\n\r\n\t\t// now get real step\r\n\t\tstep = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\r\n\r\n\t\tif (this.maxPrecision < Number.MAX_VALUE && step != $math.ceil(step, this.maxPrecision)) {\r\n\t\t\tstep = $math.ceil(step, this.maxPrecision);\r\n\t\t}\r\n\r\n\t\tlet decCount: number = 0;\r\n\t\t// in case numbers are smaller than 1\r\n\t\tif (stepPower < 1) {\r\n\t\t\t// exponent is less then 1 too. Count decimals of exponent\r\n\t\t\tdecCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\r\n\t\t\t// round step\r\n\t\t\tstep = $math.round(step, decCount);\r\n\t\t}\r\n\t\tif (!this.logarithmic) {\r\n\t\t\t// final min and max\r\n\t\t\tlet minCount = Math.floor(min / step);\r\n\r\n\t\t\tmin = $math.round(step * minCount, decCount);\r\n\r\n\t\t\tlet maxCount: number;\r\n\r\n\t\t\tif (!strictMode) {\r\n\t\t\t\tmaxCount = Math.ceil(max / step);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxCount = Math.floor(max / step);\r\n\t\t\t}\r\n\r\n\t\t\tif (maxCount == minCount) {\r\n\t\t\t\tmaxCount++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = $math.round(step * maxCount, decCount);\r\n\r\n\t\t\tif (max < initialMax) {\r\n\t\t\t\tmax = max + step;\r\n\t\t\t}\r\n\r\n\t\t\tif (min > initialMin) {\r\n\t\t\t\tmin = min - step;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * A minimum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Min value\r\n\t */\r\n\tpublic set min(value: number | undefined) {\r\n\t\tif (this._minDefined != value) {\r\n\t\t\tthis._minDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min value\r\n\t */\r\n\tpublic get min(): number | undefined {\r\n\t\tlet min = this._minAdjusted;\r\n\t\tif (!$type.isNumber(min)) {\r\n\t\t\tmin = this._minDefined;\r\n\t\t}\r\n\t\treturn min;\r\n\t}\r\n\r\n\t/**\r\n\t * Min value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Min value\r\n\t */\r\n\tpublic get minDefined(): number {\r\n\t\treturn this._minDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Max value as defined by user's code, not auto-calculated.\r\n\t *\r\n\t * @readonly\r\n\t * @return Man value\r\n\t */\r\n\tpublic get maxDefined(): number {\r\n\t\treturn this._maxDefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting minimum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 50 to 200 because\r\n\t * we asked to expand minimum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMin(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMin\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get extraMin(): number {\r\n\t\treturn this.getPropertyValue(\"extraMin\");\r\n\t}\r\n\r\n\t/**\r\n\t * Allows relatively adjusting maximum value of the axis' scale.\r\n\t *\r\n\t * The value is relative to the actual range of values currently displayed\r\n\t * on the axis.\r\n\t *\r\n\t * E.g.: 0.5 will mean half of the current range. If we have axis displaying\r\n\t * from 100 to 200, we will now have axis displaying from 100 to 250 because\r\n\t * we asked to expand maximum value by 50% (0.5).\r\n\t *\r\n\t * NOTE: this setting is not compatible with `strictMinMax`.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set extraMax(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraMax\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min multiplier\r\n\t */\r\n\tpublic get extraMax(): number {\r\n\t\treturn this.getPropertyValue(\"extraMax\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current calculated delta in values between two adjacent grid lines (step).\r\n\t *\r\n\t * This is a read-only value and cannot be used to set actual step.\r\n\t *\r\n\t * @readonly\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels} For more information about modifying density of labels\r\n\t * @return [description]\r\n\t */\r\n\tpublic get step(): number {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\t/**\r\n\t * A maximum value for the axis scale.\r\n\t *\r\n\t * This value might be auto-adjusted by the Axis in order to accomodate the\r\n\t * grid nicely, i.e. plot area is divided by grid in nice equal cells.\r\n\t *\r\n\t * The above might be overridden by `strictMinMax` which will force exact\r\n\t * user-defined min and max values to be used for scale.\r\n\t *\r\n\t * @param value  Max value\r\n\t */\r\n\tpublic set max(value: number | undefined) {\r\n\t\tif (this._maxDefined != value) {\r\n\t\t\tthis._maxDefined = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max value\r\n\t */\r\n\tpublic get max(): number | undefined {\r\n\t\tlet max = this._maxAdjusted;\r\n\t\tif (!$type.isNumber(max)) {\r\n\t\t\tmax = this._maxDefined;\r\n\t\t}\r\n\t\treturn max;\r\n\t}\r\n\r\n\t/**\r\n\t * By default the axis will adjust precision of all numbers to match number\r\n\t * of decimals in all its labels, e.g.: `1.0`, `1.5`, `2.0`.\r\n\t *\r\n\t * To disable set `adjustLabelPrecision` to `false`, to use whatever other\r\n\t * precision or number format settings are set.\r\n\t *\r\n\t * IMPORTANT: This setting will be ignored if your number format uses\r\n\t * modifiers, e.g. `\"#a\"`.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.9.14\r\n\t * @param  value  Adjust precision\r\n\t */\r\n\tpublic set adjustLabelPrecision(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"adjustLabelPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Adjust precision\r\n\t */\r\n\tpublic get adjustLabelPrecision(): boolean {\r\n\t\treturn this.getPropertyValue(\"adjustLabelPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Used for the Series to register itself as the user of this Axis.\r\n\t *\r\n\t * This will also decorate both the Series and Axis with event handlers, used\r\n\t * to redraw on Axis position/zoom change.\r\n\t *\r\n\t * A disposer for those events is returned, so that they can be disposed\r\n\t * together with Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param series  Series\r\n\t * @return Disposer for events\r\n\t */\r\n\tpublic registerSeries(series: XYSeries): IDisposer {\r\n\t\treturn new MultiDisposer([\r\n\t\t\tsuper.registerSeries(series),\r\n\r\n\t\t\tseries.events.on(\"extremeschanged\", this.handleExtremesChange, this, false),\r\n\t\t\tseries.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false),\r\n\t\t\tthis.events.on(\"extremeschanged\", series.invalidate, series, false)\r\n\t\t]);\r\n\t}\r\n\r\n\t/**\r\n\t * Perform tasks after Axis zoom.\r\n\t */\r\n\tprotected handleSelectionExtremesChange(): void {\r\n\r\n\t\tlet selectionMin: number;\r\n\t\tlet selectionMax: number;\r\n\r\n\t\tlet allHidden: boolean = true;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.ignoreMinMax && !series.isHidden && !series.outOfRange) {\r\n\r\n\t\t\t\tif (series.visible && !series.isHiding) {\r\n\t\t\t\t\tallHidden = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesSelectionMin: number = series.selectionMin(this);\r\n\t\t\t\tlet seriesSelectionMax: number = series.selectionMax(this);\r\n\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMin)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMin) || (seriesSelectionMin < selectionMin)) {\r\n\t\t\t\t\t\tselectionMin = seriesSelectionMin;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check max\r\n\t\t\t\tif ($type.isNumber(seriesSelectionMax)) {\r\n\t\t\t\t\tif (!$type.isNumber(selectionMax) || (seriesSelectionMax > selectionMax)) {\r\n\t\t\t\t\t\tselectionMax = seriesSelectionMax;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (this.includeRangesInMinMax) {\r\n\t\t\tthis.axisRanges.each((range) => {\r\n\t\t\t\tif (!range.ignoreMinMax) {\r\n\t\t\t\t\tlet minValue = $math.min(range.value, range.endValue);\r\n\t\t\t\t\tlet maxValue = $math.max(range.value, range.endValue);\r\n\r\n\t\t\t\t\tif (minValue < selectionMin) {\r\n\t\t\t\t\t\tselectionMin = minValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (maxValue > selectionMax) {\r\n\t\t\t\t\t\tselectionMax = maxValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// this is not good, as if date axis is initially zoomed, selection of y axis is reset to 0, 1 at the end of this method\r\n\t\t//$iter.each(this.series.iterator(), (series) => {\r\n\t\t//\tif (!series.appeared) {\r\n\t\t//\t\tallHidden = true;\r\n\t\t//\t}\r\n\t\t//})\r\n\r\n\t\tif ($type.isNumber(this._minDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMin = this._minDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMin = this.min;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMin = this._minReal;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(this._maxDefined)) {\r\n\t\t\tif (this.strictMinMax) {\r\n\t\t\t\tselectionMax = this._maxDefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectionMax = this.max;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (this.strictMinMax) {\r\n\t\t\tselectionMax = this._maxReal;\r\n\t\t}\r\n\r\n\t\tif (selectionMin == selectionMax) {\r\n\r\n\t\t\tselectionMin -= this._deltaMinMax;\r\n\t\t\tselectionMax += this._deltaMinMax;\r\n\r\n\t\t\tlet minMaxStep2 = this.adjustMinMax(selectionMin, selectionMax, 0, this._gridCount, this.strictMinMax);\r\n\t\t\tselectionMin = minMaxStep2.min;\r\n\t\t\tselectionMax = minMaxStep2.max;\r\n\t\t}\r\n\r\n\t\tlet dif: number = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tlet minMaxStep: IMinMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tselectionMin -= (selectionMax - selectionMin) * this.extraMin;\r\n\t\tselectionMax += (selectionMax - selectionMin) * this.extraMax;\r\n\r\n\t\tselectionMin = $math.fitToRange(selectionMin, this.min, this.max);\r\n\t\tselectionMax = $math.fitToRange(selectionMax, this.min, this.max);\r\n\r\n\t\t// do it for the second time !important\r\n\t\tdif = this.adjustDifference(selectionMin, selectionMax);\r\n\t\tminMaxStep = this.adjustMinMax(selectionMin, selectionMax, dif, this._gridCount, true);\r\n\r\n\t\tselectionMin = minMaxStep.min;\r\n\t\tselectionMax = minMaxStep.max;\r\n\r\n\t\tif (this.strictMinMax) {\r\n\t\t\tselectionMin = $math.max(selectionMin, this._minDefined);\r\n\t\t\tselectionMax = $math.min(selectionMax, this._maxDefined);\r\n\t\t}\r\n\t\tlet step = minMaxStep.step;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tminMaxStep = this.syncAxes(selectionMin, selectionMax, step)\r\n\t\t\tselectionMin = minMaxStep.min;\r\n\t\t\tselectionMax = minMaxStep.max;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t\tstep = minMaxStep.step;\r\n\r\n\t\t// needed because of grouping\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\r\n\t\tlet start: number = this.valueToPosition(selectionMin);\r\n\t\tlet end: number = this.valueToPosition(selectionMax);\r\n\r\n\t\t// in case all series are hidden or hiding, full zoomout\r\n\t\tif (allHidden && !this.syncWithAxis) {\r\n\t\t\tstart = 0;\r\n\t\t\tend = 1;\r\n\t\t}\r\n\r\n\t\tlet declination = 0;\r\n\t\tif (this.syncWithAxis) {\r\n\t\t\tdeclination = 5;\r\n\t\t\tthis.setCache(selectionMin + \"-\" + selectionMax, step);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._step != step || this._minZoomed != selectionMin || this._maxZoomed != selectionMax) {\r\n\t\t\t\tthis._dsc = true;\r\n\t\t\t}\r\n\t\t\tthis._step = step;\r\n\t\t\tthis._minZoomed = selectionMin;\r\n\t\t\tthis._maxZoomed = selectionMax;\r\n\t\t}\r\n\r\n\r\n\t\tif (!this.keepSelection) {\r\n\t\t\tthis.zoom({ start: start, end: end }, false, false, declination);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether to blindly use exact `min` and `max` values set by user\r\n\t * when generating Axis scale.\r\n\t *\r\n\t * If not set, the Axis might slightly adjust those values to accomodate a\r\n\t * better looking grid.\r\n\t *\r\n\t * NOTE: if `min` and `max` are not set, setting `strictMinMax` to `true`\r\n\t * will result in fixing the scale of the axis to actual lowest and highest\r\n\t * values in the series within currently selected scope.\r\n\t *\r\n\t * @default false\r\n\t * @param value Use exact values?\r\n\t */\r\n\tpublic set strictMinMax(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"strictMinMax\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use exact values?\r\n\t */\r\n\tpublic get strictMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"strictMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this axis should use a logarithmic scale.\r\n\t *\r\n\t * Please note that logarithmic axis can **only** accommodate values bigger\r\n\t * than zero.\r\n\t *\r\n\t * Having zero or negative values will result in error and failure of the\r\n\t * whole chart.\r\n\t *\r\n\t * @param value Logarithmic scale?\r\n\t */\r\n\tpublic set logarithmic(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"logarithmic\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.invalidateDataItems();\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Logarithmic scale?\r\n\t */\r\n\tpublic get logarithmic(): boolean {\r\n\t\treturn this.getPropertyValue(\"logarithmic\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if a current selection (zoom) should be kept across data updates.\r\n\t *\r\n\t * If your axis is zoomed while chart's data is updated, the axis will try\r\n\t * to retain the same start and end values.\r\n\t *\r\n\t * You can also use this to initially pre-zoom axis:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.keepSelection = true;\r\n\t * axis.start = 0.5;\r\n\t * axis.end = 0.7;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"xAxes\": [{\r\n\t *     // ...\r\n\t *     \"keepSelection\": true,\r\n\t *     \"start\": 0.5,\r\n\t *     \"end\": 0.7\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * The above will start the chart zoomed from the middle of the actual scope\r\n\t * to 70%.\r\n\t *\r\n\t * @since 4.1.1\r\n\t * @default false\r\n\t * @param  value  Preseve zoom after data update?\r\n\t */\r\n\tpublic set keepSelection(value: boolean) {\r\n\t\tthis.setPropertyValue(\"keepSelection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Preseve zoom after data update?\r\n\t */\r\n\tpublic get keepSelection(): boolean {\r\n\t\treturn this.getPropertyValue(\"keepSelection\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, values of axis ranges will be included when calculating\r\n\t * range of values / scale of the [[ValueAxis]].\r\n\t *\r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Include ranges?\r\n\t */\r\n\tpublic set includeRangesInMinMax(value: boolean) {\r\n\t\tthis.setPropertyValue(\"includeRangesInMinMax\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Include ranges?\r\n\t */\r\n\tpublic get includeRangesInMinMax(): boolean {\r\n\t\treturn this.getPropertyValue(\"includeRangesInMinMax\");\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of decimals to allow when placing grid lines and labels\r\n\t * on axis.\r\n\t *\r\n\t * Set it to `0` (zero) to force integer-only axis labels.\r\n\t *\r\n\t * @param {number}\r\n\t */\r\n\tpublic set maxPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return max precision\r\n\t */\r\n\tpublic get maxPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"maxPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * This setting allows using bigger precision for numbers displayed in axis\r\n\t * tooltip.\r\n\t *\r\n\t * Please note that this setting indicates additional decimal places to\r\n\t * automatically-calculated axis number precision.\r\n\t *\r\n\t * So if your axis displays numbers like 0.1, 0.2, etc. (one decimal place),\r\n\t * and you set `extraTooltipPrecision = 1`, tooltips will display numbers\r\n\t * like 0.12, 0.25, etc. (two decimal places).\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.8.3\r\n\t * @param  value  Extra decimals\r\n\t */\r\n\tpublic set extraTooltipPrecision(value: number) {\r\n\t\tif (this.setPropertyValue(\"extraTooltipPrecision\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Extra decimals\r\n\t */\r\n\tpublic get extraTooltipPrecision(): number {\r\n\t\treturn this.getPropertyValue(\"extraTooltipPrecision\");\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates axis data items when series extremes change\r\n\t */\r\n\tprotected handleExtremesChange() {\r\n\t\tthis._extremesChanged = true;\r\n\t\tthis.getMinMax();\r\n\r\n\t\tif (this.ghostLabel) {\r\n\t\t\tlet mw = 0;\r\n\r\n\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\tif (dataItem.label && dataItem.label.pixelWidth > mw) {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  ?\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionX(dataItem, key, location, stackKey, range)).x;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  ?\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueX\";\r\n\t\t}\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item's value.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\treturn this.renderer.positionToPoint(this.getPositionY(dataItem, key, location, stackKey, range)).y;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @param  stackKey  Stack ID\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\r\n\t\tif (!$type.hasValue(stackKey)) {\r\n\t\t\tstackKey = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\r\n\t\t\tif (this.logarithmic) {\r\n\t\t\t\tif (stack > 0) {\r\n\t\t\t\t\tvalue = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = dataItem.getWorkingValue(key);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start     [description]\r\n\t * @param end       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: number, end: number, location?: number): string {\r\n\t\tlet startPosition: number = this.valueToPosition(start);\r\n\t\tlet endPosition: number = this.valueToPosition(end);\r\n\r\n\t\treturn this.getPositionRangePath(startPosition, endPosition); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces + this.extraTooltipPrecision);\r\n\t\tlet valueStr = this.tooltip.numberFormatter.format(value);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn valueStr;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"getTooltipText\", valueStr);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axis to specific values.\r\n\t *\r\n\t * @param startValue      Start value\r\n\t * @param endValue        End value\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToValues(startValue: number, endValue: number, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tlet start: number = (startValue - this.min) / (this.max - this.min);\r\n\t\tlet end: number = (endValue - this.min) / (this.max - this.min);\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A smallest value in axis scale within current zoom.\r\n\t *\r\n\t * @return Min zoom value\r\n\t */\r\n\tpublic get minZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.max(this.min, this._minZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._minZoomed\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A biggest value in axis scale within current zoom.\r\n\t * @return [description]\r\n\t */\r\n\tpublic get maxZoomed(): number {\r\n\t\tif (!this.syncWithAxis) {\r\n\t\t\treturn $math.min(this.max, this._maxZoomed);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._maxZoomed;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\r\n\t\tsuper.fixAxisBreaks();\r\n\t\tlet axisBreaks = this._axisBreaks;\r\n\t\tif (axisBreaks && axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet startValue: number = axisBreak.adjustedStartValue;\r\n\t\t\t\tlet endValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\t\t// break difference\r\n\t\t\t\tlet axisBreakDif: number = endValue - startValue;\r\n\t\t\t\tlet axisBreakGridCount: number = Math.ceil(axisBreakDif * axisBreak.breakSize) * this._gridCount / (this.max - this.min);\r\n\r\n\t\t\t\t// calculate min, max and step for axis break\r\n\t\t\t\tlet breakMinMaxStep = this.adjustMinMax(startValue, endValue, axisBreakDif, axisBreakGridCount, true);\r\n\r\n\t\t\t\taxisBreak.adjustedStep = breakMinMaxStep.step;\r\n\t\t\t\taxisBreak.adjustedMin = breakMinMaxStep.min;\r\n\t\t\t\taxisBreak.adjustedMax = breakMinMaxStep.max;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis._difference = this.adjustDifference(this.min, this.max);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\treturn this.numberFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific value\r\n\t *\r\n\t * @param value Value\r\n\t */\r\n\tpublic showTooltipAt(value: number) {\r\n\t\tthis.showTooltipAtPosition(this.valueToPosition(value));\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.min = source.min;\r\n\t\tthis.max = source.max;\r\n\t\tthis.calculateTotals = source.calculateTotals;\r\n\t\tthis._baseValue = source.baseValue;\r\n\t}\r\n\r\n\t/**\r\n\t * Enables syncing of grid with another axis.\r\n\t *\r\n\t * To enable, set to a reference of the other `ValueAxis`. This axis will try\r\n\t * to maintain its scale in such way that its grid matches target axis grid.\r\n\t *\r\n\t * IMPORTANT #1: At this stage it's an experimental feature. Use it at your\r\n\t * own risk, as it may not work in 100% of the scenarios.\r\n\t *\r\n\t * IMPORTANT #2: `syncWithAxis` is not compatible with `strictMinMax` and\r\n\t * `sequencedInterpolation` settings.\r\n\t * \r\n\t * IMPORTANT #3: `syncWithAxis` is not compatible with scrollbars. Make sure\r\n\t * you do not add a scrollbar in the same direction as synced axes. For\r\n\t * example, if you have vertical synced axes, do not add `scrollbarY` on\r\n\t * your chart. It will create anomalies when used.\r\n\t *\r\n\t * IMPORTANT #4: `syncWithAxis` is not compatible with `XYCursor` if it has\r\n\t * its `behavior` set to either `zoomY` or `zoomXY`.\r\n\t *\r\n\t * @since 4.8.1\r\n\t * @param  axis  Target axis\r\n\t */\r\n\tpublic set syncWithAxis(axis: ValueAxis) {\r\n\t\tif (this.setPropertyValue(\"syncWithAxis\", axis, true)) {\r\n\t\t\tif (axis) {\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"extremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"selectionextremeschanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis._disposers.push(axis.events.on(\"startendchanged\", this.handleSelectionExtremesChange, this, false));\r\n\t\t\t\tthis.events.on(\"shown\", this.handleSelectionExtremesChange, this, false);\r\n\t\t\t\tthis.events.on(\"maxsizechanged\", () => {\r\n\t\t\t\t\tthis.clearCache();\r\n\t\t\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\t\t\tthis.handleSelectionExtremesChange();\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Target axis\r\n\t */\r\n\tpublic get syncWithAxis(): ValueAxis {\r\n\t\treturn this.getPropertyValue(\"syncWithAxis\");\r\n\t}\r\n\r\n\t/**\r\n\t * If set, zero values will be treated as this value.\r\n\t *\r\n\t * It is useful if you need to use data with zero-values on a logarithmic\r\n\t * axis scale.\r\n\t *\r\n\t * @since 4.9.34\r\n\t * @param  value  Zero replacement value\r\n\t */\r\n\tpublic set treatZeroAs(value: number) {\r\n\t\tthis.setPropertyValue(\"treatZeroAs\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zero replacement value\r\n\t */\r\n\tpublic get treatZeroAs(): number {\r\n\t\treturn this.getPropertyValue(\"treatZeroAs\");\r\n\t}\r\n\r\n\t/**\r\n\t * Syncs with a target axis.\r\n\t *\r\n\t * @param  min  Min\r\n\t * @param  max  Max\r\n\t * @param  step Step\r\n\t */\r\n\tprotected syncAxes(min: number, max: number, step: number) {\r\n\t\tlet axis = this.syncWithAxis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tif (!$type.isNumber(min)) {\r\n\t\t\t\tmin = this.min;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(max)) {\r\n\t\t\t\tmax = this.max;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(step)) {\r\n\t\t\t\tstep = this._step;\r\n\t\t\t}\r\n\r\n\t\t\tlet count: number = Math.round((axis.maxZoomed - axis.minZoomed) / axis.step);\r\n\t\t\tlet currentCount = Math.round((max - min) / step);\r\n\r\n\t\t\tif ($type.isNumber(count) && $type.isNumber(currentCount)) {\r\n\t\t\t\tlet synced = false;\r\n\t\t\t\tlet c = 0\r\n\t\t\t\tlet diff = (max - min) * 0.01;\r\n\t\t\t\tlet omin = min;\r\n\t\t\t\tlet omax = max;\r\n\t\t\t\tlet ostep = step;\r\n\r\n\t\t\t\twhile (synced != true) {\r\n\t\t\t\t\tsynced = this.checkSync(omin, omax, ostep, count);\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tif (c > 1000) {\r\n\t\t\t\t\t\tsynced = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!synced) {\r\n\t\t\t\t\t\t//omin = min - diff * c;\r\n\r\n\t\t\t\t\t\tif (c / 3 == Math.round(c / 3)) {\r\n\t\t\t\t\t\t\tomin = min - diff * c;\r\n\t\t\t\t\t\t\tif (min >= 0 && omin < 0) {\r\n\t\t\t\t\t\t\t\tomin = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tomax = max + diff * c;\r\n\t\t\t\t\t\t\tif (omax <= 0 && omax > 0) {\r\n\t\t\t\t\t\t\t\tomax = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet minMaxStep = this.adjustMinMax(omin, omax, omax - omin, this._gridCount, true);\r\n\t\t\t\t\t\tomin = minMaxStep.min;\r\n\t\t\t\t\t\tomax = minMaxStep.max;\r\n\t\t\t\t\t\tostep = minMaxStep.step;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmin = omin;\r\n\t\t\t\t\t\tmax = omax;\r\n\t\t\t\t\t\tstep = ostep;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\treturn { min: min, max: max, step: step };\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if axis needs to be resunced with some other axis.\r\n\t */\r\n\tprotected checkSync(min: number, max: number, step: number, count: number): boolean {\r\n\t\tlet currentCount = (max - min) / step;\r\n\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\tif ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.syncWithAxis) && $type.isString(config.syncWithAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.syncWithAxis)) {\r\n\t\t\t\t\tconfig.syncWithAxis = this.map.getKey(config.syncWithAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[ValueAxis] No axis with id \\\"\" + config.syncWithAxis + \"\\\" found for `syncWithAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ValueAxis\"] = ValueAxis;\r\nregistry.registeredClasses[\"ValueAxisDataItem\"] = ValueAxisDataItem;\r\n"]},"metadata":{},"sourceType":"module"}