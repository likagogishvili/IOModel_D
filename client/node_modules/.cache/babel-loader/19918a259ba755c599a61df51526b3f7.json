{"ast":null,"code":"function parseDate(timezone, date) {\n  var year = 0;\n  var month = 0;\n  var day = 1;\n  var hour = 0;\n  var minute = 0;\n  var second = 0;\n  var millisecond = 0;\n  var weekday = 0;\n  timezone.formatToParts(date).forEach(function (x) {\n    switch (x.type) {\n      case \"year\":\n        year = +x.value;\n        break;\n\n      case \"month\":\n        month = +x.value - 1;\n        break;\n\n      case \"day\":\n        day = +x.value;\n        break;\n\n      case \"hour\":\n        hour = +x.value;\n        break;\n\n      case \"minute\":\n        minute = +x.value;\n        break;\n\n      case \"second\":\n        second = +x.value;\n        break;\n\n      case \"fractionalSecond\":\n        millisecond = +x.value;\n        break;\n\n      case \"weekday\":\n        switch (x.value) {\n          case \"Sun\":\n            weekday = 0;\n            break;\n\n          case \"Mon\":\n            weekday = 1;\n            break;\n\n          case \"Tue\":\n            weekday = 2;\n            break;\n\n          case \"Wed\":\n            weekday = 3;\n            break;\n\n          case \"Thu\":\n            weekday = 4;\n            break;\n\n          case \"Fri\":\n            weekday = 5;\n            break;\n\n          case \"Sat\":\n            weekday = 6;\n            break;\n        }\n\n    }\n  });\n\n  if (hour === 24) {\n    hour = 0;\n  }\n\n  return {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond,\n    weekday: weekday\n  };\n}\n\nfunction toUTCDate(timezone, date) {\n  var _a = parseDate(timezone, date),\n      year = _a.year,\n      month = _a.month,\n      day = _a.day,\n      hour = _a.hour,\n      minute = _a.minute,\n      second = _a.second,\n      millisecond = _a.millisecond;\n\n  return Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\n\nvar Timezone =\n/** @class */\nfunction () {\n  function Timezone(timezone, isReal) {\n    Object.defineProperty(this, \"_utc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_dtf\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n\n    this.name = timezone;\n    this._utc = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: \"UTC\",\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      weekday: \"short\",\n      fractionalSecondDigits: 3\n    });\n    this._dtf = new Intl.DateTimeFormat(\"UTC\", {\n      hour12: false,\n      timeZone: timezone,\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      weekday: \"short\",\n      fractionalSecondDigits: 3\n    });\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   timezone  IANA timezone\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Timezone, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (timezone) {\n      return new this(timezone, true);\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"convertLocal\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      var offset = this.offsetUTC(date);\n      var userOffset = date.getTimezoneOffset();\n      var output = new Date(date);\n      output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n      var newUserOffset = output.getTimezoneOffset();\n\n      if (userOffset != newUserOffset) {\n        output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);\n      }\n\n      return output;\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"offsetUTC\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      var utc = toUTCDate(this._utc, date);\n      var dtf = toUTCDate(this._dtf, date);\n      return (utc - dtf) / 60000;\n    }\n  });\n  Object.defineProperty(Timezone.prototype, \"parseDate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (date) {\n      return parseDate(this._dtf, date);\n    }\n  });\n  return Timezone;\n}();\n\nexport { Timezone };","map":{"version":3,"mappings":"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","names":["parseDate","timezone","date","year","month","day","hour","minute","second","millisecond","weekday","formatToParts","forEach","x","type","value","toUTCDate","Date","UTC","isReal","Object","Error","name","_utc","Intl","DateTimeFormat","hour12","timeZone","fractionalSecondDigits","_dtf","offset","offsetUTC","userOffset","getTimezoneOffset","output","setUTCMinutes","getUTCMinutes","newUserOffset","utc","dtf"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/Timezone.ts"],"sourcesContent":["interface ParsedDate {\n\tyear: number,\n\tmonth: number,\n\tday: number,\n\thour: number,\n\tminute: number,\n\tsecond: number,\n\tmillisecond: number,\n\tweekday: number\n}\n\nfunction parseDate(timezone: Intl.DateTimeFormat, date: Date): ParsedDate {\n\tlet year = 0;\n\tlet month = 0;\n\tlet day = 1;\n\tlet hour = 0;\n\tlet minute = 0;\n\tlet second = 0;\n\tlet millisecond = 0;\n\tlet weekday = 0;\n\n\ttimezone.formatToParts(date).forEach((x) => {\n\t\tswitch (x.type) {\n\t\t\tcase \"year\":\n\t\t\t\tyear = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\tmonth = (+x.value) - 1;\n\t\t\t\tbreak;\n\t\t\tcase \"day\":\n\t\t\t\tday = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"hour\":\n\t\t\t\thour = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"minute\":\n\t\t\t\tminute = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"second\":\n\t\t\t\tsecond = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"fractionalSecond\" as any:\n\t\t\t\tmillisecond = +x.value;\n\t\t\t\tbreak;\n\t\t\tcase \"weekday\":\n\t\t\t\tswitch (x.value) {\n\t\t\t\t\tcase \"Sun\":\n\t\t\t\t\t\tweekday = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Mon\":\n\t\t\t\t\t\tweekday = 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Tue\":\n\t\t\t\t\t\tweekday = 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Wed\":\n\t\t\t\t\t\tweekday = 3;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Thu\":\n\t\t\t\t\t\tweekday = 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Fri\":\n\t\t\t\t\t\tweekday = 5;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Sat\":\n\t\t\t\t\t\tweekday = 6;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t});\n\n\tif (hour === 24) {\n\t\thour = 0;\n\t}\n\n\treturn { year, month, day, hour, minute, second, millisecond, weekday };\n}\n\n\nfunction toUTCDate(timezone: Intl.DateTimeFormat, date: Date): number {\n\tconst { year, month, day, hour, minute, second, millisecond } = parseDate(timezone, date);\n\treturn Date.UTC(year, month, day, hour, minute, second, millisecond);\n}\n\n\nexport class Timezone {\n\tprivate _utc: Intl.DateTimeFormat;\n\tprivate _dtf: Intl.DateTimeFormat;\n\n\tpublic readonly name: string | undefined;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   timezone  IANA timezone\n\t * @return            Instantiated object\n\t */\n\tstatic new<C extends typeof Timezone, T extends InstanceType<C>>(this: C, timezone: string | undefined): T {\n\t\treturn (new this(timezone, true)) as T;\n\t}\n\n\tconstructor(timezone: string | undefined, isReal: boolean) {\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\n\t\tthis.name = timezone;\n\n\t\tthis._utc = new Intl.DateTimeFormat(\"UTC\", {\n\t\t\thour12: false,\n\t\t\ttimeZone: \"UTC\",\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"2-digit\",\n\t\t\tday: \"2-digit\",\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t\tweekday: \"short\",\n\t\t\tfractionalSecondDigits: 3,\n\t\t} as any);\n\n\t\tthis._dtf = new Intl.DateTimeFormat(\"UTC\", {\n\t\t\thour12: false,\n\t\t\ttimeZone: timezone,\n\t\t\tyear: \"numeric\",\n\t\t\tmonth: \"2-digit\",\n\t\t\tday: \"2-digit\",\n\t\t\thour: \"2-digit\",\n\t\t\tminute: \"2-digit\",\n\t\t\tsecond: \"2-digit\",\n\t\t\tweekday: \"short\",\n\t\t\tfractionalSecondDigits: 3,\n\t\t} as any);\n\t}\n\n\tconvertLocal(date: Date): Date {\n\t\tconst offset = this.offsetUTC(date);\n\t\tconst userOffset = date.getTimezoneOffset();\n\t\tconst output = new Date(date);\n\t\toutput.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));\n\n\t\tconst newUserOffset = output.getTimezoneOffset();\n\n\t\tif (userOffset != newUserOffset) {\n\t\t\toutput.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset)\n\t\t}\n\n\t\treturn output;\n\t}\n\n\toffsetUTC(date: Date): number {\n\t\tconst utc = toUTCDate(this._utc, date);\n\t\tconst dtf = toUTCDate(this._dtf, date);\n\t\treturn (utc - dtf) / 60000;\n\t}\n\n\tparseDate(date: Date): ParsedDate {\n\t\treturn parseDate(this._dtf, date)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}