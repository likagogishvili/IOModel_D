{"ast":null,"code":"/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nexport var PI = Math.PI;\nexport var HALFPI = PI / 2;\nexport var RADIANS = PI / 180;\nexport var DEGREES = 180 / PI;\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\n\nexport function toNumberRange(value, min, max) {\n  if ($type.hasValue(value)) {\n    value = $type.toNumber(value);\n    return fitToRange(value, min, max);\n  }\n\n  return value;\n}\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\n\nexport function round(value, precision, floor) {\n  if (!$type.isNumber(precision) || precision <= 0) {\n    var rounded = Math.round(value);\n\n    if (floor) {\n      if (rounded - value == 0.5) {\n        rounded--;\n      }\n    }\n\n    return rounded;\n  } else {\n    var d = Math.pow(10, precision);\n    return Math.round(value * d) / d;\n  }\n}\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\n\nexport function ceil(value, precision) {\n  if (!$type.isNumber(precision) || precision <= 0) {\n    return Math.ceil(value);\n  } else {\n    var d = Math.pow(10, precision);\n    return Math.ceil(value * d) / d;\n  }\n}\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\n\nexport function stretch(t, from, to) {\n  return t * (to - from) + from;\n}\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\n\nexport function fitToRange(value, minValue, maxValue) {\n  if ($type.isNumber(minValue)) {\n    if ($type.isNumber(maxValue) && maxValue < minValue) {\n      var temp = maxValue;\n      maxValue = minValue;\n      minValue = temp;\n    }\n\n    if (value < minValue) {\n      value = minValue;\n    }\n  }\n\n  if ($type.isNumber(maxValue)) {\n    if (value > maxValue) {\n      value = maxValue;\n    }\n  }\n\n  return value;\n}\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\n\nexport function sin(value) {\n  return round(Math.sin(RADIANS * value), 10);\n}\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\n\nexport function tan(value) {\n  return round(Math.tan(RADIANS * value), 10);\n}\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\n\nexport function cos(value) {\n  return round(Math.cos(RADIANS * value), 10);\n}\nexport function max(left, right) {\n  if ($type.isNumber(left)) {\n    if ($type.isNumber(right)) {\n      if (right > left) {\n        return right;\n      } else {\n        return left;\n      }\n    } else {\n      return left;\n    }\n  } else if ($type.isNumber(right)) {\n    return right;\n  } else {\n    return null;\n  }\n}\nexport function min(left, right) {\n  if ($type.isNumber(left)) {\n    if ($type.isNumber(right)) {\n      if (right < left) {\n        return right;\n      } else {\n        return left;\n      }\n    } else {\n      return left;\n    }\n  } else if ($type.isNumber(right)) {\n    return right;\n  } else {\n    return null;\n  }\n}\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\n\nexport function closest(values, referenceValue) {\n  return values.reduce(function (prev, curr) {\n    return Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev;\n  });\n}\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\n\nexport function intersect(range1, range2) {\n  var start1 = $type.getValue(range1.start);\n  var start2 = $type.getValue(range2.start);\n  var end1 = $type.getValue(range1.end);\n  var end2 = $type.getValue(range2.end);\n  return Math.max(start1, start2) <= Math.min(end1, end2);\n}\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\n\nexport function invertRange(range) {\n  var start = $type.getValue(range.start);\n  var end = $type.getValue(range.end);\n  return {\n    start: 1 - end,\n    end: 1 - start\n  };\n}\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\n\nexport function intersection(range1, range2) {\n  var start1 = $type.getValue(range1.start);\n  var start2 = $type.getValue(range2.start);\n  var end1 = $type.getValue(range1.end);\n  var end2 = $type.getValue(range2.end);\n  var startMax = Math.max(start1, start2);\n  var endMin = Math.min(end1, end2);\n\n  if (endMin < startMax) {\n    return undefined;\n  } else {\n    return {\n      start: startMax,\n      end: endMin\n    };\n  }\n}\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\n\nexport function getDistance(point1, point2) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\n}\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\n\nexport function getHorizontalDistance(point1, point2) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return Math.abs(point1.x - point2.x);\n}\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\n\nexport function getVerticalDistance(point1, point2) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return Math.abs(point1.y - point2.y);\n}\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\n\nexport function getCubicCurveDistance(point1, point2, controlPointA, controlPointB, stepCount) {\n  if (!point1) {\n    return 0;\n  }\n\n  if (!point2) {\n    point2 = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var distance = 0;\n  var prevPoint = point1;\n\n  if (stepCount > 0) {\n    for (var s = 0; s <= stepCount; s++) {\n      var point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\n      distance += getDistance(prevPoint, point);\n      prevPoint = point;\n    }\n  }\n\n  return distance;\n}\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\n\nexport function getScale(point1, startPoint1, point2, startPoint2) {\n  var initialDistance = getDistance(startPoint1, startPoint2);\n  var currentDistance = getDistance(point1, point2);\n  return Math.abs(currentDistance / initialDistance);\n}\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\n\nexport function getMidPoint(point1, point2, position) {\n  if (!$type.isNumber(position)) {\n    position = 0.5;\n  }\n\n  return {\n    \"x\": point1.x + (point2.x - point1.x) * position,\n    \"y\": point1.y + (point2.y - point1.y) * position\n  };\n}\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\n\nexport function getRotation(point1, startPoint1, point2, startPoint2) {\n  // Get start and end angles\n  var startAngle = getAngle(startPoint1, startPoint2);\n  var angle = getAngle(point1, point2); // Calculate angle\n\n  var diff = startAngle - angle;\n\n  if (diff < 0) {\n    diff += 360;\n  }\n\n  return diff;\n}\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\n\nexport function getAngle(point1, point2) {\n  if (!point2) {\n    point2 = {\n      x: point1.x * 2,\n      y: point1.y * 2\n    };\n  }\n\n  var diffX = point2.x - point1.x;\n  var diffY = point2.y - point1.y;\n  var angle = Math.atan2(diffY, diffX) * DEGREES;\n\n  if (angle < 0) {\n    angle += 360;\n  }\n\n  return normalizeAngle(angle);\n}\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\n\nexport function getCenterShift(center, point1, startPoint1, point2, startPoint2) {\n  // Get angle\n  var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;\n\n  if (angle < 0) {\n    angle += 360;\n  } // Get distance between new position\n\n\n  var distance = getDistance(point1, point2); // Calculate new X\n\n  var x = Math.cos(angle) / distance + point1.x;\n  var y = Math.cos(angle) / distance + point1.y;\n  var shift = {\n    \"x\": x - center.x,\n    \"y\": y - center.y\n  };\n  return shift;\n}\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\n\nexport function getBBox(points) {\n  if (points) {\n    var length_1 = points.length;\n\n    if (length_1 !== 0) {\n      var left = void 0;\n      var right = void 0;\n      var top_1;\n      var bottom = void 0;\n\n      for (var i = 0; i < length_1; i++) {\n        var point = points[i];\n\n        if (!$type.isNumber(right) || point.x > right) {\n          right = point.x;\n        }\n\n        if (!$type.isNumber(left) || point.x < left) {\n          left = point.x;\n        }\n\n        if (!$type.isNumber(top_1) || point.y < top_1) {\n          top_1 = point.y;\n        }\n\n        if (!$type.isNumber(bottom) || point.y > bottom) {\n          bottom = point.y;\n        }\n      }\n\n      return {\n        x: left,\n        y: top_1,\n        width: right - left,\n        height: bottom - top_1\n      };\n    }\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n}\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\n\nexport function getCommonRectangle(rectangles) {\n  var length = rectangles.length;\n\n  if (length !== 0) {\n    var minX = void 0;\n    var minY = void 0;\n    var maxX = void 0;\n    var maxY = void 0;\n\n    for (var i = 0; i < length; i++) {\n      var rectangle = rectangles[i];\n      minX = min(rectangle.x, minX);\n      minY = min(rectangle.y, minY);\n      maxX = max(rectangle.x + rectangle.width, maxX);\n      maxY = max(rectangle.y + rectangle.height, maxY);\n    }\n\n    return {\n      x: minX,\n      y: minY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  }\n}\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\n\nexport function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {\n  var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\n  var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\n\nexport function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {\n  var point = {\n    x: 0,\n    y: 0\n  };\n  var mt1 = 1 - position;\n  var mt2 = mt1 * mt1;\n  var mt3 = mt2 * mt1;\n  point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\n  point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\n  return point;\n}\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\n\nexport function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {\n  tensionX = adjustTension(tensionX);\n  tensionY = adjustTension(tensionY);\n  return {\n    x: (-p0.x + p1.x / tensionX + p2.x) * tensionX,\n    y: (-p0.y + p1.y / tensionY + p2.y) * tensionY\n  };\n}\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\n\nexport function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {\n  tensionX = adjustTension(tensionX);\n  tensionY = adjustTension(tensionY);\n  return {\n    x: (p1.x + p2.x / tensionX - p3.x) * tensionX,\n    y: (p1.y + p2.y / tensionY - p3.y) * tensionY\n  };\n}\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\n\nexport function adjustTension(tension) {\n  return 1 - tension + 0.00001;\n}\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\n\nexport function normalizeAngle(value) {\n  if (value == 360) {\n    return 360;\n  }\n\n  return value % 360;\n}\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\n\nexport function fitAngleToRange(value, startAngle, endAngle) {\n  if (startAngle > endAngle) {\n    var temp = startAngle;\n    startAngle = endAngle;\n    endAngle = temp;\n  }\n\n  value = normalizeAngle(value);\n  var count = (startAngle - normalizeAngle(startAngle)) / 360;\n\n  if (value < startAngle) {\n    value += 360 * (count + 1);\n  }\n\n  var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;\n  var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;\n\n  if (value > endAngle) {\n    if (value - 360 > startAngle) {\n      value -= 360;\n    } else {\n      if (value < maxEnd) {\n        value = endAngle;\n      } else {\n        value = startAngle;\n      }\n    }\n  }\n\n  if (value < startAngle) {\n    if (value > maxStart) {\n      value = startAngle;\n    } else {\n      value = endAngle;\n    }\n  }\n\n  return value;\n}\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\n\nexport function getArcRect(startAngle, endAngle, radius) {\n  var minX = Number.MAX_VALUE;\n  var minY = Number.MAX_VALUE;\n  var maxX = -Number.MAX_VALUE;\n  var maxY = -Number.MAX_VALUE;\n  var bpoints = [];\n\n  if (!$type.isNumber(radius)) {\n    radius = 1;\n  }\n\n  bpoints.push(getArcPoint(radius, startAngle));\n  bpoints.push(getArcPoint(radius, endAngle));\n  var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\n  var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\n\n  for (var angle = fromAngle; angle <= toAngle; angle += 90) {\n    if (angle >= startAngle && angle <= endAngle) {\n      bpoints.push(getArcPoint(radius, angle));\n    }\n  }\n\n  for (var i = 0; i < bpoints.length; i++) {\n    var pt = bpoints[i];\n\n    if (pt.x < minX) {\n      minX = pt.x;\n    }\n\n    if (pt.y < minY) {\n      minY = pt.y;\n    }\n\n    if (pt.x > maxX) {\n      maxX = pt.x;\n    }\n\n    if (pt.y > maxY) {\n      maxY = pt.y;\n    }\n  }\n\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\n\nexport function getArcPoint(radius, arc) {\n  return {\n    x: radius * cos(arc),\n    y: radius * sin(arc)\n  };\n}\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\n\nexport function isInRectangle(point, rectangle) {\n  if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y >= rectangle.y && point.y <= rectangle.y + rectangle.height) {\n    return true;\n  }\n\n  return false;\n}\nexport function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {\n  var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\n  var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\n  return {\n    x: x,\n    y: y\n  };\n}","map":{"version":3,"mappings":"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","names":["$type","PI","Math","HALFPI","RADIANS","DEGREES","toNumberRange","value","min","max","hasValue","toNumber","fitToRange","round","precision","floor","isNumber","rounded","d","pow","ceil","stretch","t","from","to","minValue","maxValue","temp","sin","tan","cos","left","right","closest","values","referenceValue","reduce","prev","curr","abs","intersect","range1","range2","start1","getValue","start","start2","end1","end","end2","invertRange","range","intersection","startMax","endMin","undefined","getDistance","point1","point2","x","y","sqrt","getHorizontalDistance","getVerticalDistance","getCubicCurveDistance","controlPointA","controlPointB","stepCount","distance","prevPoint","s","point","getPointOnCubicCurve","getScale","startPoint1","startPoint2","initialDistance","currentDistance","getMidPoint","position","getRotation","startAngle","getAngle","angle","diff","diffX","diffY","atan2","normalizeAngle","getCenterShift","center","shift","getBBox","points","length_1","length","top_1","bottom","i","width","height","getCommonRectangle","rectangles","minX","minY","maxX","maxY","rectangle","getPointOnQuadraticCurve","pointA","pointB","controlPoint","mt1","mt2","mt3","getCubicControlPointA","p0","p1","p2","p3","tensionX","tensionY","adjustTension","getCubicControlPointB","tension","fitAngleToRange","endAngle","count","maxEnd","maxStart","getArcRect","radius","Number","MAX_VALUE","bpoints","push","getArcPoint","fromAngle","toAngle","pt","arc","isInRectangle","getLineIntersection","pointA1","pointA2","pointB1","pointB2"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Math.ts"],"sourcesContent":["/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { IRange } from \"../defs/IRange\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport const PI = Math.PI;\r\nexport const HALFPI = PI / 2;\r\nexport const RADIANS = PI / 180;\r\nexport const DEGREES = 180 / PI;\r\n\r\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\r\nexport function toNumberRange(value: any, min: number, max: number): number {\r\n\tif ($type.hasValue(value)) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\treturn fitToRange(value, min, max);\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\r\nexport function round(value: number, precision?: number, floor?: boolean): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\r\n\t\tlet rounded = Math.round(value);\r\n\t\tif (floor) {\r\n\t\t\tif (rounded - value == 0.5) {\r\n\t\t\t\trounded--;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn rounded;\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.round(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\r\nexport function ceil(value: number, precision?: number): number {\r\n\tif (!$type.isNumber(precision) || precision <= 0) {\r\n\t\treturn Math.ceil(value);\r\n\t}\r\n\telse {\r\n\t\tlet d: number = Math.pow(10, precision);\r\n\t\treturn Math.ceil(value * d) / d;\r\n\t}\r\n}\r\n\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function stretch(t: number, from: number, to: number): number {\r\n\treturn (t * (to - from)) + from;\r\n}\r\n\r\n\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function fitToRange(value: number, minValue: $type.Optional<number>, maxValue: $type.Optional<number>): number {\r\n\tif ($type.isNumber(minValue)) {\r\n\t\tif ($type.isNumber(maxValue) && maxValue < minValue) {\r\n\t\t\tlet temp = maxValue;\r\n\t\t\tmaxValue = minValue;\r\n\t\t\tminValue = temp;\r\n\t\t}\r\n\r\n\t\tif (value < minValue) {\r\n\t\t\tvalue = minValue;\r\n\t\t}\r\n\t}\r\n\r\n\tif ($type.isNumber(maxValue)) {\r\n\t\tif (value > maxValue) {\r\n\t\t\tvalue = maxValue;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function sin(value: number): number {\r\n\treturn round(Math.sin(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function tan(value: number): number {\r\n\treturn round(Math.tan(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\r\nexport function cos(value: number): number {\r\n\treturn round(Math.cos(RADIANS * value), 10);\r\n}\r\n\r\n/**\r\n * Returns biggest value out of passed in numeric values.\r\n *\r\n * @param left   Numeric value\r\n * @param right  Numeric value\r\n * @return Biggest value\r\n */\r\nexport function max(left: number, right: number): number;\r\nexport function max(left: number, right: $type.Optional<number>): number;\r\nexport function max(left: $type.Optional<number>, right: number): number;\r\nexport function max(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function max(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right > left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns smallest value out of passed in numeric values.\r\n *\r\n * @param left   Numeric value\r\n * @param right  Numeric value\r\n * @return Smallest value\r\n */\r\nexport function min(left: number, right: number): number;\r\nexport function min(left: number, right: $type.Optional<number>): number;\r\nexport function min(left: $type.Optional<number>, right: number): number;\r\nexport function min(left: $type.Optional<number>, right: $type.Optional<number>): $type.Optional<number>;\r\nexport function min(left: any, right: any): any {\r\n\tif ($type.isNumber(left)) {\r\n\t\tif ($type.isNumber(right)) {\r\n\t\t\tif (right < left) {\r\n\t\t\t\treturn right;\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn left;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn left;\r\n\t\t}\r\n\r\n\t} else if ($type.isNumber(right)) {\r\n\t\treturn right;\r\n\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\r\nexport function closest(values: number[], referenceValue: number): number {\r\n\treturn values.reduce(function(prev, curr) {\r\n\t\treturn (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n\t});\r\n}\r\n\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\r\nexport function intersect(range1: IRange, range2: IRange): boolean {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\r\n\treturn Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\r\nexport function invertRange(range: IRange) {\r\n\tlet start: number = $type.getValue(range.start);\r\n\tlet end: number = $type.getValue(range.end);\r\n\treturn { start: 1 - end, end: 1 - start };\r\n}\r\n\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\r\nexport function intersection(range1: IRange, range2: IRange): $type.Optional<IRange> {\r\n\tlet start1: number = $type.getValue(range1.start);\r\n\tlet start2: number = $type.getValue(range2.start);\r\n\tlet end1: number = $type.getValue(range1.end);\r\n\tlet end2: number = $type.getValue(range2.end);\r\n\tlet startMax: number = Math.max(start1, start2);\r\n\tlet endMin: number = Math.min(end1, end2);\r\n\r\n\tif (endMin < startMax) {\r\n\t\treturn undefined;\r\n\t}\r\n\telse {\r\n\t\treturn { start: startMax, end: endMin };\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n\r\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getHorizontalDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.abs(point1.x - point2.x);\r\n}\r\n\r\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getVerticalDistance(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\treturn Math.abs(point1.y - point2.y);\r\n}\r\n\r\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\r\nexport function getCubicCurveDistance(point1: IPoint, point2: IPoint, controlPointA: IPoint, controlPointB: IPoint, stepCount:number): number {\r\n\tif (!point1) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: 0, y: 0 };\r\n\t}\r\n\r\n\tlet distance = 0;\r\n\tlet prevPoint: IPoint = point1;\r\n\tif (stepCount > 0) {\r\n\t\tfor (let s = 0; s <= stepCount; s++) {\r\n\t\t\tlet point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\r\n\t\t\tdistance += getDistance(prevPoint, point);\r\n\t\t\tprevPoint = point;\r\n\t\t}\r\n\t}\r\n\treturn distance;\r\n}\r\n\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\r\nexport function getScale(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\tlet initialDistance: number = getDistance(startPoint1, startPoint2);\r\n\tlet currentDistance: number = getDistance(point1, point2);\r\n\r\n\treturn Math.abs(currentDistance / initialDistance);\r\n}\r\n\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1: IPoint, point2: IPoint, position?: number): IPoint {\r\n\tif (!$type.isNumber(position)) {\r\n\t\tposition = 0.5;\r\n\t}\r\n\r\n\treturn {\r\n\t\t\"x\": (point1.x + (point2.x - point1.x) * position),\r\n\t\t\"y\": (point1.y + (point2.y - point1.y) * position)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\r\nexport function getRotation(point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): number {\r\n\r\n\t// Get start and end angles\r\n\tlet startAngle: number = getAngle(startPoint1, startPoint2);\r\n\tlet angle: number = getAngle(point1, point2);\r\n\r\n\t// Calculate angle\r\n\tlet diff: number = startAngle - angle;\r\n\tif (diff < 0) {\r\n\t\tdiff += 360;\r\n\t}\r\n\r\n\treturn diff;\r\n}\r\n\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\r\nexport function getAngle(point1: IPoint, point2?: IPoint): number {\r\n\tif (!point2) {\r\n\t\tpoint2 = { x: point1.x * 2, y: point1.y * 2 };\r\n\t}\r\n\tlet diffX: number = point2.x - point1.x;\r\n\tlet diffY: number = point2.y - point1.y;\r\n\tlet angle: number = Math.atan2(diffY, diffX) * DEGREES;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\treturn normalizeAngle(angle);\r\n}\r\n\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center: IPoint, point1: IPoint, startPoint1: IPoint, point2: IPoint, startPoint2: IPoint): IPoint {\r\n\r\n\t// Get angle\r\n\tlet angle: number = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n\tif (angle < 0) {\r\n\t\tangle += 360;\r\n\t}\r\n\r\n\t// Get distance between new position\r\n\tlet distance: number = getDistance(point1, point2);\r\n\r\n\t// Calculate new X\r\n\tlet x: number = Math.cos(angle) / distance + point1.x;\r\n\tlet y: number = Math.cos(angle) / distance + point1.y;\r\n\r\n\tlet shift: IPoint = {\r\n\t\t\"x\": x - center.x,\r\n\t\t\"y\": y - center.y\r\n\t}\r\n\treturn shift;\r\n}\r\n\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\r\nexport function getBBox(points: IPoint[]): $type.Optional<IRectangle> {\r\n\tif (points) {\r\n\t\tlet length = points.length;\r\n\r\n\t\tif (length !== 0) {\r\n\t\t\tlet left!: number;\r\n\t\t\tlet right!: number;\r\n\t\t\tlet top!: number;\r\n\t\t\tlet bottom!: number;\r\n\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tlet point: IPoint = points[i];\r\n\r\n\t\t\t\tif (!$type.isNumber(right) || (point.x > right)) {\r\n\t\t\t\t\tright = point.x;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(left) || (point.x < left)) {\r\n\t\t\t\t\tleft = point.x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.isNumber(top) || (point.y < top)) {\r\n\t\t\t\t\ttop = point.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n\t\t\t\t\tbottom = point.y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn { x: left, y: top, width: right - left, height: bottom - top };\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles: IRectangle[]): $type.Optional<IRectangle> {\r\n\tlet length = rectangles.length;\r\n\r\n\tif (length !== 0) {\r\n\t\tlet minX!: number;\r\n\t\tlet minY!: number;\r\n\t\tlet maxX!: number;\r\n\t\tlet maxY!: number;\r\n\r\n\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\tlet rectangle = rectangles[i];\r\n\t\t\tminX = min(rectangle.x, minX);\r\n\t\t\tminY = min(rectangle.y, minY);\r\n\t\t\tmaxX = max(rectangle.x + rectangle.width, maxX);\r\n\t\t\tmaxY = max(rectangle.y + rectangle.height, maxY);\r\n\t\t}\r\n\r\n\t\treturn { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n\t}\r\n}\r\n\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA: IPoint, pointB: IPoint, controlPoint: IPoint, position: number): IPoint {\r\n\tlet x: number = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n\tlet y: number = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA: IPoint, pointB: IPoint, controlPointA: IPoint, controlPointB: IPoint, position: number): IPoint {\r\n\tlet point: IPoint = { x: 0, y: 0 };\r\n\tlet mt1: number = 1 - position;\r\n\tlet mt2: number = mt1 * mt1;\r\n\tlet mt3: number = mt2 * mt1;\r\n\r\n\tpoint.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n\tpoint.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n\r\n\treturn point;\r\n}\r\n\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointA(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointB(p0: IPoint, p1: IPoint, p2: IPoint, p3: IPoint, tensionX: number, tensionY: number): IPoint {\r\n\ttensionX = adjustTension(tensionX);\r\n\ttensionY = adjustTension(tensionY);\r\n\treturn { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\r\nexport function adjustTension(tension: number): number {\r\n\treturn 1 - tension + 0.00001;\r\n}\r\n\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\r\nexport function normalizeAngle(value: number): number {\r\n\tif (value == 360) {\r\n\t\treturn 360;\r\n\t}\r\n\treturn value % 360;\r\n}\r\n\r\n\r\n\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\r\nexport function fitAngleToRange(value: number, startAngle: number, endAngle: number): number {\r\n\r\n\tif (startAngle > endAngle) {\r\n\t\tlet temp: number = startAngle;\r\n\t\tstartAngle = endAngle;\r\n\t\tendAngle = temp;\r\n\t}\r\n\r\n\tvalue = normalizeAngle(value);\r\n\r\n\tlet count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n\r\n\tif (value < startAngle) {\r\n\t\tvalue += 360 * (count + 1);\r\n\t}\r\n\r\n\tlet maxEnd: number = startAngle + (endAngle - startAngle) / 2 + 180;\r\n\tlet maxStart: number = startAngle + (endAngle - startAngle) / 2 - 180;\r\n\r\n\tif (value > endAngle) {\r\n\r\n\t\tif (value - 360 > startAngle) {\r\n\t\t\tvalue -= 360;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (value < maxEnd) {\r\n\t\t\t\tvalue = endAngle;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (value < startAngle) {\r\n\t\tif (value > maxStart) {\r\n\t\t\tvalue = startAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue = endAngle;\r\n\t\t}\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\r\nexport function getArcRect(startAngle: number, endAngle: number, radius?: number): IRectangle {\r\n\r\n\tlet minX = Number.MAX_VALUE;\r\n\tlet minY = Number.MAX_VALUE;\r\n\tlet maxX = -Number.MAX_VALUE;\r\n\tlet maxY = -Number.MAX_VALUE;\r\n\r\n\tlet bpoints = [];\r\n\r\n\tif (!$type.isNumber(radius)) {\r\n\t\tradius = 1;\r\n\t}\r\n\r\n\tbpoints.push(getArcPoint(radius, startAngle));\r\n\tbpoints.push(getArcPoint(radius, endAngle));\r\n\r\n\tlet fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\r\n\tlet toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\r\n\r\n\tfor (let angle = fromAngle; angle <= toAngle; angle += 90) {\r\n\t\tif (angle >= startAngle && angle <= endAngle) {\r\n\t\t\tbpoints.push(getArcPoint(radius, angle));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < bpoints.length; i++) {\r\n\t\tlet pt = bpoints[i];\r\n\t\tif (pt.x < minX) { minX = pt.x; }\r\n\t\tif (pt.y < minY) { minY = pt.y; }\r\n\t\tif (pt.x > maxX) { maxX = pt.x; }\r\n\t\tif (pt.y > maxY) { maxY = pt.y; }\r\n\t}\r\n\r\n\treturn ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\r\n}\r\n\r\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\r\nexport function getArcPoint(radius: number, arc: number) {\r\n\treturn ({ x: radius * cos(arc), y: radius * sin(arc) });\r\n}\r\n\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\r\nexport function isInRectangle(point: IPoint, rectangle: IRectangle): boolean {\r\n\tif (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y >= rectangle.y && point.y <= rectangle.y + rectangle.height) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nexport function getLineIntersection(pointA1: IPoint, pointA2: IPoint, pointB1: IPoint, pointB2: IPoint) {\r\n\tlet x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\tlet y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n\treturn { x: x, y: y };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}