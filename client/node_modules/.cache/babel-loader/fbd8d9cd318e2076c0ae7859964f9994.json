{"ast":null,"code":"import { __extends, __generator } from \"tslib\";\nimport { EventDispatcher } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\n/**\r\n * Checks if specific index fits into length.\r\n *\r\n * @param index  Index\r\n * @param len    Length\r\n * @ignore\r\n */\n\nfunction checkBounds(index, len) {\n  if (!(index >= 0 && index < len)) {\n    throw new Error(\"Index out of bounds: \" + index);\n  }\n}\n/**\r\n * A List class is used to hold a number of indexed items of the same type.\r\n */\n\n\nvar List =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param initial  Inital list of values to add to list\r\n   */\n  function List(initial) {\n    if (initial === void 0) {\n      initial = [];\n    }\n    /**\r\n     * List values.\r\n     */\n\n\n    Object.defineProperty(this, \"_values\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    this._values = initial;\n  }\n\n  Object.defineProperty(List.prototype, \"values\", {\n    /**\r\n     * An array of values in the list.\r\n     *\r\n     * Do not use this property to add values. Rather use dedicated methods, like\r\n     * `push()`, `removeIndex()`, etc.\r\n     *\r\n     * @readonly\r\n     * @return List values\r\n     */\n    get: function () {\n      return this._values;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if list contains specific item reference.\r\n   *\r\n   * @param item  Item to search for\r\n   * @return `true` if found, `false` if not found\r\n   */\n\n  Object.defineProperty(List.prototype, \"contains\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return this._values.indexOf(value) !== -1;\n    }\n  });\n  /**\r\n   * Removes specific item from the list.\r\n   *\r\n   * @param item An item to remove\r\n   */\n\n  Object.defineProperty(List.prototype, \"removeValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      var i = 0;\n      var length = this._values.length;\n\n      while (i < length) {\n        // TODO handle NaN\n        if (this._values[i] === value) {\n          this.removeIndex(i);\n          --length;\n        } else {\n          ++i;\n        }\n      }\n    }\n  });\n  /**\r\n   * Searches the list for specific item and returns its index.\r\n   *\r\n   * @param item  An item to search for\r\n   * @return Index or -1 if not found\r\n   */\n\n  Object.defineProperty(List.prototype, \"indexOf\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      return $array.indexOf(this._values, value);\n    }\n  });\n  Object.defineProperty(List.prototype, \"length\", {\n    /**\r\n     * Number of items in list.\r\n     *\r\n     * @readonly\r\n     * @return Number of items\r\n     */\n    get: function () {\n      return this._values.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if there's a value at specific index.\r\n   *\r\n   * @param index  Index\r\n   * @return Value exists?\r\n   */\n\n  Object.defineProperty(List.prototype, \"hasIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return index >= 0 && index < this._values.length;\n    }\n  });\n  /**\r\n   * Returns an item at specified index.\r\n   *\r\n   * @param index  Index\r\n   * @return List item\r\n   */\n\n  Object.defineProperty(List.prototype, \"getIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      return this._values[index];\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onPush\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newValue) {\n      if (this.events.isEnabled(\"push\")) {\n        this.events.dispatch(\"push\", {\n          type: \"push\",\n          target: this,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onInsertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, newValue) {\n      if (this.events.isEnabled(\"insertIndex\")) {\n        this.events.dispatch(\"insertIndex\", {\n          type: \"insertIndex\",\n          target: this,\n          index: index,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.events.isEnabled(\"setIndex\")) {\n        this.events.dispatch(\"setIndex\", {\n          type: \"setIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue,\n          newValue: newValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.events.isEnabled(\"removeIndex\")) {\n        this.events.dispatch(\"removeIndex\", {\n          type: \"removeIndex\",\n          target: this,\n          index: index,\n          oldValue: oldValue\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onMoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldIndex, newIndex, value) {\n      if (this.events.isEnabled(\"moveIndex\")) {\n        this.events.dispatch(\"moveIndex\", {\n          type: \"moveIndex\",\n          target: this,\n          oldIndex: oldIndex,\n          newIndex: newIndex,\n          value: value\n        });\n      }\n    }\n  });\n  Object.defineProperty(List.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.events.isEnabled(\"clear\")) {\n        this.events.dispatch(\"clear\", {\n          type: \"clear\",\n          target: this,\n          oldValues: oldValues\n        });\n      }\n    }\n  });\n  /**\r\n   * Sets value at specific index.\r\n   *\r\n   * If there's already a value at the index, it is overwritten.\r\n   *\r\n   * @param index  Index\r\n   * @param value  New value\r\n   * @return New value\r\n   */\n\n  Object.defineProperty(List.prototype, \"setIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index]; // Do nothing if the old value and the new value are the same\n\n      if (oldValue !== value) {\n        this._values[index] = value;\n\n        this._onSetIndex(index, oldValue, value);\n      }\n\n      return oldValue;\n    }\n  });\n  /**\r\n   * Adds an item to the list at a specific index, which pushes all the other\r\n   * items further down the list.\r\n   *\r\n   * @param index Index\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"insertIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, value) {\n      checkBounds(index, this._values.length + 1);\n      $array.insertIndex(this._values, index, value);\n\n      this._onInsertIndex(index, value);\n\n      return value;\n    }\n  });\n  /**\r\n   * Swaps indexes of two items in the list.\r\n   *\r\n   * @param a  Item 1\r\n   * @param b  Item 2\r\n   */\n\n  Object.defineProperty(List.prototype, \"swap\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (a, b) {\n      var len = this._values.length;\n      checkBounds(a, len);\n      checkBounds(b, len);\n\n      if (a !== b) {\n        var value_a = this._values[a];\n        var value_b = this._values[b];\n        this._values[a] = value_b;\n\n        this._onSetIndex(a, value_a, value_b);\n\n        this._values[b] = value_a;\n\n        this._onSetIndex(b, value_b, value_a);\n      }\n    }\n  });\n  /**\r\n   * Removes a value at specific index.\r\n   *\r\n   * @param index  Index of value to remove\r\n   * @return Removed value\r\n   */\n\n  Object.defineProperty(List.prototype, \"removeIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index) {\n      checkBounds(index, this._values.length);\n      var oldValue = this._values[index];\n      $array.removeIndex(this._values, index);\n\n      this._onRemoveIndex(index, oldValue);\n\n      return oldValue;\n    }\n  });\n  /**\r\n   * Moves an item to a specific index within the list.\r\n   *\r\n   * If the index is not specified it will move the item to the end of the\r\n   * list.\r\n   *\r\n   * @param value  Item to move\r\n   * @param index  Index to place item at\r\n   */\n\n  Object.defineProperty(List.prototype, \"moveValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, toIndex) {\n      // TODO don't do anything if the desired index is the same as the current index\n      var index = this.indexOf(value); // TODO remove all old values rather than only the first ?\n\n      if (index !== -1) {\n        $array.removeIndex(this._values, index);\n\n        if (toIndex == null) {\n          var toIndex_1 = this._values.length;\n\n          this._values.push(value);\n\n          this._onMoveIndex(index, toIndex_1, value);\n        } else {\n          $array.insertIndex(this._values, toIndex, value);\n\n          this._onMoveIndex(index, toIndex, value);\n        }\n      } else if (toIndex == null) {\n        this._values.push(value);\n\n        this._onPush(value);\n      } else {\n        $array.insertIndex(this._values, toIndex, value);\n\n        this._onInsertIndex(toIndex, value);\n      }\n\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item to the end of the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"push\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this._values.push(value);\n\n      this._onPush(value);\n\n      return value;\n    }\n  });\n  /**\r\n   * Adds an item as a first item in the list.\r\n   *\r\n   * @param item  An item to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"unshift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value) {\n      this.insertIndex(0, value);\n      return value;\n    }\n  });\n  /**\r\n   * Adds multiple items to the list.\r\n   *\r\n   * @param items  An Array of items to add\r\n   */\n\n  Object.defineProperty(List.prototype, \"pushAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (values) {\n      var _this = this;\n\n      $array.each(values, function (value) {\n        _this.push(value);\n      });\n    }\n  });\n  /**\r\n   * Copies and adds items from abother list.\r\n   *\r\n   * @param source  A list top copy items from\r\n   */\n\n  Object.defineProperty(List.prototype, \"copyFrom\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (source) {\n      this.pushAll(source._values);\n    }\n  });\n  /**\r\n   * Returns the last item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n  Object.defineProperty(List.prototype, \"pop\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var index = this._values.length - 1;\n      return index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n    }\n  });\n  /**\r\n   * Returns the first item from the list, and removes it.\r\n   *\r\n   * @return Item\r\n   */\n\n  Object.defineProperty(List.prototype, \"shift\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._values.length ? this.removeIndex(0) : undefined;\n    }\n  });\n  /**\r\n   * Sets multiple items to the list.\r\n   *\r\n   * All current items are removed.\r\n   *\r\n   * @param newArray  New items\r\n   */\n\n  Object.defineProperty(List.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newArray) {\n      var _this = this;\n\n      var old = this._values;\n      this._values = [];\n\n      this._onClear(old);\n\n      $array.each(newArray, function (value) {\n        _this._values.push(value);\n\n        _this._onPush(value);\n      });\n    }\n  });\n  /**\r\n   * Removes all items from the list.\r\n   */\n\n  Object.defineProperty(List.prototype, \"clear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this.setAll([]);\n    }\n  });\n  /**\r\n   * Returns an ES6 iterator for the list.\r\n   */\n\n  Object.defineProperty(List.prototype, Symbol.iterator, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var length, i;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            length = this._values.length;\n            i = 0;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < length)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._values[i]];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            ++i;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    }\n  });\n  /**\r\n   * Calls `f` for each element in the list.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n  Object.defineProperty(List.prototype, \"each\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $array.each(this._values, f);\n    }\n  });\n  /**\r\n   * Calls `f` for each element in the list, from right to left.\r\n   *\r\n   * `f` should have at least one parameter defined which will get a current\r\n   * item, with optional second argument - index.\r\n   */\n\n  Object.defineProperty(List.prototype, \"eachReverse\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $array.eachReverse(this._values, f);\n    }\n  });\n  return List;\n}();\n\nexport { List };\n/**\r\n * A version of a [[List]] where the elements are disposed automatically when\r\n * removed from the list, unless `autoDispose` is set to `false`.\r\n */\n\nvar ListAutoDispose =\n/** @class */\nfunction (_super) {\n  __extends(ListAutoDispose, _super);\n\n  function ListAutoDispose() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Automatically disposes elements that are removed from the list.\r\n     *\r\n     * @default true\r\n     */\n\n\n    Object.defineProperty(_this, \"autoDispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(_this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(ListAutoDispose.prototype, \"_onSetIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue, newValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n\n      _super.prototype._onSetIndex.call(this, index, oldValue, newValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onRemoveIndex\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (index, oldValue) {\n      if (this.autoDispose) {\n        oldValue.dispose();\n      }\n\n      _super.prototype._onRemoveIndex.call(this, index, oldValue);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"_onClear\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (oldValues) {\n      if (this.autoDispose) {\n        $array.each(oldValues, function (x) {\n          x.dispose();\n        });\n      }\n\n      _super.prototype._onClear.call(this, oldValues);\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"isDisposed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return this._disposed;\n    }\n  });\n  Object.defineProperty(ListAutoDispose.prototype, \"dispose\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this._disposed) {\n        this._disposed = true;\n\n        if (this.autoDispose) {\n          $array.each(this._values, function (x) {\n            x.dispose();\n          });\n        }\n      }\n    }\n  });\n  return ListAutoDispose;\n}(List);\n\nexport { ListAutoDispose };\n/**\r\n * A version of a [[List]] that is able to create new elements as well as\r\n * apply additional settings to newly created items.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\r\n */\n\nvar ListTemplate =\n/** @class */\nfunction (_super) {\n  __extends(ListTemplate, _super);\n\n  function ListTemplate(template, make) {\n    var _this = _super.call(this) || this;\n\n    Object.defineProperty(_this, \"template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_this, \"make\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    _this.template = template;\n    _this.make = make;\n    return _this;\n  }\n\n  return ListTemplate;\n}(ListAutoDispose);\n\nexport { ListTemplate };","map":{"version":3,"mappings":"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","names":["EventDispatcher","$array","checkBounds","index","len","Error","initial","Object","_values","List","value","indexOf","i","length","removeIndex","newValue","events","isEnabled","dispatch","type","target","oldValue","oldIndex","newIndex","oldValues","_onSetIndex","insertIndex","_onInsertIndex","a","b","value_a","value_b","_onRemoveIndex","toIndex","toIndex_1","push","_onMoveIndex","_onPush","values","each","_this","source","pushAll","undefined","newArray","old","_onClear","setAll","Symbol","iterator","_a","f","eachReverse","__extends","autoDispose","dispose","_super","call","x","_disposed","template","make","ListAutoDispose"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/List.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Entity } from \"./Entity\";\nimport type { Template } from \"./Template\";\nimport type { IDisposer } from \"./Disposer\";\nimport { EventDispatcher, Events } from \"./EventDispatcher\";\nimport * as $array from \"./Array\";\nimport type { Optional } from \"./Type\";\n\n\n/**\n * Checks if specific index fits into length.\n *\n * @param index  Index\n * @param len    Length\n * @ignore\n */\nfunction checkBounds(index: number, len: number): void {\n\tif (!(index >= 0 && index < len)) {\n\t\tthrow new Error(\"Index out of bounds: \" + index);\n\t}\n}\n\n\nexport interface IListEvents<A> {\n\tclear: {\n\t\toldValues: Array<A>,\n\t};\n\tpush: {\n\t\tnewValue: A,\n\t};\n\tinsertIndex: {\n\t\tindex: number,\n\t\tnewValue: A,\n\t};\n\tsetIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t\tnewValue: A,\n\t};\n\tremoveIndex: {\n\t\tindex: number,\n\t\toldValue: A,\n\t};\n\tmoveIndex: {\n\t\toldIndex: number,\n\t\tnewIndex: number,\n\t\tvalue: A,\n\t};\n}\n\n\n/**\n * A List class is used to hold a number of indexed items of the same type.\n */\nexport class List<T> {\n\n\t/**\n\t * List values.\n\t */\n\tprotected _values: Array<T>;\n\n\tpublic events = new EventDispatcher<Events<this, IListEvents<T>>>();\n\n\t/**\n\t * Constructor\n\t *\n\t * @param initial  Inital list of values to add to list\n\t */\n\tconstructor(initial: Array<T> = []) {\n\t\tthis._values = initial;\n\t}\n\n\t/**\n\t * An array of values in the list.\n\t *\n\t * Do not use this property to add values. Rather use dedicated methods, like\n\t * `push()`, `removeIndex()`, etc.\n\t *\n\t * @readonly\n\t * @return List values\n\t */\n\tpublic get values(): Array<T> {\n\t\treturn this._values;\n\t}\n\n\t/**\n\t * Checks if list contains specific item reference.\n\t *\n\t * @param item  Item to search for\n\t * @return `true` if found, `false` if not found\n\t */\n\tpublic contains(value: T): boolean {\n\t\treturn this._values.indexOf(value) !== -1;\n\t}\n\n\t/**\n\t * Removes specific item from the list.\n\t *\n\t * @param item An item to remove\n\t */\n\tpublic removeValue(value: T): void {\n\t\tlet i = 0;\n\t\tlet length = this._values.length;\n\n\t\twhile (i < length) {\n\t\t\t// TODO handle NaN\n\t\t\tif (this._values[i] === value) {\n\t\t\t\tthis.removeIndex(i);\n\t\t\t\t--length;\n\n\t\t\t} else {\n\t\t\t\t++i;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Searches the list for specific item and returns its index.\n\t *\n\t * @param item  An item to search for\n\t * @return Index or -1 if not found\n\t */\n\tpublic indexOf(value: T): number {\n\t\treturn $array.indexOf(this._values, value);\n\t}\n\n\t/**\n\t * Number of items in list.\n\t *\n\t * @readonly\n\t * @return Number of items\n\t */\n\tpublic get length(): number {\n\t\treturn this._values.length;\n\t}\n\n\t/**\n\t * Checks if there's a value at specific index.\n\t *\n\t * @param index  Index\n\t * @return Value exists?\n\t */\n\tpublic hasIndex(index: number): boolean {\n\t\treturn index >= 0 && index < this._values.length;\n\t}\n\n\t/**\n\t * Returns an item at specified index.\n\t *\n\t * @param index  Index\n\t * @return List item\n\t */\n\tpublic getIndex(index: number): T | undefined {\n\t\treturn this._values[index];\n\t}\n\n\tprotected _onPush(newValue: T) {\n\t\tif (this.events.isEnabled(\"push\")) {\n\t\t\tthis.events.dispatch(\"push\", {\n\t\t\t\ttype: \"push\",\n\t\t\t\ttarget: this,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onInsertIndex(index: number, newValue: T) {\n\t\tif (this.events.isEnabled(\"insertIndex\")) {\n\t\t\tthis.events.dispatch(\"insertIndex\", {\n\t\t\t\ttype: \"insertIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onSetIndex(index: number, oldValue: T, newValue: T) {\n\t\tif (this.events.isEnabled(\"setIndex\")) {\n\t\t\tthis.events.dispatch(\"setIndex\", {\n\t\t\t\ttype: \"setIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue,\n\t\t\t\tnewValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: T) {\n\t\tif (this.events.isEnabled(\"removeIndex\")) {\n\t\t\tthis.events.dispatch(\"removeIndex\", {\n\t\t\t\ttype: \"removeIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\tindex,\n\t\t\t\toldValue\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onMoveIndex(oldIndex: number, newIndex: number, value: T) {\n\t\tif (this.events.isEnabled(\"moveIndex\")) {\n\t\t\tthis.events.dispatch(\"moveIndex\", {\n\t\t\t\ttype: \"moveIndex\",\n\t\t\t\ttarget: this,\n\t\t\t\toldIndex,\n\t\t\t\tnewIndex,\n\t\t\t\tvalue,\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected _onClear(oldValues: Array<T>) {\n\t\tif (this.events.isEnabled(\"clear\")) {\n\t\t\tthis.events.dispatch(\"clear\", {\n\t\t\t\ttype: \"clear\",\n\t\t\t\ttarget: this,\n\t\t\t\toldValues\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Sets value at specific index.\n\t *\n\t * If there's already a value at the index, it is overwritten.\n\t *\n\t * @param index  Index\n\t * @param value  New value\n\t * @return New value\n\t */\n\tpublic setIndex(index: number, value: T): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t// Do nothing if the old value and the new value are the same\n\t\tif (oldValue !== value) {\n\t\t\tthis._values[index] = value;\n\t\t\tthis._onSetIndex(index, oldValue, value);\n\t\t}\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Adds an item to the list at a specific index, which pushes all the other\n\t * items further down the list.\n\t *\n\t * @param index Index\n\t * @param item  An item to add\n\t */\n\tpublic insertIndex<K extends T>(index: number, value: K): K {\n\t\tcheckBounds(index, this._values.length + 1);\n\n\t\t$array.insertIndex(this._values, index, value);\n\t\tthis._onInsertIndex(index, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Swaps indexes of two items in the list.\n\t *\n\t * @param a  Item 1\n\t * @param b  Item 2\n\t */\n\tpublic swap(a: number, b: number): void {\n\t\tconst len = this._values.length;\n\n\t\tcheckBounds(a, len);\n\t\tcheckBounds(b, len);\n\n\t\tif (a !== b) {\n\t\t\tconst value_a = this._values[a];\n\t\t\tconst value_b = this._values[b];\n\n\t\t\tthis._values[a] = value_b;\n\t\t\tthis._onSetIndex(a, value_a, value_b);\n\n\t\t\tthis._values[b] = value_a;\n\t\t\tthis._onSetIndex(b, value_b, value_a);\n\t\t}\n\t}\n\n\t/**\n\t * Removes a value at specific index.\n\t *\n\t * @param index  Index of value to remove\n\t * @return Removed value\n\t */\n\tpublic removeIndex(index: number): T {\n\t\tcheckBounds(index, this._values.length);\n\n\t\tconst oldValue = this._values[index];\n\n\t\t$array.removeIndex(this._values, index);\n\t\tthis._onRemoveIndex(index, oldValue);\n\n\t\treturn oldValue;\n\t}\n\n\t/**\n\t * Moves an item to a specific index within the list.\n\t *\n\t * If the index is not specified it will move the item to the end of the\n\t * list.\n\t *\n\t * @param value  Item to move\n\t * @param index  Index to place item at\n\t */\n\tpublic moveValue<K extends T>(value: K, toIndex?: number): K {\n\t\t// TODO don't do anything if the desired index is the same as the current index\n\t\tlet index = this.indexOf(value);\n\n\t\t// TODO remove all old values rather than only the first ?\n\t\tif (index !== -1) {\n\t\t\t$array.removeIndex(this._values, index);\n\n\t\t\tif (toIndex == null) {\n\t\t\t\tconst toIndex = this._values.length;\n\t\t\t\tthis._values.push(value);\n\t\t\t\tthis._onMoveIndex(index, toIndex, value);\n\n\t\t\t} else {\n\t\t\t\t$array.insertIndex(this._values, toIndex, value);\n\t\t\t\tthis._onMoveIndex(index, toIndex, value);\n\t\t\t}\n\n\t\t} else if (toIndex == null) {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\n\t\t} else {\n\t\t\t$array.insertIndex(this._values, toIndex, value);\n\t\t\tthis._onInsertIndex(toIndex, value);\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item to the end of the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic push<K extends T>(value: K): K {\n\t\tthis._values.push(value);\n\t\tthis._onPush(value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds an item as a first item in the list.\n\t *\n\t * @param item  An item to add\n\t */\n\tpublic unshift<K extends T>(value: K): K {\n\t\tthis.insertIndex(0, value);\n\t\treturn value;\n\t}\n\n\t/**\n\t * Adds multiple items to the list.\n\t *\n\t * @param items  An Array of items to add\n\t */\n\tpublic pushAll(values: Array<T>): void {\n\t\t$array.each(values, (value) => {\n\t\t\tthis.push(value);\n\t\t});\n\t}\n\n\t/**\n\t * Copies and adds items from abother list.\n\t *\n\t * @param source  A list top copy items from\n\t */\n\tpublic copyFrom(source: this): void {\n\t\tthis.pushAll(source._values);\n\t}\n\n\t/**\n\t * Returns the last item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic pop(): Optional<T> {\n\t\tlet index = this._values.length - 1;\n\t\treturn index < 0 ? undefined : this.removeIndex(this._values.length - 1);\n\t}\n\n\t/**\n\t * Returns the first item from the list, and removes it.\n\t *\n\t * @return Item\n\t */\n\tpublic shift(): Optional<T> {\n\t\treturn this._values.length ? this.removeIndex(0) : undefined;\n\t}\n\n\t/**\n\t * Sets multiple items to the list.\n\t *\n\t * All current items are removed.\n\t *\n\t * @param newArray  New items\n\t */\n\tpublic setAll(newArray: Array<T>): void {\n\t\tconst old = this._values;\n\t\tthis._values = [];\n\t\tthis._onClear(old);\n\n\t\t$array.each(newArray, (value) => {\n\t\t\tthis._values.push(value);\n\t\t\tthis._onPush(value);\n\t\t});\n\t}\n\n\t/**\n\t * Removes all items from the list.\n\t */\n\tpublic clear(): void {\n\t\tthis.setAll([]);\n\t}\n\n\t/**\n\t * Returns an ES6 iterator for the list.\n\t */\n\tpublic *[Symbol.iterator](): Iterator<T> {\n\t\tconst length = this._values.length;\n\n\t\tfor (let i = 0; i < length; ++i) {\n\t\t\tyield this._values[i];\n\t\t}\n\t}\n\n\t/**\n\t * Calls `f` for each element in the list.\n\t *\n\t * `f` should have at least one parameter defined which will get a current\n\t * item, with optional second argument - index.\n\t */\n\tpublic each(f: (value: T, index: number) => void): void {\n\t\t$array.each(this._values, f);\n\t}\n\n\t/**\n\t * Calls `f` for each element in the list, from right to left.\n\t *\n\t * `f` should have at least one parameter defined which will get a current\n\t * item, with optional second argument - index.\n\t */\n\tpublic eachReverse(f: (value: T, index: number) => void): void {\n\t\t$array.eachReverse(this._values, f);\n\t}\n}\n\n\n/**\n * A version of a [[List]] where the elements are disposed automatically when\n * removed from the list, unless `autoDispose` is set to `false`.\n */\nexport class ListAutoDispose<A extends IDisposer> extends List<A> implements IDisposer {\n\t/**\n\t * Automatically disposes elements that are removed from the list.\n\t *\n\t * @default true\n\t */\n\tpublic autoDispose: boolean = true;\n\n\tprivate _disposed: boolean = false;\n\n\tprotected _onSetIndex(index: number, oldValue: A, newValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onSetIndex(index, oldValue, newValue);\n\t}\n\n\tprotected _onRemoveIndex(index: number, oldValue: A) {\n\t\tif (this.autoDispose) {\n\t\t\toldValue.dispose();\n\t\t}\n\n\t\tsuper._onRemoveIndex(index, oldValue);\n\t}\n\n\tprotected _onClear(oldValues: Array<A>) {\n\t\tif (this.autoDispose) {\n\t\t\t$array.each(oldValues, (x) => {\n\t\t\t\tx.dispose();\n\t\t\t});\n\t\t}\n\n\t\tsuper._onClear(oldValues);\n\t}\n\n\tpublic isDisposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tpublic dispose(): void {\n\t\tif (!this._disposed) {\n\t\t\tthis._disposed = true;\n\n\t\t\tif (this.autoDispose) {\n\t\t\t\t$array.each(this._values, (x) => {\n\t\t\t\t\tx.dispose();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * A version of a [[List]] that is able to create new elements as well as\n * apply additional settings to newly created items.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/list-templates/} for more info\n */\nexport class ListTemplate<A extends Entity> extends ListAutoDispose<A> {\n\tpublic template: Template<A>;\n\tpublic make: () => A;\n\n\tconstructor(template: Template<A>, make: () => A) {\n\t\tsuper();\n\t\tthis.template = template;\n\t\tthis.make = make;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}