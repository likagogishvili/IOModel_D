{"ast":null,"code":"import { __extends } from \"tslib\"; // import * as $object from \"../util/Object\";\n\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\nvar RadialLabel =\n/** @class */\nfunction (_super) {\n  __extends(RadialLabel, _super);\n\n  function RadialLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_flipped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    return _this;\n  }\n\n  Object.defineProperty(RadialLabel.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._textKeys.push(\"textType\", \"kerning\");\n\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_makeText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._text = this.children.push(RadialText.new(this._root, {}));\n    }\n  });\n  /**\r\n   * Returns base radius in pixels.\r\n   *\r\n   * @return Base radius\r\n   */\n\n  Object.defineProperty(RadialLabel.prototype, \"baseRadius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var radiusPrivate = this.getPrivate(\"radius\", 0);\n      var innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n      var baseRadius = this.get(\"baseRadius\", 0);\n      return innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n    }\n  });\n  /**\r\n   * Returns radius adjustment in pixels.\r\n   *\r\n   * @return Radius\r\n   */\n\n  Object.defineProperty(RadialLabel.prototype, \"radius\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var inside = this.get(\"inside\", false);\n      return this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_updateChildren\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._updateChildren.call(this);\n\n      if (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n        var textType = this.get(\"textType\", \"adjusted\");\n        var inside = this.get(\"inside\", false);\n        var orientation_1 = this.get(\"orientation\");\n        var labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n        this._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\n        this._text.set(\"inside\", inside);\n\n        var sin = $math.sin(labelAngle);\n        var cos = $math.cos(labelAngle);\n        var baseRadius = this.baseRadius();\n        var radius = this.radius();\n        this._display.angle = 0;\n\n        if (textType == \"circular\") {\n          this.setAll({\n            paddingTop: 0,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0\n          }); // Circular labels are handled and positioned differently\n\n          this._text.set(\"orientation\", orientation_1);\n\n          this._text.set(\"radius\", radius);\n        } else {\n          if (baseRadius == 0) {\n            labelAngle = 0;\n            radius = 0;\n          } // Positioning of radial/regular labels are teh same\n\n\n          var x = radius * cos;\n          var y = radius * sin;\n\n          if (textType == \"radial\") {\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n\n            if (labelAngle < 90 || labelAngle > 270 || orientation_1 != \"auto\") {\n              this._display.angle = labelAngle; // + 90;\n\n              this._flipped = false;\n            } else {\n              this._display.angle = labelAngle + 180;\n              this._flipped = true;\n            }\n\n            this._dirty.rotation = false;\n          } else if (textType == \"adjusted\") {\n            this.setRaw(\"centerX\", p50);\n            this.setRaw(\"centerY\", p50);\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n          } else if (textType == \"regular\") {\n            this.setRaw(\"x\", x);\n            this.setRaw(\"y\", y);\n          }\n        }\n\n        this.markDirtyPosition();\n        this.markDirtyBounds();\n      }\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"_updatePosition\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var textType = this.get(\"textType\", \"regular\");\n      var inside = this.get(\"inside\", false);\n      var dx = 0;\n      var dy = 0;\n      var labelAngle = this.get(\"labelAngle\", 0);\n      var bounds = this.localBounds();\n      var w = bounds.right - bounds.left;\n      var h = bounds.bottom - bounds.top;\n\n      if (textType == \"radial\") {\n        if (this._flipped) {\n          var centerX = this.get(\"centerX\");\n\n          if (centerX instanceof Percent) {\n            w = w * (1 - centerX.value * 2);\n          }\n\n          dx = w * $math.cos(labelAngle);\n          dy = w * $math.sin(labelAngle);\n        }\n      } else if (!inside && textType == \"adjusted\") {\n        dx = w / 2 * $math.cos(labelAngle);\n        dy = h / 2 * $math.sin(labelAngle);\n      }\n\n      this.setRaw(\"dx\", dx);\n      this.setRaw(\"dy\", dy);\n\n      _super.prototype._updatePosition.call(this);\n    }\n  });\n  Object.defineProperty(RadialLabel.prototype, \"text\", {\n    /**\r\n     * @ignore\r\n     */\n    get: function () {\n      return this._text;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RadialLabel, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialLabel\"\n  });\n  Object.defineProperty(RadialLabel, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Label.classNames.concat([RadialLabel.className])\n  });\n  return RadialLabel;\n}(Label);\n\nexport { RadialLabel };","map":{"version":3,"mappings":"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","names":["p50","Percent","Label","RadialText","$math","$utils","__extends","Object","_textKeys","push","_super","_afterNew","call","_text","children","new","_root","radiusPrivate","getPrivate","innerRadiusPrivate","baseRadius","get","relativeToValue","inside","_updateChildren","isDirty","isPrivateDirty","textType","orientation_1","labelAngle","normalizeAngle","set","sin","cos","radius","_display","angle","setAll","paddingTop","paddingBottom","paddingLeft","paddingRight","x","y","setRaw","_flipped","_dirty","rotation","markDirtyPosition","markDirtyBounds","dx","dy","bounds","localBounds","w","right","left","h","bottom","top","centerX","value","_updatePosition","RadialLabel","classNames","concat","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/RadialLabel.ts"],"sourcesContent":["// import * as $object from \"../util/Object\";\nimport { p50, Percent } from \"../util/Percent\";\nimport { Label, ILabelPrivate, ILabelSettings } from \"./Label\";\nimport { RadialText } from \"./RadialText\";\n\nimport * as $math from \"../util/Math\";\nimport * as $utils from \"../util/Utils\";\n\n\nexport interface IRadialLabelSettings extends ILabelSettings {\n\n\t/**\n\t * Pixel value to adjust radius with.\n\t *\n\t * Will add to (or subtract from if negative) whatever value `baseRadius` evaluates\n\t * to.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Radius of the label's position.\n\t *\n\t * Can be either set in absolute pixel value, or percent.\n\t *\n\t * Relative value, depending on the situation, will most often mean its\n\t * position within certain circular object, like a slice: 0% meaning inner\n\t * edge, and 100% - the outer edge.\n\t *\n\t * @default 100%\n\t */\n\tbaseRadius?: number | Percent;\n\n\t/**\n\t * Label anngle in degrees.\n\t *\n\t * In most cases it will be set by the chart/series and does not need to\n\t * be set manually.\n\t */\n\tlabelAngle?: number;\n\n\t/**\n\t * Should the text \"face\" inward or outward from the arc the text is\n\t * following.\n\t *\n\t * `\"auto\"` means that facing will be chosen automatically based on the angle\n\t * to enhance readbility.\n\t *\n\t * Only applies if `type = \"circluar\"`.\n\t * \n\t * @default \"auto\"\n\t */\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\n\t/**\n\t * Should label be drawn inside (`true`) or outside (`false`) the arc.\n\t *\n\t * @default false\n\t */\n\tinside?: boolean;\n\n\t/**\n\t * Label type.\n\t *\n\t * * `\"regular\"` (default) - normal horizontal label.\n\t * * `\"circular\"` - arched label.\n\t * * `\"radial\"` - label radiating from the center of the arc.\n\t * * `\"aligned\"` - horizontal label aligned with other labels horizontally.\n\t * * `\"adjusted\"` - horizontal label adjusted in postion.\n\t *\n\t * @default \"regular\"\n\t */\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\n\t/**\n\t * Extra spacing between characters, in pixels.\n\t *\n\t * @default 0\n\t */\n\tkerning?: number;\n\n}\n\nexport interface IRadialLabelPrivate extends ILabelPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tleft?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tradius?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tinnerRadius?: number;\n\n}\n\nexport class RadialLabel extends Label {\n\n\tdeclare public _settings: IRadialLabelSettings;\n\tdeclare public _privateSettings: IRadialLabelPrivate;\n\n\tdeclare protected _text: RadialText;\n\n\tpublic static className: string = \"RadialLabel\";\n\tpublic static classNames: Array<string> = Label.classNames.concat([RadialLabel.className]);\n\n\tprotected _flipped: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis._textKeys.push(\"textType\", \"kerning\");\n\t\tsuper._afterNew();\n\t}\n\n\n\tpublic _makeText() {\n\t\tthis._text = this.children.push(RadialText.new(this._root, {}));\n\t}\n\n\t/**\n\t * Returns base radius in pixels.\n\t * \n\t * @return Base radius\n\t */\n\tpublic baseRadius(): number {\n\t\tconst radiusPrivate = this.getPrivate(\"radius\", 0);\n\t\tconst innerRadiusPrivate = this.getPrivate(\"innerRadius\", 0);\n\t\tconst baseRadius = this.get(\"baseRadius\", 0);\n\t\treturn innerRadiusPrivate + $utils.relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);\n\t}\n\n\t/**\n\t * Returns radius adjustment in pixels.\n\t * \n\t * @return Radius\n\t */\n\tpublic radius(): number {\n\t\tconst inside = this.get(\"inside\", false);\n\t\treturn this.baseRadius() + this.get(\"radius\", 0) * (inside ? -1 : 1);\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"baseRadius\") || this.isPrivateDirty(\"radius\") || this.isPrivateDirty(\"innerRadius\") || this.isDirty(\"labelAngle\") || this.isDirty(\"radius\") || this.isDirty(\"inside\") || this.isDirty(\"orientation\") || this.isDirty(\"textType\")) {\n\n\t\t\tconst textType = this.get(\"textType\", \"adjusted\");\n\n\t\t\tconst inside = this.get(\"inside\", false);\n\n\t\t\tconst orientation = this.get(\"orientation\");\n\t\t\tlet labelAngle = $math.normalizeAngle(this.get(\"labelAngle\", 0));\n\n\t\t\tthis._text.set(\"startAngle\", this.get(\"labelAngle\", 0));\n\t\t\tthis._text.set(\"inside\", inside);\n\n\t\t\tconst sin = $math.sin(labelAngle);\n\t\t\tconst cos = $math.cos(labelAngle);\n\n\t\t\tlet baseRadius = this.baseRadius();\n\t\t\tlet radius = this.radius();\n\n\t\t\tthis._display.angle = 0;\n\n\t\t\tif (textType == \"circular\") {\n\n\t\t\t\tthis.setAll({\n\t\t\t\t\tpaddingTop: 0,\n\t\t\t\t\tpaddingBottom: 0,\n\t\t\t\t\tpaddingLeft: 0,\n\t\t\t\t\tpaddingRight: 0\n\t\t\t\t});\n\n\t\t\t\t// Circular labels are handled and positioned differently\n\n\t\t\t\tthis._text.set(\"orientation\", orientation);\n\t\t\t\tthis._text.set(\"radius\", radius);\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (baseRadius == 0) {\n\t\t\t\t\tlabelAngle = 0;\n\t\t\t\t\tradius = 0;\n\t\t\t\t}\n\n\t\t\t\t// Positioning of radial/regular labels are teh same\n\t\t\t\tlet x = radius * cos;\n\t\t\t\tlet y = radius * sin;\n\n\t\t\t\tif (textType == \"radial\") {\n\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\n\t\t\t\t\tif ((labelAngle < 90) || (labelAngle > 270) || orientation != \"auto\") {\n\t\t\t\t\t\tthis._display.angle = labelAngle;// + 90;\n\t\t\t\t\t\tthis._flipped = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._display.angle = labelAngle + 180;\n\t\t\t\t\t\tthis._flipped = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._dirty.rotation = false;\n\t\t\t\t}\n\t\t\t\telse if (textType == \"adjusted\") {\n\t\t\t\t\tthis.setRaw(\"centerX\", p50);\n\t\t\t\t\tthis.setRaw(\"centerY\", p50);\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t\telse if (textType == \"regular\") {\n\t\t\t\t\tthis.setRaw(\"x\", x);\n\t\t\t\t\tthis.setRaw(\"y\", y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.markDirtyPosition();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n\n\tpublic _updatePosition() {\n\n\t\tconst textType = this.get(\"textType\", \"regular\");\n\t\tconst inside = this.get(\"inside\", false);\n\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\t\tlet labelAngle = this.get(\"labelAngle\", 0);\n\t\tlet bounds = this.localBounds();\n\t\tlet w = bounds.right - bounds.left;\n\t\tlet h = bounds.bottom - bounds.top;\n\n\t\tif (textType == \"radial\") {\n\t\t\tif (this._flipped) {\n\t\t\t\tlet centerX = this.get(\"centerX\");\n\t\t\t\tif (centerX instanceof Percent) {\n\t\t\t\t\tw = w * (1 - centerX.value * 2);\n\t\t\t\t}\n\n\t\t\t\tdx = w * $math.cos(labelAngle);\n\t\t\t\tdy = w * $math.sin(labelAngle);\n\t\t\t}\n\t\t}\n\t\telse if (!inside && textType == \"adjusted\") {\n\t\t\tdx = w / 2 * $math.cos(labelAngle);\n\t\t\tdy = h / 2 * $math.sin(labelAngle);\n\t\t}\n\n\n\t\tthis.setRaw(\"dx\", dx);\n\t\tthis.setRaw(\"dy\", dy);\n\n\t\tsuper._updatePosition();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic get text(): RadialText {\n\t\treturn this._text;\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}