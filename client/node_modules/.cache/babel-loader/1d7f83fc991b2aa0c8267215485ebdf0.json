{"ast":null,"code":"import * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\n\nexport function indexOf(array, value) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\n\nexport function any(array, test) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\n\nexport function map(array, fn) {\n  var length = array.length;\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function each(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachReverse(array, fn) {\n  var i = array.length;\n\n  while (i > 0) {\n    --i;\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function eachContinue(array, fn) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\n\nexport function shiftLeft(array, index) {\n  var length = array.length;\n\n  for (var i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function last(array) {\n  var length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\n\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\n\nexport function insert(array, element, index) {\n  //if (array) {\n  index = Math.max(0, Math.min(index, array.length));\n  array.splice(index, 0, element); //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\n\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\n\nexport function pushAll(array, input) {\n  var length = input.length;\n\n  for (var i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\n\nexport function remove(array, element) {\n  var found = false;\n  var index = 0;\n\n  for (;;) {\n    index = array.indexOf(element, index);\n\n    if (index === -1) {\n      return found;\n    } else {\n      found = true;\n      array.splice(index, 1);\n    }\n  }\n}\nexport function removeFirst(array, element) {\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\n\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  var index = indexOf(array, element); // @todo remove all old values rather than only the first ?\n\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\n\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // Add to the beginning of array if index is 0\n  else if (index === 0) {\n    array.unshift(element);\n  } // Add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Pushes `element` into `array` if it doesn't already exist.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n */\n\nexport function pushOne(array, element) {\n  if (array.indexOf(element) === -1) {\n    array.push(element);\n  }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\n\nexport function replace(array, element, index) {\n  // check if exists\n  var ind = array.indexOf(element); // remove if exists\n\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  } // add to end if index is not set\n\n\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  } // add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\n\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\n\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\n\nexport function copy(array) {\n  var length = array.length; // It's faster to create the array with a pre-defined length\n\n  var output = new Array(length);\n\n  for (var i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\n\nexport function slice(array, start, end) {\n  if (end === void 0) {\n    end = array.length;\n  }\n\n  var output = new Array(end - start);\n\n  for (var i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\n\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\n\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\n\nexport function findIndex(array, matches) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * This is the same as `findIndex` except it searches from right to left.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\n\nexport function findIndexReverse(array, matches) {\n  var i = array.length;\n\n  while (i > 0) {\n    --i;\n\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\n\nexport function find(array, matches) {\n  var index = findIndex(array, matches);\n\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * This is the same as `find` except it searches from right to left.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\n\nexport function findReverse(array, matches) {\n  var index = findIndexReverse(array, matches);\n\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If value\r\n * is not `undefined`, it returns it.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\n\nexport function findMap(array, matches) {\n  var length = array.length;\n\n  for (var i = 0; i < length; ++i) {\n    var value = matches(array[i], i);\n\n    if (value !== undefined) {\n      return value;\n    }\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\n\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}\n/**\r\n * Orders an array using specific `ordering` function and returns right-most index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @returns Result of the search\r\n */\n\nexport function getSortedIndex(array, ordering) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(array[pivot]); // less\n\n    if (order < 0) {\n      start = pivot + 1; // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1; // more\n    } else {\n      end = pivot;\n    }\n  }\n\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Orders an array using specific `ordering` function and returns left-most index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @returns Result of the search\r\n */\n\nexport function getFirstSortedIndex(array, ordering) {\n  var start = 0;\n  var end = array.length;\n  var found = false;\n\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    var pivot = start + end >> 1;\n    var order = ordering(array[pivot]); // less\n\n    if (order < 0) {\n      start = pivot + 1; // equal\n    } else if (order === 0) {\n      found = true;\n      end = pivot; // more\n    } else {\n      end = pivot;\n    }\n  }\n\n  return {\n    found: found,\n    index: start\n  };\n}\nexport function keepIf(array, keep) {\n  var i = array.length;\n\n  while (i > 0) {\n    --i;\n\n    if (!keep(array[i])) {\n      array.splice(i, 1);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["$type","indexOf","array","value","length","i","any","test","map","fn","output","Array","each","eachReverse","eachContinue","shiftLeft","index","last","undefined","first","insert","element","Math","max","min","splice","setIndex","remove","pushAll","input","push","found","removeFirst","move","toIndex","removeIndex","insertIndex","add","isNumber","unshift","pushOne","replace","ind","toArray","isArray","has","copy","slice","start","end","findIndex","matches","findIndexReverse","find","findReverse","findMap","shuffle","currentIndex","temporaryValue","randomIndex","floor","random","getSortedIndex","ordering","pivot","order","getFirstSortedIndex","keepIf","keep"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/Array.ts"],"sourcesContent":["/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport type { Optional } from \"./Type\";\nimport * as $type from \"./Type\";\n\n\n/**\n * ============================================================================\n * UTILITY FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Searches `array` for `value`.\n *\n * Returns -1 if not found.\n *\n * @param array  Source array\n * @param value  Value to search\n * @returns Index\n */\nexport function indexOf<A>(array: ArrayLike<A>, value: A): number {\n\tconst length = array.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\t// TODO handle NaN\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Calls `test` for each element in `array`.\n *\n * If `test` returns `true` then it immediately returns `true`.\n *\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\n *\n * @param array  Source array\n * @param test   Function which is called on each element\n * @returns Whether `test` returned true or not\n */\nexport function any<A>(array: ArrayLike<A>, test: (value: A) => boolean): boolean {\n\tconst length = array.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tif (test(array[i])) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Calls `fn` function for every member of array and returns a new array out\n * of all outputs.\n *\n * @param array  Source array\n * @param fn     Callback function\n * @returns New array\n */\nexport function map<A, B>(array: ArrayLike<A>, fn: (value: A, index: number) => B): Array<B> {\n\tconst length = array.length;\n\tconst output = new Array(length);\n\n\tfor (let i = 0; i < length; ++i) {\n\t\toutput[i] = fn(array[i], i);\n\t}\n\n\treturn output;\n}\n\n/**\n * Iterates through all items in array and calls `fn` function for each of\n * them.\n *\n * @param array  Source array\n * @param fn     Callback function\n */\nexport function each<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\n\tconst length = array.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tfn(array[i], i);\n\t}\n}\n\n/**\n * Iterates through all items in array in reverse order and calls `fn` function for each of\n * them.\n *\n * @param array  Source array\n * @param fn     Callback function\n */\nexport function eachReverse<A>(array: ArrayLike<A>, fn: (value: A, index: number) => void): void {\n\tlet i = array.length;\n\n\twhile (i > 0) {\n\t\t--i;\n\t\tfn(array[i], i);\n\t}\n}\n\n/**\n * Iterates through all items in array and calls `fn` function for each of\n * them.\n *\n * If `fn` call evaluates to `false`, further iteration is cancelled.\n *\n * @param array  Source array\n * @param fn     Callback function\n */\nexport function eachContinue<A>(array: ArrayLike<A>, fn: (value: A, index: number) => boolean): void {\n\tconst length = array.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tif (!fn(array[i], i)) {\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * Shifts an item at `index` towards beginning of the array.\n *\n * @param array  Source array\n * @param index  Target element index\n */\nexport function shiftLeft<A>(array: Array<A>, index: number): void {\n\tconst length = array.length;\n\n\tfor (let i = index; i < length; ++i) {\n\t\tarray[i - index] = array[i];\n\t}\n\n\tarray.length = length - index;\n}\n\n/**\n * Returns the last item of the array.\n *\n * @param array  Source array\n * @returns Last item\n */\nexport function last<A>(array: Array<A>): Optional<A> {\n\tconst length = array.length;\n\treturn length ? array[length - 1] : undefined;\n}\n\n/**\n * Returns the first item of the array.\n *\n * @param array  Source array\n * @returns Last item\n */\nexport function first<A>(array: Array<A>): Optional<A> {\n\treturn array[0];\n}\n\n/**\n * Inserts `element` into `array` at `index`.\n *\n * Caps `index` to be between `0` and `array.length`\n *\n * @param array    Source array\n * @param element  Item to insert\n * @param array    Index to insert item at\n */\nexport function insert<A>(array: Array<A>, element: A, index: number): void {\n\t//if (array) {\n\tindex = Math.max(0, Math.min(index, array.length));\n\tarray.splice(index, 0, element);\n\t//}\n}\n\n/**\n * Removes all copies of `element` from `array` (if they exist) and then\n * inserts `element` at `index`.\n *\n * @param array    Source array\n * @param element  Item\n * @param array    Index to move item to\n */\nexport function setIndex<A>(array: Array<A>, element: A, index: number): void {\n\tremove(array, element);\n\tinsert(array, element, index);\n}\n\n\n/**\n * Pushes all of the elements from `input` into `array`.\n *\n * @param array  Output array\n * @param input  Input array\n */\nexport function pushAll<A>(array: Array<A>, input: Array<A>) {\n\tconst length = input.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tarray.push(input[i]);\n\t}\n}\n\n\n/**\n * Removes `element` from `array`.\n *\n * If there are multiple copies of `element`, they are all removed.\n *\n * @param array    Source array\n * @param element  Item to remove\n */\nexport function remove<A>(array: Array<A>, element: A): boolean {\n\tlet found: boolean = false;\n\tlet index: number = 0;\n\n\tfor (;;) {\n\t\tindex = array.indexOf(element, index);\n\n\t\tif (index === -1) {\n\t\t\treturn found;\n\n\t\t} else {\n\t\t\tfound = true;\n\t\t\tarray.splice(index, 1);\n\t\t}\n\t}\n}\n\nexport function removeFirst<A>(array: Array<A>, element: A): boolean {\n\tlet index: number = array.indexOf(element);\n\n\tif (index !== -1) {\n\t\tarray.splice(index, 1);\n\t\treturn true;\n\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Adds an `element` to `array`.\n *\n * If array already contains and item like this, it is removed before adding\n * it again.\n *\n * Optionally `toIndex` can be specified to add element at specific index.\n *\n * @param array    Source array\n * @param element  Item to add\n * @param array    Index to move item to\n */\nexport function move<A>(array: Array<A>, element: A, toIndex?: number): void {\n\t// @todo this implementation must be the same as the List.moveValue method\n\t// @todo don't do anything if the desired index is the same as the current index\n\tlet index = indexOf(array, element);\n\n\t// @todo remove all old values rather than only the first ?\n\tif (index !== -1) {\n\t\tremoveIndex(array, index);\n\t}\n\n\tif (toIndex == null) {\n\t\tarray.push(element);\n\t} else {\n\t\tinsertIndex(array, toIndex, element);\n\t}\n}\n\n\n/**\n * Inserts `element` into `array` at `index`.\n *\n * If `index` is not provided, it will insert `element` at the end of `array`.\n *\n * @param array    Source array\n * @param element  Item to add\n * @param array    Index to add item at\n */\nexport function add<A>(array: Array<A>, element: A, index?: number): void {\n\t// Append to the end if index is not set\n\tif (!$type.isNumber(index)) {\n\t\tarray.push(element);\n\t}\n\n\t// Add to the beginning of array if index is 0\n\telse if (index === 0) {\n\t\tarray.unshift(element);\n\t}\n\t// Add to indicated place if index is set\n\telse {\n\t\tarray.splice(index, 0, element);\n\t}\n}\n\n\n/**\n * Pushes `element` into `array` if it doesn't already exist.\n *\n * @param array    Source array\n * @param element  Item to add\n */\nexport function pushOne<A>(array: Array<A>, element: A): void {\n\tif (array.indexOf(element) === -1) {\n\t\tarray.push(element);\n\t}\n}\n\n\n/**\n * Removes `element` from `array` (if it exists) and then inserts `element` at\n * `index`.\n *\n * If `index` is not provided, it will insert `element` at the end of `array`.\n *\n * @param array    Source array\n * @param element  Item to remove\n * @param array    Index to move item to\n */\nexport function replace<A>(array: Array<A>, element: A, index?: number): void {\n\t// check if exists\n\tlet ind: number = array.indexOf(element);\n\n\t// remove if exists\n\tif (ind !== -1) {\n\t\tarray.splice(ind, 1);\n\t}\n\n\t// add to end if index is not set\n\tif (!$type.isNumber(index)) {\n\t\tarray.push(element);\n\t}\n\t// add to indicated place if index is set\n\telse {\n\t\tarray.splice(index, 0, element);\n\t}\n}\n\n/**\n * Wraps `input` in an array, if it isn't already an array.\n *\n * @param input  Source value\n * @return An array\n */\nexport function toArray<A>(input: Array<A> | A): Array<A> {\n\tif (Array.isArray(input)) {\n\t\treturn input;\n\t}\n\telse {\n\t\treturn [input];\n\t}\n}\n\n/**\n * Returns `true` if `element` exists in `array`.\n *\n * @param array    Source array\n * @param element  Item to search for\n * @returns Item in array?\n */\nexport function has<A>(array: ArrayLike<A>, element: A): boolean {\n\treturn indexOf(array, element) !== -1;\n}\n\n/**\n * Returns a shallow copy of `array`.\n *\n * @param array  Source array\n * @returns Copy of the array\n */\nexport function copy<A>(array: ArrayLike<A>): Array<A> {\n\tconst length = array.length;\n\n\t// It's faster to create the array with a pre-defined length\n\tconst output = new Array(length);\n\n\tfor (let i = 0; i < length; ++i) {\n\t\t// Because the array has a pre-defined length, we have to assign rather than push\n\t\t// This is also faster than pushing\n\t\toutput[i] = array[i];\n\t}\n\n\treturn output;\n}\n\n\n/**\n * Returns a copy of `array` which contains all the elements between `start`\n * and `end`. (including `start` and excluding `end`)\n *\n * If `end` is not provided, it defaults to `array.length`.\n *\n * @param array  Source array\n * @param start  Start index\n * @param end    End index\n * @returns Part of the array\n */\nexport function slice<A>(array: ArrayLike<A>, start: number, end: number = array.length): Array<A> {\n\tconst output = new Array(end - start);\n\n\tfor (let i = start; i < end; ++i) {\n\t\toutput[i - start] = array[i];\n\t}\n\n\treturn output;\n}\n\n/**\n * Inserts a value into array at specific index.\n *\n * @param array  Source array\n * @param index  Index\n * @param value  Value to insert\n */\nexport function insertIndex<A>(array: Array<A>, index: number, value: A): void {\n\tarray.splice(index, 0, value);\n}\n\n/**\n * Removes a value from array at specific index.\n *\n * @param array  Source array\n * @param index  Index\n */\nexport function removeIndex<A>(array: Array<A>, index: number): void {\n\tarray.splice(index, 1);\n}\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface SortResult {\n\tfound: boolean;\n\tindex: number\n}\n\n/**\n * Searches the array using custom function and returns index of the item if\n * found.\n *\n * Will call `matches` function on all items of the array. If return value\n * evaluates to `true`, index is returned.\n *\n * Otherwise returns -1.\n *\n * @param array    Source array\n * @param matches  Search function\n * @returns Index of the item if found\n */\nexport function findIndex<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): number {\n\tconst length = array.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tif (matches(array[i], i)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * This is the same as `findIndex` except it searches from right to left.\n *\n * @param array    Source array\n * @param matches  Search function\n * @returns Index of the item if found\n */\nexport function findIndexReverse<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): number {\n\tlet i = array.length;\n\n\twhile (i > 0) {\n\t\t--i;\n\t\tif (matches(array[i], i)) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Searches the array using custom function and returns item if found.\n *\n * Will call `matches` function on all items of the array. If return value\n * evaluates to `true`, index is returned.\n *\n * Otherwise returns `undefined`.\n *\n * @param array    Source array\n * @param matches  Search function\n * @returns Item if found\n */\nexport function find<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): A | undefined {\n\tconst index = findIndex(array, matches);\n\n\tif (index !== -1) {\n\t\treturn array[index];\n\t}\n}\n\n/**\n * This is the same as `find` except it searches from right to left.\n *\n * @param array    Source array\n * @param matches  Search function\n * @returns Item if found\n */\nexport function findReverse<A>(array: ArrayLike<A>, matches: (value: A, index: number) => boolean): A | undefined {\n\tconst index = findIndexReverse(array, matches);\n\n\tif (index !== -1) {\n\t\treturn array[index];\n\t}\n}\n\n/**\n * Searches the array using custom function and returns item if found.\n *\n * Will call `matches` function on all items of the array. If value\n * is not `undefined`, it returns it.\n *\n * Otherwise returns `undefined`.\n *\n * @param array    Source array\n * @param matches  Search function\n * @returns Item if found\n */\nexport function findMap<A, B>(array: ArrayLike<A>, matches: (value: A, index: number) => B | undefined): B | undefined {\n\tconst length = array.length;\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tconst value = matches(array[i], i);\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * Iterates through all items in array and calls `fn` function for each of\n * them.\n *\n * @param array  Source array\n * @param fn     Callback function\n */\nexport function shuffle<A>(array: Array<A>) {\n\t// https://stackoverflow.com/a/2450976/449477\n\tlet currentIndex = array.length,\n\t\ttemporaryValue,\n\t\trandomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n}\n\n\nexport type Ordering = -1 | 0 | 1;\n\n/**\n * @ignore Exclude from docs\n * @todo Description\n */\nexport interface SortResult {\n\tfound: boolean;\n\tindex: number\n}\n\n/**\n * Orders an array using specific `ordering` function and returns right-most index of\n * the `value`.\n *\n * @ignore Exclude from docs\n * @param array     Source array\n * @param ordering  An ordering function\n * @returns Result of the search\n */\nexport function getSortedIndex<A>(array: ArrayLike<A>, ordering: (left: A) => Ordering): SortResult {\n\tlet start = 0;\n\tlet end   = array.length;\n\tlet found = false;\n\n\twhile (start < end) {\n\t\t// TODO is this faster/slower than using Math.floor ?\n\t\tconst pivot = (start + end) >> 1;\n\n\t\tconst order = ordering(array[pivot]);\n\n\t\t// less\n\t\tif (order < 0) {\n\t\t\tstart = pivot + 1;\n\n\t\t// equal\n\t\t} else if (order === 0) {\n\t\t\tfound = true;\n\t\t\tstart = pivot + 1;\n\n\t\t// more\n\t\t} else {\n\t\t\tend = pivot;\n\t\t}\n\t}\n\n\treturn {\n\t\tfound: found,\n\t\tindex: (found ? start - 1 : start)\n\t};\n}\n\n\n/**\n * Orders an array using specific `ordering` function and returns left-most index of\n * the `value`.\n *\n * @ignore Exclude from docs\n * @param array     Source array\n * @param ordering  An ordering function\n * @returns Result of the search\n */\nexport function getFirstSortedIndex<A>(array: ArrayLike<A>, ordering: (left: A) => Ordering): SortResult {\n\tlet start = 0;\n\tlet end   = array.length;\n\tlet found = false;\n\n\twhile (start < end) {\n\t\t// TODO is this faster/slower than using Math.floor ?\n\t\tconst pivot = (start + end) >> 1;\n\n\t\tconst order = ordering(array[pivot]);\n\n\t\t// less\n\t\tif (order < 0) {\n\t\t\tstart = pivot + 1;\n\n\t\t// equal\n\t\t} else if (order === 0) {\n\t\t\tfound = true;\n\t\t\tend = pivot;\n\n\t\t// more\n\t\t} else {\n\t\t\tend = pivot;\n\t\t}\n\t}\n\n\treturn {\n\t\tfound: found,\n\t\tindex: start\n\t};\n}\n\n\nexport function keepIf<A>(array: Array<A>, keep: (value: A) => boolean): void {\n\tlet i = array.length;\n\n\twhile (i > 0) {\n\t\t--i;\n\n\t\tif (!keep(array[i])) {\n\t\t\tarray.splice(i, 1);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}