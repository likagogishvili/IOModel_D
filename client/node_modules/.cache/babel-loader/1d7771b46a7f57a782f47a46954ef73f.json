{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Text } from \"./Text\";\nimport * as $math from \"../util/Math\";\n/**\r\n * @ignore\r\n */\n\nvar RadialText =\n/** @class */\nfunction (_super) {\n  __extends(RadialText, _super);\n\n  function RadialText() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeRadialText(\"\", _this.textStyle)\n    });\n    return _this;\n  }\n\n  Object.defineProperty(RadialText.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._afterNew.call(this);\n    }\n  });\n  Object.defineProperty(RadialText.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      this._display.clear();\n\n      if (this.isDirty(\"textType\")) {\n        this._display.textType = this.get(\"textType\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"radius\")) {\n        this._display.radius = this.get(\"radius\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"startAngle\")) {\n        this._display.startAngle = (this.get(\"startAngle\", 0) + 90) * $math.RADIANS;\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"inside\")) {\n        this._display.inside = this.get(\"inside\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"orientation\")) {\n        this._display.orientation = this.get(\"orientation\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"kerning\")) {\n        this._display.kerning = this.get(\"kerning\");\n        this.markDirtyBounds();\n      }\n    }\n  });\n  Object.defineProperty(RadialText, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialText\"\n  });\n  Object.defineProperty(RadialText, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Text.classNames.concat([RadialText.className])\n  });\n  return RadialText;\n}(Text);\n\nexport { RadialText };","map":{"version":3,"mappings":";AAAA,SAASA,IAAT,QAAkD,QAAlD;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AAqBA;;;;AAGA;AAAA;AAAA;EAAgCC;;EAAhC;IAAA;;IAKCC;sBAAA;wBAAA;oBAAA;aAA+BC,KAAI,CAACC,KAAL,CAAWC,SAAX,CAAqBC,cAArB,CAAoC,EAApC,EAAwCH,KAAI,CAACI,SAA7C;IAA/B;;EA6CA;;;;;;WA3CA;MACCC,iBAAMC,SAAN,CAAeC,IAAf,CAAe,IAAf;IACA;;;;;;WAKD;MACCF,iBAAMG,cAAN,CAAoBD,IAApB,CAAoB,IAApB;;MAEA,KAAKE,QAAL,CAAcC,KAAd;;MAEA,IAAI,KAAKC,OAAL,CAAa,UAAb,CAAJ,EAA8B;QAC7B,KAAKF,QAAL,CAAcG,QAAd,GAAyB,KAAKC,GAAL,CAAS,UAAT,CAAzB;QACA,KAAKC,eAAL;MACA;;MAED,IAAI,KAAKH,OAAL,CAAa,QAAb,CAAJ,EAA4B;QAC3B,KAAKF,QAAL,CAAcM,MAAd,GAAuB,KAAKF,GAAL,CAAS,QAAT,CAAvB;QACA,KAAKC,eAAL;MACA;;MAED,IAAI,KAAKH,OAAL,CAAa,YAAb,CAAJ,EAAgC;QAC/B,KAAKF,QAAL,CAAcO,UAAd,GAA2B,CAAC,KAAKH,GAAL,CAAS,YAAT,EAAuB,CAAvB,IAA6B,EAA9B,IAAoChB,KAAK,CAACoB,OAArE;QACA,KAAKH,eAAL;MACA;;MAED,IAAI,KAAKH,OAAL,CAAa,QAAb,CAAJ,EAA4B;QAC3B,KAAKF,QAAL,CAAcS,MAAd,GAAuB,KAAKL,GAAL,CAAS,QAAT,CAAvB;QACA,KAAKC,eAAL;MACA;;MAED,IAAI,KAAKH,OAAL,CAAa,aAAb,CAAJ,EAAiC;QAChC,KAAKF,QAAL,CAAcU,WAAd,GAA4B,KAAKN,GAAL,CAAS,aAAT,CAA5B;QACA,KAAKC,eAAL;MACA;;MAED,IAAI,KAAKH,OAAL,CAAa,SAAb,CAAJ,EAA6B;QAC5B,KAAKF,QAAL,CAAcW,OAAd,GAAwB,KAAKP,GAAL,CAAS,SAAT,CAAxB;QACA,KAAKC,eAAL;MACA;IACD;;EArCDf;oBAAA;sBAAA;kBAAA;WAAkC;EAAlC;EACAA;oBAAA;sBAAA;kBAAA;WAA0CH,IAAI,CAACyB,UAAL,CAAgBC,MAAhB,CAAuB,CAACC,UAAU,CAACC,SAAZ,CAAvB;EAA1C;EAsCD;AAAC,CAlDD,CAAgC5B,IAAhC;;SAAa2B","names":["Text","$math","__extends","Object","_this","_root","_renderer","makeRadialText","textStyle","_super","_afterNew","call","_beforeChanged","_display","clear","isDirty","textType","get","markDirtyBounds","radius","startAngle","RADIANS","inside","orientation","kerning","classNames","concat","RadialText","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/RadialText.ts"],"sourcesContent":["import { Text, ITextSettings, ITextPrivate } from \"./Text\";\nimport * as $math from \"../util/Math\";\nimport type { IRadialText } from \"./backend/Renderer\";\n\n/**\n * @ignore\n */\nexport interface IRadialTextSettings extends ITextSettings {\n\ttextType?: \"regular\" | \"circular\" | \"radial\" | \"aligned\" | \"adjusted\";\n\tradius?: number;\n\tstartAngle?: number;\n\tinside?: boolean;\n\torientation?: \"inward\" | \"outward\" | \"auto\";\n\tkerning?: number;\n}\n\n/**\n * @ignore\n */\nexport interface IRadialTextPrivate extends ITextPrivate {\n}\n\n/**\n * @ignore\n */\nexport class RadialText extends Text {\n\n\tdeclare public _settings: IRadialTextSettings;\n\tdeclare public _privateSettings: IRadialTextPrivate;\n\n\tpublic _display: IRadialText = this._root._renderer.makeRadialText(\"\", this.textStyle);\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t}\n\n\tpublic static className: string = \"RadialText\";\n\tpublic static classNames: Array<string> = Text.classNames.concat([RadialText.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tthis._display.clear();\n\n\t\tif (this.isDirty(\"textType\")) {\n\t\t\tthis._display.textType = this.get(\"textType\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"radius\")) {\n\t\t\tthis._display.radius = this.get(\"radius\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"startAngle\")) {\n\t\t\tthis._display.startAngle = (this.get(\"startAngle\", 0)! + 90) * $math.RADIANS;\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"inside\")) {\n\t\t\tthis._display.inside = this.get(\"inside\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"orientation\")) {\n\t\t\tthis._display.orientation = this.get(\"orientation\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"kerning\")) {\n\t\t\tthis._display.kerning = this.get(\"kerning\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}