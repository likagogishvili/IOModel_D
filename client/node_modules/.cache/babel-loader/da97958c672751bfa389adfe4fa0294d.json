{"ast":null,"code":"import * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\n/**\r\n * An object representing a collection of setting values to apply as required.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\r\n */\n\nvar State =\n/** @class */\nfunction () {\n  function State(entity, settings) {\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_userSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._entity = entity;\n    this._settings = settings;\n  }\n\n  Object.defineProperty(State.prototype, \"get\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, fallback) {\n      var value = this._settings[key];\n\n      if (value !== undefined) {\n        return value;\n      } else {\n        return fallback;\n      }\n    }\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Object.defineProperty(State.prototype, \"setRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._settings[key] = value;\n    }\n  });\n  /**\r\n   * Sets a setting `value` for the specified `key` to be set when the state\r\n   * is applied.\r\n   *\r\n   * @param   key       Setting key\r\n   * @param   value     Setting value\r\n   * @return            Setting value\r\n   */\n\n  Object.defineProperty(State.prototype, \"set\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key, value) {\n      this._userSettings[key] = true;\n      this.setRaw(key, value);\n    }\n  });\n  /**\r\n   * Removes a setting value for the specified `key`.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param   key       Setting key\r\n   */\n\n  Object.defineProperty(State.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (key) {\n      delete this._userSettings[key];\n      delete this._settings[key];\n    }\n  });\n  /**\r\n   * Sets multiple settings at once.\r\n   *\r\n   * `settings` must be an object with key: value pairs.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\r\n   * @param settings Settings\r\n   */\n\n  Object.defineProperty(State.prototype, \"setAll\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (settings) {\n      var _this = this;\n\n      $object.keys(settings).forEach(function (key) {\n        _this.set(key, settings[key]);\n      });\n    }\n  });\n  Object.defineProperty(State.prototype, \"_eachSetting\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (f) {\n      $object.each(this._settings, f);\n    }\n  });\n  /**\r\n   * Applies the state to the target element.\r\n   *\r\n   * All setting values are set immediately.\r\n   */\n\n  Object.defineProperty(State.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      var seen = {};\n      seen[\"stateAnimationEasing\"] = true;\n      seen[\"stateAnimationDuration\"] = true;\n\n      var defaultState = this._entity.states.lookup(\"default\");\n\n      this._eachSetting(function (key, value) {\n        if (!seen[key]) {\n          seen[key] = true; // save values to default state\n\n          if (_this !== defaultState) {\n            if (!(key in defaultState._settings)) {\n              defaultState._settings[key] = _this._entity.get(key);\n            }\n          }\n\n          _this._entity.set(key, value);\n        }\n      });\n    }\n  });\n  /**\r\n   * Applies the state to the target element.\r\n   *\r\n   * Returns an object representing all [[Animation]] objects created for\r\n   * each setting key transition.\r\n   *\r\n   * @return           Animations\r\n   */\n\n  Object.defineProperty(State.prototype, \"applyAnimate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (duration) {\n      var _this = this;\n\n      if (duration == null) {\n        duration = this._settings.stateAnimationDuration;\n      }\n\n      if (duration == null) {\n        duration = this.get(\"stateAnimationDuration\", this._entity.get(\"stateAnimationDuration\", 0));\n      }\n\n      var easing = this._settings.stateAnimationEasing;\n\n      if (easing == null) {\n        easing = this.get(\"stateAnimationEasing\", this._entity.get(\"stateAnimationEasing\", $ease.cubic));\n      }\n\n      var defaultState = this._entity.states.lookup(\"default\");\n\n      var seen = {};\n      seen[\"stateAnimationEasing\"] = true;\n      seen[\"stateAnimationDuration\"] = true;\n      var animations = {};\n\n      this._eachSetting(function (key, value) {\n        if (!seen[key]) {\n          seen[key] = true; // save values to default state\n\n          if (_this != defaultState) {\n            if (!(key in defaultState._settings)) {\n              defaultState._settings[key] = _this._entity.get(key);\n            }\n          }\n\n          var animation = _this._entity.animate({\n            key: key,\n            to: value,\n            duration: duration,\n            easing: easing\n          });\n\n          if (animation) {\n            animations[key] = animation;\n          }\n        }\n      });\n\n      return animations;\n    }\n  });\n  return State;\n}();\n\nexport { State };\n/**\r\n * Collection of [[State]] objects for an element.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\r\n */\n\nvar States =\n/** @class */\nfunction () {\n  function States(entity) {\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entity\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._entity = entity;\n  }\n  /**\r\n   * Checks if a state by `name` exists. Returns it there is one.\r\n   *\r\n   * @param  name  State name\r\n   * @return       State\r\n   */\n\n\n  Object.defineProperty(States.prototype, \"lookup\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      return this._states[name];\n    }\n  });\n  /**\r\n   * Sets supplied `settings` on a state by the `name`.\r\n   *\r\n   * If such state does not yet exists, it is created.\r\n   *\r\n   * @param   name      State name\r\n   * @param   settings  Settings\r\n   * @return            New State\r\n   */\n\n  Object.defineProperty(States.prototype, \"create\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name, settings) {\n      var state = this._states[name];\n\n      if (state) {\n        state.setAll(settings);\n        return state;\n      } else {\n        var state_1 = new State(this._entity, settings);\n        this._states[name] = state_1;\n        return state_1;\n      }\n    }\n  });\n  /**\r\n   * Removes the state called `name`.\r\n   *\r\n   * @param   name      State name\r\n   */\n\n  Object.defineProperty(States.prototype, \"remove\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (name) {\n      delete this._states[name];\n    }\n  });\n  /**\r\n   * Applies a named state to the target element.\r\n   *\r\n   * @param  newState  State name\r\n   */\n\n  Object.defineProperty(States.prototype, \"apply\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newState) {\n      var state = this._states[newState];\n\n      if (state) {\n        state.apply();\n      }\n\n      this._entity._applyState(newState);\n    }\n  });\n  /**\r\n   * Applies a named state to the element.\r\n   *\r\n   * Returns an object representing all [[Animation]] objects created for\r\n   * each setting key transition.\r\n   *\r\n   * @param   newState  State name\r\n   * @return            Animations\r\n   */\n\n  Object.defineProperty(States.prototype, \"applyAnimate\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (newState, duration) {\n      var animations;\n      var state = this._states[newState];\n\n      if (state) {\n        animations = state.applyAnimate(duration);\n      }\n\n      this._entity._applyStateAnimated(newState, duration);\n\n      return animations;\n    }\n  });\n  return States;\n}();\n\nexport { States };","map":{"version":3,"mappings":"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","names":["$object","$ease","entity","settings","Object","_entity","_settings","key","fallback","value","undefined","_userSettings","setRaw","keys","forEach","_this","set","f","each","seen","defaultState","states","lookup","_eachSetting","get","duration","stateAnimationDuration","easing","stateAnimationEasing","cubic","animations","animation","animate","to","name","_states","state","setAll","state_1","State","newState","apply","_applyState","applyAnimate","_applyStateAnimated"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/States.ts"],"sourcesContent":["import type { Entity, Dirty } from \"./Entity\";\nimport type { Animations } from \"./Animation\";\nimport * as $object from \"./Object\";\nimport * as $ease from \"./Ease\";\n\n/**\n * An object representing a collection of setting values to apply as required.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\n */\nexport class State<E extends Entity> {\n\tprivate _entity: E;\n\tpublic _settings: Partial<E[\"_settings\"]>;\n\tpublic _userSettings: Dirty<E[\"_settings\"]> = {};\n\n\tconstructor(entity: E, settings: Partial<E[\"_settings\"]>) {\n\t\tthis._entity = entity;\n\t\tthis._settings = settings;\n\t}\n\n\t/**\n\t * Returns settings value for the specified `key`.\n\t *\n\t * If there is no value, `fallback` is returned instead (if set).\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Settings value\n\t * @param   callback  Fallback value\n\t * @return            Value\n\t */\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key): this[\"_settings\"][Key];\n\tpublic get<Key extends keyof this[\"_settings\"], F>(key: Key, fallback: F): NonNullable<this[\"_settings\"][Key]> | F;\n\tpublic get<Key extends keyof this[\"_settings\"]>(key: Key, fallback?: any): any {\n\t\tconst value = this._settings[key];\n\n\t\tif (value !== undefined) {\n\t\t\treturn value;\n\n\t\t} else {\n\t\t\treturn fallback;\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic setRaw<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._settings[key] = value;\n\t}\n\n\t/**\n\t * Sets a setting `value` for the specified `key` to be set when the state\n\t * is applied.\n\t *\n\t * @param   key       Setting key\n\t * @param   value     Setting value\n\t * @return            Setting value\n\t */\n\tpublic set<Key extends keyof E[\"_settings\"]>(key: Key, value: E[\"_settings\"][Key]) {\n\t\tthis._userSettings[key] = true;\n\t\tthis.setRaw(key, value);\n\t}\n\n\t/**\n\t * Removes a setting value for the specified `key`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param   key       Setting key\n\t */\n\tpublic remove<Key extends keyof this[\"_settings\"]>(key: Key) {\n\t\tdelete this._userSettings[key];\n\t\tdelete this._settings[key];\n\t}\n\n\t/**\n\t * Sets multiple settings at once.\n\t *\n\t * `settings` must be an object with key: value pairs.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/} for more info\n\t * @param settings Settings\n\t */\n\tpublic setAll(settings: this[\"_settings\"]) {\n\t\t$object.keys(settings).forEach((key) => {\n\t\t\tthis.set(key, settings[key]);\n\t\t});\n\t}\n\n\tprivate _eachSetting<Key extends keyof E[\"_settings\"], Value extends E[\"_settings\"][Key]>(f: (key: Key, value: Value) => void): void {\n\t\t$object.each(this._settings, f as any);\n\t}\n\n\t/**\n\t * Applies the state to the target element.\n\t *\n\t * All setting values are set immediately.\n\t */\n\tpublic apply() {\n\t\tconst seen: Dirty<E[\"_settings\"]> = {};\n\n\t\tseen[\"stateAnimationEasing\"] = true;\n\t\tseen[\"stateAnimationDuration\"] = true;\n\n\t\tconst defaultState = this._entity.states.lookup(\"default\")!;\n\n\t\tthis._eachSetting((key, value) => {\n\t\t\tif (!seen[key]) {\n\t\t\t\tseen[key] = true;\n\n\t\t\t\t// save values to default state\n\t\t\t\tif (this !== defaultState) {\n\t\t\t\t\tif (!(key in defaultState._settings)) {\n\t\t\t\t\t\tdefaultState._settings[key] = this._entity.get(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._entity.set(key, value);\n\t\t\t}\n\t\t});\n\t}\n\n\n\n\t/**\n\t * Applies the state to the target element.\n\t *\n\t * Returns an object representing all [[Animation]] objects created for\n\t * each setting key transition.\n\t *\n\t * @return           Animations\n\t */\n\tpublic applyAnimate(duration?: number): Animations<E[\"_settings\"]> {\n\n\t\tif (duration == null) {\n\t\t\tduration = this._settings.stateAnimationDuration;\n\t\t}\n\t\tif (duration == null) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", this._entity.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tlet easing = this._settings.stateAnimationEasing;\n\t\tif (easing == null) {\n\t\t\teasing = this.get(\"stateAnimationEasing\", this._entity.get(\"stateAnimationEasing\", $ease.cubic));\n\t\t}\n\n\t\tconst defaultState = this._entity.states.lookup(\"default\")!;\n\n\t\tconst seen: Dirty<E[\"_settings\"]> = {};\n\n\t\tseen[\"stateAnimationEasing\"] = true;\n\t\tseen[\"stateAnimationDuration\"] = true;\n\n\t\tconst animations: Animations<E[\"_settings\"]> = {};\n\n\t\tthis._eachSetting((key, value) => {\n\t\t\tif (!seen[key]) {\n\t\t\t\tseen[key] = true;\n\n\t\t\t\t// save values to default state\n\t\t\t\tif (this != defaultState) {\n\t\t\t\t\tif (!(key in defaultState._settings)) {\n\t\t\t\t\t\tdefaultState._settings[key] = this._entity.get(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst animation = this._entity.animate({\n\t\t\t\t\tkey: key,\n\t\t\t\t\tto: value,\n\t\t\t\t\tduration: duration!,\n\t\t\t\t\teasing: easing\n\t\t\t\t});\n\n\t\t\t\tif (animation) {\n\t\t\t\t\tanimations[key] = animation;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn animations;\n\t}\n}\n\n/**\n * Collection of [[State]] objects for an element.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/settings/states/} for more info\n */\nexport class States<E extends Entity> {\n\tprivate _states: { [key: string]: State<E> } = {};\n\tprivate _entity: E;\n\n\tconstructor(entity: E) {\n\t\tthis._entity = entity;\n\t}\n\n\t/**\n\t * Checks if a state by `name` exists. Returns it there is one.\n\t *\n\t * @param  name  State name\n\t * @return       State\n\t */\n\tpublic lookup(name: string): State<E> | undefined {\n\t\treturn this._states[name];\n\t}\n\n\t/**\n\t * Sets supplied `settings` on a state by the `name`.\n\t *\n\t * If such state does not yet exists, it is created.\n\t *\n\t * @param   name      State name\n\t * @param   settings  Settings\n\t * @return            New State\n\t */\n\tpublic create(name: string, settings: Partial<E[\"_settings\"]>): State<E> {\n\t\tconst state = this._states[name];\n\n\t\tif (state) {\n\t\t\tstate.setAll(settings);\n\t\t\treturn state;\n\n\t\t} else {\n\t\t\tconst state = new State(this._entity, settings);\n\t\t\tthis._states[name] = state;\n\t\t\treturn state;\n\t\t}\n\t}\n\n\t/**\n\t * Removes the state called `name`.\n\t *\n\t * @param   name      State name\n\t */\n\tpublic remove(name: string): void {\n\t\tdelete this._states[name];\n\t}\n\n\t/**\n\t * Applies a named state to the target element.\n\t *\n\t * @param  newState  State name\n\t */\n\tpublic apply(newState: string) {\n\t\tconst state = this._states[newState];\n\n\t\tif (state) {\n\t\t\tstate.apply();\n\t\t}\n\n\t\tthis._entity._applyState(newState);\n\t}\n\n\t/**\n\t * Applies a named state to the element.\n\t *\n\t * Returns an object representing all [[Animation]] objects created for\n\t * each setting key transition.\n\t *\n\t * @param   newState  State name\n\t * @return            Animations\n\t */\n\tpublic applyAnimate(newState: string, duration?: number): Animations<E[\"_settings\"]> | undefined {\n\t\tlet animations;\n\t\tconst state = this._states[newState];\n\n\t\tif (state) {\n\t\t\tanimations = state.applyAnimate(duration);\n\t\t}\n\n\t\tthis._entity._applyStateAnimated(newState, duration);\n\t\treturn animations;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}