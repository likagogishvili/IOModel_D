{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"./Container\";\nimport { List, ListDisposer } from \"./utils/List\";\nimport { OrderedListTemplate } from \"./utils/SortedList\";\nimport { Dictionary } from \"./utils/Dictionary\";\nimport { Disposer, MultiDisposer } from \"./utils/Disposer\";\nimport { DataSource } from \"./data/DataSource\";\nimport { Responsive } from \"./utils/Responsive\";\nimport { system } from \"./System\";\nimport { DataItem } from \"./DataItem\";\nimport { registry } from \"./Registry\";\nimport * as $math from \"./utils/Math\";\nimport * as $array from \"./utils/Array\";\nimport * as $ease from \"./utils/Ease\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $iter from \"./utils/Iterator\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar Component =\n/** @class */\nfunction (_super) {\n  __extends(Component, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Component() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds data field names.\r\n     *\r\n     * Data fields define connection beween [[DataItem]] and actual properties\r\n     * in raw data.\r\n     */\n\n\n    _this.dataFields = {};\n    /**\r\n     * A list of [[DataSource]] definitions of external data source.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._dataSources = {};\n    /**\r\n     * This is used when only new data is invalidated (if added using `addData`\r\n     * method).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._parseDataFrom = 0;\n    /**\r\n     * Holds the disposers for the dataItems and dataUsers\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._dataDisposers = [];\n    /**\r\n     * Currently selected \"data set\".\r\n     *\r\n     * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n     */\n\n    _this._currentDataSetId = \"\";\n    /**\r\n     * [_start description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._start = 0;\n    /**\r\n     * [_end description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._end = 1;\n    /**\r\n     * If set to `true`, changing data range in element will not trigger\r\n     * `daterangechanged` event.\r\n     */\n\n    _this.skipRangeEvent = false;\n    /**\r\n     * Whenever selected scope changes (chart is zoomed or panned), for example\r\n     * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n     * its contents.\r\n     *\r\n     * `rangeChangeDuration` influences how this is performed.\r\n     *\r\n     * If set to zero (0), the change will happen instantenously.\r\n     *\r\n     * If set to non-zero value, the chart will gradually animate into new\r\n     * position for the set amount of milliseconds.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.rangeChangeDuration = 0;\n    /**\r\n     * An easing function to use for range change animation.\r\n     *\r\n     * @see {@link Ease}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.rangeChangeEasing = $ease.cubicOut;\n    /**\r\n     * A duration (ms) of each data parsing step. A Component parses its data in\r\n     * chunks in order to avoid completely freezing the machine when large data\r\n     * sets are used. This setting will control how many milliseconds should pass\r\n     * when parsing data until parser stops for a brief moment to let other\r\n     * processes catch up.\r\n     */\n\n    _this.parsingStepDuration = 50;\n    /**\r\n     * [dataInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataInvalid = false;\n    /**\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.rawDataInvalid = false;\n    /**\r\n     * [dataRangeInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataRangeInvalid = false;\n    /**\r\n     * [dataItemsInvalid description]\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this.dataItemsInvalid = false;\n    /**\r\n     * If set to a non-zero number the element will \"animate\" data values of its\r\n     * children.\r\n     *\r\n     * This will happen on first load and whenever data values change.\r\n     *\r\n     * Enabling interpolation will mean that elements will transit smoothly into\r\n     * new values rather than updating instantly.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.interpolationDuration = 0;\n    /**\r\n     * An easing function to use for interpolating values when transiting from\r\n     * one source value to another.\r\n     *\r\n     * @default cubicOut\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     * @see {@link Ease}\r\n     */\n\n    _this.interpolationEasing = $ease.cubicOut;\n    /**\r\n     * Indicates whether transition between data item's values should start and\r\n     * play out all at once, or with a small delay (as defined by\r\n     * `sequencedInterpolationDelay`) for each subsequent data item.\r\n     *\r\n     * @default true\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.sequencedInterpolation = true;\n    /**\r\n     * A delay (ms) to wait between animating each subsequent data item's\r\n     * interpolation animation.\r\n     *\r\n     * Relative only if `sequencedInterpolation = true`.\r\n     *\r\n     * @default 0\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n     */\n\n    _this.sequencedInterpolationDelay = 0;\n    /**\r\n     * A progress (0-1) for the data validation process.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.dataValidationProgress = 0;\n    _this._addAllDataItems = true;\n    _this._usesData = true;\n    _this.className = \"Component\";\n    _this.minZoomCount = 1;\n    _this.maxZoomCount = 0;\n    _this._dataItems = new OrderedListTemplate(_this.createDataItem());\n\n    _this._dataItems.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n\n    _this._dataItems.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n\n    _this._disposers.push(new ListDisposer(_this._dataItems));\n\n    _this._disposers.push(_this._dataItems.template);\n\n    _this.invalidateData(); // TODO what about remove ?\n\n\n    _this.dataUsers.events.on(\"inserted\", _this.handleDataUserAdded, _this, false); // Set up disposers\n\n\n    _this._disposers.push(new MultiDisposer(_this._dataDisposers));\n\n    _this._start = 0;\n    _this._end = 1;\n    _this.maxZoomDeclination = 1; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Returns a new/empty DataItem of the type appropriate for this object.\r\n   *\r\n   * @see {@link DataItem}\r\n   * @return Data Item\r\n   */\n\n\n  Component.prototype.createDataItem = function () {\n    return new DataItem();\n  };\n  /**\r\n   * [handleDataUserAdded description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param event Event object\r\n   */\n\n\n  Component.prototype.handleDataUserAdded = function (event) {\n    var dataUser = event.newValue;\n    dataUser.dataProvider = this;\n  };\n  /**\r\n   * [handleDataItemValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.handleDataItemValueChange = function (dataItem, name) {\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * [handleDataItemWorkingValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemWorkingValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemWorkingLocationChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemWorkingLocationChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemCalculatedValueChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemCalculatedValueChange = function (dataItem, name) {};\n  /**\r\n   * [handleDataItemPropertyChange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.handleDataItemPropertyChange = function (dataItem, name) {};\n  /**\r\n   * Populates a [[DataItem]] width data from data source.\r\n   *\r\n   * Loops through all the fields and if such a field is found in raw data\r\n   * object, a corresponding value on passed in `dataItem` is set.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  Component.prototype.processDataItem = function (dataItem, dataContext) {\n    var _this = this;\n\n    if (dataItem) {\n      if (!dataContext) {\n        dataContext = {};\n      } // store reference to original data item\n\n\n      dataItem.dataContext = dataContext;\n      var hasSomeValues_1 = false;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext[fieldValue]; // Apply adapters to a retrieved value\n\n        if (_this._adapterO) {\n          if (_this._adapterO.isEnabled(\"dataContextValue\")) {\n            value = _this._adapterO.apply(\"dataContextValue\", {\n              field: fieldName,\n              value: value,\n              dataItem: dataItem\n            }).value;\n          }\n        }\n\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n\n          if (dataItem.hasChildren[fieldName]) {\n            var template = _this.createDataItem();\n\n            template.copyFrom(_this.mainDataSet.template);\n            var children = new OrderedListTemplate(template);\n            children.events.on(\"inserted\", _this.handleDataItemAdded, _this, false);\n            children.events.on(\"removed\", _this.handleDataItemRemoved, _this, false);\n\n            _this._dataDisposers.push(new ListDisposer(children));\n\n            var count = value.length;\n\n            for (var i = 0; i < count; i++) {\n              var rawDataItem = value[i];\n              var childDataItem = children.create();\n              childDataItem.parent = dataItem;\n\n              _this.processDataItem(childDataItem, rawDataItem);\n            }\n\n            var anyDataItem = dataItem;\n            anyDataItem[fieldName] = children;\n          } else {\n            // data is converted to numbers/dates in each dataItem\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext[fieldValue];\n\n        if ($type.hasValue(value)) {\n          hasSomeValues_1 = true;\n          dataItem.setProperty(f, value);\n        }\n      }); // @todo we might need some flag which would tell whether we should create empty data items or not.\n\n      if (!this._addAllDataItems && !hasSomeValues_1) {\n        this.mainDataSet.remove(dataItem);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * When validating raw data, instead of processing data item, we update it\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param item\r\n   */\n\n\n  Component.prototype.updateDataItem = function (dataItem) {\n    var _this = this;\n\n    if (dataItem) {\n      var dataContext_1 = dataItem.dataContext;\n      $object.each(this.dataFields, function (key, fieldValue) {\n        var fieldName = key;\n        var value = dataContext_1[fieldValue]; // Apply adapters to a retrieved value\n\n        if (_this._adapterO) {\n          value = _this._adapterO.apply(\"dataContextValue\", {\n            field: fieldName,\n            value: value,\n            dataItem: dataItem\n          }).value;\n        }\n\n        if ($type.hasValue(value)) {\n          if (dataItem.hasChildren[fieldName]) {\n            var anyDataItem = dataItem;\n            var children = anyDataItem[fieldName];\n            children.each(function (child) {\n              _this.updateDataItem(child);\n            });\n          } else {\n            // data is converted to numbers/dates in each dataItem\t\t\t\t\t\n            dataItem[fieldName] = value;\n          }\n        }\n      });\n      $object.each(this.propertyFields, function (key, fieldValue) {\n        var f = key;\n        var value = dataContext_1[fieldValue];\n\n        if ($type.hasValue(value)) {\n          dataItem.setProperty(f, value);\n        }\n      });\n    }\n  };\n  /**\r\n   * [validateDataElements description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.validateDataElements = function () {\n    var count = this.endIndex;\n\n    for (var i = this.startIndex; i < count; i++) {\n      var dataItem = this.dataItems.getIndex(i); // TODO is this correct\n\n      if (dataItem) {\n        this.validateDataElement(dataItem);\n      }\n    }\n  };\n  /**\r\n   * Validates this element and its related elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validate = function () {\n    this.validateDataElements();\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * [validateDataElement description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem [description]\r\n   */\n\n\n  Component.prototype.validateDataElement = function (dataItem) {};\n  /**\r\n   * Adds one or several (array) of data items to the existing data.\r\n   *\r\n   * @param rawDataItem One or many raw data item objects\r\n   */\n\n\n  Component.prototype.addData = function (rawDataItem, removeCount, skipRaw) {\n    var _this = this; // need to check if data is invalid, as addData might be called multiple times\n\n\n    if (!this.dataInvalid && this.inited) {\n      this._parseDataFrom = this.data.length; // save length of parsed data\n    }\n\n    if (!skipRaw) {\n      if (rawDataItem instanceof Array) {\n        // can't use concat because new array is returned\n        $array.each(rawDataItem, function (dataItem) {\n          _this.data.push(dataItem);\n        });\n      } else {\n        this.data.push(rawDataItem); // add to raw data array\n      }\n    }\n\n    if (this.inited) {\n      this.removeData(removeCount, skipRaw);\n    } else {\n      if ($type.isNumber(removeCount)) {\n        while (removeCount > 0) {\n          this.data.shift();\n          removeCount--;\n        }\n      }\n    }\n\n    this.invalidateData();\n  };\n  /**\r\n   * Removes elements from the beginning of data\r\n   *\r\n   * @param count number of elements to remove\r\n   */\n\n\n  Component.prototype.removeData = function (count, skipRaw) {\n    if ($type.isNumber(count) && count > 0) {\n      while (count > 0) {\n        var dataItem = this.mainDataSet.getIndex(0);\n\n        if (dataItem) {\n          this.mainDataSet.remove(dataItem);\n        }\n\n        this.dataUsers.each(function (dataUser) {\n          if (!dataUser.data || dataUser.data.length == 0) {\n            var dataItem_1 = dataUser.mainDataSet.getIndex(0);\n\n            if (dataItem_1) {\n              dataUser.mainDataSet.remove(dataItem_1);\n            }\n          }\n        });\n\n        if (!skipRaw) {\n          this.data.shift();\n        }\n\n        if (this._parseDataFrom > 0) {\n          this._parseDataFrom--;\n        }\n\n        count--;\n      } // changed from invalidateData since 4.7.19 to solve #51551\n\n\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Triggers a data (re)parsing.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataInvalid){\n\n\n    registry.addToInvalidComponents(this);\n    system.requestFrame();\n    this.dataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    }); //}\n  };\n  /**\r\n   * [invalidateDataUsers description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.invalidateDataUsers = function () {\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidate();\n    });\n  };\n  /**\r\n   * Invalidates data values. When data array is not changed, but values within\r\n   * it changes, we invalidate data so that component would process changes.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateDataItems = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataItemsInvalid){\n\n\n    $array.move(registry.invalidDataItems, this);\n    system.requestFrame();\n    this.dataItemsInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateDataItems();\n    }); //}\n  };\n  /**\r\n   * Invalidates data range. This is done when data which must be shown\r\n   * changes (chart is zoomed for example).\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateDataRange = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.dataRangeInvalid){\n\n\n    this.dataRangeInvalid = true;\n    $array.move(registry.invalidDataRange, this);\n    system.requestFrame(); //}\n  };\n  /**\r\n   * Processes data range.\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateDataRange = function () {\n    $array.remove(registry.invalidDataRange, this);\n    this.dataRangeInvalid = false;\n\n    if (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\n      this.rangeChangeUpdate();\n      this.appendDataItems();\n      this.invalidate();\n      this.dispatchImmediately(\"datarangechanged\");\n    }\n  };\n  /**\r\n   * [sliceData description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.sliceData = function () {\n    this._workingStartIndex = this.startIndex;\n    this._workingEndIndex = this.endIndex;\n  };\n  /**\r\n   * [rangeChangeUpdate description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.rangeChangeUpdate = function () {\n    this.sliceData();\n    this._prevStartIndex = this.startIndex;\n    this._prevEndIndex = this.endIndex;\n  };\n  /**\r\n   * [appendDataItems description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.appendDataItems = function () {\n    // TODO use an iterator instead\n    var count = this.endIndex;\n\n    for (var i = this.startIndex; i < count; i++) {\n      // data item\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = false;\n      }\n    }\n\n    for (var i = 0; i < this.startIndex; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n\n    for (var i = this.endIndex; i < this.dataItems.length; i++) {\n      var dataItem = this.dataItems.getIndex(i);\n\n      if (dataItem) {\n        dataItem.__disabled = true;\n      }\n    }\n  };\n  /**\r\n   * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n   * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n   */\n\n\n  Component.prototype.invalidateRawData = function () {\n    if (this.disabled || this.isTemplate) {\n      return;\n    } //if(!this.rawDataInvalid){\n\n\n    $array.move(registry.invalidRawDatas, this);\n    system.requestFrame();\n    this.rawDataInvalid = true;\n    $iter.each(this.dataUsers.iterator(), function (x) {\n      x.invalidateRawData();\n    }); //}\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.validateRawData = function () {\n    var _this = this;\n\n    $array.remove(registry.invalidRawDatas, this);\n    $iter.each(this.mainDataSet.iterator(), function (dataItem) {\n      if (dataItem) {\n        _this.updateDataItem(dataItem);\n      }\n    });\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Component.prototype.dispose = function () {\n    var _this = this;\n\n    this.mainDataSet.template.clones.clear();\n    $object.each(this._dataSources, function (key, source) {\n      _this.removeDispose(source);\n    });\n    this.disposeData();\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.disposeData = function () {\n    this.mainDataSet.template.clones.clear();\n    $array.each(this._dataDisposers, function (x) {\n      x.dispose();\n    }); // and for all components\n\n    $iter.each(this.dataUsers.iterator(), function (dataUser) {\n      dataUser.disposeData();\n    });\n    this._dataDisposers.length = 0;\n    this._startIndex = undefined;\n    this._endIndex = undefined; // dispose old\n\n    this.mainDataSet.clear();\n    this.mainDataSet.template.clones.clear();\n\n    if (this._dataSets) {\n      this._dataSets.clear();\n    }\n  };\n\n  Component.prototype.getDataItem = function (dataContext) {\n    return this.mainDataSet.create();\n  };\n  /**\r\n   * Validates (processes) data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateData = function () {\n    this.dispatchImmediately(\"beforedatavalidated\");\n    this.dataInvalid = false;\n    registry.removeFromInvalidComponents(this);\n\n    if (this.__disabled) {\n      return;\n    }\n\n    this.dataValidationProgress = 0; // need this to slice new data\n\n    this._prevStartIndex = undefined;\n    this._prevEndIndex = undefined; // todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n\n    this._startIndex = undefined;\n    this._endIndex = undefined;\n\n    if (this.dataFields.data && this.dataItem) {\n      var dataContext = this.dataItem.dataContext;\n      this._data = dataContext[this.dataFields.data];\n    } // data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\n    // check heatmap demo if uncommented\n    // fixed both issues by adding && this.data.length > 0\n    // check adding series example if changed\n\n\n    if (this._parseDataFrom === 0 && this.data.length > 0) {\n      this.disposeData();\n    }\n\n    if (this.data.length > 0) {\n      var preloader = this.preloader; // and for all components\n\n      $iter.each(this.dataUsers.iterator(), function (dataUser) {\n        // todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\n        dataUser._startIndex = undefined;\n        dataUser._endIndex = undefined;\n      });\n      var counter = 0;\n      var startTime = Date.now(); // parse data\n\n      var i = this._parseDataFrom;\n      var n = this.data.length;\n\n      var _loop_1 = function () {\n        var rawDataItem = this_1.data[i];\n\n        if (this_1._usesData) {\n          var dataItem = this_1.getDataItem(rawDataItem);\n          this_1.processDataItem(dataItem, rawDataItem);\n        }\n\n        this_1.dataUsers.each(function (dataUser) {\n          if (dataUser.data.length == 0) {\n            // checking if data is not set directly\n            var dataUserDataItem = dataUser.getDataItem(rawDataItem);\n            dataUser.processDataItem(dataUserDataItem, rawDataItem);\n          }\n        });\n        counter++; // show preloader if this takes too many time\n\n        if (counter == 100) {\n          // no need to check it on each data item\n          counter = 0;\n          var elapsed = Date.now() - startTime;\n\n          if (elapsed > this_1.parsingStepDuration) {\n            if (i < this_1.data.length - 10) {\n              this_1._parseDataFrom = i + 1; // update preloader\n\n              if (preloader) {\n                if (i / this_1.data.length > 0.5 && !preloader.visible) {// do not start showing\n                } else {\n                  preloader.progress = i / this_1.data.length;\n                }\n              }\n\n              this_1.dataValidationProgress = i / this_1.data.length;\n              i = this_1.data.length; // stops cycle\n\n              this_1.invalidateData();\n              return {\n                value: void 0\n              };\n            }\n          }\n        }\n      };\n\n      var this_1 = this;\n\n      for (i; i < n; i++) {\n        var state_1 = _loop_1();\n\n        if (typeof state_1 === \"object\") return state_1.value;\n      }\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n\n      this.dataUsers.each(function (dataUser) {\n        if (dataUser.hidden) {\n          dataUser.hide(0);\n        }\n      });\n    }\n\n    this.dataValidationProgress = 1;\n    this._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\n\n    this.invalidateDataItems();\n\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n\n    this.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\n  };\n  /**\r\n   * Validates (processes) data items.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.validateDataItems = function () {\n    $array.remove(registry.invalidDataItems, this);\n    this.dataItemsInvalid = false;\n    this.invalidateDataRange();\n    this.invalidate();\n    this.dispatch(\"dataitemsvalidated\");\n  };\n\n  Object.defineProperty(Component.prototype, \"data\", {\n    /**\r\n     * Returns element's source (raw) data.\r\n     *\r\n     * @return Data\r\n     */\n    get: function () {\n      if (!this._data) {\n        this._data = [];\n      }\n\n      if (!this._adapterO) {\n        return this._data;\n      } else {\n        return this._adapterO.apply(\"data\", this._data);\n      }\n    },\n\n    /**\r\n     * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n     * of objects.\r\n     *\r\n     * IMPORTANT: The order of data items in `data` array is important as it\r\n     * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n     *\r\n     * @param value Data\r\n     */\n    set: function (value) {\n      this.setData(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Component.prototype.setData = function (value) {\n    // array might be the same, but there might be items added\n    // todo: check if array changed, toString maybe?\n    if (!this.isDisposed()) {\n      this._parseDataFrom = 0;\n      this.disposeData();\n      this._data = value;\n\n      if (value && value.length > 0) {\n        this.invalidateData();\n      } else {\n        this.dispatchImmediately(\"beforedatavalidated\");\n        this.dispatch(\"datavalidated\");\n      }\n    }\n  };\n  /**\r\n   * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n   * property.\r\n   *\r\n   * For example if I want to bind `data` to an external JSON file, I'd create\r\n   * a DataSource for it.\r\n   *\r\n   * @param property  Property to bind external data to\r\n   * @return A DataSource for property\r\n   */\n\n\n  Component.prototype.getDataSource = function (property) {\n    var _this = this;\n\n    if (!$type.hasValue(this._dataSources[property])) {\n      this._dataSources[property] = new DataSource();\n      this._dataSources[property].component = this;\n      this.setDataSourceEvents(this._dataSources[property], property);\n\n      this._dataSources[property].adapter.add(\"dateFields\", function (val) {\n        return _this.dataSourceDateFields(val);\n      });\n\n      this._dataSources[property].adapter.add(\"numberFields\", function (val) {\n        return _this.dataSourceNumberFields(val);\n      });\n\n      this.events.on(\"inited\", function () {\n        _this.loadData(property);\n      }, this, false);\n    }\n\n    return this._dataSources[property];\n  };\n\n  Object.defineProperty(Component.prototype, \"dataSource\", {\n    /**\r\n     * @return Data source\r\n     */\n    get: function () {\n      if (!this._dataSources[\"data\"]) {\n        this.getDataSource(\"data\");\n      }\n\n      return this._dataSources[\"data\"];\n    },\n\n    /**\r\n     *A [[DataSource]] to be used for loading Component's data.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n     * @param value  Data source\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._dataSources[\"data\"]) {\n        this.removeDispose(this._dataSources[\"data\"]);\n      }\n\n      this._dataSources[\"data\"] = value;\n      this._dataSources[\"data\"].component = this;\n      this.events.on(\"inited\", function () {\n        _this.loadData(\"data\");\n      }, this, false);\n      this.setDataSourceEvents(value, \"data\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initiates loading of the external data via [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype.loadData = function (property) {\n    this._dataSources[property].load();\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of date fields\r\n   * @return Array of date fields populated with chart's date fields\r\n   */\n\n\n  Component.prototype.dataSourceDateFields = function (value) {\n    return value;\n  };\n  /**\r\n   * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n   * so that particular chart types can popuplate this setting with their\r\n   * own type-specific data fields so they are parsed properly.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Array of number fields\r\n   * @return Array of number fields populated with chart's number fields\r\n   */\n\n\n  Component.prototype.dataSourceNumberFields = function (value) {\n    return value;\n  };\n  /**\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param list        [description]\r\n   * @param dataFields  [description]\r\n   * @param targetList  [description]\r\n   * @return [description]\r\n   */\n\n\n  Component.prototype.populateDataSourceFields = function (list, dataFields, targetList) {\n    $array.each(targetList, function (value) {\n      if (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\n        list.push(dataFields[value]);\n      }\n    });\n    return list;\n  };\n  /**\r\n   * Sets events on a [[DataSource]].\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.setDataSourceEvents = function (ds, property) {\n    var _this = this;\n\n    ds.events.on(\"started\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0; //preloader.label.text = this.language.translate(\"Loading\");\n      }\n    }, undefined, false);\n    ds.events.on(\"loadstarted\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.25;\n      }\n    }, undefined, false);\n    ds.events.on(\"loadended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.5;\n      }\n    }, undefined, false);\n    ds.events.on(\"parseended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 0.75;\n      }\n    }, undefined, false);\n    ds.events.on(\"ended\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n    }, undefined, false);\n    ds.events.on(\"error\", function (ev) {\n      var preloader = _this.preloader;\n\n      if (preloader) {\n        preloader.progress = 1;\n      }\n\n      _this.openModal(ev.message);\n    }, undefined, false);\n\n    if (property) {\n      ds.events.on(\"done\", function (ev) {\n        var preloader = _this.preloader;\n\n        if (preloader) {\n          preloader.progress = 1;\n        }\n\n        if (property == \"data\" && !$type.isArray(ev.data)) {\n          ev.data = [ev.data];\n        }\n\n        if (ds.incremental && property == \"data\" && _this.data.length) {\n          _this.addData(ev.data, ds.keepCount ? ev.data.length : 0);\n        } else if (ds.updateCurrentData && property == \"data\" && _this.data.length) {\n          // cycle through existing data items\n          $array.each(_this.data, function (item, index) {\n            if ($type.hasValue(ev.data[index])) {\n              $object.each(item, function (key, val) {\n                if ($type.hasValue(ev.data[index][key])) {\n                  item[key] = ev.data[index][key];\n                }\n              });\n            }\n          });\n\n          _this.invalidateRawData();\n        } else {\n          _this[property] = ev.data;\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Component.prototype, \"responsive\", {\n    /**\r\n     * @return Responsive rules handler\r\n     */\n    get: function () {\n      if (!this._responsive) {\n        this._responsive = new Responsive();\n        this._responsive.component = this;\n      }\n\n      return this._responsive;\n    },\n\n    /**\r\n     * A [[Responsive]] instance to be used when applying conditional\r\n     * property values.\r\n     *\r\n     * NOTE: Responsive features are currently in development and may not work\r\n     * as expected, if at all.\r\n     *\r\n     * @param value  Responsive rules handler\r\n     */\n    set: function (value) {\n      this._responsive = value;\n      this._responsive.component = this;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets current zoom.\r\n   *\r\n   * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n   * marking end of the available data range.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"range\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param range          Range\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n   */\n\n  Component.prototype.zoom = function (range, skipRangeEvent, instantly, declination) {\n    var _this = this;\n\n    if (skipRangeEvent === void 0) {\n      skipRangeEvent = false;\n    }\n\n    if (instantly === void 0) {\n      instantly = false;\n    }\n\n    var start = range.start;\n    var end = range.end;\n    var priority = range.priority;\n\n    if (range.start == range.end) {\n      range.start = range.start - 0.5 / this.maxZoomFactor;\n      range.end = range.end + 0.5 / this.maxZoomFactor;\n    }\n\n    if (priority == \"end\" && end == 1 && start != 0) {\n      if (start < this.start) {\n        priority = \"start\";\n      }\n    }\n\n    if (priority == \"start\" && start == 0) {\n      if (end > this.end) {\n        priority = \"end\";\n      }\n    }\n\n    if (!$type.isNumber(declination)) {\n      declination = this.maxZoomDeclination;\n    }\n\n    if (!$type.isNumber(start) || !$type.isNumber(end)) {\n      return {\n        start: this.start,\n        end: this.end\n      };\n    }\n\n    if (this._finalStart != start || this._finalEnd != end) {\n      var maxZoomFactor = this.maxZoomFactor / this.minZoomCount;\n      var minZoomFactor = this.maxZoomFactor / this.maxZoomCount; // most likely we are dragging left scrollbar grip here, so we tend to modify end\n\n      if (priority == \"start\") {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            end = start + 1 / minZoomFactor;\n          }\n        } // add to the end\n\n\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        } //unless end is > 0\n\n\n        if (end > 1 && end - start < 1 / maxZoomFactor) {\n          //end = 1;\n          start = end - 1 / maxZoomFactor;\n        }\n      } // most likely we are dragging right, so we modify left\n      else {\n        if (this.maxZoomCount > 0) {\n          // add to the end\n          if (1 / (end - start) < minZoomFactor) {\n            start = end - 1 / minZoomFactor;\n          }\n        } // remove from start\n\n\n        if (1 / (end - start) > maxZoomFactor) {\n          start = end - 1 / maxZoomFactor;\n        }\n\n        if (start < 0 && end - start < 1 / maxZoomFactor) {\n          //start = 0;\n          end = start + 1 / maxZoomFactor;\n        }\n      }\n\n      if (start < -declination) {\n        start = -declination;\n      }\n\n      if (1 / (end - start) > maxZoomFactor) {\n        end = start + 1 / maxZoomFactor;\n      }\n\n      if (end > 1 + declination) {\n        end = 1 + declination;\n      }\n\n      if (1 / (end - start) > maxZoomFactor) {\n        start = end - 1 / maxZoomFactor;\n      }\n\n      this._finalEnd = end;\n      this._finalStart = start;\n      this.skipRangeEvent = skipRangeEvent;\n      this.dispatchImmediately(\"rangechangestarted\");\n\n      if (this.rangeChangeDuration > 0 && !instantly) {\n        // todo: maybe move this to Animation\n        var rangeChangeAnimation = this.rangeChangeAnimation;\n\n        if (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\n          var options = rangeChangeAnimation.animationOptions;\n\n          if (options.length > 1) {\n            if (options[0].to == start && options[1].to == end) {\n              return {\n                start: start,\n                end: end\n              };\n            } else {\n              if (!rangeChangeAnimation.isDisposed()) {\n                rangeChangeAnimation.stop();\n              }\n            }\n          }\n        }\n\n        if (this.rangeChangeAnimation) {\n          this.rangeChangeAnimation.kill();\n        }\n\n        rangeChangeAnimation = this.animate([{\n          property: \"start\",\n          to: start\n        }, {\n          property: \"end\",\n          to: end\n        }], this.rangeChangeDuration, this.rangeChangeEasing);\n        this.rangeChangeAnimation = rangeChangeAnimation;\n\n        if (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\n          rangeChangeAnimation.events.on(\"animationended\", function () {\n            _this.dispatchImmediately(\"rangechangeended\");\n          });\n        } else {\n          this.dispatchImmediately(\"rangechangeended\");\n        }\n      } else {\n        this.start = start;\n        this.end = end;\n        this.dispatch(\"rangechangeended\");\n      }\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  };\n  /**\r\n   * Zooms to specific data items using their index in data.\r\n   *\r\n   * This method will not have any effect when called on a chart object.\r\n   * Since the chart can have a number of axes and series, each with its own\r\n   * data, the meaning of \"index\" is very ambiguous.\r\n   *\r\n   * To zoom the chart use `zoom*` methods on its respective axes.\r\n   *\r\n   * @param startIndex     Index of the starting data item\r\n   * @param endIndex       Index of the ending data item\r\n   * @param skipRangeEvent Should rangechanged event not be triggered?\r\n   * @param instantly      Do not animate?\r\n   */\n\n\n  Component.prototype.zoomToIndexes = function (startIndex, endIndex, skipRangeEvent, instantly) {\n    if (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\n      return;\n    }\n\n    var start = startIndex / this.dataItems.length;\n    var end = endIndex / this.dataItems.length;\n    this.zoom({\n      start: start,\n      end: end\n    }, skipRangeEvent, instantly);\n  };\n\n  Object.defineProperty(Component.prototype, \"zoomFactor\", {\n    /**\r\n     * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n     * the available data)\r\n     *\r\n     * @return Zoom factor\r\n     */\n    get: function () {\n      return $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomFactor\", {\n    /**\r\n     * @return Maximum zoomFactor\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomFactor\");\n    },\n\n    /**\r\n     * Max available `zoomFactor`.\r\n     *\r\n     * The element will not allow zoom to occur beyond this factor.\r\n     *\r\n     * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n     * category axis could be zoomed to one category and date axis allows to be\r\n     * zoomed up to one base interval.\r\n     *\r\n     * In case you want to restrict category or date axis to be zoomed to more\r\n     * than one category or more than one base interval, use `minZoomCount`\r\n     * property (set it to `> 1`).\r\n     *\r\n     * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n     *\r\n     * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n     *\r\n     * @param value  Maximum zoomFactor\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomFactor\", value)) {\n        if (value == 1) {\n          this.maxZoomDeclination = 0;\n        }\n\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomDeclination\", {\n    /**\r\n     * @ignore\r\n     * @return Maximum zoom declination\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomDeclination\");\n    },\n\n    /**\r\n     * Max zoom declination.\r\n     *\r\n     * @ignore\r\n     * @default 1\r\n     * @param value  Maximum zoom declination\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"maxZoomDeclination\", value)) {\n        this.invalidateDataRange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"startIndex\", {\n    /**\r\n     * Current starting index.\r\n     *\r\n     * @return Start index\r\n     */\n    get: function () {\n      if (!$type.isNumber(this._startIndex)) {\n        this._startIndex = 0;\n      }\n\n      return this._startIndex;\n    },\n\n    /**\r\n     * Sets current starting index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Start index\r\n     */\n    set: function (value) {\n      this._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length); //this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\n\n      this.start = this.indexToPosition(this._startIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   * @todo:review description\r\n   * returns item's relative position by the index of the item\r\n   * @param index\r\n   */\n\n  Component.prototype.indexToPosition = function (index) {\n    return index / this.dataItems.length;\n  };\n\n  Object.defineProperty(Component.prototype, \"endIndex\", {\n    /**\r\n     * Current ending index.\r\n     *\r\n     * @return End index\r\n     */\n    get: function () {\n      var count = this.dataItems.length;\n\n      if (!$type.isNumber(this._endIndex) || this._endIndex > count) {\n        this._endIndex = count;\n      }\n\n      return this._endIndex;\n    },\n\n    /**\r\n     * Sets current ending index.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value End index\r\n     */\n    set: function (value) {\n      this._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length); //this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\n\n      this.end = this.indexToPosition(this._endIndex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"start\", {\n    /**\r\n     * @return Start (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._start;\n      } else {\n        return this._adapterO.apply(\"start\", this._start);\n      }\n    },\n\n    /**\r\n     * Start of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value Start (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); not good\n      //if (1 / (this.end - value) > this.maxZoomFactor) {\n      //\tvalue = this.end - 1 / this.maxZoomFactor;\n      //}\n      if (this._start != value) {\n        this._start = value;\n        var startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\n        this._startIndex = Math.min(startIndex, this.dataItems.length);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"startchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"end\", {\n    /**\r\n     * @return End (0-1)\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._end;\n      } else {\n        return this._adapterO.apply(\"end\", this._end);\n      }\n    },\n\n    /**\r\n     * End of the current data range (zoom).\r\n     *\r\n     * These are relative values from 0 (beginning) to 1 (end).\r\n     *\r\n     * @param value End (0-1)\r\n     */\n    set: function (value) {\n      // value = $math.round(value, 10); // not good\n      //if (1 / (value - this.start) > this.maxZoomFactor) {\n      //\tvalue = 1 / this.maxZoomFactor + this.start;\n      //}\n      if (this._end != value) {\n        this._end = value;\n        this._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\n        this.invalidateDataRange();\n        this.invalidate();\n        this.dispatchImmediately(\"endchanged\");\n        this.dispatch(\"startendchanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [removeFromInvalids description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n  Component.prototype.removeFromInvalids = function () {\n    _super.prototype.removeFromInvalids.call(this);\n\n    registry.removeFromInvalidComponents(this);\n    $array.remove(registry.invalidDataItems, this);\n    $array.remove(registry.invalidDataRange, this);\n    $array.remove(registry.invalidRawDatas, this);\n  };\n\n  Object.defineProperty(Component.prototype, \"dataItems\", {\n    /**\r\n     * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n     *\r\n     * @return List of data items\r\n     */\n    get: function () {\n      if (this._currentDataSetId != \"\") {\n        var dataItems = this.dataSets.getKey(this._currentDataSetId);\n\n        if (dataItems) {\n          return dataItems;\n        }\n      }\n\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"dataSets\", {\n    /**\r\n     * Holds data items for data sets (usually aggregated data).\r\n     *\r\n     * @ignore\r\n     * @since 4.7.0\r\n     * @return  Data sets\r\n     */\n    get: function () {\n      if (!this._dataSets) {\n        this._dataSets = new Dictionary();\n      }\n\n      return this._dataSets;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Makes the chart use particular data set.\r\n   *\r\n   * If `id` is not provided or there is no such data set, main data will be\r\n   * used.\r\n   *\r\n   * @ignore\r\n   * @since 4.7.0\r\n   * @param  id  Data set id\r\n   */\n\n  Component.prototype.setDataSet = function (id) {\n    if (this._currentDataSetId != id) {\n      var dataSet = this.dataSets.getKey(id);\n\n      if (!dataSet) {\n        if (this._currentDataSetId != \"\") {\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = true;\n          });\n          this._currentDataSetId = \"\";\n          this.invalidateDataRange();\n          this._prevStartIndex = undefined;\n          this.dataItems.each(function (dataItem) {\n            dataItem.__disabled = false;\n          });\n          return true;\n        }\n      } else {\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = true;\n        });\n        this._currentDataSetId = id;\n        this.invalidateDataRange();\n        this._prevStartIndex = undefined;\n        this.dataItems.each(function (dataItem) {\n          dataItem.__disabled = false;\n        });\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Component.prototype, \"currentDataSetId\", {\n    /**\r\n     * Returns id of the currently used data set, or `undefined` if main data set\r\n     * is in use.\r\n     *\r\n     * @since 4.7.0\r\n     * @return Current data set id\r\n     */\n    get: function () {\n      return this._currentDataSetId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"mainDataSet\", {\n    /**\r\n     * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n     * in `data`).\r\n     *\r\n     * @since 4.7.0\r\n     * @return Main data set\r\n     */\n    get: function () {\n      return this._dataItems;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Updates the indexes for the dataItems\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype._updateDataItemIndexes = function (startIndex) {\n    var dataItems = this.mainDataSet.values;\n    var length = dataItems.length;\n\n    for (var i = startIndex; i < length; ++i) {\n      dataItems[i]._index = i;\n    }\n  };\n  /**\r\n   * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n\n\n  Component.prototype.handleDataItemAdded = function (event) {\n    event.newValue.component = this;\n\n    this._updateDataItemIndexes(event.index);\n\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * removes [[DataItem]] as well as triggers data re-validation.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event [description]\r\n   */\n\n\n  Component.prototype.handleDataItemRemoved = function (event) {\n    //\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\n    this._updateDataItemIndexes(event.index);\n\n    if (!this.dataItemsInvalid) {\n      this.invalidateDataItems();\n    }\n  };\n  /**\r\n   * Binds a data element's field to a specific field in raw data.\r\n   * For example, for the very basic column chart you'd want to bind a `value`\r\n   * field to a field in data, such as `price`.\r\n   *\r\n   * Some more advanced Components, like [[CandlestickSeries]] need several\r\n   * data fields bound to data, such as ones for open, high, low and close\r\n   * values.\r\n   *\r\n   * @todo Example\r\n   * @param field  Field name\r\n   * @param value  Field name in data\r\n   */\n\n\n  Component.prototype.bindDataField = function (field, value) {\n    this.dataFields[field] = value;\n    this.invalidateDataRange();\n  };\n  /**\r\n   * Invalidates processed data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Component.prototype.invalidateProcessedData = function () {\n    this.resetProcessedRange();\n    this.invalidateDataRange();\n  };\n  /**\r\n   * [resetProcessedRange description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Component.prototype.resetProcessedRange = function () {\n    this._prevEndIndex = null;\n    this._prevStartIndex = null;\n  };\n\n  Object.defineProperty(Component.prototype, \"dataUsers\", {\n    /**\r\n     * Returns all other [[Component]] objects that are using this element's\r\n     * data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @todo Description (review)\r\n     * @return [description]\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._dataUsers) {\n        this._dataUsers = new List(); //this._disposers.push(new ListDisposer(this._dataUsers));\n        // TODO better way of handling this? e.g. move into another module ?\n\n        this._disposers.push(new Disposer(function () {\n          // TODO clear the list ?\n          $iter.each(_this._dataUsers.iterator(), function (x) {\n            x.dispose();\n          });\n        }));\n      }\n\n      return this._dataUsers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a clone of this element.\r\n   *\r\n   * @return Clone\r\n   */\n\n  Component.prototype.clone = function () {\n    var component = _super.prototype.clone.call(this);\n\n    component.dataFields = $utils.copyProperties(this.dataFields, {});\n    return component;\n  };\n  /**\r\n   * Copies all parameters from another [[Component]].\r\n   *\r\n   * @param source Source Component\r\n   */\n\n\n  Component.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    this.data = source.data;\n    this.sequencedInterpolation = source.sequencedInterpolation;\n    this.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\n    this.interpolationDuration = source.interpolationDuration;\n    this.interpolationEasing = source.interpolationEasing;\n  };\n  /**\r\n   * Invalidates the whole element, including all its children, causing\r\n   * complete re-parsing of data and redraw.\r\n   *\r\n   * Use sparingly!\r\n   */\n\n\n  Component.prototype.reinit = function () {\n    this._inited = false;\n    this.deepInvalidate();\n  };\n  /**\r\n   * Add an adapter for data.\r\n   *\r\n   * @return Exporting\r\n   */\n\n\n  Component.prototype.getExporting = function () {\n    var _export = _super.prototype.getExporting.call(this);\n\n    if (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\n      _export.adapter.add(\"data\", this._exportData, -1, this);\n\n      this.events.on(\"datavalidated\", function (ev) {\n        _export.handleDataUpdated();\n      });\n    }\n\n    return _export;\n  };\n\n  Component.prototype._exportData = function (arg) {\n    arg.data = this.data;\n    return arg;\n  };\n\n  Component.prototype.setDisabled = function (value) {\n    var changed = _super.prototype.setDisabled.call(this, value);\n\n    if (changed) {\n      this.invalidateData();\n    }\n\n    return changed;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Component.prototype.setShowOnInit = function (value) {\n    if (value != this.getPropertyValue(\"showOnInit\")) {\n      if (value && !this.inited && !this.hidden) {\n        this._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\n\n        this._disposers.push(this._showOnInitDisposer2);\n      } else {\n        if (this._showOnInitDisposer2) {\n          this.removeDispose(this._showOnInitDisposer2);\n        }\n      }\n    } // important order here\n\n\n    _super.prototype.setShowOnInit.call(this, value);\n  };\n\n  Component.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.dataInvalid) {\n        this.dataInvalid = false;\n        registry.removeFromInvalidComponents(this);\n        this._baseId = value;\n        this.invalidateData();\n      }\n    }\n\n    _super.prototype.setBaseId.call(this, value);\n  };\n\n  Object.defineProperty(Component.prototype, \"minZoomCount\", {\n    /**\r\n     * @return Min zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minZoomCount\");\n    },\n\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Allows restricting zoom in beyond certain number of categories or base\r\n     * intervals.\r\n     *\r\n     * @default 1\r\n     * @param value  Min zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Component.prototype, \"maxZoomCount\", {\n    /**\r\n     * @return Max zoom count\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxZoomCount\");\n    },\n\n    /**\r\n     * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n     *\r\n     * Limits how many categories or base intervals can be shown at the same\r\n     * time.\r\n     *\r\n     * If there are more items in the chart, the chart will auto-zoom.\r\n     *\r\n     * @default 0 (no limit)\r\n     * @since 4.6.2\r\n     * @param value  Max zoom count\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"maxZoomCount\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Component.prototype._systemCheckIfValidate = function () {\n    if (this.dataInvalid || this.dataProvider && this.dataProvider.dataInvalid) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  Component.prototype.asFunction = function (field) {\n    return field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Component;\n}(Container);\n\nexport { Component };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Component\"] = Component;","map":{"version":3,"mappings":";AAAA;;;;;;;AAMA,SAASA,SAAT,QAAsF,aAAtF;AACA,SAASC,IAAT,EAA4BC,YAA5B,QAAgD,cAAhD;AACA,SAASC,mBAAT,QAAuD,oBAAvD;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAAoBC,QAApB,EAA8BC,aAA9B,QAAmD,kBAAnD;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAIA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AA+LA;;;;;;;AAOA;;;;;;;;;;;AAUA;AAAA;AAAA;EAA+BC;EAsU9B;;;;;EAGA;IAAA,YAEC;IACAC,qBAAO,IAHR;IAlUA;;;;;;;;IAMOC,mBAAkC,EAAlC;IA8BP;;;;;;IAKUA,qBAAgD,EAAhD;IASV;;;;;;;IAMUA,uBAAyB,CAAzB;IASV;;;;;;IAKUA,uBAAmC,EAAnC;IAsBV;;;;;;IAKUA,0BAA4B,EAA5B;IAgBV;;;;;;IAKUA,eAAiB,CAAjB;IAEV;;;;;;IAKUA,aAAe,CAAf;IAgBV;;;;;IAIOA,uBAA0B,KAA1B;IAEP;;;;;;;;;;;;;;;;IAeOA,4BAA8B,CAA9B;IAEP;;;;;;;IAMOA,0BAA+CP,KAAK,CAACQ,QAArD;IASP;;;;;;;;IAOOD,4BAA8B,EAA9B;IAEP;;;;;;;IAMOA,oBAAuB,KAAvB;IAGP;;;;;IAIOA,uBAA0B,KAA1B;IAEP;;;;;;;IAMOA,yBAA4B,KAA5B;IAEP;;;;;;;IAMOA,yBAA4B,KAA5B;IAEP;;;;;;;;;;;;;IAYOA,8BAAgC,CAAhC;IAEP;;;;;;;;;IAQOA,4BAAiDP,KAAK,CAACQ,QAAvD;IAEP;;;;;;;;;IAQOD,+BAAkC,IAAlC;IAEP;;;;;;;;;;IASOA,oCAAsC,CAAtC;IAEP;;;;;;IAKOA,+BAAiC,CAAjC;IA0CGA,yBAA4B,IAA5B;IAIAA,kBAAqB,IAArB;IAWTA,KAAI,CAACE,SAAL,GAAiB,WAAjB;IAEAF,KAAI,CAACG,YAAL,GAAoB,CAApB;IACAH,KAAI,CAACI,YAAL,GAAoB,CAApB;IAEAJ,KAAI,CAACK,UAAL,GAAkB,IAAIvB,mBAAJ,CAAkCkB,KAAI,CAACM,cAAL,EAAlC,CAAlB;;IACAN,KAAI,CAACK,UAAL,CAAgBE,MAAhB,CAAuBC,EAAvB,CAA0B,UAA1B,EAAsCR,KAAI,CAACS,mBAA3C,EAAgET,KAAhE,EAAsE,KAAtE;;IACAA,KAAI,CAACK,UAAL,CAAgBE,MAAhB,CAAuBC,EAAvB,CAA0B,SAA1B,EAAqCR,KAAI,CAACU,qBAA1C,EAAiEV,KAAjE,EAAuE,KAAvE;;IACAA,KAAI,CAACW,UAAL,CAAgBC,IAAhB,CAAqB,IAAI/B,YAAJ,CAAiBmB,KAAI,CAACK,UAAtB,CAArB;;IACAL,KAAI,CAACW,UAAL,CAAgBC,IAAhB,CAAqBZ,KAAI,CAACK,UAAL,CAAgBQ,QAArC;;IAEAb,KAAI,CAACc,cAAL,GAfD,CAiBC;;;IACAd,KAAI,CAACe,SAAL,CAAeR,MAAf,CAAsBC,EAAtB,CAAyB,UAAzB,EAAqCR,KAAI,CAACgB,mBAA1C,EAA+DhB,KAA/D,EAAqE,KAArE,EAlBD,CAoBC;;;IACAA,KAAI,CAACW,UAAL,CAAgBC,IAAhB,CAAqB,IAAI3B,aAAJ,CAAkBe,KAAI,CAACiB,cAAvB,CAArB;;IAEAjB,KAAI,CAACkB,MAAL,GAAc,CAAd;IACAlB,KAAI,CAACmB,IAAL,GAAY,CAAZ;IAEAnB,KAAI,CAACoB,kBAAL,GAA0B,CAA1B,CA1BD,CA4BC;;IACApB,KAAI,CAACqB,UAAL;;;EAEA;EAED;;;;;;;;EAMUC,qCAAV;IACC,OAAO,IAAIjC,QAAJ,EAAP;EACA,CAFS;EAIV;;;;;;;;;EAOUiC,0CAAV,UAA8BC,KAA9B,EAAuE;IACtE,IAAIC,QAAQ,GAAGD,KAAK,CAACE,QAArB;IACAD,QAAQ,CAACE,YAAT,GAAwB,IAAxB;EACA,CAHS;EAKV;;;;;;;;EAMOJ,gDAAP,UAAiCK,QAAjC,EAA+DC,IAA/D,EAA4E;IAC3E,IAAI,CAAC,KAAKC,gBAAV,EAA4B;MAC3B,KAAKC,mBAAL;IACA;EACD,CAJM;EAMP;;;;;;;EAKOR,uDAAP,UAAwCK,QAAxC,EAAsEC,IAAtE,EAAmF,CAElF,CAFM;EAIP;;;;;;;EAKON,0DAAP,UAA2CK,QAA3C,EAAyEC,IAAzE,EAAsF,CAErF,CAFM;EAIP;;;;;;;EAKON,0DAAP,UAA2CK,QAA3C,EAAyEC,IAAzE,EAAsF,CAErF,CAFM;EAIP;;;;;;;EAKON,mDAAP,UAAoCK,QAApC,EAAkEC,IAAlE,EAA+E,CAE9E,CAFM;EAIP;;;;;;;;;;;EASUN,sCAAV,UAA0BK,QAA1B,EAAuDI,WAAvD,EAA2E;IAA3E;;IACC,IAAIJ,QAAJ,EAAc;MACb,IAAI,CAACI,WAAL,EAAkB;QACjBA,WAAW,GAAG,EAAd;MACA,CAHY,CAKb;;;MACAJ,QAAQ,CAACI,WAAT,GAAuBA,WAAvB;MAEA,IAAIC,eAAa,GAAG,KAApB;MAEApC,OAAO,CAACqC,IAAR,CAAa,KAAKC,UAAlB,EAA8B,UAACC,GAAD,EAAMC,UAAN,EAAgB;QAC7C,IAAMC,SAAS,GAAmBF,GAAlC;QAEA,IAAIG,KAAK,GAAcP,WAAY,CAACK,UAAD,CAAnC,CAH6C,CAI7C;;QACA,IAAIpC,KAAI,CAACuC,SAAT,EAAoB;UACnB,IAAIvC,KAAI,CAACuC,SAAL,CAAeC,SAAf,CAAyB,kBAAzB,CAAJ,EAAkD;YACjDF,KAAK,GAAGtC,KAAI,CAACuC,SAAL,CAAeE,KAAf,CAAqB,kBAArB,EAAyC;cAChDC,KAAK,EAAEL,SADyC;cAEhDC,KAAK,EAAEA,KAFyC;cAGhDX,QAAQ,EAAEA;YAHsC,CAAzC,EAILW,KAJH;UAKA;QACD;;QAED,IAAIzC,KAAK,CAAC8C,QAAN,CAAeL,KAAf,CAAJ,EAA2B;UAC1BN,eAAa,GAAG,IAAhB;;UAEA,IAAIL,QAAQ,CAACiB,WAAT,CAAqBP,SAArB,CAAJ,EAAqC;YACpC,IAAIxB,QAAQ,GAAGb,KAAI,CAACM,cAAL,EAAf;;YACAO,QAAQ,CAACgC,QAAT,CAAkB7C,KAAI,CAAC8C,WAAL,CAAiBjC,QAAnC;YACA,IAAIkC,QAAQ,GAAG,IAAIjE,mBAAJ,CAAkC+B,QAAlC,CAAf;YACAkC,QAAQ,CAACxC,MAAT,CAAgBC,EAAhB,CAAmB,UAAnB,EAA+BR,KAAI,CAACS,mBAApC,EAAyDT,KAAzD,EAA+D,KAA/D;YACA+C,QAAQ,CAACxC,MAAT,CAAgBC,EAAhB,CAAmB,SAAnB,EAA8BR,KAAI,CAACU,qBAAnC,EAA0DV,KAA1D,EAAgE,KAAhE;;YACAA,KAAI,CAACiB,cAAL,CAAoBL,IAApB,CAAyB,IAAI/B,YAAJ,CAAiBkE,QAAjB,CAAzB;;YACA,IAAIC,KAAK,GAAGV,KAAK,CAACW,MAAlB;;YACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;cAC/B,IAAIC,WAAW,GAAGb,KAAK,CAACY,CAAD,CAAvB;cACA,IAAIE,aAAa,GAAsBL,QAAQ,CAACM,MAAT,EAAvC;cACAD,aAAa,CAACE,MAAd,GAAuB3B,QAAvB;;cACA3B,KAAI,CAACuD,eAAL,CAAqBH,aAArB,EAAoCD,WAApC;YACA;;YACD,IAAIK,WAAW,GAAQ7B,QAAvB;YACA6B,WAAW,CAACnB,SAAD,CAAX,GAA8BU,QAA9B;UACA,CAhBD,MAiBK;YACJ;YACMpB,QAAS,CAACU,SAAD,CAAT,GAAuBC,KAAvB;UACN;QACD;MACD,CAxCD;MA0CA1C,OAAO,CAACqC,IAAR,CAAa,KAAKwB,cAAlB,EAAkC,UAACtB,GAAD,EAAMC,UAAN,EAAgB;QACjD,IAAMsB,CAAC,GAAmBvB,GAA1B;QACA,IAAIG,KAAK,GAAcP,WAAY,CAACK,UAAD,CAAnC;;QAEA,IAAIvC,KAAK,CAAC8C,QAAN,CAAeL,KAAf,CAAJ,EAA2B;UAC1BN,eAAa,GAAG,IAAhB;UACAL,QAAQ,CAACgC,WAAT,CAAqBD,CAArB,EAAwBpB,KAAxB;QACA;MACD,CARD,EApDa,CA8Db;;MACA,IAAI,CAAC,KAAKsB,gBAAN,IAA0B,CAAC5B,eAA/B,EAA8C;QAC7C,KAAKc,WAAL,CAAiBe,MAAjB,CAAwBlC,QAAxB;MACA;IACD;EACD,CApES;EAsEV;;;;;;;;;EAOUL,qCAAV,UAAyBK,QAAzB,EAAoD;IAApD;;IACC,IAAIA,QAAJ,EAAc;MAEb,IAAImC,aAAW,GAAGnC,QAAQ,CAACI,WAA3B;MAEAnC,OAAO,CAACqC,IAAR,CAAa,KAAKC,UAAlB,EAA8B,UAACC,GAAD,EAAMC,UAAN,EAAgB;QAC7C,IAAMC,SAAS,GAAmBF,GAAlC;QAEA,IAAIG,KAAK,GAAcwB,aAAY,CAAC1B,UAAD,CAAnC,CAH6C,CAI7C;;QACA,IAAIpC,KAAI,CAACuC,SAAT,EAAoB;UACnBD,KAAK,GAAGtC,KAAI,CAACuC,SAAL,CAAeE,KAAf,CAAqB,kBAArB,EAAyC;YAChDC,KAAK,EAAEL,SADyC;YAEhDC,KAAK,EAAEA,KAFyC;YAGhDX,QAAQ,EAAEA;UAHsC,CAAzC,EAILW,KAJH;QAKA;;QAED,IAAIzC,KAAK,CAAC8C,QAAN,CAAeL,KAAf,CAAJ,EAA2B;UAC1B,IAAIX,QAAQ,CAACiB,WAAT,CAAqBP,SAArB,CAAJ,EAAqC;YACpC,IAAImB,WAAW,GAAQ7B,QAAvB;YACA,IAAIoB,QAAQ,GAAiDS,WAAW,CAACnB,SAAD,CAAxE;YACAU,QAAQ,CAACd,IAAT,CAAc,UAAC8B,KAAD,EAAM;cACnB/D,KAAI,CAACgE,cAAL,CAAoBD,KAApB;YACA,CAFD;UAGA,CAND,MAOK;YACJ;YACMpC,QAAS,CAACU,SAAD,CAAT,GAAuBC,KAAvB;UACN;QACD;MACD,CA1BD;MA4BA1C,OAAO,CAACqC,IAAR,CAAa,KAAKwB,cAAlB,EAAkC,UAACtB,GAAD,EAAMC,UAAN,EAAgB;QACjD,IAAMsB,CAAC,GAAmBvB,GAA1B;QACA,IAAIG,KAAK,GAAcwB,aAAY,CAAC1B,UAAD,CAAnC;;QACA,IAAIvC,KAAK,CAAC8C,QAAN,CAAeL,KAAf,CAAJ,EAA2B;UAC1BX,QAAQ,CAACgC,WAAT,CAAqBD,CAArB,EAAwBpB,KAAxB;QACA;MACD,CAND;IAOA;EACD,CAzCS;EA4CV;;;;;;;;EAMUhB,2CAAV;IACC,IAAI0B,KAAK,GAAG,KAAKiB,QAAjB;;IAEA,KAAK,IAAIf,CAAC,GAAG,KAAKgB,UAAlB,EAA8BhB,CAAC,GAAGF,KAAlC,EAAyCE,CAAC,EAA1C,EAA8C;MAC7C,IAAMvB,QAAQ,GAAG,KAAKwC,SAAL,CAAeC,QAAf,CAAwBlB,CAAxB,CAAjB,CAD6C,CAG7C;;MACA,IAAIvB,QAAJ,EAAc;QACb,KAAK0C,mBAAL,CAAyB1C,QAAzB;MACA;IACD;EACD,CAXS;EAaV;;;;;;;EAKOL,+BAAP;IACC,KAAKgD,oBAAL;;IACAvE,iBAAMwE,QAAN,CAAcC,IAAd,CAAc,IAAd;EACA,CAHM;EAKP;;;;;;;;EAMOlD,0CAAP,UAA2BK,QAA3B,EAAsD,CAErD,CAFM;EAIP;;;;;;;EAKOL,8BAAP,UAAe6B,WAAf,EAA+CsB,WAA/C,EAAqEC,OAArE,EAAsF;IAAtF,iBAAsF,CAErF;;;IACA,IAAI,CAAC,KAAKC,WAAN,IAAqB,KAAKC,MAA9B,EAAsC;MACrC,KAAKC,cAAL,GAAsB,KAAKC,IAAL,CAAU7B,MAAhC,CADqC,CACG;IACxC;;IAED,IAAI,CAACyB,OAAL,EAAc;MACb,IAAIvB,WAAW,YAAY4B,KAA3B,EAAkC;QACjC;QACAvF,MAAM,CAACyC,IAAP,CAAYkB,WAAZ,EAAyB,UAACxB,QAAD,EAAS;UACjC3B,KAAI,CAAC8E,IAAL,CAAUlE,IAAV,CAAee,QAAf;QACA,CAFD;MAGA,CALD,MAMK;QACJ,KAAKmD,IAAL,CAAUlE,IAAV,CAAeuC,WAAf,EADI,CACyB;MAC7B;IACD;;IAED,IAAI,KAAKyB,MAAT,EAAiB;MAChB,KAAKI,UAAL,CAAgBP,WAAhB,EAA6BC,OAA7B;IACA,CAFD,MAGK;MACJ,IAAI7E,KAAK,CAACoF,QAAN,CAAeR,WAAf,CAAJ,EAAiC;QAChC,OAAOA,WAAW,GAAG,CAArB,EAAwB;UACvB,KAAKK,IAAL,CAAUI,KAAV;UACAT,WAAW;QACX;MACD;IACD;;IAED,KAAK3D,cAAL;EACA,CAhCM;EAkCP;;;;;;;EAKOQ,iCAAP,UAAkB0B,KAAlB,EAAiD0B,OAAjD,EAAkE;IACjE,IAAI7E,KAAK,CAACoF,QAAN,CAAejC,KAAf,KAAyBA,KAAK,GAAG,CAArC,EAAwC;MACvC,OAAOA,KAAK,GAAG,CAAf,EAAkB;QACjB,IAAIrB,QAAQ,GAAG,KAAKmB,WAAL,CAAiBsB,QAAjB,CAA0B,CAA1B,CAAf;;QACA,IAAIzC,QAAJ,EAAc;UACb,KAAKmB,WAAL,CAAiBe,MAAjB,CAAwBlC,QAAxB;QACA;;QAED,KAAKZ,SAAL,CAAekB,IAAf,CAAoB,UAACT,QAAD,EAAS;UAC5B,IAAI,CAACA,QAAQ,CAACsD,IAAV,IAAkBtD,QAAQ,CAACsD,IAAT,CAAc7B,MAAd,IAAwB,CAA9C,EAAiD;YAChD,IAAIkC,UAAQ,GAAG3D,QAAQ,CAACsB,WAAT,CAAqBsB,QAArB,CAA8B,CAA9B,CAAf;;YACA,IAAIe,UAAJ,EAAc;cACb3D,QAAQ,CAACsB,WAAT,CAAqBe,MAArB,CAA4BsB,UAA5B;YACA;UACD;QACD,CAPD;;QAQA,IAAI,CAACT,OAAL,EAAc;UACb,KAAKI,IAAL,CAAUI,KAAV;QACA;;QAED,IAAI,KAAKL,cAAL,GAAsB,CAA1B,EAA6B;UAC5B,KAAKA,cAAL;QACA;;QAED7B,KAAK;MACL,CAxBsC,CAyBvC;;;MACA,KAAKlB,mBAAL;IACA;EACD,CA7BM;EA+BP;;;;;;;EAKOR,qCAAP;IACC,IAAI,KAAK8D,QAAL,IAAiB,KAAKC,UAA1B,EAAsC;MACrC;IACA,CAHF,CAKC;;;IACA/F,QAAQ,CAACgG,sBAAT,CAAgC,IAAhC;IACAlG,MAAM,CAACmG,YAAP;IACA,KAAKZ,WAAL,GAAmB,IAAnB;IAEAhF,KAAK,CAACsC,IAAN,CAAW,KAAKlB,SAAL,CAAeyE,QAAf,EAAX,EAAsC,UAACC,CAAD,EAAE;MACvCA,CAAC,CAAC3D,mBAAF;IACA,CAFD,EAVD,CAaC;EACA,CAdM;EAgBP;;;;;;;;EAMOR,0CAAP;IACC3B,KAAK,CAACsC,IAAN,CAAW,KAAKlB,SAAL,CAAeyE,QAAf,EAAX,EAAsC,UAACC,CAAD,EAAE;MACvCA,CAAC,CAACC,UAAF;IACA,CAFD;EAGA,CAJM;EAMP;;;;;;;;EAMOpE,0CAAP;IACC,IAAI,KAAK8D,QAAL,IAAiB,KAAKC,UAA1B,EAAsC;MACrC;IACA,CAHF,CAKC;;;IACA7F,MAAM,CAACmG,IAAP,CAAYrG,QAAQ,CAACsG,gBAArB,EAAuC,IAAvC;IACAxG,MAAM,CAACmG,YAAP;IAEA,KAAK1D,gBAAL,GAAwB,IAAxB;IAEAlC,KAAK,CAACsC,IAAN,CAAW,KAAKlB,SAAL,CAAeyE,QAAf,EAAX,EAAsC,UAACC,CAAD,EAAE;MACvCA,CAAC,CAAC3D,mBAAF;IACA,CAFD,EAXD,CAcC;EACA,CAfM;EAiBP;;;;;;;;EAMOR,0CAAP;IACC,IAAI,KAAK8D,QAAL,IAAiB,KAAKC,UAA1B,EAAsC;MACrC;IACA,CAHF,CAKC;;;IACA,KAAKQ,gBAAL,GAAwB,IAAxB;IACArG,MAAM,CAACmG,IAAP,CAAYrG,QAAQ,CAACwG,gBAArB,EAAuC,IAAvC;IACA1G,MAAM,CAACmG,YAAP,GARD,CASC;EACA,CAVM;EAYP;;;;;;;;EAMOjE,wCAAP;IACC9B,MAAM,CAACqE,MAAP,CAAcvE,QAAQ,CAACwG,gBAAvB,EAAyC,IAAzC;IACA,KAAKD,gBAAL,GAAwB,KAAxB;;IAEA,IAAI,KAAK3B,UAAL,IAAmB,KAAK6B,eAAxB,IAA2C,KAAK9B,QAAL,IAAiB,KAAK+B,aAArE,EAAoF;MACnF,KAAKC,iBAAL;MACA,KAAKC,eAAL;MACA,KAAKR,UAAL;MACA,KAAKS,mBAAL,CAAyB,kBAAzB;IACA;EACD,CAVM;EAYP;;;;;;;;EAMU7E,gCAAV;IACC,KAAK8E,kBAAL,GAA0B,KAAKlC,UAA/B;IACA,KAAKmC,gBAAL,GAAwB,KAAKpC,QAA7B;EACA,CAHS;EAKV;;;;;;;;EAMU3C,wCAAV;IACC,KAAKgF,SAAL;IACA,KAAKP,eAAL,GAAuB,KAAK7B,UAA5B;IACA,KAAK8B,aAAL,GAAqB,KAAK/B,QAA1B;EACA,CAJS;EAMV;;;;;;;;EAMU3C,sCAAV;IACC;IACA,IAAI0B,KAAK,GAAG,KAAKiB,QAAjB;;IACA,KAAK,IAAIf,CAAC,GAAW,KAAKgB,UAA1B,EAAsChB,CAAC,GAAGF,KAA1C,EAAiDE,CAAC,EAAlD,EAAsD;MAErD;MACA,IAAIvB,QAAQ,GAAG,KAAKwC,SAAL,CAAeC,QAAf,CAAwBlB,CAAxB,CAAf;;MACA,IAAIvB,QAAJ,EAAc;QACbA,QAAQ,CAAC4E,UAAT,GAAsB,KAAtB;MACA;IACD;;IAED,KAAK,IAAIrD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKgB,UAAzB,EAAqChB,CAAC,EAAtC,EAA0C;MACzC,IAAIvB,QAAQ,GAAG,KAAKwC,SAAL,CAAeC,QAAf,CAAwBlB,CAAxB,CAAf;;MACA,IAAIvB,QAAJ,EAAc;QACbA,QAAQ,CAAC4E,UAAT,GAAsB,IAAtB;MACA;IACD;;IAED,KAAK,IAAIrD,CAAC,GAAG,KAAKe,QAAlB,EAA4Bf,CAAC,GAAG,KAAKiB,SAAL,CAAelB,MAA/C,EAAuDC,CAAC,EAAxD,EAA4D;MAC3D,IAAIvB,QAAQ,GAAG,KAAKwC,SAAL,CAAeC,QAAf,CAAwBlB,CAAxB,CAAf;;MACA,IAAIvB,QAAJ,EAAc;QACbA,QAAQ,CAAC4E,UAAT,GAAsB,IAAtB;MACA;IACD;EACD,CAzBS;EA2BV;;;;;;EAIOjF,wCAAP;IACC,IAAI,KAAK8D,QAAL,IAAiB,KAAKC,UAA1B,EAAsC;MACrC;IACA,CAHF,CAKC;;;IACA7F,MAAM,CAACmG,IAAP,CAAYrG,QAAQ,CAACkH,eAArB,EAAsC,IAAtC;IACApH,MAAM,CAACmG,YAAP;IAEA,KAAKkB,cAAL,GAAsB,IAAtB;IAEA9G,KAAK,CAACsC,IAAN,CAAW,KAAKlB,SAAL,CAAeyE,QAAf,EAAX,EAAsC,UAACC,CAAD,EAAE;MACvCA,CAAC,CAACiB,iBAAF;IACA,CAFD,EAXD,CAcC;EACA,CAfM;EAiBP;;;;;EAGOpF,sCAAP;IAAA;;IACC9B,MAAM,CAACqE,MAAP,CAAcvE,QAAQ,CAACkH,eAAvB,EAAwC,IAAxC;IACA7G,KAAK,CAACsC,IAAN,CAAW,KAAKa,WAAL,CAAiB0C,QAAjB,EAAX,EAAwC,UAAC7D,QAAD,EAAS;MAChD,IAAIA,QAAJ,EAAc;QACb3B,KAAI,CAACgE,cAAL,CAAoBrC,QAApB;MACA;IACD,CAJD;EAKA,CAPM;EASP;;;;;EAGOL,8BAAP;IAAA;;IACC,KAAKwB,WAAL,CAAiBjC,QAAjB,CAA0B8F,MAA1B,CAAiCC,KAAjC;IACAhH,OAAO,CAACqC,IAAR,CAAa,KAAK4E,YAAlB,EAAgC,UAAC1E,GAAD,EAAM2E,MAAN,EAAY;MAC3C9G,KAAI,CAAC+G,aAAL,CAAmBD,MAAnB;IACA,CAFD;IAGA,KAAKE,WAAL;;IACAjH,iBAAMkH,OAAN,CAAazC,IAAb,CAAa,IAAb;EACA,CAPM;EASP;;;;;EAGOlD,kCAAP;IACC,KAAKwB,WAAL,CAAiBjC,QAAjB,CAA0B8F,MAA1B,CAAiCC,KAAjC;IAEApH,MAAM,CAACyC,IAAP,CAAY,KAAKhB,cAAjB,EAAiC,UAACwE,CAAD,EAAE;MAClCA,CAAC,CAACwB,OAAF;IACA,CAFD,EAHD,CAOC;;IACAtH,KAAK,CAACsC,IAAN,CAAW,KAAKlB,SAAL,CAAeyE,QAAf,EAAX,EAAsC,UAAChE,QAAD,EAAS;MAC9CA,QAAQ,CAACwF,WAAT;IACA,CAFD;IAIA,KAAK/F,cAAL,CAAoBgC,MAApB,GAA6B,CAA7B;IAEA,KAAKiE,WAAL,GAAmBC,SAAnB;IACA,KAAKC,SAAL,GAAiBD,SAAjB,CAfD,CAiBC;;IACA,KAAKrE,WAAL,CAAiB8D,KAAjB;IAEA,KAAK9D,WAAL,CAAiBjC,QAAjB,CAA0B8F,MAA1B,CAAiCC,KAAjC;;IAEA,IAAI,KAAKS,SAAT,EAAoB;MACnB,KAAKA,SAAL,CAAeT,KAAf;IACA;EACD,CAzBM;;EA4BGtF,kCAAV,UAAsBS,WAAtB,EAAuC;IACtC,OAAO,KAAKe,WAAL,CAAiBO,MAAjB,EAAP;EACA,CAFS;EAIV;;;;;;;EAKO/B,mCAAP;IACC,KAAK6E,mBAAL,CAAyB,qBAAzB;IAEA,KAAKxB,WAAL,GAAmB,KAAnB;IAEArF,QAAQ,CAACgI,2BAAT,CAAqC,IAArC;;IAEA,IAAI,KAAKf,UAAT,EAAqB;MACpB;IACA;;IAED,KAAKgB,sBAAL,GAA8B,CAA9B,CAXD,CAYC;;IACA,KAAKxB,eAAL,GAAuBoB,SAAvB;IACA,KAAKnB,aAAL,GAAqBmB,SAArB,CAdD,CAgBC;;IACA,KAAKD,WAAL,GAAmBC,SAAnB;IACA,KAAKC,SAAL,GAAiBD,SAAjB;;IAEA,IAAI,KAAKjF,UAAL,CAAgB4C,IAAhB,IAAwB,KAAKnD,QAAjC,EAA2C;MAC1C,IAAII,WAAW,GAAQ,KAAKJ,QAAL,CAAcI,WAArC;MACA,KAAKyF,KAAL,GAAazF,WAAW,CAAC,KAAKG,UAAL,CAAgB4C,IAAjB,CAAxB;IACA,CAvBF,CAyBC;IACA;IACA;IACA;;;IACA,IAAI,KAAKD,cAAL,KAAwB,CAAxB,IAA6B,KAAKC,IAAL,CAAU7B,MAAV,GAAmB,CAApD,EAAuD;MACtD,KAAK+D,WAAL;IACA;;IAED,IAAI,KAAKlC,IAAL,CAAU7B,MAAV,GAAmB,CAAvB,EAA0B;MACzB,IAAIwE,SAAS,GAA8B,KAAKA,SAAhD,CADyB,CAGzB;;MACA9H,KAAK,CAACsC,IAAN,CAAW,KAAKlB,SAAL,CAAeyE,QAAf,EAAX,EAAsC,UAAChE,QAAD,EAAS;QAC9C;QACAA,QAAQ,CAAC0F,WAAT,GAAuBC,SAAvB;QACA3F,QAAQ,CAAC4F,SAAT,GAAqBD,SAArB;MACA,CAJD;MAMA,IAAIO,OAAO,GAAW,CAAtB;MACA,IAAIC,SAAS,GAAWC,IAAI,CAACC,GAAL,EAAxB,CAXyB,CAYzB;;MACA,IAAI3E,CAAC,GAAG,KAAK2B,cAAb;MACA,IAAIiD,CAAC,GAAG,KAAKhD,IAAL,CAAU7B,MAAlB;;;QAGC,IAAIE,WAAW,GAAG4E,OAAKjD,IAAL,CAAU5B,CAAV,CAAlB;;QACA,IAAI6E,OAAKC,SAAT,EAAoB;UACnB,IAAIrG,QAAQ,GAAsBoG,OAAKE,WAAL,CAAiB9E,WAAjB,CAAlC;UACA4E,OAAKxE,eAAL,CAAqB5B,QAArB,EAA+BwB,WAA/B;QACA;;QAED4E,OAAKhH,SAAL,CAAekB,IAAf,CAAoB,UAACT,QAAD,EAAS;UAC5B,IAAIA,QAAQ,CAACsD,IAAT,CAAc7B,MAAd,IAAwB,CAA5B,EAA+B;YAAE;YAChC,IAAIiF,gBAAgB,GAAa1G,QAAQ,CAACyG,WAAT,CAAqB9E,WAArB,CAAjC;YACA3B,QAAQ,CAAC+B,eAAT,CAAyB2E,gBAAzB,EAA2C/E,WAA3C;UACA;QACD,CALD;QAOAuE,OAAO,IAEP;;QACA,IAAIA,OAAO,IAAI,GAAf,EAAoB;UAAE;UACrBA,OAAO,GAAG,CAAV;UACA,IAAIS,OAAO,GAAWP,IAAI,CAACC,GAAL,KAAaF,SAAnC;;UAEA,IAAIQ,OAAO,GAAGJ,OAAKK,mBAAnB,EAAwC;YACvC,IAAIlF,CAAC,GAAG6E,OAAKjD,IAAL,CAAU7B,MAAV,GAAmB,EAA3B,EAA+B;cAC9B8E,OAAKlD,cAAL,GAAsB3B,CAAC,GAAG,CAA1B,CAD8B,CAG9B;;cACA,IAAIuE,SAAJ,EAAe;gBACd,IAAIvE,CAAC,GAAG6E,OAAKjD,IAAL,CAAU7B,MAAd,GAAuB,GAAvB,IAA8B,CAACwE,SAAS,CAACY,OAA7C,EAAsD,CACrD;gBACA,CAFD,MAGK;kBACJZ,SAAS,CAACa,QAAV,GAAqBpF,CAAC,GAAG6E,OAAKjD,IAAL,CAAU7B,MAAnC;gBACA;cACD;;cAED8E,OAAKR,sBAAL,GAA8BrE,CAAC,GAAG6E,OAAKjD,IAAL,CAAU7B,MAA5C;cAEAC,CAAC,GAAG6E,OAAKjD,IAAL,CAAU7B,MAAd,CAf8B,CAeR;;cACtB8E,OAAKjH,cAAL;;;;YAEA;UACD;QACD;;;;;MA1CF,KAAKoC,CAAL,EAAQA,CAAC,GAAG4E,CAAZ,EAAe5E,CAAC,EAAhB,EAAkB;;;;MA2CjB;;MAED,IAAIuE,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,CAArB;MACA;;MAED,KAAKvH,SAAL,CAAekB,IAAf,CAAoB,UAACT,QAAD,EAAS;QAC5B,IAAIA,QAAQ,CAAC+G,MAAb,EAAqB;UACpB/G,QAAQ,CAACgH,IAAT,CAAc,CAAd;QACA;MACD,CAJD;IAKA;;IAED,KAAKjB,sBAAL,GAA8B,CAA9B;IACA,KAAK1C,cAAL,GAAsB,CAAtB,CA1GD,CA0G0B;;IAEzB,KAAK/C,mBAAL;;IAEA,IAAI,CAAC,KAAK2G,wBAAV,EAAoC;MACnC,KAAKC,qBAAL;IACA;;IAED,KAAKC,QAAL,CAAc,eAAd,EAlHD,CAkHiC;EAChC,CAnHM;EAqHP;;;;;;;EAKOrH,wCAAP;IACC9B,MAAM,CAACqE,MAAP,CAAcvE,QAAQ,CAACsG,gBAAvB,EAAyC,IAAzC;IAEA,KAAK/D,gBAAL,GAAwB,KAAxB;IAEA,KAAK+G,mBAAL;IACA,KAAKlD,UAAL;IACA,KAAKiD,QAAL,CAAc,oBAAd;EACA,CARM;;EAmBPE,sBAAWvH,mBAAX,EAAW,MAAX,EAAe;IAqBf;;;;;SAKA;MACC,IAAI,CAAC,KAAKkG,KAAV,EAAiB;QAChB,KAAKA,KAAL,GAAa,EAAb;MACA;;MACD,IAAI,CAAC,KAAKjF,SAAV,EAAqB;QACpB,OAAO,KAAKiF,KAAZ;MACA,CAFD,MAGK;QACJ,OAAO,KAAKjF,SAAL,CAAeE,KAAf,CAAqB,MAArB,EAA6B,KAAK+E,KAAlC,CAAP;MACA;IACD,CApCc;;IATf;;;;;;;;;SASA,UAAgBlF,KAAhB,EAA4B;MAC3B,KAAKwG,OAAL,CAAaxG,KAAb;IACA,CAFc;oBAAA;;EAAA,CAAf;;EAIUhB,8BAAV,UAAkBgB,KAAlB,EAA8B;IAC7B;IACA;IACA,IAAI,CAAC,KAAKyG,UAAL,EAAL,EAAwB;MACvB,KAAKlE,cAAL,GAAsB,CAAtB;MACA,KAAKmC,WAAL;MACA,KAAKQ,KAAL,GAAalF,KAAb;;MACA,IAAIA,KAAK,IAAIA,KAAK,CAACW,MAAN,GAAe,CAA5B,EAA+B;QAC9B,KAAKnC,cAAL;MACA,CAFD,MAGK;QACJ,KAAKqF,mBAAL,CAAyB,qBAAzB;QACA,KAAKwC,QAAL,CAAc,eAAd;MACA;IACD;EACD,CAfS;EAkCV;;;;;;;;;;;;EAUOrH,oCAAP,UAAqB0H,QAArB,EAAqC;IAArC;;IACC,IAAI,CAACnJ,KAAK,CAAC8C,QAAN,CAAe,KAAKkE,YAAL,CAAkBmC,QAAlB,CAAf,CAAL,EAAkD;MACjD,KAAKnC,YAAL,CAAkBmC,QAAlB,IAA8B,IAAI9J,UAAJ,EAA9B;MACA,KAAK2H,YAAL,CAAkBmC,QAAlB,EAA4BC,SAA5B,GAAwC,IAAxC;MACA,KAAKC,mBAAL,CAAyB,KAAKrC,YAAL,CAAkBmC,QAAlB,CAAzB,EAAsDA,QAAtD;;MACA,KAAKnC,YAAL,CAAkBmC,QAAlB,EAA4BG,OAA5B,CAAoCC,GAApC,CAAwC,YAAxC,EAAsD,UAACC,GAAD,EAAI;QACzD,OAAOrJ,KAAI,CAACsJ,oBAAL,CAA0BD,GAA1B,CAAP;MACA,CAFD;;MAGA,KAAKxC,YAAL,CAAkBmC,QAAlB,EAA4BG,OAA5B,CAAoCC,GAApC,CAAwC,cAAxC,EAAwD,UAACC,GAAD,EAAI;QAC3D,OAAOrJ,KAAI,CAACuJ,sBAAL,CAA4BF,GAA5B,CAAP;MACA,CAFD;;MAGA,KAAK9I,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;QACxBR,KAAI,CAACwJ,QAAL,CAAcR,QAAd;MACA,CAFD,EAEG,IAFH,EAES,KAFT;IAGA;;IACD,OAAO,KAAKnC,YAAL,CAAkBmC,QAAlB,CAAP;EACA,CAhBM;;EAwBPH,sBAAWvH,mBAAX,EAAW,YAAX,EAAqB;IAYrB;;;SAGA;MACC,IAAI,CAAC,KAAKuF,YAAL,CAAkB,MAAlB,CAAL,EAAgC;QAC/B,KAAK4C,aAAL,CAAmB,MAAnB;MACA;;MACD,OAAO,KAAK5C,YAAL,CAAkB,MAAlB,CAAP;IACA,CApBoB;;IANrB;;;;;;SAMA,UAAsBvE,KAAtB,EAAuC;MAAvC;;MACC,IAAI,KAAKuE,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;QAC9B,KAAKE,aAAL,CAAmB,KAAKF,YAAL,CAAkB,MAAlB,CAAnB;MACA;;MACD,KAAKA,YAAL,CAAkB,MAAlB,IAA4BvE,KAA5B;MACA,KAAKuE,YAAL,CAAkB,MAAlB,EAA0BoC,SAA1B,GAAsC,IAAtC;MACA,KAAK1I,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;QACxBR,KAAI,CAACwJ,QAAL,CAAc,MAAd;MACA,CAFD,EAEG,IAFH,EAES,KAFT;MAGA,KAAKN,mBAAL,CAAyB5G,KAAzB,EAAgC,MAAhC;IACA,CAVoB;oBAAA;;EAAA,CAArB;EAsBA;;;;;;EAKUhB,+BAAV,UAAmB0H,QAAnB,EAAmC;IAClC,KAAKnC,YAAL,CAAkBmC,QAAlB,EAA4BU,IAA5B;EACA,CAFS;EAIV;;;;;;;;;;;EASUpI,2CAAV,UAA+BgB,KAA/B,EAA8C;IAC7C,OAAOA,KAAP;EACA,CAFS;EAIV;;;;;;;;;;;EASUhB,6CAAV,UAAiCgB,KAAjC,EAAgD;IAC/C,OAAOA,KAAP;EACA,CAFS;EAIV;;;;;;;;;;;EASUhB,+CAAV,UAAmCqI,IAAnC,EAAmDzH,UAAnD,EAA4F0H,UAA5F,EAAgH;IAC/GpK,MAAM,CAACyC,IAAP,CAAY2H,UAAZ,EAAwB,UAACtH,KAAD,EAAc;MACrC,IAAIJ,UAAU,CAACI,KAAD,CAAV,IAAqB9C,MAAM,CAACqK,OAAP,CAAeF,IAAf,EAAqBzH,UAAU,CAACI,KAAD,CAA/B,MAA4C,CAAC,CAAtE,EAAyE;QACxEqH,IAAI,CAAC/I,IAAL,CAAUsB,UAAU,CAACI,KAAD,CAApB;MACA;IACD,CAJD;IAKA,OAAOqH,IAAP;EACA,CAPS;EASV;;;;;;;EAKUrI,0CAAV,UAA8BwI,EAA9B,EAA8Cd,QAA9C,EAA+D;IAA/D;;IACCc,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,SAAb,EAAwB,UAACuJ,EAAD,EAAG;MAC1B,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,CAArB,CADc,CAEd;MACA;IACD,CAND,EAMGnB,SANH,EAMc,KANd;IAOA2C,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,aAAb,EAA4B,UAACuJ,EAAD,EAAG;MAC9B,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,IAArB;MACA;IACD,CALD,EAKGnB,SALH,EAKc,KALd;IAMA2C,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,WAAb,EAA0B,UAACuJ,EAAD,EAAG;MAC5B,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,GAArB;MACA;IACD,CALD,EAKGnB,SALH,EAKc,KALd;IAMA2C,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,YAAb,EAA2B,UAACuJ,EAAD,EAAG;MAC7B,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,IAArB;MACA;IACD,CALD,EAKGnB,SALH,EAKc,KALd;IAMA2C,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,OAAb,EAAsB,UAACuJ,EAAD,EAAG;MACxB,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,CAArB;MACA;IACD,CALD,EAKGnB,SALH,EAKc,KALd;IAMA2C,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,OAAb,EAAsB,UAACuJ,EAAD,EAAG;MACxB,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;MACA,IAAIA,SAAJ,EAAe;QACdA,SAAS,CAACa,QAAV,GAAqB,CAArB;MACA;;MACDtI,KAAI,CAACgK,SAAL,CAAeD,EAAE,CAACE,OAAlB;IACA,CAND,EAMG9C,SANH,EAMc,KANd;;IAQA,IAAI6B,QAAJ,EAAc;MACbc,EAAE,CAACvJ,MAAH,CAAUC,EAAV,CAAa,MAAb,EAAqB,UAACuJ,EAAD,EAAG;QACvB,IAAMtC,SAAS,GAAGzH,KAAI,CAACyH,SAAvB;;QACA,IAAIA,SAAJ,EAAe;UACdA,SAAS,CAACa,QAAV,GAAqB,CAArB;QACA;;QACD,IAAIU,QAAQ,IAAI,MAAZ,IAAsB,CAACnJ,KAAK,CAACqK,OAAN,CAAcH,EAAE,CAACjF,IAAjB,CAA3B,EAAmD;UAClDiF,EAAE,CAACjF,IAAH,GAAU,CAACiF,EAAE,CAACjF,IAAJ,CAAV;QACA;;QACD,IAAIgF,EAAE,CAACK,WAAH,IAAkBnB,QAAQ,IAAI,MAA9B,IAAwChJ,KAAI,CAAC8E,IAAL,CAAU7B,MAAtD,EAA8D;UAC7DjD,KAAI,CAACoK,OAAL,CAAaL,EAAE,CAACjF,IAAhB,EAAsBgF,EAAE,CAACO,SAAH,GAAeN,EAAE,CAACjF,IAAH,CAAQ7B,MAAvB,GAAgC,CAAtD;QACA,CAFD,MAGK,IAAI6G,EAAE,CAACQ,iBAAH,IAAwBtB,QAAQ,IAAI,MAApC,IAA8ChJ,KAAI,CAAC8E,IAAL,CAAU7B,MAA5D,EAAoE;UACxE;UACAzD,MAAM,CAACyC,IAAP,CAAYjC,KAAI,CAAC8E,IAAjB,EAAuB,UAACyF,IAAD,EAAOC,KAAP,EAAY;YAClC,IAAI3K,KAAK,CAAC8C,QAAN,CAAeoH,EAAE,CAACjF,IAAH,CAAQ0F,KAAR,CAAf,CAAJ,EAAoC;cACnC5K,OAAO,CAACqC,IAAR,CAAasI,IAAb,EAAmB,UAACpI,GAAD,EAAMkH,GAAN,EAAS;gBAC3B,IAAIxJ,KAAK,CAAC8C,QAAN,CAAeoH,EAAE,CAACjF,IAAH,CAAQ0F,KAAR,EAAerI,GAAf,CAAf,CAAJ,EAAyC;kBACxCoI,IAAI,CAACpI,GAAD,CAAJ,GAAY4H,EAAE,CAACjF,IAAH,CAAQ0F,KAAR,EAAerI,GAAf,CAAZ;gBACA;cACD,CAJD;YAKA;UACD,CARD;;UASAnC,KAAI,CAAC0G,iBAAL;QACA,CAZI,MAaA;UACE1G,KAAK,CAACgJ,QAAD,CAAL,GAAkBe,EAAE,CAACjF,IAArB;QACN;MACD,CA3BD;IA4BA;EAED,CAvES;;EAkFV+D,sBAAWvH,mBAAX,EAAW,YAAX,EAAqB;IAKrB;;;SAGA;MACC,IAAI,CAAC,KAAKmJ,WAAV,EAAuB;QACtB,KAAKA,WAAL,GAAmB,IAAItL,UAAJ,EAAnB;QACA,KAAKsL,WAAL,CAAiBxB,SAAjB,GAA6B,IAA7B;MACA;;MACD,OAAO,KAAKwB,WAAZ;IACA,CAdoB;;IATrB;;;;;;;;;SASA,UAAsBnI,KAAtB,EAAuC;MACtC,KAAKmI,WAAL,GAAmBnI,KAAnB;MACA,KAAKmI,WAAL,CAAiBxB,SAAjB,GAA6B,IAA7B;IACA,CAHoB;oBAAA;;EAAA,CAArB;EAgBA;;;;;;;;;;;;;;;;;;EAiBO3H,2BAAP,UAAYoJ,KAAZ,EAA2BC,cAA3B,EAA4DC,SAA5D,EAAwFC,WAAxF,EAA4G;IAA5G;;IAA2B;MAAAF;IAA+B;;IAAE;MAAAC;IAA0B;;IACrF,IAAIE,KAAK,GAA2BJ,KAAK,CAACI,KAA1C;IACA,IAAIC,GAAG,GAAGL,KAAK,CAACK,GAAhB;IACA,IAAIC,QAAQ,GAAGN,KAAK,CAACM,QAArB;;IAEA,IAAIN,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACK,GAAzB,EAA8B;MAC7BL,KAAK,CAACI,KAAN,GAAcJ,KAAK,CAACI,KAAN,GAAc,MAAM,KAAKG,aAAvC;MACAP,KAAK,CAACK,GAAN,GAAYL,KAAK,CAACK,GAAN,GAAY,MAAM,KAAKE,aAAnC;IACA;;IAED,IAAID,QAAQ,IAAI,KAAZ,IAAqBD,GAAG,IAAI,CAA5B,IAAiCD,KAAK,IAAI,CAA9C,EAAiD;MAChD,IAAIA,KAAK,GAAG,KAAKA,KAAjB,EAAwB;QACvBE,QAAQ,GAAG,OAAX;MACA;IACD;;IAED,IAAIA,QAAQ,IAAI,OAAZ,IAAuBF,KAAK,IAAI,CAApC,EAAuC;MACtC,IAAIC,GAAG,GAAG,KAAKA,GAAf,EAAoB;QACnBC,QAAQ,GAAG,KAAX;MACA;IACD;;IAED,IAAI,CAACnL,KAAK,CAACoF,QAAN,CAAe4F,WAAf,CAAL,EAAkC;MACjCA,WAAW,GAAG,KAAKzJ,kBAAnB;IACA;;IAED,IAAI,CAACvB,KAAK,CAACoF,QAAN,CAAe6F,KAAf,CAAD,IAA0B,CAACjL,KAAK,CAACoF,QAAN,CAAe8F,GAAf,CAA/B,EAAoD;MACnD,OAAO;QAAED,KAAK,EAAE,KAAKA,KAAd;QAAqBC,GAAG,EAAE,KAAKA;MAA/B,CAAP;IACA;;IAED,IAAI,KAAKG,WAAL,IAAoBJ,KAApB,IAA6B,KAAKK,SAAL,IAAkBJ,GAAnD,EAAwD;MAEvD,IAAIE,aAAa,GAAW,KAAKA,aAAL,GAAqB,KAAK9K,YAAtD;MACA,IAAIiL,aAAa,GAAW,KAAKH,aAAL,GAAqB,KAAK7K,YAAtD,CAHuD,CAKvD;;MAEA,IAAI4K,QAAQ,IAAI,OAAhB,EAAyB;QAExB,IAAI,KAAK5K,YAAL,GAAoB,CAAxB,EAA2B;UAC1B;UACA,IAAI,KAAK2K,GAAG,GAAGD,KAAX,IAAoBM,aAAxB,EAAuC;YACtCL,GAAG,GAAGD,KAAK,GAAG,IAAIM,aAAlB;UACA;QACD,CAPuB,CASxB;;;QACA,IAAI,KAAKL,GAAG,GAAGD,KAAX,IAAoBG,aAAxB,EAAuC;UACtCF,GAAG,GAAGD,KAAK,GAAG,IAAIG,aAAlB;QACA,CAZuB,CAaxB;;;QACA,IAAIF,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAGD,KAAN,GAAc,IAAIG,aAAjC,EAAgD;UAC/C;UACAH,KAAK,GAAGC,GAAG,GAAG,IAAIE,aAAlB;QACA;MACD,CAlBD,CAmBA;MAnBA,KAoBK;QAEJ,IAAI,KAAK7K,YAAL,GAAoB,CAAxB,EAA2B;UAC1B;UACA,IAAI,KAAK2K,GAAG,GAAGD,KAAX,IAAoBM,aAAxB,EAAuC;YACtCN,KAAK,GAAGC,GAAG,GAAG,IAAIK,aAAlB;UACA;QACD,CAPG,CASJ;;;QACA,IAAI,KAAKL,GAAG,GAAGD,KAAX,IAAoBG,aAAxB,EAAuC;UACtCH,KAAK,GAAGC,GAAG,GAAG,IAAIE,aAAlB;QACA;;QACD,IAAIH,KAAK,GAAG,CAAR,IAAaC,GAAG,GAAGD,KAAN,GAAc,IAAIG,aAAnC,EAAkD;UACjD;UACAF,GAAG,GAAGD,KAAK,GAAG,IAAIG,aAAlB;QACA;MACD;;MAED,IAAIH,KAAK,GAAG,CAAED,WAAd,EAA2B;QAC1BC,KAAK,GAAG,CAAED,WAAV;MACA;;MAED,IAAI,KAAKE,GAAG,GAAGD,KAAX,IAAoBG,aAAxB,EAAuC;QACtCF,GAAG,GAAGD,KAAK,GAAG,IAAIG,aAAlB;MACA;;MAED,IAAIF,GAAG,GAAG,IAAIF,WAAd,EAA2B;QAC1BE,GAAG,GAAG,IAAIF,WAAV;MACA;;MAED,IAAI,KAAKE,GAAG,GAAGD,KAAX,IAAoBG,aAAxB,EAAuC;QACtCH,KAAK,GAAGC,GAAG,GAAG,IAAIE,aAAlB;MACA;;MAED,KAAKE,SAAL,GAAiBJ,GAAjB;MACA,KAAKG,WAAL,GAAmBJ,KAAnB;MAEA,KAAKH,cAAL,GAAsBA,cAAtB;MAEA,KAAKxE,mBAAL,CAAyB,oBAAzB;;MAEA,IAAI,KAAKkF,mBAAL,GAA2B,CAA3B,IAAgC,CAACT,SAArC,EAAgD;QAE/C;QACA,IAAIU,oBAAoB,GAA8B,KAAKA,oBAA3D;;QACA,IAAIA,oBAAoB,IAAIA,oBAAoB,CAAChD,QAArB,GAAgC,CAA5D,EAA+D;UAC9D,IAAIiD,OAAO,GAAGD,oBAAoB,CAACE,gBAAnC;;UACA,IAAID,OAAO,CAACtI,MAAR,GAAiB,CAArB,EAAwB;YACvB,IAAIsI,OAAO,CAAC,CAAD,CAAP,CAAWE,EAAX,IAAiBX,KAAjB,IAA0BS,OAAO,CAAC,CAAD,CAAP,CAAWE,EAAX,IAAiBV,GAA/C,EAAoD;cACnD,OAAO;gBAAED,KAAK,EAAEA,KAAT;gBAAgBC,GAAG,EAAEA;cAArB,CAAP;YACA,CAFD,MAGK;cACJ,IAAI,CAACO,oBAAoB,CAACvC,UAArB,EAAL,EAAwC;gBACvCuC,oBAAoB,CAACI,IAArB;cACA;YACD;UACD;QACD;;QAED,IAAI,KAAKJ,oBAAT,EAA+B;UAC9B,KAAKA,oBAAL,CAA0BK,IAA1B;QACA;;QAEDL,oBAAoB,GAAG,KAAKM,OAAL,CAAa,CAAC;UAAE5C,QAAQ,EAAE,OAAZ;UAAqByC,EAAE,EAAEX;QAAzB,CAAD,EAAmC;UAAE9B,QAAQ,EAAE,KAAZ;UAAmByC,EAAE,EAAEV;QAAvB,CAAnC,CAAb,EAA+E,KAAKM,mBAApF,EAAyG,KAAKQ,iBAA9G,CAAvB;QACA,KAAKP,oBAAL,GAA4BA,oBAA5B;;QAEA,IAAIA,oBAAoB,IAAI,CAACA,oBAAoB,CAACQ,UAArB,EAA7B,EAAgE;UAC/DR,oBAAoB,CAAC/K,MAArB,CAA4BC,EAA5B,CAA+B,gBAA/B,EAAiD;YAChDR,KAAI,CAACmG,mBAAL,CAAyB,kBAAzB;UACA,CAFD;QAGA,CAJD,MAKK;UACJ,KAAKA,mBAAL,CAAyB,kBAAzB;QACA;MAED,CAlCD,MAmCK;QACJ,KAAK2E,KAAL,GAAaA,KAAb;QACA,KAAKC,GAAL,GAAWA,GAAX;QACA,KAAKpC,QAAL,CAAc,kBAAd;MACA;IACD;;IAED,OAAO;MAAEmC,KAAK,EAAEA,KAAT;MAAgBC,GAAG,EAAEA;IAArB,CAAP;EACA,CA9IM;EAgJP;;;;;;;;;;;;;;;;EAcOzJ,oCAAP,UAAqB4C,UAArB,EAAyCD,QAAzC,EAA2D0G,cAA3D,EAAqFC,SAArF,EAAwG;IACvG,IAAI,CAAC/K,KAAK,CAACoF,QAAN,CAAef,UAAf,CAAD,IAA+B,CAACrE,KAAK,CAACoF,QAAN,CAAehB,QAAf,CAApC,EAA8D;MAC7D;IACA;;IAED,IAAI6G,KAAK,GAAW5G,UAAU,GAAG,KAAKC,SAAL,CAAelB,MAAhD;IACA,IAAI8H,GAAG,GAAW9G,QAAQ,GAAG,KAAKE,SAAL,CAAelB,MAA5C;IAEA,KAAK8I,IAAL,CAAU;MAAEjB,KAAK,EAAEA,KAAT;MAAgBC,GAAG,EAAEA;IAArB,CAAV,EAAsCJ,cAAtC,EAAsDC,SAAtD;EACA,CATM;;EAiBP/B,sBAAWvH,mBAAX,EAAW,YAAX,EAAqB;IANrB;;;;;;SAMA;MACC,OAAO/B,KAAK,CAACyM,UAAN,CAAiB,KAAK,KAAKjB,GAAL,GAAW,KAAKD,KAArB,CAAjB,EAA8C,CAA9C,EAAiD,KAAKG,aAAtD,CAAP;IACA,CAFoB;oBAAA;;EAAA,CAArB;EAuBApC,sBAAWvH,mBAAX,EAAW,eAAX,EAAwB;IAUxB;;;SAGA;MACC,OAAO,KAAK2K,gBAAL,CAAsB,eAAtB,CAAP;IACA,CAfuB;;IAnBxB;;;;;;;;;;;;;;;;;;;SAmBA,UAAyB3J,KAAzB,EAAsC;MACrC,IAAI,KAAK4J,gBAAL,CAAsB,eAAtB,EAAuC5J,KAAvC,CAAJ,EAAmD;QAClD,IAAIA,KAAK,IAAI,CAAb,EAAgB;UACf,KAAKlB,kBAAL,GAA0B,CAA1B;QACA;;QAED,KAAKwH,mBAAL;MACA;IACD,CARuB;oBAAA;;EAAA,CAAxB;EAyBAC,sBAAWvH,mBAAX,EAAW,oBAAX,EAA6B;IAM7B;;;;SAIA;MACC,OAAO,KAAK2K,gBAAL,CAAsB,oBAAtB,CAAP;IACA,CAZ4B;;IAP7B;;;;;;;SAOA,UAA8B3J,KAA9B,EAA2C;MAC1C,IAAI,KAAK4J,gBAAL,CAAsB,oBAAtB,EAA4C5J,KAA5C,CAAJ,EAAwD;QACvD,KAAKsG,mBAAL;MACA;IACD,CAJ4B;oBAAA;;EAAA,CAA7B;EAoBAC,sBAAWvH,mBAAX,EAAW,YAAX,EAAqB;IAgBrB;;;;;SAKA;MACC,IAAI,CAACzB,KAAK,CAACoF,QAAN,CAAe,KAAKiC,WAApB,CAAL,EAAuC;QACtC,KAAKA,WAAL,GAAmB,CAAnB;MACA;;MAED,OAAO,KAAKA,WAAZ;IACA,CA3BoB;;IANrB;;;;;;SAMA,UAAsB5E,KAAtB,EAAmC;MAClC,KAAK4E,WAAL,GAAmB3H,KAAK,CAACyM,UAAN,CAAiBG,IAAI,CAACC,KAAL,CAAW9J,KAAX,CAAjB,EAAoC,CAApC,EAAuC,KAAK6B,SAAL,CAAelB,MAAtD,CAAnB,CADkC,CAElC;;MACA,KAAK6H,KAAL,GAAa,KAAKuB,eAAL,CAAqB,KAAKnF,WAA1B,CAAb;IACA,CAJoB;oBAAA;;EAAA,CAArB;EAMA;;;;;;;EAMO5F,sCAAP,UAAuBkJ,KAAvB,EAAoC;IACnC,OAAOA,KAAK,GAAG,KAAKrG,SAAL,CAAelB,MAA9B;EACA,CAFM;;EAuBP4F,sBAAWvH,mBAAX,EAAW,UAAX,EAAmB;IAMnB;;;;;SAKA;MACC,IAAI0B,KAAK,GAAG,KAAKmB,SAAL,CAAelB,MAA3B;;MACA,IAAI,CAACpD,KAAK,CAACoF,QAAN,CAAe,KAAKmC,SAApB,CAAD,IAAmC,KAAKA,SAAL,GAAiBpE,KAAxD,EAA+D;QAC9D,KAAKoE,SAAL,GAAiBpE,KAAjB;MACA;;MACD,OAAO,KAAKoE,SAAZ;IACA,CAjBkB;;IANnB;;;;;;SAMA,UAAoB9E,KAApB,EAAiC;MAChC,KAAK8E,SAAL,GAAiB7H,KAAK,CAACyM,UAAN,CAAiBG,IAAI,CAACC,KAAL,CAAW9J,KAAX,CAAjB,EAAoC,CAApC,EAAuC,KAAK6B,SAAL,CAAelB,MAAtD,CAAjB,CADgC,CAEhC;;MACA,KAAK8H,GAAL,GAAW,KAAKsB,eAAL,CAAqB,KAAKjF,SAA1B,CAAX;IACA,CAJkB;oBAAA;;EAAA,CAAnB;EA0BAyB,sBAAWvH,mBAAX,EAAW,OAAX,EAAgB;IAiBhB;;;SAGA;MACC,IAAI,CAAC,KAAKiB,SAAV,EAAqB;QACpB,OAAO,KAAKrB,MAAZ;MACA,CAFD,MAGK;QACJ,OAAO,KAAKqB,SAAL,CAAeE,KAAf,CAAqB,OAArB,EAA8B,KAAKvB,MAAnC,CAAP;MACA;IACD,CA3Be;;IAPhB;;;;;;;SAOA,UAAiBoB,KAAjB,EAA8B;MAC7B;MAEA;MACA;MACA;MACA,IAAI,KAAKpB,MAAL,IAAeoB,KAAnB,EAA0B;QACzB,KAAKpB,MAAL,GAAcoB,KAAd;QACA,IAAI4B,UAAU,GAAGiI,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYH,IAAI,CAACI,KAAL,CAAW,KAAKpI,SAAL,CAAelB,MAAf,GAAwBX,KAAnC,KAA6C,CAAzD,CAAjB;QACA,KAAK4E,WAAL,GAAmBiF,IAAI,CAACK,GAAL,CAAStI,UAAT,EAAqB,KAAKC,SAAL,CAAelB,MAApC,CAAnB;QACA,KAAK2F,mBAAL;QACA,KAAKlD,UAAL;QACA,KAAKS,mBAAL,CAAyB,cAAzB;QACA,KAAKwC,QAAL,CAAc,iBAAd;MACA;IACD,CAfe;oBAAA;;EAAA,CAAhB;EAoCAE,sBAAWvH,mBAAX,EAAW,KAAX,EAAc;IAiBd;;;SAGA;MACC,IAAI,CAAC,KAAKiB,SAAV,EAAqB;QACpB,OAAO,KAAKpB,IAAZ;MACA,CAFD,MAGK;QACJ,OAAO,KAAKoB,SAAL,CAAeE,KAAf,CAAqB,KAArB,EAA4B,KAAKtB,IAAjC,CAAP;MACA;IACD,CA3Ba;;IAPd;;;;;;;SAOA,UAAemB,KAAf,EAA4B;MAC3B;MAEA;MACA;MACA;MAEA,IAAI,KAAKnB,IAAL,IAAamB,KAAjB,EAAwB;QACvB,KAAKnB,IAAL,GAAYmB,KAAZ;QACA,KAAK8E,SAAL,GAAiB+E,IAAI,CAACK,GAAL,CAAS,KAAKrI,SAAL,CAAelB,MAAxB,EAAgCkJ,IAAI,CAACM,IAAL,CAAU,KAAKtI,SAAL,CAAelB,MAAf,GAAwBX,KAAlC,KAA4C,CAA5E,CAAjB;QACA,KAAKsG,mBAAL;QACA,KAAKlD,UAAL;QACA,KAAKS,mBAAL,CAAyB,YAAzB;QACA,KAAKwC,QAAL,CAAc,iBAAd;MACA;IACD,CAfa;oBAAA;;EAAA,CAAd;EA8BA;;;;;;;EAMUrH,yCAAV;IACCvB,iBAAM2M,kBAAN,CAAwBlI,IAAxB,CAAwB,IAAxB;;IACAlF,QAAQ,CAACgI,2BAAT,CAAqC,IAArC;IACA9H,MAAM,CAACqE,MAAP,CAAcvE,QAAQ,CAACsG,gBAAvB,EAAyC,IAAzC;IACApG,MAAM,CAACqE,MAAP,CAAcvE,QAAQ,CAACwG,gBAAvB,EAAyC,IAAzC;IACAtG,MAAM,CAACqE,MAAP,CAAcvE,QAAQ,CAACkH,eAAvB,EAAwC,IAAxC;EACA,CANS;;EAaVqC,sBAAWvH,mBAAX,EAAW,WAAX,EAAoB;IALpB;;;;;SAKA;MACC,IAAI,KAAKqL,iBAAL,IAA0B,EAA9B,EAAkC;QACjC,IAAIxI,SAAS,GAAG,KAAKyI,QAAL,CAAcC,MAAd,CAAqB,KAAKF,iBAA1B,CAAhB;;QACA,IAAIxI,SAAJ,EAAe;UACd,OAAOA,SAAP;QACA;MACD;;MACD,OAAO,KAAK9D,UAAZ;IACA,CARmB;oBAAA;;EAAA,CAApB;EAiBAwI,sBAAWvH,mBAAX,EAAW,UAAX,EAAmB;IAPnB;;;;;;;SAOA;MACC,IAAI,CAAC,KAAK+F,SAAV,EAAqB;QACpB,KAAKA,SAAL,GAAiB,IAAItI,UAAJ,EAAjB;MACA;;MACD,OAAO,KAAKsI,SAAZ;IACA,CALkB;oBAAA;;EAAA,CAAnB;EAOA;;;;;;;;;;;EAUO/F,iCAAP,UAAkBwL,EAAlB,EAA4B;IAE3B,IAAI,KAAKH,iBAAL,IAA0BG,EAA9B,EAAkC;MACjC,IAAIC,OAAO,GAAG,KAAKH,QAAL,CAAcC,MAAd,CAAqBC,EAArB,CAAd;;MACA,IAAI,CAACC,OAAL,EAAc;QACb,IAAI,KAAKJ,iBAAL,IAA0B,EAA9B,EAAkC;UACjC,KAAKxI,SAAL,CAAelC,IAAf,CAAoB,UAACN,QAAD,EAAS;YAC5BA,QAAQ,CAAC4E,UAAT,GAAsB,IAAtB;UACA,CAFD;UAIA,KAAKoG,iBAAL,GAAyB,EAAzB;UAEA,KAAK/D,mBAAL;UAEA,KAAK7C,eAAL,GAAuBoB,SAAvB;UAEA,KAAKhD,SAAL,CAAelC,IAAf,CAAoB,UAACN,QAAD,EAAS;YAC5BA,QAAQ,CAAC4E,UAAT,GAAsB,KAAtB;UACA,CAFD;UAIA,OAAO,IAAP;QACA;MACD,CAlBD,MAmBK;QACJ,KAAKpC,SAAL,CAAelC,IAAf,CAAoB,UAACN,QAAD,EAAS;UAC5BA,QAAQ,CAAC4E,UAAT,GAAsB,IAAtB;QACA,CAFD;QAIA,KAAKoG,iBAAL,GAAyBG,EAAzB;QAEA,KAAKlE,mBAAL;QAEA,KAAK7C,eAAL,GAAuBoB,SAAvB;QAEA,KAAKhD,SAAL,CAAelC,IAAf,CAAoB,UAACN,QAAD,EAAS;UAC5BA,QAAQ,CAAC4E,UAAT,GAAsB,KAAtB;QACA,CAFD;QAIA,OAAO,IAAP;MACA;IACD;;IACD,OAAO,KAAP;EACA,CA1CM;;EAmDPsC,sBAAWvH,mBAAX,EAAW,kBAAX,EAA2B;IAP3B;;;;;;;SAOA;MACC,OAAO,KAAKqL,iBAAZ;IACA,CAF0B;oBAAA;;EAAA,CAA3B;EAWA9D,sBAAWvH,mBAAX,EAAW,aAAX,EAAsB;IAPtB;;;;;;;SAOA;MACC,OAAO,KAAKjB,UAAZ;IACA,CAFqB;oBAAA;;EAAA,CAAtB;EAIA;;;;;;EAKUiB,6CAAV,UAAiC4C,UAAjC,EAAmD;IAClD,IAAMC,SAAS,GAAG,KAAKrB,WAAL,CAAiBkK,MAAnC;IACA,IAAM/J,MAAM,GAAGkB,SAAS,CAAClB,MAAzB;;IAEA,KAAK,IAAIC,CAAC,GAAGgB,UAAb,EAAyBhB,CAAC,GAAGD,MAA7B,EAAqC,EAAEC,CAAvC,EAA0C;MACzCiB,SAAS,CAACjB,CAAD,CAAT,CAAa+J,MAAb,GAAsB/J,CAAtB;IACA;EACD,CAPS;EASV;;;;;;;;EAMU5B,0CAAV,UAA8BC,KAA9B,EAA4E;IAC3EA,KAAK,CAACE,QAAN,CAAewH,SAAf,GAA2B,IAA3B;;IAEA,KAAKiE,sBAAL,CAA4B3L,KAAK,CAACiJ,KAAlC;;IAEA,IAAI,CAAC,KAAK3I,gBAAV,EAA4B;MAC3B,KAAKC,mBAAL;IACA;EACD,CARS;EAUV;;;;;;;;EAMUR,4CAAV,UAAgCC,KAAhC,EAA6E;IAC5E;IAEA,KAAK2L,sBAAL,CAA4B3L,KAAK,CAACiJ,KAAlC;;IAEA,IAAI,CAAC,KAAK3I,gBAAV,EAA4B;MAC3B,KAAKC,mBAAL;IACA;EACD,CARS;EAUV;;;;;;;;;;;;;;;EAaOR,oCAAP,UAA4DoB,KAA5D,EAAwEJ,KAAxE,EAAuG;IACtG,KAAKJ,UAAL,CAAgBQ,KAAhB,IAAyBJ,KAAzB;IACA,KAAKsG,mBAAL;EACA,CAHM;EAKP;;;;;;;EAKOtH,8CAAP;IACC,KAAK6L,mBAAL;IACA,KAAKvE,mBAAL;EACA,CAHM;EAKP;;;;;;;;EAMOtH,0CAAP;IACC,KAAK0E,aAAL,GAAqB,IAArB;IACA,KAAKD,eAAL,GAAuB,IAAvB;EACA,CAHM;;EAaP8C,sBAAWvH,mBAAX,EAAW,WAAX,EAAoB;IARpB;;;;;;;;SAQA;MAAA;;MACC,IAAI,CAAC,KAAK8L,UAAV,EAAsB;QACrB,KAAKA,UAAL,GAAkB,IAAIxO,IAAJ,EAAlB,CADqB,CAGrB;QAEA;;QACA,KAAK+B,UAAL,CAAgBC,IAAhB,CAAqB,IAAI5B,QAAJ,CAAa;UACjC;UACAW,KAAK,CAACsC,IAAN,CAAWjC,KAAI,CAACoN,UAAL,CAAgB5H,QAAhB,EAAX,EAAuC,UAACC,CAAD,EAAE;YACxCA,CAAC,CAACwB,OAAF;UACA,CAFD;QAGA,CALoB,CAArB;MAMA;;MAED,OAAO,KAAKmG,UAAZ;IACA,CAhBmB;oBAAA;;EAAA,CAApB;EAkBA;;;;;;EAKO9L,4BAAP;IACC,IAAI2H,SAAS,GAASlJ,iBAAMsN,KAAN,CAAW7I,IAAX,CAAW,IAAX,CAAtB;;IACAyE,SAAS,CAAC/G,UAAV,GAAuBxC,MAAM,CAAC4N,cAAP,CAAsB,KAAKpL,UAA3B,EAAuC,EAAvC,CAAvB;IACA,OAAO+G,SAAP;EACA,CAJM;EAMP;;;;;;;EAKO3H,+BAAP,UAAgBwF,MAAhB,EAA4B;IAC3B/G,iBAAM8C,QAAN,CAAc2B,IAAd,CAAc,IAAd,EAAesC,MAAf;;IACA,KAAKhC,IAAL,GAAYgC,MAAM,CAAChC,IAAnB;IACA,KAAKyI,sBAAL,GAA8BzG,MAAM,CAACyG,sBAArC;IACA,KAAKC,2BAAL,GAAmC1G,MAAM,CAAC0G,2BAA1C;IACA,KAAKC,qBAAL,GAA6B3G,MAAM,CAAC2G,qBAApC;IACA,KAAKC,mBAAL,GAA2B5G,MAAM,CAAC4G,mBAAlC;EACA,CAPM;EASP;;;;;;;;EAMOpM,6BAAP;IACC,KAAKqM,OAAL,GAAe,KAAf;IACA,KAAKC,cAAL;EACA,CAHM;EAKP;;;;;;;EAKUtM,mCAAV;IACC,IAAMuM,OAAO,GAAG9N,iBAAM+N,YAAN,CAAkBtJ,IAAlB,CAAkB,IAAlB,CAAhB;;IACA,IAAI,CAACqJ,OAAO,CAAC1E,OAAR,CAAgB4E,GAAhB,CAAoB,MAApB,EAA4B,KAAKC,WAAjC,EAA8C,CAAC,CAA/C,EAAkD,IAAlD,CAAL,EAA8D;MAC7DH,OAAO,CAAC1E,OAAR,CAAgBC,GAAhB,CAAoB,MAApB,EAA4B,KAAK4E,WAAjC,EAA8C,CAAC,CAA/C,EAAkD,IAAlD;;MACA,KAAKzN,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,UAACuJ,EAAD,EAAG;QAClC8D,OAAO,CAACI,iBAAR;MACA,CAFD;IAGA;;IACD,OAAOJ,OAAP;EACA,CATS;;EAWFvM,kCAAR,UAAoB4M,GAApB,EAAgD;IAC/CA,GAAG,CAACpJ,IAAJ,GAAW,KAAKA,IAAhB;IACA,OAAOoJ,GAAP;EACA,CAHO;;EAKE5M,kCAAV,UAAsBgB,KAAtB,EAAoC;IACnC,IAAI6L,OAAO,GAAGpO,iBAAMqO,WAAN,CAAiB5J,IAAjB,CAAiB,IAAjB,EAAkBlC,KAAlB,CAAd;;IACA,IAAI6L,OAAJ,EAAa;MACZ,KAAKrN,cAAL;IACA;;IACD,OAAOqN,OAAP;EACA,CANS;EAQV;;;;;EAGU7M,oCAAV,UAAwBgB,KAAxB,EAAsC;IACrC,IAAIA,KAAK,IAAI,KAAK2J,gBAAL,CAAsB,YAAtB,CAAb,EAAkD;MACjD,IAAI3J,KAAK,IAAI,CAAC,KAAKsC,MAAf,IAAyB,CAAC,KAAK2D,MAAnC,EAA2C;QAC1C,KAAK8F,oBAAL,GAA4B,KAAK9N,MAAL,CAAY+N,IAAZ,CAAiB,oBAAjB,EAAuC,KAAKC,aAA5C,EAA2D,IAA3D,EAAiE,KAAjE,CAA5B;;QACA,KAAK5N,UAAL,CAAgBC,IAAhB,CAAqB,KAAKyN,oBAA1B;MACA,CAHD,MAIK;QACJ,IAAI,KAAKA,oBAAT,EAA+B;UAC9B,KAAKtH,aAAL,CAAmB,KAAKsH,oBAAxB;QACA;MACD;IACD,CAXoC,CAYrC;;;IACAtO,iBAAMyO,aAAN,CAAmBhK,IAAnB,CAAmB,IAAnB,EAAoBlC,KAApB;EACA,CAdS;;EAgBAhB,gCAAV,UAAoBgB,KAApB,EAAiC;IAChC,IAAIA,KAAK,IAAI,KAAKmM,OAAlB,EAA2B;MAC1B,IAAI,KAAK9J,WAAT,EAAsB;QACrB,KAAKA,WAAL,GAAmB,KAAnB;QACArF,QAAQ,CAACgI,2BAAT,CAAqC,IAArC;QACA,KAAKmH,OAAL,GAAenM,KAAf;QACA,KAAKxB,cAAL;MACA;IACD;;IACDf,iBAAM2O,SAAN,CAAelK,IAAf,CAAe,IAAf,EAAgBlC,KAAhB;EACA,CAVS;;EAqBVuG,sBAAWvH,mBAAX,EAAW,cAAX,EAAuB;IAIvB;;;SAGA;MACC,OAAO,KAAK2K,gBAAL,CAAsB,cAAtB,CAAP;IACA,CATsB;;IATvB;;;;;;;;;SASA,UAAwB3J,KAAxB,EAAqC;MACpC,KAAK4J,gBAAL,CAAsB,cAAtB,EAAsC5J,KAAtC;IACA,CAFsB;oBAAA;;EAAA,CAAvB;EAuBAuG,sBAAWvH,mBAAX,EAAW,cAAX,EAAuB;IAIvB;;;SAGA;MACC,OAAO,KAAK2K,gBAAL,CAAsB,cAAtB,CAAP;IACA,CATsB;;IAZvB;;;;;;;;;;;;SAYA,UAAwB3J,KAAxB,EAAqC;MACpC,KAAK4J,gBAAL,CAAsB,cAAtB,EAAsC5J,KAAtC;IACA,CAFsB;oBAAA;;EAAA,CAAvB;EAWA;;;;;;EAKOhB,6CAAP;IACC,IAAI,KAAKqD,WAAL,IAAqB,KAAKjD,YAAL,IAAqB,KAAKA,YAAL,CAAkBiD,WAAhE,EAA8E;MAC7E,OAAO,KAAP;IAEA,CAHD,MAGO;MACN,OAAO,IAAP;IACA;EACD,CAPM;EASP;;;;;;;;EAMUrD,iCAAV,UAAqBoB,KAArB,EAAkC;IACjC,OAAOA,KAAK,IAAI,qBAAT,IAAkCA,KAAK,IAAI,mBAA3C,IAAkE3C,iBAAM4O,IAAN,CAAUnK,IAAV,CAAU,IAAV,EAAW9B,KAAX,CAAzE;EACA,CAFS;;EAGX;AAAC,CA/hED,CAA+B/D,SAA/B;;;AAiiEA;;;;;;;AAMAW,QAAQ,CAACsP,iBAAT,CAA2B,WAA3B,IAA0CtN,SAA1C","names":["Container","List","ListDisposer","OrderedListTemplate","Dictionary","Disposer","MultiDisposer","DataSource","Responsive","system","DataItem","registry","$math","$array","$ease","$utils","$iter","$object","$type","__extends","_super","_this","cubicOut","className","minZoomCount","maxZoomCount","_dataItems","createDataItem","events","on","handleDataItemAdded","handleDataItemRemoved","_disposers","push","template","invalidateData","dataUsers","handleDataUserAdded","_dataDisposers","_start","_end","maxZoomDeclination","applyTheme","Component","event","dataUser","newValue","dataProvider","dataItem","name","dataItemsInvalid","invalidateDataItems","dataContext","hasSomeValues_1","each","dataFields","key","fieldValue","fieldName","value","_adapterO","isEnabled","apply","field","hasValue","hasChildren","copyFrom","mainDataSet","children","count","length","i","rawDataItem","childDataItem","create","parent","processDataItem","anyDataItem","propertyFields","f","setProperty","_addAllDataItems","remove","dataContext_1","child","updateDataItem","endIndex","startIndex","dataItems","getIndex","validateDataElement","validateDataElements","validate","call","removeCount","skipRaw","dataInvalid","inited","_parseDataFrom","data","Array","removeData","isNumber","shift","dataItem_1","disabled","isTemplate","addToInvalidComponents","requestFrame","iterator","x","invalidate","move","invalidDataItems","dataRangeInvalid","invalidDataRange","_prevStartIndex","_prevEndIndex","rangeChangeUpdate","appendDataItems","dispatchImmediately","_workingStartIndex","_workingEndIndex","sliceData","__disabled","invalidRawDatas","rawDataInvalid","invalidateRawData","clones","clear","_dataSources","source","removeDispose","disposeData","dispose","_startIndex","undefined","_endIndex","_dataSets","removeFromInvalidComponents","dataValidationProgress","_data","preloader","counter","startTime","Date","now","n","this_1","_usesData","getDataItem","dataUserDataItem","elapsed","parsingStepDuration","visible","progress","hidden","hide","_internalDefaultsApplied","applyInternalDefaults","dispatch","invalidateDataRange","Object","setData","isDisposed","property","component","setDataSourceEvents","adapter","add","val","dataSourceDateFields","dataSourceNumberFields","loadData","getDataSource","load","list","targetList","indexOf","ds","ev","openModal","message","isArray","incremental","addData","keepCount","updateCurrentData","item","index","_responsive","range","skipRangeEvent","instantly","declination","start","end","priority","maxZoomFactor","_finalStart","_finalEnd","minZoomFactor","rangeChangeDuration","rangeChangeAnimation","options","animationOptions","to","stop","kill","animate","rangeChangeEasing","isFinished","zoom","fitToRange","getPropertyValue","setPropertyValue","Math","round","indexToPosition","max","floor","min","ceil","removeFromInvalids","_currentDataSetId","dataSets","getKey","id","dataSet","values","_index","_updateDataItemIndexes","resetProcessedRange","_dataUsers","clone","copyProperties","sequencedInterpolation","sequencedInterpolationDelay","interpolationDuration","interpolationEasing","_inited","deepInvalidate","_export","getExporting","has","_exportData","handleDataUpdated","arg","changed","setDisabled","_showOnInitDisposer2","once","hideInitially","setShowOnInit","_baseId","setBaseId","asIs","registeredClasses"],"sourceRoot":"","sources":["../../../../src/.internal/core/Component.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"./Container\";\r\nimport { List, IListEvents, ListDisposer } from \"./utils/List\";\r\nimport { OrderedListTemplate, ISortedListEvents } from \"./utils/SortedList\";\r\nimport { Animation } from \"./utils/Animation\";\r\nimport { Dictionary } from \"./utils/Dictionary\";\r\nimport { IDisposer, Disposer, MultiDisposer } from \"./utils/Disposer\";\r\nimport { Export, IExportAdapters } from \"./export/Export\";\r\nimport { DataSource } from \"./data/DataSource\";\r\nimport { Responsive } from \"./utils/Responsive\";\r\nimport { system } from \"./System\";\r\n\r\nimport { DataItem } from \"./DataItem\";\r\nimport { registry } from \"./Registry\";\r\nimport { Preloader } from \"./elements/Preloader\";\r\nimport { IRange } from \"./defs/IRange\";\r\n\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $ease from \"./utils/Ease\";\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $iter from \"./utils/Iterator\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A list of available types for calculated values.\r\n */\r\nexport type CalculatedValue =\r\n\t\"value\" |\r\n\t\"percent\" |\r\n\t\"change\" |\r\n\t\"changePercent\" |\r\n\t\"startChangePercent\" |\r\n\t\"startChange\" |\r\n\t\"previousChangePercent\" |\r\n\t\"previousChange\" |\r\n\t\"sum\" |\r\n\t\"absoluteSum\" |\r\n\t\"average\" |\r\n\t\"open\" |\r\n\t\"close\" |\r\n\t\"low\" |\r\n\t\"high\" |\r\n\t\"count\" |\r\n\t\"total\" |\r\n\t\"totalPercent\" |\r\n\t\"stack\";\r\n\r\n/**\r\n * Defines properties for [[Component]].\r\n */\r\nexport interface IComponentProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Maximum zoom factor of a component.\r\n\t */\r\n\tmaxZoomFactor?: number;\r\n\r\n\t/**\r\n\t * Maximum zoom declination (how much out of 0-1 range it will allow to step out)\r\n\t *\r\n\t * @ignore\r\n\t * @default 0.5\r\n\t */\r\n\tmaxZoomDeclination?: number;\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Allows restricting zoom in beyond certain number of categories or base\r\n\t * intervals.\r\n\t *\r\n\t * The chart will not zoom in beyond this number of items.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tminZoomCount?: number;\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Limits how many categories or base intervals can be shown at the same\r\n\t * time.\r\n\t *\r\n\t * If there are more items in the chart, the chart will auto-zoom.\r\n\t *\r\n\t * @default 0 (no limit)\r\n\t */\r\n\tmaxZoomCount?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines data fields for [[Component]].\r\n */\r\nexport interface IComponentDataFields {\r\n\r\n\t/**\r\n\t * Data.\r\n\t */\r\n\tdata?: string;\r\n\r\n\t/**\r\n\t * ID.\r\n\t */\r\n\tid?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[Component]].\r\n */\r\nexport interface IComponentEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when range of the currently selected data is validated.\r\n\t *\r\n\t * @todo: change to datarangevalidated?\r\n\t */\r\n\tdatarangechanged: {};\r\n\r\n\t/**\r\n\t * Invoked when the raw data for the component changes.\r\n\t */\r\n\tdatavalidated: {};\r\n\r\n\t/**\r\n\t * Invoked when value(s) of the element's data items are validated.\r\n\t */\r\n\tdataitemsvalidated: {};\r\n\r\n\t/**\r\n\t * Invoked just before element is validated (after changes).\r\n\t */\r\n\tbeforedatavalidated: {};\r\n\r\n\t/**\r\n\t * Invoked when range change animation starts\r\n\t */\r\n\trangechangestarted: {};\r\n\r\n\t/**\r\n\t * Invoked when range change animation ends\r\n\t */\r\n\trangechangeended: {};\r\n\r\n\t/**\r\n\t * Invoked when start position changes.\r\n\t *\r\n\t * Please note that `startchanged` event is dispatched immediately after\r\n\t * zoom occurs, so some related properties (e.g. `minZoomed` on [[ValueAxis]])\r\n\t * might not be yet updated.\r\n\t *\r\n\t * Use `startendchanged` event instead if you need to rely on updated\r\n\t * zoom-related values.\r\n\t */\r\n\tstartchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when end position changes\r\n\t *\r\n\t * Please note that `endhanged` event is dispatched immediately after\r\n\t * zoom occurs, so some related properties (e.g. `maxZoomed` on [[ValueAxis]])\r\n\t * might not be yet updated.\r\n\t *\r\n\t * Use `startendchanged` event instead if you need to rely on updated\r\n\t * zoom-related values.\r\n\t */\r\n\tendchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when start or end position changes, unlike startchanged/endchanged\r\n\t * this event is fired not immediately but at the end of a cycle.\r\n\t */\r\n\tstartendchanged: {};\r\n}\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IComponentAdapters extends IContainerAdapters, IComponentProperties {\r\n\r\n\t/**\r\n\t * Applied after [[Component]] retrieves data value from data context\r\n\t * (raw data), but before it is provided to [[DataItem]].\r\n\t */\r\n\tdataContextValue: {\r\n\t\tvalue: any,\r\n\t\tfield: string,\r\n\t\tdataItem: DataItem\r\n\t};\r\n\r\n\t/**\r\n\t * Applied to chart's data before it is retrieved for use.\r\n\t */\r\n\tdata: any[];\r\n\r\n\tstart: number;\r\n\r\n\tend: number;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A Component represents an independent functional element or control, that\r\n * can have it's own behavior, children, data, etc.\r\n *\r\n * A few examples of a Component: [[Legend]], [[Series]], [[Scrollbar]].\r\n *\r\n * @see {@link IComponentEvents} for a list of available events\r\n * @see {@link IComponentAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class Component extends Container {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields!: IComponentDataFields;\r\n\r\n\t/**\r\n\t * Holds data field names.\r\n\t *\r\n\t * Data fields define connection beween [[DataItem]] and actual properties\r\n\t * in raw data.\r\n\t */\r\n\tpublic dataFields: this[\"_dataFields\"] = {};\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IComponentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IComponentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IComponentEvents;\r\n\r\n\t/**\r\n\t * Holds the data for the component.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _data: $type.Optional<any[]>;\r\n\r\n\t/**\r\n\t * A [[Component]] which provides data to this component (like Chart provides\r\n\t * data for Series).\r\n\t */\r\n\tpublic dataProvider: $type.Optional<Component>;\r\n\r\n\t/**\r\n\t * A list of [[DataSource]] definitions of external data source.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataSources: { [index: string]: DataSource } = {};\r\n\r\n\t/**\r\n\t * An instance of [[Responsive]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _responsive: $type.Optional<Responsive>;\r\n\r\n\t/**\r\n\t * This is used when only new data is invalidated (if added using `addData`\r\n\t * method).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _parseDataFrom: number = 0;\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _dataUsers: $type.Optional<List<Component>>;\r\n\r\n\t/**\r\n\t * Holds the disposers for the dataItems and dataUsers\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataDisposers: Array<IDisposer> = [];\r\n\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: DataItem;\r\n\r\n\t/**\r\n\t * List of element's source data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dataItems: $type.Optional<OrderedListTemplate<this[\"_dataItem\"]>>;\r\n\r\n\t/**\r\n\t * Holds aggregated data items.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic _dataSets: Dictionary<string, OrderedListTemplate<this[\"_dataItem\"]>>;\r\n\r\n\t/**\r\n\t * Currently selected \"data set\".\r\n\t *\r\n\t * If it's set to `\"\"`, main data set (unaggregated data) is used.\r\n\t */\r\n\tprotected _currentDataSetId: string = \"\";\r\n\r\n\t/**\r\n\t * [_startIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _startIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_endIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _endIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_start description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _start: number = 0;\r\n\r\n\t/**\r\n\t * [_end description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _end: number = 1;\r\n\r\n\t/**\r\n\t * [_finalStart description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _finalStart: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_finalEnd description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _finalEnd: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * If set to `true`, changing data range in element will not trigger\r\n\t * `daterangechanged` event.\r\n\t */\r\n\tpublic skipRangeEvent: boolean = false;\r\n\r\n\t/**\r\n\t * Whenever selected scope changes (chart is zoomed or panned), for example\r\n\t * by interaction from a Scrollbar, or API, a chart needs to reposition\r\n\t * its contents.\r\n\t *\r\n\t * `rangeChangeDuration` influences how this is performed.\r\n\t *\r\n\t * If set to zero (0), the change will happen instantenously.\r\n\t *\r\n\t * If set to non-zero value, the chart will gradually animate into new\r\n\t * position for the set amount of milliseconds.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic rangeChangeDuration: number = 0;\r\n\r\n\t/**\r\n\t * An easing function to use for range change animation.\r\n\t *\r\n\t * @see {@link Ease}\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic rangeChangeEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * A reference to a currently playing range change [[Animation]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rangeChangeAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * A duration (ms) of each data parsing step. A Component parses its data in\r\n\t * chunks in order to avoid completely freezing the machine when large data\r\n\t * sets are used. This setting will control how many milliseconds should pass\r\n\t * when parsing data until parser stops for a brief moment to let other\r\n\t * processes catch up.\r\n\t */\r\n\tpublic parsingStepDuration: number = 50;\r\n\r\n\t/**\r\n\t * [dataInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataInvalid: boolean = false;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rawDataInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * [dataRangeInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataRangeInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * [dataItemsInvalid description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic dataItemsInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * If set to a non-zero number the element will \"animate\" data values of its\r\n\t * children.\r\n\t *\r\n\t * This will happen on first load and whenever data values change.\r\n\t *\r\n\t * Enabling interpolation will mean that elements will transit smoothly into\r\n\t * new values rather than updating instantly.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic interpolationDuration: number = 0;\r\n\r\n\t/**\r\n\t * An easing function to use for interpolating values when transiting from\r\n\t * one source value to another.\r\n\t *\r\n\t * @default cubicOut\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t * @see {@link Ease}\r\n\t */\r\n\tpublic interpolationEasing: (value: number) => number = $ease.cubicOut;\r\n\r\n\t/**\r\n\t * Indicates whether transition between data item's values should start and\r\n\t * play out all at once, or with a small delay (as defined by\r\n\t * `sequencedInterpolationDelay`) for each subsequent data item.\r\n\t *\r\n\t * @default true\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic sequencedInterpolation: boolean = true;\r\n\r\n\t/**\r\n\t * A delay (ms) to wait between animating each subsequent data item's\r\n\t * interpolation animation.\r\n\t *\r\n\t * Relative only if `sequencedInterpolation = true`.\r\n\t *\r\n\t * @default 0\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/animations/} for more info about animations\r\n\t */\r\n\tpublic sequencedInterpolationDelay: number = 0;\r\n\r\n\t/**\r\n\t * A progress (0-1) for the data validation process.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dataValidationProgress: number = 0;\r\n\r\n\t/**\r\n\t * [_prevStartIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevStartIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_prevEndIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _prevEndIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Sometimes we need to process more dataItems then actually is\r\n\t * selected (for example, not to cut lines at the end/beginning).\r\n\t * However when calculating averages, min, max, etc we need not to include\r\n\t * them. So we store `workingStartIndex` and `workingEndIndex` to know which\r\n\t * dataItems should be included and which should not.\r\n\t */\r\n\r\n\t/**\r\n\t * [_workingStartIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _workingStartIndex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * [_workingEndIndex description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _workingEndIndex: $type.Optional<number>;\r\n\r\n\tprotected _addAllDataItems: boolean = true;\r\n\r\n\tprotected _showOnInitDisposer2: IDisposer;\r\n\r\n\tprotected _usesData: boolean = true;\r\n\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Component\";\r\n\r\n\t\tthis.minZoomCount = 1;\r\n\t\tthis.maxZoomCount = 0;\r\n\r\n\t\tthis._dataItems = new OrderedListTemplate<DataItem>(this.createDataItem());\r\n\t\tthis._dataItems.events.on(\"inserted\", this.handleDataItemAdded, this, false);\r\n\t\tthis._dataItems.events.on(\"removed\", this.handleDataItemRemoved, this, false);\r\n\t\tthis._disposers.push(new ListDisposer(this._dataItems));\r\n\t\tthis._disposers.push(this._dataItems.template);\r\n\r\n\t\tthis.invalidateData();\r\n\r\n\t\t// TODO what about remove ?\r\n\t\tthis.dataUsers.events.on(\"inserted\", this.handleDataUserAdded, this, false);\r\n\r\n\t\t// Set up disposers\r\n\t\tthis._disposers.push(new MultiDisposer(this._dataDisposers));\r\n\r\n\t\tthis._start = 0;\r\n\t\tthis._end = 1;\r\n\r\n\t\tthis.maxZoomDeclination = 1;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataUserAdded description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param event Event object\r\n\t */\r\n\tprotected handleDataUserAdded(event: IListEvents<Component>[\"inserted\"]) {\r\n\t\tlet dataUser = event.newValue;\r\n\t\tdataUser.dataProvider = this;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingLocationChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingLocationChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemCalculatedValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemCalculatedValueChange(dataItem?: this[\"_dataItem\"], name?: string) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemPropertyChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemPropertyChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Populates a [[DataItem]] width data from data source.\r\n\t *\r\n\t * Loops through all the fields and if such a field is found in raw data\r\n\t * object, a corresponding value on passed in `dataItem` is set.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\tif (dataItem) {\r\n\t\t\tif (!dataContext) {\r\n\t\t\t\tdataContext = {};\r\n\t\t\t}\r\n\r\n\t\t\t// store reference to original data item\r\n\t\t\tdataItem.dataContext = dataContext;\r\n\r\n\t\t\tlet hasSomeValues = false;\r\n\r\n\t\t\t$object.each(this.dataFields, (key, fieldValue) => {\r\n\t\t\t\tconst fieldName: string = <string>key;\r\n\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\t// Apply adapters to a retrieved value\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tif (this._adapterO.isEnabled(\"dataContextValue\")) {\r\n\t\t\t\t\t\tvalue = this._adapterO.apply(\"dataContextValue\", {\r\n\t\t\t\t\t\t\tfield: fieldName,\r\n\t\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t}).value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\thasSomeValues = true;\r\n\r\n\t\t\t\t\tif (dataItem.hasChildren[fieldName]) {\r\n\t\t\t\t\t\tlet template = this.createDataItem();\r\n\t\t\t\t\t\ttemplate.copyFrom(this.mainDataSet.template);\r\n\t\t\t\t\t\tlet children = new OrderedListTemplate<DataItem>(template);\r\n\t\t\t\t\t\tchildren.events.on(\"inserted\", this.handleDataItemAdded, this, false);\r\n\t\t\t\t\t\tchildren.events.on(\"removed\", this.handleDataItemRemoved, this, false);\r\n\t\t\t\t\t\tthis._dataDisposers.push(new ListDisposer(children));\r\n\t\t\t\t\t\tlet count = value.length;\r\n\t\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tlet rawDataItem = value[i];\r\n\t\t\t\t\t\t\tlet childDataItem: this[\"_dataItem\"] = children.create();\r\n\t\t\t\t\t\t\tchildDataItem.parent = dataItem;\r\n\t\t\t\t\t\t\tthis.processDataItem(childDataItem, rawDataItem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet anyDataItem = <any>dataItem;\r\n\t\t\t\t\t\tanyDataItem[fieldName] = <any>children;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// data is converted to numbers/dates in each dataItem\r\n\t\t\t\t\t\t(<any>dataItem)[fieldName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(this.propertyFields, (key, fieldValue) => {\r\n\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\thasSomeValues = true;\r\n\t\t\t\t\tdataItem.setProperty(f, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// @todo we might need some flag which would tell whether we should create empty data items or not.\r\n\t\t\tif (!this._addAllDataItems && !hasSomeValues) {\r\n\t\t\t\tthis.mainDataSet.remove(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif (dataItem) {\r\n\r\n\t\t\tlet dataContext = dataItem.dataContext;\r\n\r\n\t\t\t$object.each(this.dataFields, (key, fieldValue) => {\r\n\t\t\t\tconst fieldName: string = <string>key;\r\n\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\t// Apply adapters to a retrieved value\r\n\t\t\t\tif (this._adapterO) {\r\n\t\t\t\t\tvalue = this._adapterO.apply(\"dataContextValue\", {\r\n\t\t\t\t\t\tfield: fieldName,\r\n\t\t\t\t\t\tvalue: value,\r\n\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t}).value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\tif (dataItem.hasChildren[fieldName]) {\r\n\t\t\t\t\t\tlet anyDataItem = <any>dataItem;\r\n\t\t\t\t\t\tlet children = <OrderedListTemplate<this[\"_dataItem\"]>><any>(anyDataItem[fieldName]);\r\n\t\t\t\t\t\tchildren.each((child) => {\r\n\t\t\t\t\t\t\tthis.updateDataItem(child);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// data is converted to numbers/dates in each dataItem\t\t\t\t\t\r\n\t\t\t\t\t\t(<any>dataItem)[fieldName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$object.each(this.propertyFields, (key, fieldValue) => {\r\n\t\t\t\tconst f: string = <string>key;\r\n\t\t\t\tlet value: any = (<any>dataContext)[fieldValue];\r\n\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\tdataItem.setProperty(f, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected validateDataElements() {\r\n\t\tlet count = this.endIndex;\r\n\r\n\t\tfor (let i = this.startIndex; i < count; i++) {\r\n\t\t\tconst dataItem = this.dataItems.getIndex(i);\r\n\r\n\t\t\t// TODO is this correct\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates this element and its related elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.validateDataElements();\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number, skipRaw?: boolean): void {\r\n\r\n\t\t// need to check if data is invalid, as addData might be called multiple times\r\n\t\tif (!this.dataInvalid && this.inited) {\r\n\t\t\tthis._parseDataFrom = this.data.length; // save length of parsed data\r\n\t\t}\r\n\r\n\t\tif (!skipRaw) {\r\n\t\t\tif (rawDataItem instanceof Array) {\r\n\t\t\t\t// can't use concat because new array is returned\r\n\t\t\t\t$array.each(rawDataItem, (dataItem) => {\r\n\t\t\t\t\tthis.data.push(dataItem);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.data.push(rawDataItem); // add to raw data array\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.inited) {\r\n\t\t\tthis.removeData(removeCount, skipRaw);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\t\twhile (removeCount > 0) {\r\n\t\t\t\t\tthis.data.shift();\r\n\t\t\t\t\tremoveCount--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>, skipRaw?: boolean) {\r\n\t\tif ($type.isNumber(count) && count > 0) {\r\n\t\t\twhile (count > 0) {\r\n\t\t\t\tlet dataItem = this.mainDataSet.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tthis.mainDataSet.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tif (!dataUser.data || dataUser.data.length == 0) {\r\n\t\t\t\t\t\tlet dataItem = dataUser.mainDataSet.getIndex(0);\r\n\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\tdataUser.mainDataSet.remove(dataItem);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tif (!skipRaw) {\r\n\t\t\t\t\tthis.data.shift();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._parseDataFrom > 0) {\r\n\t\t\t\t\tthis._parseDataFrom--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcount--;\r\n\t\t\t}\r\n\t\t\t// changed from invalidateData since 4.7.19 to solve #51551\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a data (re)parsing.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateData(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataInvalid){\r\n\t\tregistry.addToInvalidComponents(this);\r\n\t\tsystem.requestFrame();\r\n\t\tthis.dataInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateDataItems();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * [invalidateDataUsers description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic invalidateDataUsers(): void {\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data values. When data array is not changed, but values within\r\n\t * it changes, we invalidate data so that component would process changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateDataItems(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataItemsInvalid){\r\n\t\t$array.move(registry.invalidDataItems, this);\r\n\t\tsystem.requestFrame();\r\n\r\n\t\tthis.dataItemsInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateDataItems();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates data range. This is done when data which must be shown\r\n\t * changes (chart is zoomed for example).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateDataRange(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.dataRangeInvalid){\r\n\t\tthis.dataRangeInvalid = true;\r\n\t\t$array.move(registry.invalidDataRange, this);\r\n\t\tsystem.requestFrame();\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data range.\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\t\t$array.remove(registry.invalidDataRange, this);\r\n\t\tthis.dataRangeInvalid = false;\r\n\r\n\t\tif (this.startIndex != this._prevStartIndex || this.endIndex != this._prevEndIndex) {\r\n\t\t\tthis.rangeChangeUpdate();\r\n\t\t\tthis.appendDataItems();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"datarangechanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected sliceData() {\r\n\t\tthis._workingStartIndex = this.startIndex;\r\n\t\tthis._workingEndIndex = this.endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [rangeChangeUpdate description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected rangeChangeUpdate() {\r\n\t\tthis.sliceData();\r\n\t\tthis._prevStartIndex = this.startIndex;\r\n\t\tthis._prevEndIndex = this.endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * [appendDataItems description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected appendDataItems() {\r\n\t\t// TODO use an iterator instead\r\n\t\tlet count = this.endIndex;\r\n\t\tfor (let i: number = this.startIndex; i < count; i++) {\r\n\r\n\t\t\t// data item\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = this.endIndex; i < this.dataItems.length; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If you want to have a smooth transition from one data values to another, you change your raw data and then you must call this method.\r\n\t * then instead of redrawing everything, the chart will check raw data and smoothly transit from previous to new data\r\n\t */\r\n\tpublic invalidateRawData(): void {\r\n\t\tif (this.disabled || this.isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//if(!this.rawDataInvalid){\r\n\t\t$array.move(registry.invalidRawDatas, this);\r\n\t\tsystem.requestFrame();\r\n\r\n\t\tthis.rawDataInvalid = true;\r\n\r\n\t\t$iter.each(this.dataUsers.iterator(), (x) => {\r\n\t\t\tx.invalidateRawData();\r\n\t\t});\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic validateRawData() {\r\n\t\t$array.remove(registry.invalidRawDatas, this);\r\n\t\t$iter.each(this.mainDataSet.iterator(), (dataItem) => {\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tthis.updateDataItem(dataItem);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\t\t$object.each(this._dataSources, (key, source) => {\r\n\t\t\tthis.removeDispose(source);\r\n\t\t});\r\n\t\tthis.disposeData();\r\n\t\tsuper.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\r\n\t\t$array.each(this._dataDisposers, (x) => {\r\n\t\t\tx.dispose();\r\n\t\t});\r\n\r\n\t\t// and for all components\r\n\t\t$iter.each(this.dataUsers.iterator(), (dataUser) => {\r\n\t\t\tdataUser.disposeData();\r\n\t\t});\r\n\r\n\t\tthis._dataDisposers.length = 0;\r\n\r\n\t\tthis._startIndex = undefined;\r\n\t\tthis._endIndex = undefined;\r\n\r\n\t\t// dispose old\r\n\t\tthis.mainDataSet.clear();\r\n\r\n\t\tthis.mainDataSet.template.clones.clear();\r\n\r\n\t\tif (this._dataSets) {\r\n\t\t\tthis._dataSets.clear();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\treturn this.mainDataSet.create();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.dispatchImmediately(\"beforedatavalidated\");\r\n\r\n\t\tthis.dataInvalid = false;\r\n\r\n\t\tregistry.removeFromInvalidComponents(this);\r\n\r\n\t\tif (this.__disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.dataValidationProgress = 0;\r\n\t\t// need this to slice new data\r\n\t\tthis._prevStartIndex = undefined;\r\n\t\tthis._prevEndIndex = undefined;\r\n\r\n\t\t// todo: this needs some overthinking, maybe some extra settings like zoomOotonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n\t\tthis._startIndex = undefined;\r\n\t\tthis._endIndex = undefined;\r\n\r\n\t\tif (this.dataFields.data && this.dataItem) {\r\n\t\t\tlet dataContext = <any>this.dataItem.dataContext;\r\n\t\t\tthis._data = dataContext[this.dataFields.data];\r\n\t\t}\r\n\r\n\t\t// data items array is reset only if all data is validated, if _parseDataFrom is not 0, we append new data only\r\n\t\t// check heatmap demo if uncommented\r\n\t\t// fixed both issues by adding && this.data.length > 0\r\n\t\t// check adding series example if changed\r\n\t\tif (this._parseDataFrom === 0 && this.data.length > 0) {\r\n\t\t\tthis.disposeData();\r\n\t\t}\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tlet preloader: $type.Optional<Preloader> = this.preloader;\r\n\r\n\t\t\t// and for all components\r\n\t\t\t$iter.each(this.dataUsers.iterator(), (dataUser) => {\r\n\t\t\t\t// todo: this needs some overthinking, maybe some extra settings like zoomOUtonDataupdate like in v3 or so. some charts like pie chart probably should act like this always\r\n\t\t\t\tdataUser._startIndex = undefined;\r\n\t\t\t\tdataUser._endIndex = undefined;\r\n\t\t\t});\r\n\r\n\t\t\tlet counter: number = 0;\r\n\t\t\tlet startTime: number = Date.now();\r\n\t\t\t// parse data\r\n\t\t\tlet i = this._parseDataFrom;\r\n\t\t\tlet n = this.data.length;\r\n\r\n\t\t\tfor (i; i < n; i++) {\r\n\t\t\t\tlet rawDataItem = this.data[i];\r\n\t\t\t\tif (this._usesData) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.getDataItem(rawDataItem);\r\n\t\t\t\t\tthis.processDataItem(dataItem, rawDataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tif (dataUser.data.length == 0) { // checking if data is not set directly\r\n\t\t\t\t\t\tlet dataUserDataItem: DataItem = dataUser.getDataItem(rawDataItem);\r\n\t\t\t\t\t\tdataUser.processDataItem(dataUserDataItem, rawDataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tcounter++;\r\n\r\n\t\t\t\t// show preloader if this takes too many time\r\n\t\t\t\tif (counter == 100) { // no need to check it on each data item\r\n\t\t\t\t\tcounter = 0;\r\n\t\t\t\t\tlet elapsed: number = Date.now() - startTime;\r\n\r\n\t\t\t\t\tif (elapsed > this.parsingStepDuration) {\r\n\t\t\t\t\t\tif (i < this.data.length - 10) {\r\n\t\t\t\t\t\t\tthis._parseDataFrom = i + 1;\r\n\r\n\t\t\t\t\t\t\t// update preloader\r\n\t\t\t\t\t\t\tif (preloader) {\r\n\t\t\t\t\t\t\t\tif (i / this.data.length > 0.5 && !preloader.visible) {\r\n\t\t\t\t\t\t\t\t\t// do not start showing\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tpreloader.progress = i / this.data.length;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.dataValidationProgress = i / this.data.length;\r\n\r\n\t\t\t\t\t\t\ti = this.data.length; // stops cycle\r\n\t\t\t\t\t\t\tthis.invalidateData();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.each((dataUser) => {\r\n\t\t\t\tif (dataUser.hidden) {\r\n\t\t\t\t\tdataUser.hide(0);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.dataValidationProgress = 1;\r\n\t\tthis._parseDataFrom = 0; // reset this index, it is set to dataItems.length if addData() method was used.\r\n\r\n\t\tthis.invalidateDataItems();\r\n\r\n\t\tif (!this._internalDefaultsApplied) {\r\n\t\t\tthis.applyInternalDefaults();\r\n\t\t}\r\n\r\n\t\tthis.dispatch(\"datavalidated\"); // can't zoom chart if dispatched immediately\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t$array.remove(registry.invalidDataItems, this);\r\n\r\n\t\tthis.dataItemsInvalid = false;\r\n\r\n\t\tthis.invalidateDataRange();\r\n\t\tthis.invalidate();\r\n\t\tthis.dispatch(\"dataitemsvalidated\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets source (raw) data for the element. The \"data\" is always an `Array`\r\n\t * of objects.\r\n\t *\r\n\t * IMPORTANT: The order of data items in `data` array is important as it\r\n\t * might affect chart look and behavior. [More details](https://www.amcharts.com/docs/v4/concepts/data/#Order_of_data_items).\r\n\t *\r\n\t * @param value Data\r\n\t */\r\n\tpublic set data(value: any[]) {\r\n\t\tthis.setData(value);\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\t// array might be the same, but there might be items added\r\n\t\t// todo: check if array changed, toString maybe?\r\n\t\tif (!this.isDisposed()) {\r\n\t\t\tthis._parseDataFrom = 0;\r\n\t\t\tthis.disposeData();\r\n\t\t\tthis._data = value;\r\n\t\t\tif (value && value.length > 0) {\r\n\t\t\t\tthis.invalidateData();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dispatchImmediately(\"beforedatavalidated\");\r\n\t\t\t\tthis.dispatch(\"datavalidated\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's source (raw) data.\r\n\t *\r\n\t * @return Data\r\n\t */\r\n\tpublic get data(): any[] {\r\n\t\tif (!this._data) {\r\n\t\t\tthis._data = [];\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._data;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"data\", this._data);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns (creates if necessary) a [[DataSource]] bound to any specific\r\n\t * property.\r\n\t *\r\n\t * For example if I want to bind `data` to an external JSON file, I'd create\r\n\t * a DataSource for it.\r\n\t *\r\n\t * @param property  Property to bind external data to\r\n\t * @return A DataSource for property\r\n\t */\r\n\tpublic getDataSource(property: string): DataSource {\r\n\t\tif (!$type.hasValue(this._dataSources[property])) {\r\n\t\t\tthis._dataSources[property] = new DataSource();\r\n\t\t\tthis._dataSources[property].component = this;\r\n\t\t\tthis.setDataSourceEvents(this._dataSources[property], property);\r\n\t\t\tthis._dataSources[property].adapter.add(\"dateFields\", (val) => {\r\n\t\t\t\treturn this.dataSourceDateFields(val);\r\n\t\t\t});\r\n\t\t\tthis._dataSources[property].adapter.add(\"numberFields\", (val) => {\r\n\t\t\t\treturn this.dataSourceNumberFields(val);\r\n\t\t\t});\r\n\t\t\tthis.events.on(\"inited\", () => {\r\n\t\t\t\tthis.loadData(property);\r\n\t\t\t}, this, false);\r\n\t\t}\r\n\t\treturn this._dataSources[property];\r\n\t}\r\n\r\n\t/**\r\n\t *A [[DataSource]] to be used for loading Component's data.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/loading-external-data/} for more on loading external data\r\n\t * @param value  Data source\r\n\t */\r\n\tpublic set dataSource(value: DataSource) {\r\n\t\tif (this._dataSources[\"data\"]) {\r\n\t\t\tthis.removeDispose(this._dataSources[\"data\"]);\r\n\t\t}\r\n\t\tthis._dataSources[\"data\"] = value;\r\n\t\tthis._dataSources[\"data\"].component = this;\r\n\t\tthis.events.on(\"inited\", () => {\r\n\t\t\tthis.loadData(\"data\")\r\n\t\t}, this, false);\r\n\t\tthis.setDataSourceEvents(value, \"data\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data source\r\n\t */\r\n\tpublic get dataSource(): DataSource {\r\n\t\tif (!this._dataSources[\"data\"]) {\r\n\t\t\tthis.getDataSource(\"data\");\r\n\t\t}\r\n\t\treturn this._dataSources[\"data\"];\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates loading of the external data via [[DataSource]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected loadData(property: string): void {\r\n\t\tthis._dataSources[property].load();\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(value: string[]): string[] {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(value: string[]): string[] {\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param list        [description]\r\n\t * @param dataFields  [description]\r\n\t * @param targetList  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected populateDataSourceFields(list: string[], dataFields: { [index: string]: string }, targetList: string[]): string[] {\r\n\t\t$array.each(targetList, (value: string) => {\r\n\t\t\tif (dataFields[value] && $array.indexOf(list, dataFields[value]) === -1) {\r\n\t\t\t\tlist.push(dataFields[value]);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn list;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets events on a [[DataSource]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected setDataSourceEvents(ds: DataSource, property?: string): void {\r\n\t\tds.events.on(\"started\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0;\r\n\t\t\t\t//preloader.label.text = this.language.translate(\"Loading\");\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"loadstarted\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.25;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"loadended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.5;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"parseended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 0.75;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"ended\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\t\t}, undefined, false);\r\n\t\tds.events.on(\"error\", (ev) => {\r\n\t\t\tconst preloader = this.preloader;\r\n\t\t\tif (preloader) {\r\n\t\t\t\tpreloader.progress = 1;\r\n\t\t\t}\r\n\t\t\tthis.openModal(ev.message);\r\n\t\t}, undefined, false);\r\n\r\n\t\tif (property) {\r\n\t\t\tds.events.on(\"done\", (ev) => {\r\n\t\t\t\tconst preloader = this.preloader;\r\n\t\t\t\tif (preloader) {\r\n\t\t\t\t\tpreloader.progress = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (property == \"data\" && !$type.isArray(ev.data)) {\r\n\t\t\t\t\tev.data = [ev.data];\r\n\t\t\t\t}\r\n\t\t\t\tif (ds.incremental && property == \"data\" && this.data.length) {\r\n\t\t\t\t\tthis.addData(ev.data, ds.keepCount ? ev.data.length : 0);\r\n\t\t\t\t}\r\n\t\t\t\telse if (ds.updateCurrentData && property == \"data\" && this.data.length) {\r\n\t\t\t\t\t// cycle through existing data items\r\n\t\t\t\t\t$array.each(this.data, (item, index) => {\r\n\t\t\t\t\t\tif ($type.hasValue(ev.data[index])) {\r\n\t\t\t\t\t\t\t$object.each(item, (key, val) => {\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(ev.data[index][key])) {\r\n\t\t\t\t\t\t\t\t\titem[key] = ev.data[index][key];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.invalidateRawData();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t(<any>this)[property] = ev.data;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Responsive]] instance to be used when applying conditional\r\n\t * property values.\r\n\t *\r\n\t * NOTE: Responsive features are currently in development and may not work\r\n\t * as expected, if at all.\r\n\t *\r\n\t * @param value  Responsive rules handler\r\n\t */\r\n\tpublic set responsive(value: Responsive) {\r\n\t\tthis._responsive = value;\r\n\t\tthis._responsive.component = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Responsive rules handler\r\n\t */\r\n\tpublic get responsive(): Responsive {\r\n\t\tif (!this._responsive) {\r\n\t\t\tthis._responsive = new Responsive();\r\n\t\t\tthis._responsive.component = this;\r\n\t\t}\r\n\t\treturn this._responsive;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current zoom.\r\n\t *\r\n\t * The range uses relative values from 0 to 1, with 0 marking beginning and 1\r\n\t * marking end of the available data range.\r\n\t *\r\n\t * This method will not have any effect when called on a chart object.\r\n\t * Since the chart can have a number of axes and series, each with its own\r\n\t * data, the meaning of \"range\" is very ambiguous.\r\n\t *\r\n\t * To zoom the chart use `zoom*` methods on its respective axes.\r\n\t *\r\n\t * @param range          Range\r\n\t * @param skipRangeEvent Should rangechanged event not be triggered?\r\n\t * @param instantly      Do not animate?\r\n\t * @return Actual modidied range (taking `maxZoomFactor` into account)\r\n\t */\r\n\tpublic zoom(range: IRange, skipRangeEvent: boolean = false, instantly: boolean = false, declination?: number): IRange {\r\n\t\tlet start: $type.Optional<number> = range.start;\r\n\t\tlet end = range.end;\r\n\t\tlet priority = range.priority;\r\n\r\n\t\tif (range.start == range.end) {\r\n\t\t\trange.start = range.start - 0.5 / this.maxZoomFactor;\r\n\t\t\trange.end = range.end + 0.5 / this.maxZoomFactor;\r\n\t\t}\r\n\r\n\t\tif (priority == \"end\" && end == 1 && start != 0) {\r\n\t\t\tif (start < this.start) {\r\n\t\t\t\tpriority = \"start\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (priority == \"start\" && start == 0) {\r\n\t\t\tif (end > this.end) {\r\n\t\t\t\tpriority = \"end\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(declination)) {\r\n\t\t\tdeclination = this.maxZoomDeclination;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(start) || !$type.isNumber(end)) {\r\n\t\t\treturn { start: this.start, end: this.end };\r\n\t\t}\r\n\r\n\t\tif (this._finalStart != start || this._finalEnd != end) {\r\n\r\n\t\t\tlet maxZoomFactor: number = this.maxZoomFactor / this.minZoomCount;\r\n\t\t\tlet minZoomFactor: number = this.maxZoomFactor / this.maxZoomCount;\r\n\r\n\t\t\t// most likely we are dragging left scrollbar grip here, so we tend to modify end\r\n\r\n\t\t\tif (priority == \"start\") {\r\n\r\n\t\t\t\tif (this.maxZoomCount > 0) {\r\n\t\t\t\t\t// add to the end\r\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\r\n\t\t\t\t\t\tend = start + 1 / minZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add to the end\r\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t\t//unless end is > 0\r\n\t\t\t\tif (end > 1 && end - start < 1 / maxZoomFactor) {\r\n\t\t\t\t\t//end = 1;\r\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// most likely we are dragging right, so we modify left\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (this.maxZoomCount > 0) {\r\n\t\t\t\t\t// add to the end\r\n\t\t\t\t\tif (1 / (end - start) < minZoomFactor) {\r\n\t\t\t\t\t\tstart = end - 1 / minZoomFactor;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// remove from start\r\n\t\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t\tif (start < 0 && end - start < 1 / maxZoomFactor) {\r\n\t\t\t\t\t//start = 0;\r\n\t\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (start < - declination) {\r\n\t\t\t\tstart = - declination;\r\n\t\t\t}\r\n\r\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\tend = start + 1 / maxZoomFactor;\r\n\t\t\t}\r\n\r\n\t\t\tif (end > 1 + declination) {\r\n\t\t\t\tend = 1 + declination;\r\n\t\t\t}\r\n\r\n\t\t\tif (1 / (end - start) > maxZoomFactor) {\r\n\t\t\t\tstart = end - 1 / maxZoomFactor;\r\n\t\t\t}\r\n\r\n\t\t\tthis._finalEnd = end;\r\n\t\t\tthis._finalStart = start;\r\n\r\n\t\t\tthis.skipRangeEvent = skipRangeEvent;\r\n\r\n\t\t\tthis.dispatchImmediately(\"rangechangestarted\");\r\n\r\n\t\t\tif (this.rangeChangeDuration > 0 && !instantly) {\r\n\r\n\t\t\t\t// todo: maybe move this to Animation\r\n\t\t\t\tlet rangeChangeAnimation: $type.Optional<Animation> = this.rangeChangeAnimation;\r\n\t\t\t\tif (rangeChangeAnimation && rangeChangeAnimation.progress < 1) {\r\n\t\t\t\t\tlet options = rangeChangeAnimation.animationOptions;\r\n\t\t\t\t\tif (options.length > 1) {\r\n\t\t\t\t\t\tif (options[0].to == start && options[1].to == end) {\r\n\t\t\t\t\t\t\treturn { start: start, end: end };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (!rangeChangeAnimation.isDisposed()) {\r\n\t\t\t\t\t\t\t\trangeChangeAnimation.stop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.rangeChangeAnimation) {\r\n\t\t\t\t\tthis.rangeChangeAnimation.kill();\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeChangeAnimation = this.animate([{ property: \"start\", to: start }, { property: \"end\", to: end }], this.rangeChangeDuration, this.rangeChangeEasing);\r\n\t\t\t\tthis.rangeChangeAnimation = rangeChangeAnimation;\r\n\r\n\t\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\t\trangeChangeAnimation.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.dispatchImmediately(\"rangechangeended\");\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.dispatchImmediately(\"rangechangeended\");\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.start = start;\r\n\t\t\t\tthis.end = end;\r\n\t\t\t\tthis.dispatch(\"rangechangeended\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to specific data items using their index in data.\r\n\t *\r\n\t * This method will not have any effect when called on a chart object.\r\n\t * Since the chart can have a number of axes and series, each with its own\r\n\t * data, the meaning of \"index\" is very ambiguous.\r\n\t *\r\n\t * To zoom the chart use `zoom*` methods on its respective axes.\r\n\t *\r\n\t * @param startIndex     Index of the starting data item\r\n\t * @param endIndex       Index of the ending data item\r\n\t * @param skipRangeEvent Should rangechanged event not be triggered?\r\n\t * @param instantly      Do not animate?\r\n\t */\r\n\tpublic zoomToIndexes(startIndex: number, endIndex: number, skipRangeEvent?: boolean, instantly?: boolean) {\r\n\t\tif (!$type.isNumber(startIndex) || !$type.isNumber(endIndex)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number = startIndex / this.dataItems.length;\r\n\t\tlet end: number = endIndex / this.dataItems.length;\r\n\r\n\t\tthis.zoom({ start: start, end: end }, skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * A current zoom factor (0-1). 1 meaning fully zoomed out. (showing all of\r\n\t * the available data)\r\n\t *\r\n\t * @return Zoom factor\r\n\t */\r\n\tpublic get zoomFactor(): number {\r\n\t\treturn $math.fitToRange(1 / (this.end - this.start), 1, this.maxZoomFactor);\r\n\t}\r\n\r\n\t/**\r\n\t * Max available `zoomFactor`.\r\n\t *\r\n\t * The element will not allow zoom to occur beyond this factor.\r\n\t *\r\n\t * [[DateAxis]] and [[CategoryAxis]] calculate this atutomatically so that\r\n\t * category axis could be zoomed to one category and date axis allows to be\r\n\t * zoomed up to one base interval.\r\n\t *\r\n\t * In case you want to restrict category or date axis to be zoomed to more\r\n\t * than one category or more than one base interval, use `minZoomCount`\r\n\t * property (set it to `> 1`).\r\n\t *\r\n\t * Default value of [[ValueAxis]]'s `maxZoomFactor` is `1000`.\r\n\t *\r\n\t * Feel free to modify it to allow bigger zoom or to restrict zooming.\r\n\t *\r\n\t * @param value  Maximum zoomFactor\r\n\t */\r\n\tpublic set maxZoomFactor(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxZoomFactor\", value)) {\r\n\t\t\tif (value == 1) {\r\n\t\t\t\tthis.maxZoomDeclination = 0;\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum zoomFactor\r\n\t */\r\n\tpublic get maxZoomFactor(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomFactor\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Max zoom declination.\r\n\t *\r\n\t * @ignore\r\n\t * @default 1\r\n\t * @param value  Maximum zoom declination\r\n\t */\r\n\tpublic set maxZoomDeclination(value: number) {\r\n\t\tif (this.setPropertyValue(\"maxZoomDeclination\", value)) {\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Maximum zoom declination\r\n\t */\r\n\tpublic get maxZoomDeclination(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomDeclination\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current starting index.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Start index\r\n\t */\r\n\tpublic set startIndex(value: number) {\r\n\t\tthis._startIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n\t\t//this._workingStartIndex = this._startIndex; // not good, breaks adjusted working start index of line series\r\n\t\tthis.start = this.indexToPosition(this._startIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @todo:review description\r\n\t * returns item's relative position by the index of the item\r\n\t * @param index\r\n\t */\r\n\tpublic indexToPosition(index: number) {\r\n\t\treturn index / this.dataItems.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Current starting index.\r\n\t *\r\n\t * @return Start index\r\n\t */\r\n\tpublic get startIndex(): number {\r\n\t\tif (!$type.isNumber(this._startIndex)) {\r\n\t\t\tthis._startIndex = 0;\r\n\t\t}\r\n\r\n\t\treturn this._startIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets current ending index.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value End index\r\n\t */\r\n\tpublic set endIndex(value: number) {\r\n\t\tthis._endIndex = $math.fitToRange(Math.round(value), 0, this.dataItems.length);\r\n\t\t//this._workingEndIndex = this._endIndex; // not good, breaks adjusted workingend index of line series\r\n\t\tthis.end = this.indexToPosition(this._endIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * Current ending index.\r\n\t *\r\n\t * @return End index\r\n\t */\r\n\tpublic get endIndex(): number {\r\n\t\tlet count = this.dataItems.length;\r\n\t\tif (!$type.isNumber(this._endIndex) || this._endIndex > count) {\r\n\t\t\tthis._endIndex = count;\r\n\t\t}\r\n\t\treturn this._endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * Start of the current data range (zoom).\r\n\t *\r\n\t * These are relative values from 0 (beginning) to 1 (end).\r\n\t *\r\n\t * @param value Start (0-1)\r\n\t */\r\n\tpublic set start(value: number) {\r\n\t\t// value = $math.round(value, 10); not good\r\n\r\n\t\t//if (1 / (this.end - value) > this.maxZoomFactor) {\r\n\t\t//\tvalue = this.end - 1 / this.maxZoomFactor;\r\n\t\t//}\r\n\t\tif (this._start != value) {\r\n\t\t\tthis._start = value;\r\n\t\t\tlet startIndex = Math.max(0, Math.floor(this.dataItems.length * value) || 0);\r\n\t\t\tthis._startIndex = Math.min(startIndex, this.dataItems.length);\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"startchanged\");\r\n\t\t\tthis.dispatch(\"startendchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start (0-1)\r\n\t */\r\n\tpublic get start(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"start\", this._start);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * End of the current data range (zoom).\r\n\t *\r\n\t * These are relative values from 0 (beginning) to 1 (end).\r\n\t *\r\n\t * @param value End (0-1)\r\n\t */\r\n\tpublic set end(value: number) {\r\n\t\t// value = $math.round(value, 10); // not good\r\n\r\n\t\t//if (1 / (value - this.start) > this.maxZoomFactor) {\r\n\t\t//\tvalue = 1 / this.maxZoomFactor + this.start;\r\n\t\t//}\r\n\r\n\t\tif (this._end != value) {\r\n\t\t\tthis._end = value;\r\n\t\t\tthis._endIndex = Math.min(this.dataItems.length, Math.ceil(this.dataItems.length * value) || 0);\r\n\t\t\tthis.invalidateDataRange();\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.dispatchImmediately(\"endchanged\");\r\n\t\t\tthis.dispatch(\"startendchanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End (0-1)\r\n\t */\r\n\tpublic get end(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._end;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"end\", this._end);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [removeFromInvalids description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected removeFromInvalids(): void {\r\n\t\tsuper.removeFromInvalids();\r\n\t\tregistry.removeFromInvalidComponents(this);\r\n\t\t$array.remove(registry.invalidDataItems, this);\r\n\t\t$array.remove(registry.invalidDataRange, this);\r\n\t\t$array.remove(registry.invalidRawDatas, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list of source [[DataItem]] objects currently used in the chart.\r\n\t *\r\n\t * @return List of data items\r\n\t */\r\n\tpublic get dataItems(): OrderedListTemplate<this[\"_dataItem\"]> {\r\n\t\tif (this._currentDataSetId != \"\") {\r\n\t\t\tlet dataItems = this.dataSets.getKey(this._currentDataSetId);\r\n\t\t\tif (dataItems) {\r\n\t\t\t\treturn dataItems;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._dataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Holds data items for data sets (usually aggregated data).\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @return  Data sets\r\n\t */\r\n\tpublic get dataSets(): Dictionary<string, OrderedListTemplate<this[\"_dataItem\"]>> {\r\n\t\tif (!this._dataSets) {\r\n\t\t\tthis._dataSets = new Dictionary();\r\n\t\t}\r\n\t\treturn this._dataSets;\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the chart use particular data set.\r\n\t *\r\n\t * If `id` is not provided or there is no such data set, main data will be\r\n\t * used.\r\n\t *\r\n\t * @ignore\r\n\t * @since 4.7.0\r\n\t * @param  id  Data set id\r\n\t */\r\n\tpublic setDataSet(id: string): boolean {\r\n\r\n\t\tif (this._currentDataSetId != id) {\r\n\t\t\tlet dataSet = this.dataSets.getKey(id);\r\n\t\t\tif (!dataSet) {\r\n\t\t\t\tif (this._currentDataSetId != \"\") {\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\tthis._currentDataSetId = \"\";\r\n\r\n\t\t\t\t\tthis.invalidateDataRange();\r\n\r\n\t\t\t\t\tthis._prevStartIndex = undefined;\r\n\r\n\t\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t})\r\n\r\n\t\t\t\tthis._currentDataSetId = id;\r\n\r\n\t\t\t\tthis.invalidateDataRange();\r\n\r\n\t\t\t\tthis._prevStartIndex = undefined;\r\n\r\n\t\t\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t})\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t/**\r\n\t * Returns id of the currently used data set, or `undefined` if main data set\r\n\t * is in use.\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Current data set id\r\n\t */\r\n\tpublic get currentDataSetId(): string {\r\n\t\treturn this._currentDataSetId;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns reference to \"main\" data set (unaggregated data as it was supplied\r\n\t * in `data`).\r\n\t *\r\n\t * @since 4.7.0\r\n\t * @return Main data set\r\n\t */\r\n\tpublic get mainDataSet(): OrderedListTemplate<this[\"_dataItem\"]> {\r\n\t\treturn this._dataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the indexes for the dataItems\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _updateDataItemIndexes(startIndex: number): void {\r\n\t\tconst dataItems = this.mainDataSet.values;\r\n\t\tconst length = dataItems.length;\r\n\r\n\t\tfor (let i = startIndex; i < length; ++i) {\r\n\t\t\tdataItems[i]._index = i;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes newly added [[DataItem]] as well as triggers data re-validation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleDataItemAdded(event: ISortedListEvents<DataItem>[\"inserted\"]) {\r\n\t\tevent.newValue.component = this;\r\n\r\n\t\tthis._updateDataItemIndexes(event.index);\r\n\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * removes [[DataItem]] as well as triggers data re-validation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event [description]\r\n\t */\r\n\tprotected handleDataItemRemoved(event: ISortedListEvents<DataItem>[\"removed\"]) {\r\n\t\t//\t\tevent.oldValue.component = undefined; // not good, as some items might be not removed from component lists\r\n\r\n\t\tthis._updateDataItemIndexes(event.index);\r\n\r\n\t\tif (!this.dataItemsInvalid) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Binds a data element's field to a specific field in raw data.\r\n\t * For example, for the very basic column chart you'd want to bind a `value`\r\n\t * field to a field in data, such as `price`.\r\n\t *\r\n\t * Some more advanced Components, like [[CandlestickSeries]] need several\r\n\t * data fields bound to data, such as ones for open, high, low and close\r\n\t * values.\r\n\t *\r\n\t * @todo Example\r\n\t * @param field  Field name\r\n\t * @param value  Field name in data\r\n\t */\r\n\tpublic bindDataField<Key extends keyof this[\"_dataFields\"]>(field: Key, value: this[\"_dataFields\"][Key]) {\r\n\t\tthis.dataFields[field] = value;\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates processed data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateProcessedData(): void {\r\n\t\tthis.resetProcessedRange();\r\n\t\tthis.invalidateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * [resetProcessedRange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic resetProcessedRange(): void {\r\n\t\tthis._prevEndIndex = null;\r\n\t\tthis._prevStartIndex = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all other [[Component]] objects that are using this element's\r\n\t * data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @return [description]\r\n\t */\r\n\tpublic get dataUsers(): List<Component> {\r\n\t\tif (!this._dataUsers) {\r\n\t\t\tthis._dataUsers = new List<Component>();\r\n\r\n\t\t\t//this._disposers.push(new ListDisposer(this._dataUsers));\r\n\r\n\t\t\t// TODO better way of handling this? e.g. move into another module ?\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO clear the list ?\r\n\t\t\t\t$iter.each(this._dataUsers.iterator(), (x) => {\r\n\t\t\t\t\tx.dispose();\r\n\t\t\t\t});\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn this._dataUsers;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a clone of this element.\r\n\t *\r\n\t * @return Clone\r\n\t */\r\n\tpublic clone(): this {\r\n\t\tlet component: this = super.clone();\r\n\t\tcomponent.dataFields = $utils.copyProperties(this.dataFields, {});\r\n\t\treturn component;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Component]].\r\n\t *\r\n\t * @param source Source Component\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.data = source.data;\r\n\t\tthis.sequencedInterpolation = source.sequencedInterpolation;\r\n\t\tthis.sequencedInterpolationDelay = source.sequencedInterpolationDelay;\r\n\t\tthis.interpolationDuration = source.interpolationDuration;\r\n\t\tthis.interpolationEasing = source.interpolationEasing;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates the whole element, including all its children, causing\r\n\t * complete re-parsing of data and redraw.\r\n\t *\r\n\t * Use sparingly!\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tthis._inited = false;\r\n\t\tthis.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Add an adapter for data.\r\n\t *\r\n\t * @return Exporting\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst _export = super.getExporting();\r\n\t\tif (!_export.adapter.has(\"data\", this._exportData, -1, this)) {\r\n\t\t\t_export.adapter.add(\"data\", this._exportData, -1, this);\r\n\t\t\tthis.events.on(\"datavalidated\", (ev) => {\r\n\t\t\t\t_export.handleDataUpdated();\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _export;\r\n\t}\r\n\r\n\tprivate _exportData(arg: IExportAdapters[\"data\"]): IExportAdapters[\"data\"] {\r\n\t\targ.data = this.data;\r\n\t\treturn arg;\r\n\t}\r\n\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tlet changed = super.setDisabled(value);\r\n\t\tif (changed) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setShowOnInit(value: boolean) {\r\n\t\tif (value != this.getPropertyValue(\"showOnInit\")) {\r\n\t\t\tif (value && !this.inited && !this.hidden) {\r\n\t\t\t\tthis._showOnInitDisposer2 = this.events.once(\"dataitemsvalidated\", this.hideInitially, this, false);\r\n\t\t\t\tthis._disposers.push(this._showOnInitDisposer2);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._showOnInitDisposer2) {\r\n\t\t\t\t\tthis.removeDispose(this._showOnInitDisposer2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// important order here\r\n\t\tsuper.setShowOnInit(value);\r\n\t}\r\n\r\n\tprotected setBaseId(value: string) {\r\n\t\tif (value != this._baseId) {\r\n\t\t\tif (this.dataInvalid) {\r\n\t\t\t\tthis.dataInvalid = false;\r\n\t\t\t\tregistry.removeFromInvalidComponents(this);\r\n\t\t\t\tthis._baseId = value;\r\n\t\t\t\tthis.invalidateData();\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.setBaseId(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Allows restricting zoom in beyond certain number of categories or base\r\n\t * intervals.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Min zoom count\r\n\t */\r\n\tpublic set minZoomCount(value: number) {\r\n\t\tthis.setPropertyValue(\"minZoomCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Min zoom count\r\n\t */\r\n\tpublic get minZoomCount(): number {\r\n\t\treturn this.getPropertyValue(\"minZoomCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use this for [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * Limits how many categories or base intervals can be shown at the same\r\n\t * time.\r\n\t *\r\n\t * If there are more items in the chart, the chart will auto-zoom.\r\n\t *\r\n\t * @default 0 (no limit)\r\n\t * @since 4.6.2\r\n\t * @param value  Max zoom count\r\n\t */\r\n\tpublic set maxZoomCount(value: number) {\r\n\t\tthis.setPropertyValue(\"maxZoomCount\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Max zoom count\r\n\t */\r\n\tpublic get maxZoomCount(): number {\r\n\t\treturn this.getPropertyValue(\"maxZoomCount\");\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemCheckIfValidate(): boolean {\r\n\t\tif (this.dataInvalid || (this.dataProvider && this.dataProvider.dataInvalid)) {\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds easing functions to \"function\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as function?\r\n\t */\r\n\tprotected asFunction(field: string): boolean {\r\n\t\treturn field == \"interpolationEasing\" || field == \"rangeChangeEasing\" || super.asIs(field);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Component\"] = Component;\r\n"]},"metadata":{},"sourceType":"module"}