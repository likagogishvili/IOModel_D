{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Linear gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\n\nvar LinearGradient =\n/** @class */\nfunction (_super) {\n  __extends(LinearGradient, _super);\n\n  function LinearGradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(LinearGradient.prototype, \"getFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      var rotation = this.get(\"rotation\", 0);\n      var bounds = this.getBounds(target);\n      var l = bounds.left || 0;\n      var r = bounds.right || 0;\n      var t = bounds.top || 0;\n      var b = bounds.bottom || 0;\n      var cos = $math.cos(rotation);\n      var sin = $math.sin(rotation);\n      var w = cos * (r - l);\n      var h = sin * (b - t);\n      var longer = Math.max(w, h);\n\n      var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos, t + longer * sin);\n\n      var stops = this.get(\"stops\");\n\n      if (stops) {\n        var i_1 = 0;\n        $array.each(stops, function (stop) {\n          var offset = stop.offset;\n\n          if (!$type.isNumber(offset)) {\n            offset = i_1 / (stops.length - 1);\n          }\n\n          var opacity = stop.opacity;\n\n          if (!$type.isNumber(opacity)) {\n            opacity = 1;\n          }\n\n          var color = stop.color;\n\n          if (color) {\n            var lighten = stop.lighten;\n\n            if (lighten) {\n              color = Color.lighten(color, lighten);\n            }\n\n            var brighten = stop.brighten;\n\n            if (brighten) {\n              color = Color.brighten(color, brighten);\n            }\n\n            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n          }\n\n          i_1++;\n        });\n      }\n\n      return gradient;\n    }\n  });\n  Object.defineProperty(LinearGradient, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"LinearGradient\"\n  });\n  Object.defineProperty(LinearGradient, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Gradient.classNames.concat([LinearGradient.className])\n  });\n  return LinearGradient;\n}(Gradient);\n\nexport { LinearGradient };","map":{"version":3,"mappings":"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","names":["Gradient","Color","$array","$type","$math","__extends","target","rotation","get","bounds","getBounds","l","left","r","right","t","top","b","bottom","cos","sin","w","h","longer","Math","max","gradient","_root","_renderer","createLinearGradient","stops","i_1","each","stop","offset","isNumber","length","opacity","color","lighten","brighten","addColorStop","g","Object","classNames","concat","LinearGradient","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/render/gradients/LinearGradient.ts"],"sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\nimport * as $math from \"../../util/Math\";\n\n\nexport interface ILinearGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient rotation, in degrees.\n\t *\n\t * @default 90\n\t */\n\trotation?: number;\n\n}\n\nexport interface ILinearGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Linear gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class LinearGradient extends Gradient {\n\n\tdeclare public _settings: ILinearGradientSettings;\n\tdeclare public _privateSettings: ILinearGradientPrivate;\n\n\tpublic static className: string = \"LinearGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([LinearGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet bounds = this.getBounds(target);\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tlet cos = $math.cos(rotation);\n\t\tlet sin = $math.sin(rotation);\n\n\t\tlet w = cos * (r - l);\n\t\tlet h = sin * (b - t);\n\n\t\tlet longer = Math.max(w, h);\n\n\t\tconst gradient = this._root._renderer.createLinearGradient(\n\t\t\tl,\n\t\t\tt,\n\t\t\tl + longer * cos,\n\t\t\tt + longer * sin\n\t\t);\n\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\t\treturn gradient;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}