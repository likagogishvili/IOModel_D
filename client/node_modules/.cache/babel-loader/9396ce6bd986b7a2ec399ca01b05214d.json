{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"./Entity\";\nimport { TextFormatter } from \"./TextFormatter\";\nimport * as $object from \"./Object\";\nimport * as $utils from \"./Utils\";\nimport * as $type from \"./Type\";\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\n\nvar DurationFormatter =\n/** @class */\nfunction (_super) {\n  __extends(DurationFormatter, _super);\n\n  function DurationFormatter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Collection of aliases for units.\r\n     */\n\n\n    Object.defineProperty(_this, \"_unitAliases\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        \"Y\": \"y\",\n        \"D\": \"d\",\n        \"H\": \"h\",\n        \"K\": \"h\",\n        \"k\": \"h\",\n        \"n\": \"S\"\n      }\n    });\n    return _this;\n  }\n\n  Object.defineProperty(DurationFormatter.prototype, \"_setDefaults\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var dmillisecond = \"_duration_millisecond\";\n      var dsecond = \"_duration_second\";\n      var dminute = \"_duration_minute\";\n      var dhour = \"_duration_hour\";\n      var dday = \"_duration_day\";\n      var dweek = \"_duration_week\";\n      var dmonth = \"_duration_month\";\n      var dyear = \"_duration_year\";\n      var asecond = \"_second\";\n      var aminute = \"_minute\";\n      var ahour = \"_hour\";\n      var aday = \"_day\";\n      var aweek = \"_week\";\n      var amonth = \"_week\";\n      var ayear = \"_year\"; // Defaults\n\n      this._setDefault(\"negativeBase\", 0);\n\n      this._setDefault(\"baseUnit\", \"second\");\n\n      this._setDefault(\"durationFormats\", {\n        \"millisecond\": {\n          \"millisecond\": this._t(dmillisecond),\n          \"second\": this._t(dmillisecond + asecond),\n          \"minute\": this._t(dmillisecond + aminute),\n          \"hour\": this._t(dmillisecond + ahour),\n          \"day\": this._t(dmillisecond + aday),\n          \"week\": this._t(dmillisecond + aweek),\n          \"month\": this._t(dmillisecond + amonth),\n          \"year\": this._t(dmillisecond + ayear)\n        },\n        \"second\": {\n          \"second\": this._t(dsecond),\n          \"minute\": this._t(dsecond + aminute),\n          \"hour\": this._t(dsecond + ahour),\n          \"day\": this._t(dsecond + aday),\n          \"week\": this._t(dsecond + aweek),\n          \"month\": this._t(dsecond + amonth),\n          \"year\": this._t(dsecond + ayear)\n        },\n        \"minute\": {\n          \"minute\": this._t(dminute),\n          \"hour\": this._t(dminute + ahour),\n          \"day\": this._t(dminute + aday),\n          \"week\": this._t(dminute + aweek),\n          \"month\": this._t(dminute + amonth),\n          \"year\": this._t(dminute + ayear)\n        },\n        \"hour\": {\n          \"hour\": this._t(dhour),\n          \"day\": this._t(dhour + aday),\n          \"week\": this._t(dhour + aweek),\n          \"month\": this._t(dhour + amonth),\n          \"year\": this._t(dhour + ayear)\n        },\n        \"day\": {\n          \"day\": this._t(dday),\n          \"week\": this._t(dday + aweek),\n          \"month\": this._t(dday + amonth),\n          \"year\": this._t(dday + ayear)\n        },\n        \"week\": {\n          \"week\": this._t(dweek),\n          \"month\": this._t(dweek + amonth),\n          \"year\": this._t(dweek + ayear)\n        },\n        \"month\": {\n          \"month\": this._t(dmonth),\n          \"year\": this._t(dmonth + ayear)\n        },\n        \"year\": {\n          \"year\": this._t(dyear)\n        }\n      });\n\n      _super.prototype._setDefaults.call(this);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n    }\n  });\n  /**\r\n   * Formats the number as duration.\r\n   *\r\n   * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n   * 16 minutes and 40 seconds.\r\n   *\r\n   * @param value   Value to format\r\n   * @param format  Format to apply\r\n   * @param base    Override base unit\r\n   * @return Formatted number\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"format\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, format, base) {\n      // no base unit?\n      var baseUnit = base || this.get(\"baseUnit\"); // no format passed in or empty\n\n      if (typeof format === \"undefined\" || format === \"\") {\n        if (this.get(\"durationFormat\") != null) {\n          format = this.get(\"durationFormat\");\n        } else {\n          format = this.getFormat($type.toNumber(value), undefined, baseUnit);\n        }\n      } // Clean format\n\n\n      format = $utils.cleanFormat(format); // get format info (it will also deal with parser caching)\n\n      var info = this.parseFormat(format, baseUnit); // cast to number just in case\n      // TODO: maybe use better casting\n\n      var source = Number(value); // format and replace the number\n\n      var details;\n\n      if (source > this.get(\"negativeBase\")) {\n        details = info.positive;\n      } else if (source < this.get(\"negativeBase\")) {\n        details = info.negative;\n      } else {\n        details = info.zero;\n      } // Format\n\n\n      var formatted = this.applyFormat(source, details); // Apply color?\n\n      if (details.color !== \"\") {\n        formatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\n      }\n\n      return formatted;\n    }\n  });\n  /**\r\n   * Parses supplied format into structured object which can be used to format\r\n   * the number.\r\n   *\r\n   * @param format  Format string, i.e. \"#,###.00\"\r\n   * @param base    Override base unit\r\n   * @return Parsed information\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"parseFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (format, base) {\n      // Check cache\n      // TODO\n      // let cached = this.getCache(format);\n      // if (cached != null) {\n      // \treturn cached;\n      // }\n      var _this = this; // no base unit?\n\n\n      var baseUnit = base || this.get(\"baseUnit\"); // Initialize duration parsing info\n\n      var info = {\n        \"positive\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        },\n        \"negative\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        },\n        \"zero\": {\n          \"color\": \"\",\n          \"template\": \"\",\n          \"parts\": [],\n          \"source\": \"\",\n          \"baseUnit\": baseUnit,\n          \"parsed\": false,\n          \"absolute\": false\n        }\n      }; // Escape double vertical bars (that mean display one vertical bar)\n\n      format = format.replace(\"||\", $type.PLACEHOLDER2); // Split it up and deal with different formats\n\n      var parts = format.split(\"|\");\n      info.positive.source = parts[0];\n\n      if (typeof parts[2] === \"undefined\") {\n        info.zero = info.positive;\n      } else {\n        info.zero.source = parts[2];\n      }\n\n      if (typeof parts[1] === \"undefined\") {\n        info.negative = info.positive;\n      } else {\n        info.negative.source = parts[1];\n      } // Parse each\n\n\n      $object.each(info, function (_part, item) {\n        // Already parsed\n        if (item.parsed) {\n          return;\n        } // Check cached\n        // TODO\n        // if (typeof this.getCache(item.source) !== \"undefined\") {\n        // \tinfo[part] = this.getCache(item.source);\n        // \treturn;\n        // }\n        // Begin parsing\n\n\n        var partFormat = item.source; // Check for [] directives\n\n        var dirs = [];\n        dirs = item.source.match(/^\\[([^\\]]*)\\]/);\n\n        if (dirs && dirs.length && dirs[0] !== \"\") {\n          partFormat = item.source.substr(dirs[0].length);\n          item.color = dirs[1];\n        } // Let TextFormatter split into chunks\n\n\n        var chunks = TextFormatter.chunk(partFormat, true);\n\n        for (var i = 0; i < chunks.length; i++) {\n          var chunk = chunks[i]; // replace back double vertical bar\n\n          chunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\n\n          if (chunk.type === \"value\") {\n            // Just \"Duration\"?\n            // if (chunk.text.toLowerCase() === \"duration\") {\n            // \tchunk.text = durationFormat;\n            // }\n            // Check for \"a\" (absolute) modifier\n            if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\n              item.absolute = true;\n              chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\n            } // Find all possible parts\n\n\n            var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\n\n            if (matches) {\n              // Populate template\n              for (var x = 0; x < matches.length; x++) {\n                // Is it an alias?\n                if (matches[x] == null) {\n                  matches[x] = _this._unitAliases[matches[x]];\n                }\n\n                item.parts.push(matches[x]);\n                chunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\n              }\n            }\n          } // Apply to template\n\n\n          item.template += chunk.text;\n        } // Apply style formatting\n        //item.template = TextFormatter.format(item.template, this.outputFormat);\n        // Save cache\n        // TODO\n        //this.setCache(item.source, item);\n        // Mark this as parsed\n\n\n        item.parsed = true;\n      }); // Save cache (the whole thing)\n      // TODO\n      //this.setCache(format, info);\n\n      return info;\n    }\n  });\n  /**\r\n   * Applies parsed format to a numeric value.\r\n   *\r\n   * @param value    Value\r\n   * @param details  Parsed format as returned by {parseFormat}\r\n   * @return Formatted duration\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"applyFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, details) {\n      // Use absolute values\n      var negative = !details.absolute && value < this.get(\"negativeBase\");\n      value = Math.abs(value); // Recalculate to milliseconds\n\n      var tstamp = this.toTimeStamp(value, details.baseUnit); // Init return value\n\n      var res = details.template; // Iterate through duration parts\n\n      for (var i = 0, len = details.parts.length; i < len; i++) {\n        // Gather the part\n        var part = details.parts[i];\n\n        var unit = this._toTimeUnit(part.substr(0, 1));\n\n        var digits = part.length; // Calculate current unit value\n\n        var ints = Math.floor(tstamp / this._getUnitValue(unit));\n        res = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\")); // Reduce timestamp\n\n        tstamp -= ints * this._getUnitValue(unit);\n      } // Reapply negative sign\n\n\n      if (negative) {\n        res = \"-\" + res;\n      }\n\n      return res;\n    }\n  });\n  /**\r\n   * Converts numeric value to timestamp in milliseconds.\r\n   *\r\n   * @param value     A source value\r\n   * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n   * @return Value representation as a timestamp in milliseconds\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"toTimeStamp\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      return value * this._getUnitValue(baseUnit);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_toTimeUnit\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (code) {\n      switch (code) {\n        case \"S\":\n          return \"millisecond\";\n\n        case \"s\":\n          return \"second\";\n\n        case \"m\":\n          return \"minute\";\n\n        case \"h\":\n          return \"hour\";\n\n        case \"d\":\n          return \"day\";\n\n        case \"w\":\n          return \"week\";\n\n        case \"M\":\n          return \"month\";\n\n        case \"y\":\n          return \"year\";\n      }\n\n      ;\n    }\n  });\n  /**\r\n   * Returns appropriate default format for the value.\r\n   *\r\n   * If `maxValue` is sepcified, it will use that value to determine the time\r\n   * unit for the format.\r\n   *\r\n   * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n   * will get `\"10\"`.\r\n   *\r\n   * However, you might want it to be formatted in the context of bigger scale,\r\n   * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n   * values, including small ones will use format with minutes, e.g.:\r\n   * `00:10`, `00:50`, `12: 30`, etc.\r\n   *\r\n   * @param value     Value to format\r\n   * @param maxValue  Maximum value to be used to determine format\r\n   * @param baseUnit  Base unit of the value\r\n   * @return Format\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"getFormat\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, maxValue, baseUnit) {\n      // Is format override set?\n      if (this.get(\"durationFormat\") != null) {\n        return this.get(\"durationFormat\");\n      } // Get base unit\n\n\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n\n      if (maxValue != null && value != maxValue) {\n        value = Math.abs(value);\n        maxValue = Math.abs(maxValue);\n        var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit); //let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\n        //console.log(maxUnit, diffUnit);\n\n        return this.get(\"durationFormats\")[baseUnit][maxUnit];\n      } else {\n        var unit = this.getValueUnit(value, baseUnit);\n        return this.get(\"durationFormats\")[baseUnit][unit];\n      }\n    }\n  });\n  /**\r\n   * Returns value's closest denominator time unit, e.g 100 seconds is\r\n   * `\"minute\"`, while 59 seconds would still be `second`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Denominator\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"getValueUnit\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      } // Convert to milliseconds\n\n\n      var currentUnit;\n      var ms = this.getMilliseconds(value, baseUnit);\n      $object.eachContinue(this._getUnitValues(), function (key, val) {\n        if (key == baseUnit || currentUnit) {\n          var num = ms / val;\n\n          if (num <= 1) {\n            if (!currentUnit) {\n              currentUnit = key;\n            }\n\n            return false;\n          }\n\n          currentUnit = key;\n        }\n\n        return true;\n      });\n      return currentUnit;\n    }\n  });\n  /**\r\n   * Converts value to milliseconds according to `baseUnit`.\r\n   *\r\n   * @param value     Source duration value\r\n   * @param baseUnit  Base unit\r\n   * @return Value in milliseconds\r\n   */\n\n  Object.defineProperty(DurationFormatter.prototype, \"getMilliseconds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (value, baseUnit) {\n      // Get base unit\n      if (!baseUnit) {\n        baseUnit = this.get(\"baseUnit\");\n      }\n\n      return value * this._getUnitValue(baseUnit);\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_getUnitValue\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (timeUnit) {\n      return this._getUnitValues()[timeUnit];\n    }\n  });\n  Object.defineProperty(DurationFormatter.prototype, \"_getUnitValues\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      return {\n        \"millisecond\": 1,\n        \"second\": 1000,\n        \"minute\": 60000,\n        \"hour\": 3600000,\n        \"day\": 86400000,\n        \"week\": 604800000,\n        \"month\": 2592000000,\n        \"year\": 31536000000\n      };\n    }\n  });\n  return DurationFormatter;\n}(Entity);\n\nexport { DurationFormatter };","map":{"version":3,"mappings":"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","names":["Entity","TextFormatter","$object","$utils","$type","__extends","Object","dmillisecond","dsecond","dminute","dhour","dday","dweek","dmonth","dyear","asecond","aminute","ahour","aday","aweek","amonth","ayear","_setDefault","_t","_super","_setDefaults","call","_beforeChanged","value","format","base","baseUnit","get","getFormat","toNumber","undefined","cleanFormat","info","parseFormat","source","Number","details","positive","negative","zero","formatted","applyFormat","color","replace","PLACEHOLDER2","parts","split","each","_part","item","parsed","partFormat","dirs","match","length","substr","chunks","chunk","i","text","type","absolute","matches","x","_this","_unitAliases","push","PLACEHOLDER","template","Math","abs","tstamp","toTimeStamp","res","len","part","unit","_toTimeUnit","digits","ints","floor","_getUnitValue","padString","code","maxValue","maxUnit","getValueUnit","max","currentUnit","ms","getMilliseconds","eachContinue","_getUnitValues","key","val","num","timeUnit"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/DurationFormatter.ts"],"sourcesContent":["import type { TimeUnit } from \"./Time\";\r\n\r\nimport { Entity, IEntitySettings, IEntityPrivate } from \"./Entity\"\r\nimport { TextFormatter } from \"./TextFormatter\";\r\n\r\nimport * as $object from \"./Object\";\r\nimport * as $utils from \"./Utils\";\r\nimport * as $type from \"./Type\";\r\n\r\n\r\nexport interface IDurationFormatterSettings extends IEntitySettings {\r\n\r\n\t/**\r\n\t * A universal duration format to use wherever number needs to be formatted\r\n\t * as a duration.\r\n\t */\r\n\tdurationFormat?: string;\r\n\r\n\t/**\r\n\t * A base value. Any number below it will be considered \"negative\".\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tnegativeBase?: number;\r\n\r\n\t/**\r\n\t * Identifies what values are used in duration.\r\n\t *\r\n\t * Available options: `\"millisecond\"`, `\"second\"` (default), `\"minute\"`, `\"hour\"`, `\"day\"`, `\"week\"`, `\"month\"`, and `\"year\"`.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/#Base_unit} for more info\r\n\t * @default \"second\"\r\n\t */\r\n\tbaseUnit?: TimeUnit;\r\n\r\n\t/**\r\n\t * Time unit dependent duration formats.\r\n\t *\r\n\t * Used be [[DurationAxis]].\r\n\t */\r\n\tdurationFormats?: Partial<Record<TimeUnit, Partial<Record<TimeUnit, string>>>>;\r\n\r\n\t/**\r\n\t * An array of data fields that hold duration values and should be formatted\r\n\t * with a [[DurationFormatter]].\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/data-placeholders/#Formatting_placeholders} for more info\r\n\t */\r\n\tdurationFields?: string[];\r\n\r\n}\r\n\r\nexport interface IDurationFormatterPrivate extends IEntityPrivate {\r\n}\r\n\r\n/**\r\n * A class used to format numberic values as time duration.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/formatters/formatting-durations/} for more info\r\n */\r\nexport class DurationFormatter extends Entity {\r\n\tdeclare public _settings: IDurationFormatterSettings;\r\n\tdeclare public _privateSettings: IDurationFormatterPrivate;\r\n\r\n\tprotected _setDefaults() {\r\n\t\tconst dmillisecond = \"_duration_millisecond\";\r\n\t\tconst dsecond = \"_duration_second\";\r\n\t\tconst dminute = \"_duration_minute\";\r\n\t\tconst dhour = \"_duration_hour\";\r\n\t\tconst dday = \"_duration_day\";\r\n\t\tconst dweek = \"_duration_week\";\r\n\t\tconst dmonth = \"_duration_month\";\r\n\t\tconst dyear = \"_duration_year\";\r\n\r\n\t\tconst asecond = \"_second\";\r\n\t\tconst aminute = \"_minute\";\r\n\t\tconst ahour = \"_hour\";\r\n\t\tconst aday = \"_day\";\r\n\t\tconst aweek = \"_week\";\r\n\t\tconst amonth = \"_week\";\r\n\t\tconst ayear = \"_year\";\r\n\r\n\t\t// Defaults\r\n\t\tthis._setDefault(\"negativeBase\", 0);\r\n\t\tthis._setDefault(\"baseUnit\", \"second\");\r\n\t\tthis._setDefault(\"durationFormats\", {\r\n\t\t\t\"millisecond\": {\r\n\t\t\t\t\"millisecond\": this._t(dmillisecond),\r\n\t\t\t\t\"second\": this._t((dmillisecond + asecond) as any),\r\n\t\t\t\t\"minute\": this._t((dmillisecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dmillisecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dmillisecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dmillisecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dmillisecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dmillisecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"second\": {\r\n\t\t\t\t\"second\": this._t((dsecond) as any),\r\n\t\t\t\t\"minute\": this._t((dsecond + aminute) as any),\r\n\t\t\t\t\"hour\": this._t((dsecond + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dsecond + aday) as any),\r\n\t\t\t\t\"week\": this._t((dsecond + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dsecond + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dsecond + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"minute\": {\r\n\t\t\t\t\"minute\": this._t((dminute) as any),\r\n\t\t\t\t\"hour\": this._t((dminute + ahour) as any),\r\n\t\t\t\t\"day\": this._t((dminute + aday) as any),\r\n\t\t\t\t\"week\": this._t((dminute + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dminute + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dminute + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"hour\": {\r\n\t\t\t\t\"hour\": this._t((dhour) as any),\r\n\t\t\t\t\"day\": this._t((dhour + aday) as any),\r\n\t\t\t\t\"week\": this._t((dhour + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dhour + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dhour + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"day\": {\r\n\t\t\t\t\"day\": this._t((dday) as any),\r\n\t\t\t\t\"week\": this._t((dday + aweek) as any),\r\n\t\t\t\t\"month\": this._t((dday + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dday + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"week\": {\r\n\t\t\t\t\"week\": this._t((dweek) as any),\r\n\t\t\t\t\"month\": this._t((dweek + amonth) as any),\r\n\t\t\t\t\"year\": this._t((dweek + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"month\": {\r\n\t\t\t\t\"month\": this._t((dmonth) as any),\r\n\t\t\t\t\"year\": this._t((dmonth + ayear) as any)\r\n\t\t\t},\r\n\t\t\t\"year\": {\r\n\t\t\t\t\"year\": this._t(dyear)\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper._setDefaults();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Collection of aliases for units.\r\n\t */\r\n\tprotected _unitAliases: { [index: string]: string } = {\r\n\t\t\"Y\": \"y\",\r\n\t\t\"D\": \"d\",\r\n\t\t\"H\": \"h\",\r\n\t\t\"K\": \"h\",\r\n\t\t\"k\": \"h\",\r\n\t\t\"n\": \"S\"\r\n\t};\r\n\r\n\tpublic _beforeChanged() {\r\n\t\tsuper._beforeChanged();\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the number as duration.\r\n\t *\r\n\t * For example `1000` (base unit seconds) would be converted to `16:40` as in\r\n\t * 16 minutes and 40 seconds.\r\n\t *\r\n\t * @param value   Value to format\r\n\t * @param format  Format to apply\r\n\t * @param base    Override base unit\r\n\t * @return Formatted number\r\n\t */\r\n\tpublic format(value: number | string, format?: string, base?: TimeUnit): string {\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// no format passed in or empty\r\n\t\tif (typeof format === \"undefined\" || format === \"\") {\r\n\t\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\t\tformat = this.get(\"durationFormat\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tformat = this.getFormat($type.toNumber(value), undefined, baseUnit);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clean format\r\n\t\tformat = $utils.cleanFormat(format!);\r\n\r\n\t\t// get format info (it will also deal with parser caching)\r\n\t\tlet info = this.parseFormat(format, baseUnit);\r\n\r\n\t\t// cast to number just in case\r\n\t\t// TODO: maybe use better casting\r\n\t\tlet source: number = Number(value);\r\n\r\n\t\t// format and replace the number\r\n\t\tlet details;\r\n\t\tif (source > this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.positive;\r\n\t\t}\r\n\t\telse if (source < this.get(\"negativeBase\")) {\r\n\t\t\tdetails = info.negative;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdetails = info.zero;\r\n\t\t}\r\n\r\n\r\n\t\t// Format\r\n\t\tlet formatted = this.applyFormat(source, details);\r\n\r\n\t\t// Apply color?\r\n\t\tif (details.color !== \"\") {\r\n\t\t\tformatted = \"[\" + details.color + \"]\" + formatted + \"[/]\";\r\n\t\t}\r\n\r\n\t\treturn formatted;\r\n\t}\r\n\r\n\t/**\r\n\t * Parses supplied format into structured object which can be used to format\r\n\t * the number.\r\n\t *\r\n\t * @param format  Format string, i.e. \"#,###.00\"\r\n\t * @param base    Override base unit\r\n\t * @return Parsed information\r\n\t */\r\n\tprotected parseFormat(format: string, base?: TimeUnit): any {\r\n\r\n\t\t// Check cache\r\n\t\t// TODO\r\n\t\t// let cached = this.getCache(format);\r\n\t\t// if (cached != null) {\r\n\t\t// \treturn cached;\r\n\t\t// }\r\n\r\n\t\t// no base unit?\r\n\t\tlet baseUnit = base || this.get(\"baseUnit\");\r\n\r\n\t\t// Initialize duration parsing info\r\n\t\tlet info = {\r\n\t\t\t\"positive\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"negative\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t},\r\n\t\t\t\"zero\": {\r\n\t\t\t\t\"color\": \"\",\r\n\t\t\t\t\"template\": \"\",\r\n\t\t\t\t\"parts\": <any>[],\r\n\t\t\t\t\"source\": \"\",\r\n\t\t\t\t\"baseUnit\": baseUnit,\r\n\t\t\t\t\"parsed\": false,\r\n\t\t\t\t\"absolute\": false\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Escape double vertical bars (that mean display one vertical bar)\r\n\t\tformat = format.replace(\"||\", $type.PLACEHOLDER2);\r\n\r\n\t\t// Split it up and deal with different formats\r\n\t\tlet parts = format.split(\"|\");\r\n\t\tinfo.positive.source = parts[0];\r\n\r\n\t\tif (typeof parts[2] === \"undefined\") {\r\n\t\t\tinfo.zero = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.zero.source = parts[2];\r\n\t\t}\r\n\r\n\t\tif (typeof parts[1] === \"undefined\") {\r\n\t\t\tinfo.negative = info.positive;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tinfo.negative.source = parts[1];\r\n\t\t}\r\n\r\n\t\t// Parse each\r\n\t\t$object.each(info, (_part, item) => {\r\n\t\t\t// Already parsed\r\n\t\t\tif (item.parsed) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Check cached\r\n\t\t\t// TODO\r\n\t\t\t// if (typeof this.getCache(item.source) !== \"undefined\") {\r\n\t\t\t// \tinfo[part] = this.getCache(item.source);\r\n\t\t\t// \treturn;\r\n\t\t\t// }\r\n\r\n\t\t\t// Begin parsing\r\n\t\t\tlet partFormat: string = item.source;\r\n\r\n\t\t\t// Check for [] directives\r\n\t\t\tlet dirs: string[] | null = [];\r\n\t\t\tdirs = item.source.match(/^\\[([^\\]]*)\\]/);\r\n\t\t\tif (dirs && dirs.length && dirs[0] !== \"\") {\r\n\t\t\t\tpartFormat = item.source.substr(dirs[0].length);\r\n\t\t\t\titem.color = dirs[1];\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Let TextFormatter split into chunks\r\n\t\t\tlet chunks = TextFormatter.chunk(partFormat, true);\r\n\t\t\tfor (let i: number = 0; i < chunks.length; i++) {\r\n\t\t\t\tlet chunk = chunks[i];\r\n\r\n\t\t\t\t// replace back double vertical bar\r\n\t\t\t\tchunk.text = chunk.text.replace($type.PLACEHOLDER2, \"|\");\r\n\r\n\t\t\t\tif (chunk.type === \"value\") {\r\n\r\n\t\t\t\t\t// Just \"Duration\"?\r\n\t\t\t\t\t// if (chunk.text.toLowerCase() === \"duration\") {\r\n\t\t\t\t\t// \tchunk.text = durationFormat;\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Check for \"a\" (absolute) modifier\r\n\t\t\t\t\tif (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {\r\n\t\t\t\t\t\titem.absolute = true;\r\n\t\t\t\t\t\tchunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, \"$1\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find all possible parts\r\n\t\t\t\t\tlet matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\t// Populate template\r\n\t\t\t\t\t\tfor (let x = 0; x < matches.length; x++) {\r\n\t\t\t\t\t\t\t// Is it an alias?\r\n\t\t\t\t\t\t\tif (matches[x] == null) {\r\n\t\t\t\t\t\t\t\tmatches[x] = this._unitAliases[matches[x]];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\titem.parts.push(matches[x]);\r\n\t\t\t\t\t\t\tchunk.text = chunk.text.replace(matches[x], $type.PLACEHOLDER);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply to template\r\n\t\t\t\titem.template += chunk.text;\r\n\t\t\t}\r\n\r\n\t\t\t// Apply style formatting\r\n\t\t\t//item.template = TextFormatter.format(item.template, this.outputFormat);\r\n\r\n\t\t\t// Save cache\r\n\t\t\t// TODO\r\n\t\t\t//this.setCache(item.source, item);\r\n\r\n\t\t\t// Mark this as parsed\r\n\t\t\titem.parsed = true;\r\n\t\t});\r\n\r\n\t\t// Save cache (the whole thing)\r\n\t\t// TODO\r\n\t\t//this.setCache(format, info);\r\n\r\n\t\treturn info;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies parsed format to a numeric value.\r\n\t *\r\n\t * @param value    Value\r\n\t * @param details  Parsed format as returned by {parseFormat}\r\n\t * @return Formatted duration\r\n\t */\r\n\tprotected applyFormat(value: number, details: any): string {\r\n\r\n\t\t// Use absolute values\r\n\t\tlet negative = !details.absolute && (value < this.get(\"negativeBase\"));\r\n\t\tvalue = Math.abs(value);\r\n\r\n\t\t// Recalculate to milliseconds\r\n\t\tlet tstamp = this.toTimeStamp(value, details.baseUnit);\r\n\r\n\t\t// Init return value\r\n\t\tlet res = details.template;\r\n\r\n\t\t// Iterate through duration parts\r\n\t\tfor (let i = 0, len = details.parts.length; i < len; i++) {\r\n\r\n\t\t\t// Gather the part\r\n\t\t\tlet part = details.parts[i];\r\n\t\t\tlet unit = this._toTimeUnit(part.substr(0, 1));\r\n\t\t\tlet digits = part.length;\r\n\r\n\t\t\t// Calculate current unit value\r\n\t\t\tlet ints = Math.floor(tstamp / this._getUnitValue(unit!));\r\n\t\t\tres = res.replace($type.PLACEHOLDER, $utils.padString(ints, digits, \"0\"));\r\n\r\n\t\t\t// Reduce timestamp\r\n\t\t\ttstamp -= ints * this._getUnitValue(unit!);\r\n\t\t}\r\n\r\n\t\t// Reapply negative sign\r\n\t\tif (negative) {\r\n\t\t\tres = \"-\" + res;\r\n\t\t}\r\n\r\n\t\treturn res;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts numeric value to timestamp in milliseconds.\r\n\t *\r\n\t * @param value     A source value\r\n\t * @param baseUnit  Base unit the source value is in: \"q\", \"s\", \"i\", \"h\", \"d\", \"w\", \"m\", \"y\"\r\n\t * @return Value representation as a timestamp in milliseconds\r\n\t */\r\n\tpublic toTimeStamp(value: number, baseUnit: TimeUnit): number {\r\n\t\treturn value * this._getUnitValue(baseUnit);\r\n\t}\r\n\r\n\tprotected _toTimeUnit(code: string): TimeUnit | undefined {\r\n\t\tswitch (code) {\r\n\t\t\tcase \"S\":\r\n\t\t\t\treturn \"millisecond\";\r\n\t\t\tcase \"s\":\r\n\t\t\t\treturn \"second\";\r\n\t\t\tcase \"m\":\r\n\t\t\t\treturn \"minute\";\r\n\t\t\tcase \"h\":\r\n\t\t\t\treturn \"hour\";\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn \"day\";\r\n\t\t\tcase \"w\":\r\n\t\t\t\treturn \"week\";\r\n\t\t\tcase \"M\":\r\n\t\t\t\treturn \"month\";\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn \"year\";\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Returns appropriate default format for the value.\r\n\t *\r\n\t * If `maxValue` is sepcified, it will use that value to determine the time\r\n\t * unit for the format.\r\n\t *\r\n\t * For example if your `baseUnit` is `\"second\"` and you pass in `10`, you\r\n\t * will get `\"10\"`.\r\n\t *\r\n\t * However, you might want it to be formatted in the context of bigger scale,\r\n\t * say 10 minutes (600 seconds). If you pass in `600` as `maxValue`, all\r\n\t * values, including small ones will use format with minutes, e.g.:\r\n\t * `00:10`, `00:50`, `12: 30`, etc.\r\n\t *\r\n\t * @param value     Value to format\r\n\t * @param maxValue  Maximum value to be used to determine format\r\n\t * @param baseUnit  Base unit of the value\r\n\t * @return Format\r\n\t */\r\n\tpublic getFormat(value: number, maxValue?: number, baseUnit?: TimeUnit): string {\r\n\r\n\t\t// Is format override set?\r\n\t\tif (this.get(\"durationFormat\") != null) {\r\n\t\t\treturn this.get(\"durationFormat\")!;\r\n\t\t}\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\tif (maxValue != null && value != maxValue) {\r\n\t\t\tvalue = Math.abs(value);\r\n\t\t\tmaxValue = Math.abs(maxValue);\r\n\t\t\tlet maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);\r\n\t\t\t//let diffUnit = this.getValueUnit(Math.abs(maxValue - value), baseUnit);\r\n\t\t\t//console.log(maxUnit, diffUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][maxUnit!];\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet unit = this.getValueUnit(value, baseUnit);\r\n\t\t\treturn (<any>this.get(\"durationFormats\"))[baseUnit!][unit!];\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns value's closest denominator time unit, e.g 100 seconds is\r\n\t * `\"minute\"`, while 59 seconds would still be `second`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Denominator\r\n\t */\r\n\tpublic getValueUnit(value: number, baseUnit?: TimeUnit): TimeUnit | undefined {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\t// Convert to milliseconds\r\n\t\tlet currentUnit: any;\r\n\t\tlet ms = this.getMilliseconds(value, baseUnit);\r\n\t\t$object.eachContinue(this._getUnitValues(), (key, val) => {\r\n\t\t\tif (key == baseUnit || currentUnit) {\r\n\t\t\t\tlet num = ms / val;\r\n\t\t\t\tif (num <= 1) {\r\n\t\t\t\t\tif (!currentUnit) {\r\n\t\t\t\t\t\tcurrentUnit = key;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentUnit = key;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn currentUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts value to milliseconds according to `baseUnit`.\r\n\t *\r\n\t * @param value     Source duration value\r\n\t * @param baseUnit  Base unit\r\n\t * @return Value in milliseconds\r\n\t */\r\n\tpublic getMilliseconds(value: number, baseUnit?: TimeUnit): number {\r\n\r\n\t\t// Get base unit\r\n\t\tif (!baseUnit) {\r\n\t\t\tbaseUnit = this.get(\"baseUnit\");\r\n\t\t}\r\n\r\n\t\treturn value * this._getUnitValue(baseUnit!);\r\n\t}\r\n\r\n\tprotected _getUnitValue(timeUnit: TimeUnit): number {\r\n\t\treturn this._getUnitValues()[timeUnit];\r\n\t}\r\n\r\n\tprotected _getUnitValues(): any {\r\n\t\treturn {\r\n\t\t\t\"millisecond\": 1,\r\n\t\t\t\"second\": 1000,\r\n\t\t\t\"minute\": 60000,\r\n\t\t\t\"hour\": 3600000,\r\n\t\t\t\"day\": 86400000,\r\n\t\t\t\"week\": 604800000,\r\n\t\t\t\"month\": 2592000000,\r\n\t\t\t\"year\": 31536000000,\r\n\t\t};\r\n\t}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}