{"ast":null,"code":"/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @hidden\r\n */\n\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n */\nexport function isNaN(value) {\n  return Number(value) !== value;\n}\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n * @ignore\r\n */\n\nexport function getType(value) {\n  return {}.toString.call(value);\n}\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\n\nexport function toNumber(value) {\n  if (value != null && !isNumber(value)) {\n    var converted = Number(value);\n\n    if (isNaN(converted) && isString(value) && value != \"\") {\n      return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n    }\n\n    return converted;\n  }\n\n  return value;\n}\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\n\nexport function toDate(value) {\n  if (isDate(value)) {\n    // TODO maybe don't create a new Date ?\n    return new Date(value);\n  } else if (isNumber(value)) {\n    return new Date(value);\n  } else {\n    // Try converting to number (assuming timestamp)\n    var num = Number(value);\n\n    if (!isNumber(num)) {\n      return new Date(value);\n    } else {\n      return new Date(num);\n    }\n  }\n}\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\n\nexport function numberToString(value) {\n  // TODO handle Infinity and -Infinity\n  if (isNaN(value)) {\n    return \"NaN\";\n  }\n\n  if (value === Infinity) {\n    return \"Infinity\";\n  }\n\n  if (value === -Infinity) {\n    return \"-Infinity\";\n  } // Negative 0\n\n\n  if (value === 0 && 1 / value === -Infinity) {\n    return \"-0\";\n  } // Preserve negative and deal with absoute values\n\n\n  var negative = value < 0;\n  value = Math.abs(value); // TODO test this\n\n  var parsed = /^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value);\n  var digits = parsed[1];\n  var decimals = parsed[2] || \"\";\n  var res; // Leave the nummber as it is if it does not use exponents\n\n  if (parsed[3] === undefined) {\n    res = decimals === \"\" ? digits : digits + \".\" + decimals;\n  } else {\n    var exponent = +parsed[3]; // Deal with decimals\n\n    if (value < 1) {\n      var zeros = exponent - 1;\n      res = \"0.\" + repeat(\"0\", zeros) + digits + decimals; // Deal with integers\n    } else {\n      var zeros = exponent - decimals.length;\n\n      if (zeros === 0) {\n        res = digits + decimals;\n      } else if (zeros < 0) {\n        res = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n      } else {\n        res = digits + decimals + repeat(\"0\", zeros);\n      }\n    }\n  }\n\n  return negative ? \"-\" + res : res;\n}\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\n\nexport function repeat(string, amount) {\n  return new Array(amount + 1).join(string);\n}\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\n\nexport function isDate(value) {\n  return getType(value) === \"[object Date]\";\n}\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\n\nexport function isString(value) {\n  return typeof value === \"string\";\n}\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\n\nexport function isNumber(value) {\n  return typeof value === \"number\" && Number(value) == value;\n}\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\n\nexport function isObject(value) {\n  return typeof value === \"object\" && value !== null;\n}\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n/**\r\n * ============================================================================\r\n * STATIC CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * @ignore Exclude from docs\r\n */\n\nexport var PLACEHOLDER = \"__§§§__\";\n/**\r\n * @ignore Exclude from docs\r\n */\n\nexport var PLACEHOLDER2 = \"__§§§§__\";","map":{"version":3,"mappings":"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","names":["isNaN","value","Number","getType","toString","call","toNumber","isNumber","converted","isString","replace","toDate","isDate","Date","num","numberToString","Infinity","negative","Math","abs","parsed","exec","digits","decimals","res","undefined","exponent","zeros","repeat","length","slice","string","amount","Array","join","isObject","isArray","PLACEHOLDER","PLACEHOLDER2"],"sourceRoot":"","sources":["../../../../../src/.internal/core/util/Type.ts"],"sourcesContent":["/**\n * A collection of utility functions for various type checks and conversion\n * @hidden\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\n/**\n * ============================================================================\n * MISC\n * ============================================================================\n * @hidden\n */\n\ntype Cond<T, Keys extends keyof T> = Keys extends never\n\t? never\n\t: { [K in Keys]: T[K] };\n\ntype Never<T> = T extends undefined ? never : T;\n\n/**\n * Selects all the keys of T which have a value of U.\n */\nexport type SelectKeys<T, U> = Never<{ [K in keyof T]: T[K] extends U ? K : never }[keyof T]>;\n\n/**\n * Creates a new type which is the same as T except it only has the properties of type U.\n */\nexport type Select<T, U> = Cond<T, SelectKeys<T, U>>;\n\n\n/**\n * @todo Description\n * @ignore Exclude from docs\n */\nexport type Public<T> = { [P in keyof T]: T[P] };\n\n\n/**\n * `Keyof<T>` is the same as `keyof T` except it only accepts string keys, not numbers or symbols.\n */\nexport type Keyof<T> = Extract<keyof T, string>;\n\n\n\n/**\n * ============================================================================\n * TYPE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Returns `true` if value is not a number (NaN).\n *\n * @param value Input value\n * @return Is NaN?\n */\nexport function isNaN(value: number): boolean {\n\treturn Number(value) !== value;\n}\n\n/**\n * Represents a type for all available JavaScript variable types.\n */\nexport type Type\n\t= \"[object Object]\"\n\t| \"[object Array]\"\n\t| \"[object String]\"\n\t| \"[object Number]\"\n\t| \"[object Boolean]\"\n\t| \"[object Date]\";\n\n/**\n * Returns a type of the value.\n *\n * @param value  Input value\n * @return Type of the value\n * @ignore\n */\nexport function getType<A>(value: A): Type {\n\treturn ({}).toString.call(value) as Type;\n}\n\n\n/**\n * ============================================================================\n * QUICK CONVERSION\n * ============================================================================\n * @hidden\n */\n\n\n/**\n * Converts any value into a `number`.\n *\n * @param value  Source value\n * @return Number representation of value\n */\nexport function toNumber(value: any): number {\n\tif (value != null && !isNumber(value)) {\n\t\tlet converted = Number(value);\n\t\tif (isNaN(converted) && isString(value) && value != \"\") {\n\t\t\treturn toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n\t\t}\n\t\treturn converted;\n\t}\n\treturn value;\n}\n\n\n\n/**\n * Converts anything to Date object.\n *\n * @param value  A value of any type\n * @return Date object representing a value\n */\nexport function toDate(value: Date | number | string): Date {\n\tif (isDate(value)) {\n\t\t// TODO maybe don't create a new Date ?\n\t\treturn new Date(value);\n\t}\n\n\telse if (isNumber(value)) {\n\t\treturn new Date(value);\n\t}\n\n\telse {\n\t\t// Try converting to number (assuming timestamp)\n\t\tlet num = Number(value);\n\n\t\tif (!isNumber(num)) {\n\t\t\treturn new Date(value);\n\t\t}\n\t\telse {\n\t\t\treturn new Date(num);\n\t\t}\n\t}\n}\n\n/**\n * Converts numeric value into string. Deals with large or small numbers that\n * would otherwise use exponents.\n *\n * @param value  Numeric value\n * @return Numeric value as string\n */\nexport function numberToString(value: number): string {\n\t// TODO handle Infinity and -Infinity\n\tif (isNaN(value)) {\n\t\treturn \"NaN\";\n\t}\n\n\tif (value === Infinity) {\n\t\treturn \"Infinity\";\n\t}\n\n\tif (value === -Infinity) {\n\t\treturn \"-Infinity\";\n\t}\n\n\t// Negative 0\n\tif ((value === 0) && (1 / value === -Infinity)) {\n\t\treturn \"-0\";\n\t}\n\n\t// Preserve negative and deal with absoute values\n\tlet negative = value < 0;\n\n\tvalue = Math.abs(value);\n\n\t// TODO test this\n\tlet parsed = /^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value)!;\n\tlet digits = parsed[1];\n\tlet decimals = parsed[2] || \"\";\n\n\tlet res: string;\n\n\t// Leave the nummber as it is if it does not use exponents\n\tif (parsed[3] === undefined) {\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\n\n\t} else {\n\t\tlet exponent = +parsed[3];\n\n\t\t// Deal with decimals\n\t\tif (value < 1) {\n\t\t\tlet zeros = exponent - 1;\n\n\t\t\tres = \"0.\" + repeat(\"0\", zeros) + digits + decimals;\n\n\t\t\t// Deal with integers\n\t\t} else {\n\t\t\tlet zeros = exponent - decimals.length;\n\n\t\t\tif (zeros === 0) {\n\t\t\t\tres = digits + decimals;\n\n\t\t\t} else if (zeros < 0) {\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n\n\t\t\t} else {\n\t\t\t\tres = digits + decimals + repeat(\"0\", zeros);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn negative ? \"-\" + res : res;\n}\n\n/**\n * Repeats a `string` number of times as set in `amount`.\n *\n * @ignore Exclude from docs\n * @todo Make this faster\n * @param string  Source string\n * @param amount  Number of times to repeat string\n * @return New string\n */\nexport function repeat(string: string, amount: number): string {\n  return new Array(amount + 1).join(string);\n}\n\n\n/**\n * ============================================================================\n * VALUE PRESENCE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines an optional value that can be of any type or `undefined`.\n */\nexport type Optional<A> = A | undefined;\n\n\n/**\n * ============================================================================\n * TYPE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Checks if parameter is `Date`.\n *\n * @param value  Input value\n * @return Is Date?\n */\nexport function isDate(value: any): value is Date {\n\treturn getType(value) === \"[object Date]\";\n}\n\n/**\n * Checks if parameter is `string`.\n *\n * @param value  Input value\n * @return Is string?\n */\nexport function isString(value: any): value is string {\n\treturn typeof value === \"string\";\n}\n\n/**\n * Checks if parameter is `number`.\n *\n * @param value  Input value\n * @return Is number?\n */\nexport function isNumber(value: any): value is number {\n\treturn typeof value === \"number\" && Number(value) == value;\n}\n\n/**\n * Checks if parameter is `object`.\n *\n * @param value  Input value\n * @return Is object?\n */\nexport function isObject(value: any): value is object {\n\treturn typeof value === \"object\" && value !== null;\n}\n\n/**\n * Checks if parameter is `Array`.\n *\n * @param value  Input value\n * @return Is Array?\n */\nexport function isArray(value: any): value is Array<unknown> {\n\treturn Array.isArray(value);\n}\n\n\n/**\n * ============================================================================\n * STATIC CONSTANTS\n * ============================================================================\n * @hidden\n */\n\n\n/**\n * @ignore Exclude from docs\n */\nexport const PLACEHOLDER: string = \"__§§§__\";\n\n/**\n * @ignore Exclude from docs\n */\nexport const PLACEHOLDER2: string = \"__§§§§__\";"]},"metadata":{},"sourceType":"module"}