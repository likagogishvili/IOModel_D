{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Sprite } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\nimport * as $array from \"../util/Array\";\n/**\r\n * @ignore Text is an internal class. Use Label instead.\r\n */\n\nvar Text =\n/** @class */\nfunction (_super) {\n  __extends(Text, _super);\n\n  function Text() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"textStyle\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeTextStyle()\n    });\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeText(\"\", _this.textStyle)\n    });\n    Object.defineProperty(_this, \"_textStyles\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"textAlign\", \"fontFamily\", \"fontSize\", \"fontStyle\", \"fontWeight\", \"fontStyle\", \"fontVariant\", \"textDecoration\", \"shadowColor\", \"shadowBlur\", \"shadowOffsetX\", \"shadowOffsetY\", \"shadowOpacity\", // \"leading\",\n      // \"letterSpacing\",\n      \"lineHeight\", \"baselineRatio\", //\"padding\",\n      // \"stroke\",\n      // \"strokeThickness\",\n      // \"trim\",\n      // \"wordWrap\",\n      \"direction\", \"textBaseline\", \"oversizedBehavior\", \"breakWords\", \"ellipsis\", \"minScale\"]\n    });\n    Object.defineProperty(_this, \"_originalScale\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Text.prototype, \"_updateBounds\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      if (!this.get(\"text\")) {\n        var newBounds = {\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0\n        };\n        this._adjustedLocalBounds = newBounds;\n      } else {\n        _super.prototype._updateBounds.call(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var _this = this;\n\n      _super.prototype._changed.call(this);\n\n      this._display.clear();\n\n      var textStyle = this.textStyle;\n\n      if (this.isDirty(\"opacity\")) {\n        var opacity = this.get(\"opacity\", 1);\n        this._display.alpha = opacity;\n      }\n\n      if (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n        this._display.text = this._getText();\n        this.markDirtyBounds();\n\n        if (this.get(\"role\") == \"tooltip\") {\n          this._root.updateTooltip(this);\n        }\n      }\n\n      if (this.isDirty(\"width\")) {\n        textStyle.wordWrapWidth = this.width();\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"oversizedBehavior\")) {\n        textStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"breakWords\")) {\n        textStyle.breakWords = this.get(\"breakWords\", false);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"ellipsis\")) {\n        textStyle.ellipsis = this.get(\"ellipsis\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"ignoreFormatting\")) {\n        textStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"minScale\")) {\n        textStyle.minScale = this.get(\"minScale\", 0);\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"fill\")) {\n        var fill = this.get(\"fill\");\n\n        if (fill) {\n          textStyle.fill = fill;\n        }\n      }\n\n      if (this.isDirty(\"maxWidth\")) {\n        textStyle.maxWidth = this.get(\"maxWidth\");\n        this.markDirtyBounds();\n      }\n\n      if (this.isDirty(\"maxHeight\")) {\n        textStyle.maxHeight = this.get(\"maxHeight\");\n        this.markDirtyBounds();\n      }\n\n      $array.each(this._textStyles, function (styleName) {\n        if (_this._dirty[styleName]) {\n          textStyle[styleName] = _this.get(styleName);\n\n          _this.markDirtyBounds();\n        }\n      });\n      textStyle[\"fontSize\"] = this.get(\"fontSize\");\n      textStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n      this._display.style = textStyle;\n\n      if (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_getText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var text = this.get(\"text\", \"\");\n      return this.get(\"populateText\") ? populateString(this, text) : text;\n    }\n  });\n  Object.defineProperty(Text.prototype, \"markDirtyText\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      this._display.text = this._getText();\n\n      if (this.get(\"role\") == \"tooltip\") {\n        this._root.updateTooltip(this);\n      }\n\n      this.markDirtyBounds();\n      this.markDirty();\n    }\n  });\n  Object.defineProperty(Text.prototype, \"_setDataItem\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (dataItem) {\n      _super.prototype._setDataItem.call(this, dataItem);\n\n      if (this.get(\"populateText\")) {\n        this.markDirtyText();\n      }\n    }\n  });\n  Object.defineProperty(Text, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Text\"\n  });\n  Object.defineProperty(Text, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Sprite.classNames.concat([Text.className])\n  });\n  return Text;\n}(Sprite);\n\nexport { Text };","map":{"version":3,"mappings":"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","names":["Sprite","populateString","$array","__extends","Object","_this","_root","_renderer","makeTextStyle","makeText","textStyle","get","newBounds","left","right","top","bottom","_adjustedLocalBounds","_super","_updateBounds","call","_changed","_display","clear","isDirty","opacity","alpha","text","_getText","markDirtyBounds","updateTooltip","wordWrapWidth","width","oversizedBehavior","breakWords","ellipsis","ignoreFormatting","minScale","fill","maxWidth","maxHeight","each","_textStyles","styleName","_dirty","style","markDirty","dataItem","_setDataItem","markDirtyText","classNames","concat","Text","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/Text.ts"],"sourcesContent":["import type { Color } from \"../util/Color\";\nimport type { Percent } from \"../util/Percent\";\nimport type { IText } from \"./backend/Renderer\";\nimport type { IBounds } from \"../util/IBounds\";\nimport type { DataItem, IComponentDataItem } from \"./Component\";\n\nimport { Sprite, ISpriteSettings, ISpritePrivate } from \"./Sprite\";\nimport { populateString } from \"../util/PopulateString\";\n\nimport * as $array from \"../util/Array\";\n\n/**\n * @ignore Text is an internal class. Use Label instead.\n */\nexport interface ITextSettings extends ISpriteSettings {\n\ttext?: string;\n\tfill?: Color;\n\ttextAlign?: \"start\" | \"end\" | \"left\" | \"right\" | \"center\";\n\tfontFamily?: string;\n\tfontSize?: string | number;\n\tfontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\" | \"100\" | \"200\" | \"300\" | \"400\" | \"500\" | \"600\" | \"700\" | \"800\" | \"900\"\n\tfontStyle?: \"normal\" | \"italic\" | \"oblique\";\n\tfontVariant?: \"normal\" | \"small-caps\";\n\ttextDecoration?: \"underline\";\n\tshadowColor?: Color | null;\n\tshadowBlur?: number;\n\tshadowOffsetX?: number;\n\tshadowOffsetY?: number;\n\tshadowOpacity?: number;\n\t// leading?: number;\n\t// letterSpacing?: number;\n\tlineHeight?: Percent | number;\n\tbaselineRatio?: number;\n\t// stroke?: number;\n\t// strokeThickness?: number;\n\t// trim?: number;\n\t// wordWrap?: boolean;\n\topacity?: number;\n\tdirection?: \"ltr\" | \"rtl\";\n\ttextBaseline?: \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\n\toversizedBehavior?: \"none\" | \"hide\" | \"fit\" | \"wrap\" | \"truncate\";\n\tbreakWords?: boolean;\n\tellipsis?: string;\n\tminScale?: number;\n\tpopulateText?: boolean;\n\tignoreFormatting?: boolean;\n}\n\n/**\n * @ignore\n */\nexport interface ITextPrivate extends ISpritePrivate {\n\n\t/**\n\t * @ignore\n\t */\n\ttooltipElement?: HTMLDivElement;\n\n}\n\n/**\n * @ignore Text is an internal class. Use Label instead.\n */\nexport class Text extends Sprite {\n\n\tdeclare public _settings: ITextSettings;\n\tdeclare public _privateSettings: ITextPrivate;\n\n\tpublic textStyle = this._root._renderer.makeTextStyle();\n\n\tpublic _display: IText = this._root._renderer.makeText(\"\", this.textStyle);\n\n\tprotected _textStyles: Array<keyof ITextSettings> = [\n\t\t\"textAlign\",\n\t\t\"fontFamily\",\n\t\t\"fontSize\",\n\t\t\"fontStyle\",\n\t\t\"fontWeight\",\n\t\t\"fontStyle\",\n\t\t\"fontVariant\",\n\t\t\"textDecoration\",\n\t\t\"shadowColor\",\n\t\t\"shadowBlur\",\n\t\t\"shadowOffsetX\",\n\t\t\"shadowOffsetY\",\n\t\t\"shadowOpacity\",\n\t\t// \"leading\",\n\t\t// \"letterSpacing\",\n\t\t\"lineHeight\",\n\t\t\"baselineRatio\",\n\t\t//\"padding\",\n\t\t// \"stroke\",\n\t\t// \"strokeThickness\",\n\t\t// \"trim\",\n\t\t// \"wordWrap\",\n\t\t\"direction\",\n\t\t\"textBaseline\",\n\t\t\"oversizedBehavior\",\n\t\t\"breakWords\",\n\t\t\"ellipsis\",\n\t\t\"minScale\"\n\t];\n\n\tprotected _originalScale: number | undefined;\n\n\tpublic static className: string = \"Text\";\n\tpublic static classNames: Array<string> = Sprite.classNames.concat([Text.className]);\n\n\tpublic _updateBounds(): void {\n\t\tif (!this.get(\"text\")) {\n\n\t\t\tlet newBounds: IBounds = {\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0,\n\t\t\t};\n\t\t\tthis._adjustedLocalBounds = newBounds;\n\t\t}\n\t\telse {\n\t\t\tsuper._updateBounds();\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tthis._display.clear();\n\n\t\tlet textStyle = <any>this.textStyle;\n\n\t\tif (this.isDirty(\"opacity\")) {\n\t\t\tlet opacity = this.get(\"opacity\", 1);\n\t\t\tthis._display.alpha = opacity;\n\t\t}\n\n\t\tif (this.isDirty(\"text\") || this.isDirty(\"populateText\")) {\n\t\t\tthis._display.text = this._getText();\n\n\t\t\tthis.markDirtyBounds();\n\t\t\tif (this.get(\"role\") == \"tooltip\") {\n\t\t\t\tthis._root.updateTooltip(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"width\")) {\n\t\t\ttextStyle.wordWrapWidth = this.width();\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"oversizedBehavior\")) {\n\t\t\ttextStyle.oversizedBehavior = this.get(\"oversizedBehavior\", \"none\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"breakWords\")) {\n\t\t\ttextStyle.breakWords = this.get(\"breakWords\", false);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"ellipsis\")) {\n\t\t\ttextStyle.ellipsis = this.get(\"ellipsis\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"ignoreFormatting\")) {\n\t\t\ttextStyle.ignoreFormatting = this.get(\"ignoreFormatting\", false);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"minScale\")) {\n\t\t\ttextStyle.minScale = this.get(\"minScale\", 0);\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tlet fill = this.get(\"fill\");\n\t\t\tif (fill) {\n\t\t\t\ttextStyle.fill = fill;\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"maxWidth\")) {\n\t\t\ttextStyle.maxWidth = this.get(\"maxWidth\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\tif (this.isDirty(\"maxHeight\")) {\n\t\t\ttextStyle.maxHeight = this.get(\"maxHeight\");\n\t\t\tthis.markDirtyBounds();\n\t\t}\n\n\t\t$array.each(this._textStyles, (styleName) => {\n\t\t\tif (this._dirty[styleName]) {\n\t\t\t\ttextStyle[styleName] = this.get(styleName);\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t}\n\t\t})\n\n\t\ttextStyle[\"fontSize\"] = this.get(\"fontSize\");\n\t\ttextStyle[\"fontFamily\"] = this.get(\"fontFamily\");\n\t\tthis._display.style = textStyle;\n\n\t\tif (this.isDirty(\"role\") && this.get(\"role\") == \"tooltip\") {\n\t\t\tthis._root.updateTooltip(this);\n\t\t}\n\t}\n\n\tpublic _getText(): string {\n\t\tconst text = this.get(\"text\", \"\");\n\t\treturn this.get(\"populateText\") ? populateString(this, text) : text;\n\t}\n\n\tpublic markDirtyText(): void {\n\t\tthis._display.text = this._getText();\n\t\tif (this.get(\"role\") == \"tooltip\") {\n\t\t\tthis._root.updateTooltip(this);\n\t\t}\n\t\tthis.markDirtyBounds();\n\t\tthis.markDirty();\n\t}\n\n\tpublic _setDataItem(dataItem?: DataItem<IComponentDataItem>): void {\n\t\tsuper._setDataItem(dataItem);\n\t\tif (this.get(\"populateText\")) {\n\t\t\tthis.markDirtyText();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}