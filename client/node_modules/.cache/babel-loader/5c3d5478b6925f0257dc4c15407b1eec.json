{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Gradient } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\n/**\r\n * Radial gradient.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\r\n */\n\nvar RadialGradient =\n/** @class */\nfunction (_super) {\n  __extends(RadialGradient, _super);\n\n  function RadialGradient() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @ignore\r\n   */\n\n\n  Object.defineProperty(RadialGradient.prototype, \"getFill\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (target) {\n      var bounds = this.getBounds(target);\n      var x = 0;\n      var y = 0;\n      var l = bounds.left || 0;\n      var r = bounds.right || 0;\n      var t = bounds.top || 0;\n      var b = bounds.bottom || 0;\n      var width = r - l;\n      var height = b - t;\n      var radius = target.get(\"radius\");\n\n      if ($type.isNumber(radius)) {\n        x = 0;\n        y = 0;\n      } else {\n        radius = Math.min(width, height) / 2;\n        x = width / 2;\n        y = height / 2;\n      }\n\n      var gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\n      var stops = this.get(\"stops\");\n\n      if (stops) {\n        var i_1 = 0;\n        $array.each(stops, function (stop) {\n          var offset = stop.offset;\n\n          if (!$type.isNumber(offset)) {\n            offset = i_1 / (stops.length - 1);\n          }\n\n          var opacity = stop.opacity;\n\n          if (!$type.isNumber(opacity)) {\n            opacity = 1;\n          }\n\n          var color = stop.color;\n\n          if (color) {\n            var lighten = stop.lighten;\n\n            if (lighten) {\n              color = Color.lighten(color, lighten);\n            }\n\n            var brighten = stop.brighten;\n\n            if (brighten) {\n              color = Color.brighten(color, brighten);\n            }\n\n            gradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n          }\n\n          i_1++;\n        });\n      }\n\n      return gradient;\n    }\n  });\n  Object.defineProperty(RadialGradient, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"RadialGradient\"\n  });\n  Object.defineProperty(RadialGradient, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Gradient.classNames.concat([RadialGradient.className])\n  });\n  return RadialGradient;\n}(Gradient);\n\nexport { RadialGradient };","map":{"version":3,"mappings":"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","names":["Gradient","Color","$array","$type","__extends","target","bounds","getBounds","x","y","l","left","r","right","t","top","b","bottom","width","height","radius","get","isNumber","Math","min","gradient","_root","_renderer","createRadialGradient","stops","i_1","each","stop","offset","length","opacity","color","lighten","brighten","addColorStop","g","Object","classNames","concat","RadialGradient","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/render/gradients/RadialGradient.ts"],"sourcesContent":["import type { IGradient } from \"../backend/Renderer\";\nimport type { Sprite } from \"../Sprite\";\nimport type { Percent } from \"../../util/Percent\";\n\nimport { Gradient, IGradientSettings, IGradientPrivate } from \"./Gradient\";\nimport { Color } from \"../../util/Color\";\n\nimport * as $array from \"../../util/Array\";\nimport * as $type from \"../../util/Type\";\n\n\nexport interface IRadialGradientSettings extends IGradientSettings {\n\n\t/**\n\t * Gradient radius in pixels or percent (relative to the `target`).\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * X position.\n\t */\n\tx?: number | Percent;\n\n\t/**\n\t * Y position.\n\t */\n\ty?: number | Percent;\n\n}\n\nexport interface IRadialGradientPrivate extends IGradientPrivate {\n}\n\n/**\n * Radial gradient.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/gradients/} for more info\n */\nexport class RadialGradient extends Gradient {\n\n\tdeclare public _settings: IRadialGradientSettings;\n\tdeclare public _privateSettings: IRadialGradientPrivate;\n\n\tpublic static className: string = \"RadialGradient\";\n\tpublic static classNames: Array<string> = Gradient.classNames.concat([RadialGradient.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getFill(target: Sprite): IGradient {\n\t\tconst bounds = this.getBounds(target);\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tlet l = bounds.left || 0;\n\t\tlet r = bounds.right || 0;\n\t\tlet t = bounds.top || 0;\n\t\tlet b = bounds.bottom || 0;\n\n\t\tconst width = r - l;\n\t\tconst height = b - t;\n\n\t\tlet radius = target.get(\"radius\" as any);\n\t\tif ($type.isNumber(radius)) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\t\telse {\n\t\t\tradius = Math.min(width, height) / 2;\n\t\t\tx = width / 2;\n\t\t\ty = height / 2;\n\t\t}\n\n\t\tconst gradient = this._root._renderer.createRadialGradient(x, y, 0, x, y, radius);\n\t\tconst stops = this.get(\"stops\")!;\n\t\tif (stops) {\n\t\t\tlet i = 0;\n\t\t\t$array.each(stops, (stop) => {\n\n\t\t\t\tlet offset = stop.offset;\n\n\t\t\t\tif (!$type.isNumber(offset)) {\n\t\t\t\t\toffset = i / (stops.length - 1);\n\t\t\t\t}\n\n\t\t\t\tlet opacity = stop.opacity;\n\n\t\t\t\tif (!$type.isNumber(opacity)) {\n\t\t\t\t\topacity = 1;\n\t\t\t\t}\n\n\t\t\t\tlet color = stop.color;\n\n\t\t\t\tif (color) {\n\n\t\t\t\t\tconst lighten = stop.lighten;\n\t\t\t\t\tif (lighten) {\n\t\t\t\t\t\tcolor = Color.lighten(color, lighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tconst brighten = stop.brighten;\n\t\t\t\t\tif (brighten) {\n\t\t\t\t\t\tcolor = Color.brighten(color, brighten)\n\t\t\t\t\t}\n\n\t\t\t\t\tgradient.addColorStop(offset, 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + opacity + ')');\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t})\n\t\t}\n\n\t\treturn gradient\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}