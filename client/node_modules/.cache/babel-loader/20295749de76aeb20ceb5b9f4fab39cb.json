{"ast":null,"code":"/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { AxisRendererY } from \"./AxisRendererY\";\nimport { CategoryAxis } from \"./CategoryAxis\";\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\nimport { Percent, percent } from \"../../core/utils/Percent\";\nimport { registry } from \"../../core/Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport * as $type from \"../../core/utils/Type\";\nimport { AxisBullet } from \"./AxisBullet\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * A renderer for radial axis.\r\n */\n\nvar AxisRendererRadial =\n/** @class */\nfunction (_super) {\n  __extends(AxisRendererRadial, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param axis Related axis\r\n   */\n\n\n  function AxisRendererRadial() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * A related chart.\r\n     */\n\n\n    _this._chart = new MutableValueDisposer();\n    /**\r\n     * @ignore\r\n     */\n\n    _this.pixelRadiusReal = 0;\n    _this.className = \"AxisRendererRadial\";\n    _this.isMeasured = false;\n    _this.startAngle = -90;\n    _this.endAngle = 270;\n    _this.minGridDistance = 30;\n    _this.gridType = \"circles\";\n    _this.axisAngle = -90;\n    _this.isMeasured = false;\n    _this.layout = \"none\";\n    _this.radius = percent(100);\n    _this.line.strokeOpacity = 0;\n    _this.labels.template.horizontalCenter = \"middle\";\n\n    _this._disposers.push(_this._chart);\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Validates Axis renderer.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart && this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n\n  Object.defineProperty(AxisRendererRadial.prototype, \"axisLength\", {\n    /**\r\n     * Returns actual length of the Axis, in pixels.\r\n     *\r\n     * @return Length (px)\r\n     */\n    get: function () {\n      return this.pixelRadius - this.pixelInnerRadius;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"radius\", {\n    /**\r\n     * @return Outer radius\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"radius\");\n    },\n\n    /**\r\n     * Outer radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"radius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"pixelRadius\", {\n    /**\r\n     * Outer radius in pixels.\r\n     *\r\n     * @return Outer radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"innerRadius\", {\n    /**\r\n     * @return Inner radius\r\n     */\n    get: function () {\n      var chart = this.chart;\n      var innerRadius = this.getPropertyValue(\"innerRadius\");\n\n      if (chart) {\n        if (!$type.hasValue(innerRadius)) {\n          innerRadius = chart.innerRadius;\n\n          if (innerRadius instanceof Percent && chart) {\n            innerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100);\n          }\n        } else {\n          if (innerRadius instanceof Percent && chart) {\n            var mr = chart.mr;\n            var value = innerRadius.value;\n            value = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\n            innerRadius = percent(value * 100);\n          }\n        }\n      }\n\n      return innerRadius;\n    },\n\n    /**\r\n     * Inner radius of the axis.\r\n     *\r\n     * Can be absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Outer radius\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"pixelInnerRadius\", {\n    /**\r\n     * Inner radius in pixels.\r\n     *\r\n     * @return Inner radius (px)\r\n     */\n    get: function () {\n      return $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position on axis to point coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @param position2  Position (0-1) Position on the second axis\r\n   * @return Point\r\n   */\n\n  AxisRendererRadial.prototype.positionToPoint = function (position, position2) {\n    var radius = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\n    return {\n      x: radius * $math.cos(this.axisAngle),\n      y: radius * $math.sin(this.axisAngle)\n    };\n  };\n  /**\r\n   * Updates and positions the axis line element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.updateAxisLine = function () {\n    this.line.path = $path.moveTo({\n      x: this.pixelInnerRadius * $math.cos(this.axisAngle),\n      y: this.pixelInnerRadius * $math.sin(this.axisAngle)\n    }) + $path.lineTo({\n      x: this.pixelRadius * $math.cos(this.axisAngle),\n      y: this.pixelRadius * $math.sin(this.axisAngle)\n    });\n    var title = this.axis.title;\n    title.valign = \"none\";\n    title.horizontalCenter = \"middle\";\n    title.verticalCenter = \"bottom\";\n    title.y = -this.axisLength / 2;\n    var rotation = 90;\n\n    if (this.opposite) {\n      if (!this.inside) {\n        rotation = -90;\n      }\n    } else {\n      if (this.inside) {\n        rotation = -90;\n      }\n    }\n\n    title.rotation = rotation;\n  };\n  /**\r\n   * Updates and positions a grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param grid         Grid element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateGridElement = function (grid, position, endPosition) {\n    position = position + (endPosition - position) * grid.location;\n    var point = this.positionToPoint(position);\n    var path;\n    var radius = $math.getDistance(point);\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var chart = this.chart;\n\n    if ($type.isNumber(radius) && grid.element && chart) {\n      var xAxis = chart.xAxes.getIndex(0);\n      var count = 0;\n      var series = chart.series.getIndex(0);\n\n      if (series) {\n        count = series.dataItems.length;\n      } // polygons are only possible if x axis is present\n      // @todo: review this\n\n\n      if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\n        var gridLocation = xAxis.renderer.grid.template.location;\n        var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\n        path = $path.moveTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n\n        for (var i = 1; i < count; i++) {\n          angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n          path += $path.lineTo({\n            x: radius * $math.cos(angle),\n            y: radius * $math.sin(angle)\n          });\n        }\n\n        angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      } else {\n        path = $path.moveTo({\n          x: radius * $math.cos(startAngle),\n          y: radius * $math.sin(startAngle)\n        }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\n      }\n\n      grid.path = path;\n    }\n\n    this.toggleVisibility(grid, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions a label element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param label        Label element\r\n   * @param position     Starting position\r\n   * @param endPosition  Ending position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateLabelElement = function (label, position, endPosition, location) {\n    if (!$type.hasValue(location)) {\n      location = label.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    this.positionItem(label, point);\n    this.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\n  };\n  /**\r\n   * Updates and positions the base grid element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.updateBaseGridElement = function () {// @todo? zero grid for radar chart, is it needed?\n  };\n  /**\r\n   * Checks if point is within bounds of a container.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param point Point coordinates\r\n   * @return Fits?\r\n   */\n\n\n  AxisRendererRadial.prototype.fitsToBounds = function (point) {\n    return true;\n  };\n\n  Object.defineProperty(AxisRendererRadial.prototype, \"startAngle\", {\n    /**\r\n     * @return Start angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"startAngle\");\n    },\n\n    /**\r\n     * Start angle of the axis in degrees. (0-360)\r\n     *\r\n     * @param value  Start angle\r\n     */\n    set: function (value) {\n      // do not normalize angle here!\n      if (this.setPropertyValue(\"startAngle\", value)) {\n        this.invalidateAxisItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"endAngle\", {\n    /**\r\n     * @return End angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"endAngle\");\n    },\n\n    /**\r\n     * End angle of the axis in degrees. (0-360)\r\n     *\r\n     * @param value  End angle\r\n     */\n    set: function (value) {\n      // do not normalize angel here!\n      if (this.setPropertyValue(\"endAngle\", value)) {\n        this.invalidateAxisItems();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"axisAngle\", {\n    /**\r\n     * @return Axis angle\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"axisAngle\"); //return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\n    },\n\n    /**\r\n     * Angle of the radial axis in degrees. (0-360)\r\n     *\r\n     * @param value  Axis angle\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\n      this.invalidateAxisItems();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AxisRendererRadial.prototype, \"gridType\", {\n    /**\r\n     * Grid type\r\n     */\n    get: function () {\n      var axis = this.chart.xAxes.getIndex(0);\n\n      if (axis instanceof CategoryAxis) {\n        return this.getPropertyValue(\"gridType\");\n      } else {\n        return \"circles\";\n      }\n    },\n    // polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\n\n    /**\r\n     * Grid type for radial axis.\r\n     *\r\n     * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n     * straight lines (\"polygons\").\r\n     *\r\n     * @default \"circles\"\r\n     * @param value  Grid type\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"gridType\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * [getPositionRangePath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   * @param startPosition  Starting position\r\n   * @param endPosition    End position\r\n   * @return SVG path\r\n   */\n\n  AxisRendererRadial.prototype.getPositionRangePath = function (startPosition, endPosition) {\n    var pixelInnerRadius = this.pixelInnerRadius;\n    var pixelRadius = this.axisLength + pixelInnerRadius;\n    var innerRadius = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\n    var radius = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius); //let angleCount: number = this.angleCount;\n\n    var startAngle = this.startAngle;\n    var endAngle = this.endAngle;\n    var arc = endAngle - startAngle;\n    var path;\n    var chart = this.chart;\n    var xAxis = chart.xAxes.getIndex(0);\n    var series = chart.series.getIndex(0);\n    var count = 0;\n\n    if (series) {\n      count = series.dataItems.length;\n    } // polygons are only possible if x axis is present\n    // @todo: review this\n\n\n    if (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\n      var gridLocation = xAxis.renderer.grid.template.location;\n      var angle = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\n      path = $path.moveTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n\n      for (var i = 1; i < count; i++) {\n        angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n        path += $path.lineTo({\n          x: radius * $math.cos(angle),\n          y: radius * $math.sin(angle)\n        });\n      }\n\n      angle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\n      path += $path.lineTo({\n        x: radius * $math.cos(angle),\n        y: radius * $math.sin(angle)\n      });\n      path += $path.moveTo({\n        x: innerRadius * $math.cos(angle),\n        y: innerRadius * $math.sin(angle)\n      });\n\n      for (var i = count - 1; i >= 0; i--) {\n        angle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\n        path += $path.lineTo({\n          x: innerRadius * $math.cos(angle),\n          y: innerRadius * $math.sin(angle)\n        });\n      }\n    } else {\n      path = $path.arc(startAngle, arc, radius, innerRadius);\n    }\n\n    return path;\n  };\n  /**\r\n   * Updates and positions an axis break element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Break element\r\n   */\n\n\n  AxisRendererRadial.prototype.updateBreakElement = function (axisBreak) {\n    // @todo: someday we might need axis break when gridType is polygons\n    var startLine = axisBreak.startLine;\n    var endLine = axisBreak.endLine;\n    var fillShape = axisBreak.fillShape;\n    var startPoint = axisBreak.startPoint;\n    var endPoint = axisBreak.endPoint;\n    startLine.radius = Math.abs(startPoint.y);\n    endLine.radius = Math.abs(endPoint.y);\n    fillShape.radius = Math.abs(endPoint.y);\n    fillShape.innerRadius = Math.abs(startPoint.y);\n  };\n  /**\r\n   * Creates visual elements for and axis break.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param axisBreak Axis break\r\n   */\n\n\n  AxisRendererRadial.prototype.createBreakSprites = function (axisBreak) {\n    axisBreak.startLine = new WavedCircle();\n    axisBreak.endLine = new WavedCircle();\n    axisBreak.fillShape = new WavedCircle();\n  };\n  /**\r\n   * Updates some of the Axis tooltip's visual properties, related to\r\n   * rendering of the Axis.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  AxisRendererRadial.prototype.updateTooltip = function () {\n    var axis = this.axis;\n\n    if (axis) {\n      var bigNum = 4000;\n      var bbx = -4000;\n      var bby = -4000;\n      var bbw = bigNum * 2;\n      var bbh = bigNum * 2;\n      var axisAngle = this.axisAngle;\n\n      if (axisAngle < 0) {\n        axisAngle += 360;\n      }\n\n      var tooltipOrientation = \"vertical\";\n\n      if (axisAngle > 45 && axisAngle < 135 || axisAngle > 225 && axisAngle < 315) {\n        tooltipOrientation = \"horizontal\";\n      }\n\n      this.axis.updateTooltip(tooltipOrientation, {\n        x: bbx,\n        y: bby,\n        width: bbw,\n        height: bbh\n      });\n    }\n  };\n  /**\r\n   * Updates and positions a tick element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param tick      Tick element\r\n   * @param position  Position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateTickElement = function (tick, position, endPosition) {\n    position = position + (endPosition - position) * tick.location;\n    var point = this.positionToPoint(position);\n\n    if (tick.element) {\n      var angle = $math.normalizeAngle(this.axisAngle + 90);\n\n      if (angle / 90 != Math.round(angle / 90)) {\n        tick.pixelPerfect = false;\n      } else {\n        tick.pixelPerfect = true;\n      }\n\n      var tickLength = -tick.length;\n\n      if (tick.inside) {\n        tickLength *= -1;\n      }\n\n      tick.path = $path.moveTo({\n        x: 0,\n        y: 0\n      }) + $path.lineTo({\n        x: tickLength * $math.cos(angle),\n        y: tickLength * $math.sin(angle)\n      });\n    }\n\n    this.positionItem(tick, point);\n    this.toggleVisibility(tick, position, 0, 1);\n  };\n  /**\r\n   * Updates and positions axis bullet.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param bullet       AxisBullet element\r\n   * @param position     Starting position\r\n   * @param endPosition  End position\r\n   */\n\n\n  AxisRendererRadial.prototype.updateBullet = function (bullet, position, endPosition) {\n    var location = 0.5;\n\n    if (bullet instanceof AxisBullet) {\n      location = bullet.location;\n    }\n\n    position = position + (endPosition - position) * location;\n    var point = this.positionToPoint(position);\n    this.positionItem(bullet, point);\n    this.toggleVisibility(bullet, position, 0, 1);\n  };\n  /**\r\n   * Converts a position on the axis to a coordinate in pixels.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n\n\n  AxisRendererRadial.prototype.positionToCoordinate = function (position) {\n    var coordinate;\n    var axis = this.axis;\n    var axisFullLength = axis.axisFullLength;\n    var innerRadius = this.pixelInnerRadius;\n\n    if (axis.renderer.inversed) {\n      coordinate = (axis.end - position) * axisFullLength + innerRadius;\n    } else {\n      coordinate = (position - axis.start) * axisFullLength + innerRadius;\n    }\n\n    return $math.round(coordinate, 1);\n  };\n  /**\r\n   * Converts a point at specific coordinates to a relative position (0-1)\r\n   * on the axis.\r\n   *\r\n   * @param point  Point\r\n   * @return Position (0-1)\r\n   */\n\n\n  AxisRendererRadial.prototype.pointToPosition = function (point) {\n    var coordinate = $math.getDistance(point) - this.pixelInnerRadius;\n    return this.coordinateToPosition(coordinate);\n  };\n\n  Object.defineProperty(AxisRendererRadial.prototype, \"chart\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Chart\r\n     */\n    get: function () {\n      return this._chart.get();\n    },\n\n    /**\r\n     * A chart, associated with the Axis.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Chart\r\n     */\n    set: function (value) {\n      this._chart.set(value, null);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AxisRendererRadial;\n}(AxisRendererY);\n\nexport { AxisRendererRadial };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;","map":{"version":3,"mappings":"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","names":["AxisRendererY","CategoryAxis","WavedCircle","MutableValueDisposer","Percent","percent","registry","$math","$path","$utils","$type","AxisBullet","__extends","_super","_this","className","isMeasured","startAngle","endAngle","minGridDistance","gridType","axisAngle","layout","radius","line","strokeOpacity","labels","template","horizontalCenter","_disposers","push","_chart","applyTheme","AxisRendererRadial","chart","invalid","validate","call","Object","pixelRadius","pixelInnerRadius","getPropertyValue","value","setPercentProperty","relativeRadiusToValue","pixelRadiusReal","innerRadius","hasValue","innerRadiusModifyer","mr","Math","max","min","plotContainer","innerHeight","innerWidth","position","position2","fitToRange","positionToCoordinate","Infinity","x","cos","y","sin","path","moveTo","lineTo","title","axis","valign","verticalCenter","axisLength","rotation","opposite","inside","grid","endPosition","location","point","positionToPoint","getDistance","isNumber","element","xAxis","xAxes","getIndex","count","series","dataItems","length","gridLocation","renderer","angle","getAngle","i","cellEndLocation","arcTo","toggleVisibility","label","positionItem","minLabelPosition","maxLabelPosition","setPropertyValue","invalidateAxisItems","normalizeAngle","startPosition","arc","axisBreak","startLine","endLine","fillShape","startPoint","endPoint","abs","bigNum","bbx","bby","bbw","bbh","tooltipOrientation","updateTooltip","width","height","tick","round","pixelPerfect","tickLength","bullet","coordinate","axisFullLength","inversed","end","start","coordinateToPosition","get","set","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/axes/AxisRendererRadial.ts"],"sourcesContent":["/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _chartType: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\tlet chart = this.chart;\r\n\t\tlet innerRadius = this.getPropertyValue(\"innerRadius\");\r\n\t\tif(chart){\r\n\t\t\tif (!$type.hasValue(innerRadius)) {\r\n\t\t\t\tinnerRadius = chart.innerRadius;\r\n\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tinnerRadius = percent(innerRadius.value * chart.innerRadiusModifyer * 100)\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (innerRadius instanceof Percent && chart) {\r\n\t\t\t\t\tlet mr = chart.mr;\r\n\t\t\t\t\tlet value = innerRadius.value;\r\n\t\t\t\t\tvalue = Math.max(mr * value, mr - Math.min(chart.plotContainer.innerHeight, chart.plotContainer.innerWidth)) / mr;\r\n\t\t\t\t\tinnerRadius = percent(value * 100);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn innerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @param position2  Position (0-1) Position on the second axis\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number, position2?: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element && chart) {\r\n\t\t\t\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = 0;\r\n\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tcount = series.dataItems.length;\r\n\t\t\t}\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\tlet count = 0;\r\n\t\tif (series) {\r\n\t\t\tcount = series.dataItems.length;\r\n\t\t}\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: RadarChart) {\r\n\t\tthis._chart.set(value, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\t\r\n\t\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n"]},"metadata":{},"sourceType":"module"}