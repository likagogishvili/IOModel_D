{"ast":null,"code":"/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Column } from \"./Column\";\nimport { Sprite } from \"../../core/Sprite\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $utils from \"../../core/utils/Utils\";\nimport { registry } from \"../../core/Registry\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\nimport { percent } from \"../../core/utils/Percent\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\n\nvar CurvedColumn =\n/** @class */\nfunction (_super) {\n  __extends(CurvedColumn, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CurvedColumn() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"CurvedColumn\";\n    return _this;\n  }\n  /**\r\n   * [createAssets description]\r\n   *\r\n   * @todo Description\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurvedColumn.prototype.createAssets = function () {\n    this.curvedColumn = this.createChild(Sprite);\n    this.curvedColumn.shouldClone = false;\n    this.setPropertyValue(\"tension\", 0.7);\n    this.width = percent(120);\n    this.height = percent(120); // some dirty hack so that if user access column, it won't get error\n\n    this.column = this.curvedColumn;\n  };\n  /**\r\n   * Draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  CurvedColumn.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.realWidth;\n    var h = this.realHeight;\n    var x = this.realX - this.pixelX;\n    var y = this.realY - this.pixelY;\n    var points; // TODO can this be removed ?\n\n    $utils.used(this.width);\n    var tensionX = 1;\n    var tensionY = 1;\n\n    if (this.orientation == \"vertical\") {\n      tensionX = this.tension;\n      points = [{\n        x: 0,\n        y: h + y\n      }, {\n        x: w / 2,\n        y: y\n      }, {\n        x: w,\n        y: h + y\n      }];\n    } else {\n      tensionY = this.tension;\n      h = Math.abs(h);\n      points = [{\n        x: x,\n        y: h\n      }, {\n        x: x + w,\n        y: h / 2\n      }, {\n        x: x,\n        y: 0\n      }];\n    }\n\n    var path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\n    this.column.path = path;\n  };\n  /**\r\n   * Copies all parameters from another [[CurvedColumn]].\r\n   *\r\n   * @param source  Source CurvedColumn\r\n   */\n\n\n  CurvedColumn.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    if (this.curvedColumn) {\n      this.curvedColumn.copyFrom(source.curvedColumn);\n    }\n  };\n\n  Object.defineProperty(CurvedColumn.prototype, \"tension\", {\n    /**\r\n     * @return Tension (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Horizontal tension of the curve.\r\n     *\r\n     * Tension defines how \"lose\" the line will be.\r\n     *\r\n     * 1 is the maximum tension which would result in pointy columns with\r\n     * straight edges.\r\n     *\r\n     * The smaller the tension th wider the column will be.\r\n     *\r\n     * @default 0.7\r\n     * @param value tension (0-1)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CurvedColumn.prototype, \"orientation\", {\n    /**\r\n     * Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"orientation\");\n    },\n\n    /**\r\n     * Orientation of the column.\r\n     *\r\n     * Available options: \"vertical\" (default) and \"horizontal\".\r\n     *\r\n     * @default \"vertical\"\r\n     * @param value  Orientation\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"orientation\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CurvedColumn;\n}(Column);\n\nexport { CurvedColumn };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;","map":{"version":3,"mappings":"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","names":["Column","Sprite","$path","$utils","registry","$smoothing","percent","__extends","_super","_this","className","CurvedColumn","curvedColumn","createChild","shouldClone","setPropertyValue","width","height","column","draw","call","w","realWidth","h","realHeight","x","realX","pixelX","y","realY","pixelY","points","used","tensionX","tensionY","orientation","tension","Math","abs","path","moveTo","Tension","smooth","source","copyFrom","Object","getPropertyValue","value","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/elements/CurvedColumn.ts"],"sourcesContent":["/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\th = Math.abs(h);\r\n\t\t\tpoints = [{ x: x, y: h }, { x: x + w, y: h / 2 }, { x: x, y: 0 }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n"]},"metadata":{},"sourceType":"module"}