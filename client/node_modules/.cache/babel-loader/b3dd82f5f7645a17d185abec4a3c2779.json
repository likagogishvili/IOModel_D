{"ast":null,"code":"/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Container } from \"../../core/Container\";\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $object from \"../../core/utils/Object\";\nimport * as $type from \"../../core/utils/Type\";\nimport { color } from \"../../core/utils/Color\";\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\n\nvar LineSeriesSegment =\n/** @class */\nfunction (_super) {\n  __extends(LineSeriesSegment, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function LineSeriesSegment() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"LineSeriesSegment\"; // Set defaults\n\n    _this.isMeasured = false;\n    _this.interactionsEnabled = false;\n    _this.layout = \"none\"; // Create fill element\n\n    var fillSprite = _this.createChild(Sprite);\n\n    _this.fillSprite = fillSprite;\n    fillSprite.shouldClone = false;\n    fillSprite.setElement(_this.paper.add(\"path\"));\n    fillSprite.isMeasured = false;\n\n    _this._disposers.push(fillSprite); // Create line element\n\n\n    var strokeSprite = _this.createChild(Sprite);\n\n    _this.strokeSprite = strokeSprite;\n    strokeSprite.shouldClone = false;\n    strokeSprite.fill = color();\n    strokeSprite.setElement(_this.paper.add(\"path\"));\n    strokeSprite.isMeasured = false;\n\n    _this._disposers.push(strokeSprite);\n\n    return _this;\n  }\n  /**\r\n   * Draws the series segment.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param points       Points to connect\r\n   * @param closePoints  ?\r\n   * @param smoothnessX  Horizontal bezier setting (?)\r\n   * @param smoothnessY  Vertical bezier setting (?)\r\n   */\n\n\n  LineSeriesSegment.prototype.drawSegment = function (points, closePoints, smoothnessX, smoothnessY) {\n    if (!this.disabled) {\n      if (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\n        // first moveTo helps to avoid Chrome straight line in the mask bug.\n        var path = $path.moveTo({\n          x: points[0].x - 0.2,\n          y: points[0].y - 0.2\n        }) + $path.moveTo(points[0]);\n        var series = this.series;\n\n        if (series.smoothing == \"bezier\") {\n          path += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\n        } else if (series.smoothing == \"monotoneX\") {\n          path += new $smoothing.MonotoneX({\n            closed: false\n          }).smooth(points);\n        } else if (series.smoothing == \"monotoneY\") {\n          path += new $smoothing.MonotoneY({\n            closed: false\n          }).smooth(points);\n        }\n\n        if (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {// like this and not if != 0, otherwise ranges stroke won't be drawn.\n        } else {\n          this.strokeSprite.path = path;\n        }\n\n        if (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) {\n          // helps to avoid drawing fill object if fill is not visible\n          if ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\n            path += $path.lineTo(closePoints[0]);\n\n            if (series.smoothing == \"bezier\") {\n              path += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\n            } else if (series.smoothing == \"monotoneX\") {\n              path += new $smoothing.MonotoneX({\n                closed: false\n              }).smooth(closePoints);\n            } else if (series.smoothing == \"monotoneY\") {\n              path += new $smoothing.MonotoneY({\n                closed: false\n              }).smooth(closePoints);\n            }\n\n            path += $path.lineTo(points[0]);\n            path += $path.closePath();\n            this.fillSprite.path = path;\n          }\n        }\n      } else {\n        this.fillSprite.path = \"\";\n        this.strokeSprite.path = \"\";\n      }\n    }\n  };\n  /**\r\n   * Copies properties from a [[Sprite]] to both line and fill elements.\r\n   *\r\n   * @param source Source [[Sprite]] to copy properties from\r\n   */\n\n\n  LineSeriesSegment.prototype.copyFrom = function (source) {\n    _super.prototype.copyFrom.call(this, source);\n\n    var lineElement = this.strokeSprite;\n    $object.copyProperties(source, lineElement.properties, visualProperties);\n    lineElement.events.copyFrom(source.strokeSprite.events);\n    lineElement.fillOpacity = 0;\n    var fillElement = this.fillSprite;\n    $object.copyProperties(source, fillElement.properties, visualProperties);\n    fillElement.events.copyFrom(source.fillSprite.events);\n    fillElement.strokeOpacity = 0;\n  };\n\n  return LineSeriesSegment;\n}(Container);\n\nexport { LineSeriesSegment };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;","map":{"version":3,"mappings":"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","names":["Container","Sprite","visualProperties","registry","$path","$object","$type","color","$smoothing","__extends","_super","_this","className","isMeasured","interactionsEnabled","layout","fillSprite","createChild","shouldClone","setElement","paper","add","_disposers","push","strokeSprite","fill","LineSeriesSegment","points","closePoints","smoothnessX","smoothnessY","disabled","length","isNumber","x","y","path","moveTo","series","smoothing","Tension","smooth","MonotoneX","closed","MonotoneY","strokeOpacity","fillOpacity","lineTo","closePath","source","copyFrom","call","lineElement","copyProperties","properties","events","fillElement","registeredClasses"],"sourceRoot":"","sources":["../../../../../src/.internal/charts/series/LineSeriesSegment.ts"],"sourcesContent":["/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeries } from \"./LineSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\tpublic series: LineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0 && $type.isNumber(points[0].x) && $type.isNumber(points[0].y)) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0])\r\n\r\n\t\t\t\tlet series = this.series;\r\n\r\n\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(points);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tif ($type.isNumber(closePoints[0].x) && $type.isNumber(closePoints[0].y)) {\r\n\t\t\t\t\t\tpath += $path.lineTo(closePoints[0]);\r\n\r\n\t\t\t\t\t\tif (series.smoothing == \"bezier\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneX\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneX({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (series.smoothing == \"monotoneY\") {\r\n\t\t\t\t\t\t\tpath += new $smoothing.MonotoneY({ closed: false }).smooth(closePoints);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n"]},"metadata":{},"sourceType":"module"}