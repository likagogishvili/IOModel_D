{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Graphics } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n/**\r\n * Draws a slice shape.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\r\n */\n\nvar Slice =\n/** @class */\nfunction (_super) {\n  __extends(Slice, _super);\n\n  function Slice() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * @ignore\r\n     */\n\n\n    Object.defineProperty(_this, \"ix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * @ignore\r\n     */\n\n    Object.defineProperty(_this, \"iy\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(_this, \"_generator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: arc()\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Slice.prototype, \"_getTooltipPoint\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      var tooltipX = this.get(\"tooltipX\");\n      var tooltipY = this.get(\"tooltipY\");\n      var x = 0;\n      var y = 0;\n\n      if ($type.isNumber(tooltipX)) {\n        x = tooltipX;\n      }\n\n      if ($type.isNumber(tooltipY)) {\n        y = tooltipY;\n      }\n\n      var radius = this.get(\"radius\", 0);\n      var innerRadius = this.get(\"innerRadius\", 0);\n      var dRadius = this.get(\"dRadius\", 0);\n      var dInnerRadius = this.get(\"dInnerRadius\", 0);\n      radius += dRadius;\n      innerRadius += dInnerRadius;\n\n      if (innerRadius < 0) {\n        innerRadius = radius + innerRadius;\n      }\n\n      if (tooltipX instanceof Percent) {\n        x = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);\n      }\n\n      if (tooltipY instanceof Percent) {\n        y = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);\n      }\n\n      if (this.get(\"arc\") >= 360 && innerRadius == 0) {\n        x = 0;\n        y = 0;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Slice.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var startAngle = this.get(\"startAngle\", 0);\n        var arc_1 = this.get(\"arc\", 0);\n        var generator = this._generator;\n\n        if (arc_1 < 0) {\n          startAngle = startAngle + arc_1;\n          arc_1 = arc_1 * -1;\n        }\n\n        if (arc_1 > 0.1) {\n          // this fixes bug with full circle when arc is very small\n          generator.cornerRadius(this.get(\"cornerRadius\", 0));\n        }\n\n        generator.context(this._display);\n        var radius = this.get(\"radius\", 0);\n        var innerRadius = this.get(\"innerRadius\", 0);\n        var dRadius = this.get(\"dRadius\", 0);\n        var dInnerRadius = this.get(\"dInnerRadius\", 0);\n        radius += dRadius;\n        innerRadius += dInnerRadius;\n\n        if (innerRadius < 0) {\n          innerRadius = radius + innerRadius;\n        }\n\n        generator({\n          innerRadius: innerRadius,\n          outerRadius: radius,\n          startAngle: (startAngle + 90) * $math.RADIANS,\n          endAngle: (startAngle + arc_1 + 90) * $math.RADIANS\n        });\n        var middleAngle = startAngle + arc_1 / 2;\n        this.ix = $math.cos(middleAngle);\n        this.iy = $math.sin(middleAngle);\n      }\n\n      if (this.isDirty(\"shiftRadius\")) {\n        var shiftRadius = this.get(\"shiftRadius\", 0);\n        this.setRaw(\"dx\", this.ix * shiftRadius);\n        this.setRaw(\"dy\", this.iy * shiftRadius);\n        this.markDirtyPosition();\n      }\n    }\n  });\n  Object.defineProperty(Slice, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Slice\"\n  });\n  Object.defineProperty(Slice, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Graphics.classNames.concat([Slice.className])\n  });\n  return Slice;\n}(Graphics);\n\nexport { Slice };","map":{"version":3,"mappings":"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","names":["Graphics","$type","Percent","arc","$math","__extends","Object","tooltipX","get","tooltipY","x","y","isNumber","radius","innerRadius","dRadius","dInnerRadius","ix","value","iy","_super","_beforeChanged","call","isDirty","_clear","_changed","startAngle","arc_1","generator","_generator","cornerRadius","context","_display","outerRadius","RADIANS","endAngle","middleAngle","cos","sin","shiftRadius","setRaw","markDirtyPosition","classNames","concat","Slice","className"],"sourceRoot":"","sources":["../../../../../src/.internal/core/render/Slice.ts"],"sourcesContent":["import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"./Graphics\";\nimport * as $type from \"../util/Type\";\nimport { Percent } from \"../util/Percent\";\nimport type { IPoint } from \"../util/IPoint\";\nimport { arc } from \"d3-shape\";\nimport * as $math from \"../util/Math\";\n\nexport interface ISliceSettings extends IGraphicsSettings {\n\n\t/**\n\t * Radius in pixels.\n\t */\n\tradius?: number;\n\n\t/**\n\t * Slice \"width\" in degrees.\n\t */\n\tarc?: number;\n\n\t/**\n\t * Inner radius of the slice in pixels.\n\t */\n\tinnerRadius?: number;\n\n\t/**\n\t * Start angle in degrees.\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * Slice corner radius in pixels.\n\t */\n\tcornerRadius?: number;\n\n\t/**\n\t * Slice \"pull out\" radius in pixels.\n\t */\n\tshiftRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `radius` value is. Negative\n\t * numbers can also be used.\n\t */\n\tdRadius?: number;\n\n\t/**\n\t * Number of pixels to add to whatever slice's `innerRadius` value is.\n\t * Negative numbers can also be used.\n\t */\n\tdInnerRadius?: number;\n\n}\n\nexport interface ISlicePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice shape.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/graphics/} for more info\n */\nexport class Slice extends Graphics {\n\n\tdeclare public _settings: ISliceSettings;\n\tdeclare public _privateSettings: ISlicePrivate;\n\n\tpublic static className: string = \"Slice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([Slice.className]);\n\n\t/**\n\t * @ignore\n\t */\n\tpublic ix: number = 0;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic iy: number = 0;\n\n\tprotected _generator = arc();\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tlet tooltipX = this.get(\"tooltipX\");\n\t\tlet tooltipY = this.get(\"tooltipY\");\n\n\t\tlet x = 0;\n\t\tlet y = 0;\n\n\t\tif ($type.isNumber(tooltipX)) {\n\t\t\tx = tooltipX;\n\t\t}\n\n\t\tif ($type.isNumber(tooltipY)) {\n\t\t\ty = tooltipY;\n\t\t}\n\n\t\tlet radius = this.get(\"radius\", 0);\n\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\tradius += dRadius;\n\t\tinnerRadius += dInnerRadius;\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (tooltipX instanceof Percent) {\n\t\t\tx = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value)\n\t\t}\n\n\t\tif (tooltipY instanceof Percent) {\n\t\t\ty = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value)\n\t\t}\n\n\t\tif (this.get(\"arc\") >= 360 && innerRadius == 0) {\n\t\t\tx = 0;\n\t\t\ty = 0;\n\t\t}\n\n\n\t\treturn { x, y };\n\t}\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"radius\") || this.isDirty(\"arc\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"dRadius\") || this.isDirty(\"dInnerRadius\") || this.isDirty(\"cornerRadius\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tlet startAngle = this.get(\"startAngle\", 0);\n\t\t\tlet arc = this.get(\"arc\", 0);\n\t\t\tconst generator = this._generator;\n\n\t\t\tif(arc < 0){\n\t\t\t\tstartAngle = startAngle + arc;\n\t\t\t\tarc = arc * -1;\n\t\t\t}\n\n\t\t\tif(arc > 0.1){ // this fixes bug with full circle when arc is very small\n\t\t\t\tgenerator.cornerRadius(this.get(\"cornerRadius\", 0));\n\t\t\t}\n\t\t\tgenerator.context(this._display as any);\n\n\t\t\tlet radius = this.get(\"radius\", 0);\n\t\t\tlet innerRadius = this.get(\"innerRadius\", 0);\n\n\t\t\tlet dRadius = this.get(\"dRadius\", 0);\n\t\t\tlet dInnerRadius = this.get(\"dInnerRadius\", 0);\n\n\t\t\tradius += dRadius;\n\t\t\tinnerRadius += dInnerRadius;\t\t\t\n\n\t\t\tif (innerRadius < 0) {\n\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t}\n\n\t\t\tgenerator({ innerRadius: innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * $math.RADIANS, endAngle: (startAngle + arc + 90) * $math.RADIANS });\n\n\t\t\tlet middleAngle = startAngle + arc / 2;\n\n\t\t\tthis.ix = $math.cos(middleAngle);\n\t\t\tthis.iy = $math.sin(middleAngle);\n\t\t}\n\n\t\tif (this.isDirty(\"shiftRadius\")) {\n\t\t\tconst shiftRadius = this.get(\"shiftRadius\", 0);\n\t\t\tthis.setRaw(\"dx\", this.ix * shiftRadius);\n\t\t\tthis.setRaw(\"dy\", this.iy * shiftRadius);\n\t\t\tthis.markDirtyPosition();\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}