{"ast":null,"code":"/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\nimport { __extends, __values } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { SpriteState } from \"./SpriteState\";\nimport { SpriteEventDispatcher } from \"./SpriteEvents\";\nexport { SpriteEventDispatcher };\nimport { BaseObjectEvents } from \"./Base\";\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\nimport { Dictionary, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\nimport { ListDisposer, List } from \"./utils/List\";\nimport { MultiDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\nimport { Animation, AnimationDisposer } from \"./utils/Animation\";\nimport { getGhostPaper } from \"./rendering/Paper\";\nimport { Container } from \"./Container\";\nimport { Pattern } from \"./rendering/fills/Pattern\";\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\nimport { Color, color, toColor } from \"./utils/Color\";\nimport { getInteraction } from \"./interaction/Interaction\";\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\nimport { options } from \"./Options\";\nimport { registry } from \"./Registry\";\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\nimport { DateFormatter } from \"./formatters/DateFormatter\";\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\nimport { Language } from \"./utils/Language\";\nimport { Export } from \"./export/Export\";\nimport * as $utils from \"./utils/Utils\";\nimport * as $math from \"./utils/Math\";\nimport * as $strings from \"./utils/Strings\";\nimport * as $array from \"./utils/Array\";\nimport * as $object from \"./utils/Object\";\nimport * as $type from \"./utils/Type\";\nimport * as $iter from \"./utils/Iterator\";\nimport { system } from \"./System\";\nimport { Percent, percent } from \"./utils/Percent\";\n/**\r\n * Defines list ofvisual properties\r\n */\n\nexport var visualProperties = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\n\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\n\nvar Sprite =\n/** @class */\nfunction (_super) {\n  __extends(Sprite, _super);\n  /**\r\n   * Constructor:\r\n   * * Creates initial node\r\n   * * Sets default properties\r\n   * * Creates required default states\r\n   * * Inits accessibility\r\n   */\n\n\n  function Sprite() {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Holds values for Sprite's properties.\r\n     */\n\n\n    _this.properties = {};\n    /**\r\n     * @ignore\r\n     */\n\n    _this._eventDispatcher = new SpriteEventDispatcher(_this);\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this._bindings = {};\n    /**\r\n     * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n     * other Sprites from and should not be treated as full-fledged element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._isTemplate = false;\n    _this._isPath = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._inited = false;\n    /**\r\n     * Holds indicator whether this sprite was already initialized and ready.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._ready = false;\n    /**\r\n     * If `sprite.hide()` is called and we have \"hidden\" state and\r\n     * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n     * avoid restarting animations in case `hide()` method is called multiple\r\n     * times.\r\n     */\n\n    _this.isHiding = false;\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n\n    _this._isHidden = false;\n    /**\r\n     * This property indicates if Sprite is currently being revealed from hidden\r\n     * state. This is used to prevent multiple calls to `sprite.show()` to\r\n     * restart reveal animation. (if enabled)\r\n     */\n\n    _this.isShowing = false;\n    /**\r\n     * Indicates if this element is a standalone instance. A \"standalone\r\n     * instance\" means this is a autonomous object which maintains its own\r\n     * set of controls like Preloader, Export, etc.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.isStandaloneInstance = false;\n    /**\r\n     * Indicates if togglable Sprite is currently active (toggled on).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._isActive = false;\n    /**\r\n     * A Sprite element to use as a mask for this Sprite.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._mask = new MutableValueDisposer();\n    /**\r\n     * @ignore Exclude from docs\r\n     * @todo Description\r\n     */\n\n    _this._positionPrecision = 3;\n    /**\r\n     * An instance of [[Language]].\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._language = new MutableValueDisposer();\n    /**\r\n     * Holds [[Export]] object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._exporting = new MutableValueDisposer();\n    /**\r\n     * Should this Sprite be included when exporting?\r\n     */\n\n    _this._exportable = true;\n    /**\r\n     * Defines bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this._bbox = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    /**\r\n     * Indicates if this element is invalid and should be re-validated (redrawn).\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.invalid = false;\n    /**\r\n     * Indicates if this elements position is invalid and should be repositioned\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n\n    _this.positionInvalid = false;\n    /**\r\n     * A collection of key/value pairs that can be used to bind specific Sprite\r\n     * properties to [[DataItem]].\r\n     *\r\n     * For example: `fill` property can be bound to `myCustomColor` field in\r\n     * DataItem. The Sprite will automatically get the value for `fill` from its\r\n     * DataItem.\r\n     *\r\n     * Can be set for each [[SpriteState]] individually to override default\r\n     * bindings.\r\n     *\r\n     * @see {@link SpriteState}\r\n     */\n\n    _this.propertyFields = {};\n    /**\r\n     * Specifies if property changes on this object should be propagated to the\r\n     * objects cloned from this object.\r\n     *\r\n     * This setting affects property changes *after* cloning, since at the moment\r\n     * of cloning all of properties from source object are copied to the clone\r\n     * anyway.\r\n     *\r\n     * @default false\r\n     */\n\n    _this.applyOnClones = false; // unrotated unscaled\n\n    _this._measuredWidthSelf = 0;\n    _this._measuredHeightSelf = 0; // read only, sprite extreme coordinates\n\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxLeft = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxRight = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxTop = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxBottom = 0; // not rotated and not scaled\n\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxLeftSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxRightSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxTopSelf = 0;\n    /**\r\n     * @ignore\r\n     */\n\n    _this.maxBottomSelf = 0;\n    _this._isDragged = false;\n    _this._isResized = false;\n    /**\r\n     * @deprecated Moved to [[SpriteProperties]]\r\n     */\n\n    _this._disabled = false;\n    _this._internalDisabled = false;\n    _this._updateDisabled = false;\n    _this._internalDefaultsApplied = false;\n    /**\r\n     * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n     */\n\n    _this.rollOutDelay = 0;\n    /**\r\n     * This flag is set to `true` for the initial sprite you create and place\r\n     * to the div so that we could clear all additional\r\n     * sprites/containers when this sprite is disposed.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.isBaseSprite = false;\n    /**\r\n     * Indicates whether this sprite should be cloned when cloning its parent\r\n     * container. We set this to `false` in those cases when a sprite is created\r\n     * by the class, so that when cloning a duplicate sprite would not appear.\r\n     */\n\n    _this.shouldClone = true;\n    /**\r\n     * A read-only flag which indicates if a sprite has completed its initial\r\n     * animation (if `showOnInit = true`).\r\n     *\r\n     * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n     *\r\n     * @readonly\r\n     */\n\n    _this.appeared = false;\n    /**\r\n     * [ex description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n\n    _this.ex = 0;\n    /**\r\n     * [ey description]\r\n     *\r\n     * @todo Description\r\n     * @ignore\r\n     */\n\n    _this.ey = 0;\n    /**\r\n     * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n     * @ignore\r\n     */\n\n    _this.dragWhileResize = false;\n    /**\r\n     *  @ignore\r\n     */\n\n    _this.measureFailed = false;\n    /**\r\n     * If this flag is set to true, calling show() will not reveal the sprite.\r\n     *\r\n     * @ignore\r\n     */\n\n    _this.preventShow = false;\n    /**\r\n     * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n     * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n     */\n\n    _this.cloneTooltip = true;\n    _this.className = \"Sprite\";\n\n    _this._disposers.push(_this._eventDispatcher); // Generate a unique ID\n\n\n    $utils.used(_this.uid); // Create SVG group to hold everything in\n\n    _this.group = _this.paper.addGroup(\"g\"); // Set defaults\n    // it is better to set defauls like this in order to save invaliation calls and events\n\n    _this.setPropertyValue(\"scale\", 1);\n\n    _this.setPropertyValue(\"rotation\", 0);\n\n    _this.setPropertyValue(\"align\", \"none\");\n\n    _this.setPropertyValue(\"valign\", \"none\");\n\n    _this.setPropertyValue(\"pixelPerfect\", false);\n\n    _this.setPropertyValue(\"visible\", true);\n\n    _this.setPropertyValue(\"tooltipPosition\", \"fixed\");\n\n    _this.setPropertyValue(\"verticalCenter\", \"none\");\n\n    _this.setPropertyValue(\"horizontalCenter\", \"none\");\n\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n\n    _this.setPropertyValue(\"tooltipX\", percent(50));\n\n    _this.setPropertyValue(\"marginTop\", 0);\n\n    _this.setPropertyValue(\"marginBottom\", 0);\n\n    _this.setPropertyValue(\"marginLeft\", 0);\n\n    _this.setPropertyValue(\"marginRight\", 0);\n\n    _this.setPropertyValue(\"dx\", 0);\n\n    _this.setPropertyValue(\"dy\", 0);\n\n    _this.setPropertyValue(\"paddingTop\", 0);\n\n    _this.setPropertyValue(\"paddingBottom\", 0);\n\n    _this.setPropertyValue(\"paddingRight\", 0);\n\n    _this.setPropertyValue(\"paddingLeft\", 0);\n\n    _this.setPropertyValue(\"togglable\", false);\n\n    _this.setPropertyValue(\"hidden\", false);\n\n    _this.setPropertyValue(\"urlTarget\", \"_self\");\n\n    _this.setPropertyValue(\"alwaysShowTooltip\", false);\n\n    _this.setPropertyValue(\"showTooltipOn\", \"hover\");\n\n    _this._prevMeasuredWidth = 0;\n    _this._prevMeasuredHeight = 0;\n    _this._measuredWidth = 0;\n    _this._measuredHeight = 0;\n    _this._isMeasured = true; // Invalidate the Sprite so that renderer knows it needs to be drawn\n\n    _this.invalidate(); //this.states.create(\"default\").properties.opacity = 1;\n    // Apply the theme\n\n\n    _this.applyTheme(); //this._disposers.push(this._clickable);\n    // Decorate adapter with events so that we can apply its settings whenever\n    // it is modified\n    // @todo Think what to do here. We can't just apply the adapter value to\n    // property since not all of those are for properties. Commented out for\n    // now.\n\n    /*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });\r\n    this.adapter.events.on(\"removed\", (ev: any) => {\r\n        (<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n    });*/\n    // Add disposable dependencies to `_disposers` so they are automatically\n    // disposed of when this object is disposed\n\n\n    _this._disposers.push(_this.events);\n\n    _this._disposers.push(_this.group);\n\n    _this._disposers.push(_this._mask);\n\n    _this._disposers.push(_this._language);\n\n    _this._disposers.push(_this._exporting); //this._disposers.push(this._parent);\n    //this._disposers.push(this._modal);\n\n\n    _this._disposers.push(new Disposer(function () {\n      $object.each(_this._bindings, function (key, value) {\n        value.dispose();\n      });\n    }));\n\n    _this.setPropertyValue(\"interactionsEnabled\", true);\n\n    return _this;\n  }\n\n  Object.defineProperty(Sprite.prototype, \"events\", {\n    /**\r\n     * Event dispatcher.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n     */\n    get: function () {\n      return this._eventDispatcher;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"adapter\", {\n    /**\r\n     * Holds Adapter.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        this._adapterO = new Adapter(this);\n      }\n\n      return this._adapterO;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Applies properties from all assigned themes.\r\n   *\r\n   * We do this here so that we can apply class names as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.applyTheme = function () {\n    _super.prototype.applyTheme.call(this);\n\n    if (options.autoSetClassName) {\n      this.setClassName();\n    }\n  };\n  /**\r\n   * Returns theme(s) used by this object either set explicitly on this\r\n   * element, inherited from parent, or inherited from [[System]].\r\n   *\r\n   * @return An array of theme references\r\n   */\n\n\n  Sprite.prototype.getCurrentThemes = function () {\n    var themes = this._themes;\n\n    if (themes) {\n      return themes;\n    } else {\n      var parent_1 = this._parent;\n\n      if (parent_1) {\n        return parent_1.getCurrentThemes();\n      } else {\n        return registry.themes;\n      }\n    }\n  };\n  /**\r\n   * Called just before element's validation, this function allows setting\r\n   * defaults.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyInternalDefaults = function () {\n    // Nothing here, but extending classes might override this function\n    // so that they can set their defaults\n    this._internalDefaultsApplied = true;\n  };\n  /**\r\n   * Invalidates element.\r\n   *\r\n   * Object will be redrawn during the next update cycle.\r\n   *\r\n   * Please note that in most cases elements will auto-invalidate when needed. If\r\n   * everything works, DO NOT use this method. Use it only if some changes do\r\n   * not take otherwise.\r\n   */\n\n\n  Sprite.prototype.invalidate = function () {\n    if (this.disabled || this._isTemplate || this.__disabled) {\n      return;\n    } // We no longer reset this on each invalidate, so that they are applied\n    // only once, and do not overwrite user-defined settings\n    //this._internalDefaultsApplied = false;\n\n\n    if (!this.invalid) {\n      this.invalid = true;\n      registry.addToInvalidSprites(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Validates element:\r\n   * * Triggers events\r\n   * * Redraws the element\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.validate = function () {\n    this.dispatchImmediately(\"beforevalidated\"); // prevents from drawing if topparent is 0x0\n\n    /*\r\n    let topParent = this.topParent;\r\n      if (topParent) {\r\n        if (!topParent.maxWidth || !topParent.maxHeight) {\r\n            this._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n        }\r\n    }*/\n    // Set internal defaults\n\n    if (!this._internalDefaultsApplied) {\n      this.applyInternalDefaults();\n    }\n\n    this.beforeDraw();\n    this.draw();\n    this.invalid = false;\n    registry.removeFromInvalidSprites(this);\n    this.afterDraw();\n  };\n  /**\r\n   * Invalidates element's position.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.invalidatePosition = function () {\n    if (this.disabled || this._isTemplate) {\n      return;\n    }\n\n    if (!this.positionInvalid) {\n      this.positionInvalid = true;\n      registry.addToInvalidPositions(this);\n      system.requestFrame();\n    }\n  };\n  /**\r\n   * Transforms the element.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.validatePosition = function () {\n    var pixelX = this.pixelX;\n    var pixelY = this.pixelY;\n    var dx = this.dx;\n    var dy = this.dy;\n    var x = pixelX + dx;\n    var y = pixelY + dy;\n\n    if (this._updateDisabled) {\n      if (this._internalDisabled) {\n        this.group.attr({\n          \"display\": \"none\"\n        });\n      } else {\n        if (!this.disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n      }\n\n      this._updateDisabled = false;\n    }\n\n    var sizeChanged = this.measure(); //if (!this.invalid) {\n\n    var prevGroupTransform = this.group.transformString;\n    this.group.moveTo({\n      x: x,\n      y: y\n    });\n    this.group.rotation = this.rotation;\n\n    if (this.nonScaling) {\n      this.group.scale = this.scale / this.globalScale;\n    } else {\n      this.group.scale = this.scale;\n    }\n\n    if (prevGroupTransform != this.group.transformString || sizeChanged) {\n      // not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\n      if (prevGroupTransform == null) {\n        this.dispatch(\"transformed\");\n      } else {\n        this.dispatchImmediately(\"transformed\");\n      } // TODO clear existing positionchanged dispatches ?\n\n\n      this.dispatch(\"positionchanged\");\n\n      if (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\n        this.updateTooltipPosition();\n      }\n    } //}\n    // it might happen that x and y changed again, so we only remove if they didn't\n\n\n    if (pixelX + dx == x && pixelY + dy == y) {\n      registry.removeFromInvalidPositions(this);\n      this.positionInvalid = false;\n    }\n\n    var maskRectangle = this._maskRectangle; // todo: verify this\n\n    if (maskRectangle) {\n      this._clipElement.moveTo({\n        x: maskRectangle.x - pixelX,\n        y: maskRectangle.y - pixelY\n      });\n    }\n  };\n  /**\r\n   * A placeholder method that is called **before** element begins to be drawn.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.beforeDraw = function () {};\n  /**\r\n   * A placeholder method that draws the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.draw = function () {};\n  /**\r\n   * A placeholder method that is called **after** element finishes drawing\r\n   * itself.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.afterDraw = function () {\n    var e_1, _a;\n\n    if (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\n      this.measureElement();\n    } //this.applyMask();\n\n\n    if (!this._inited) {\n      if (this._adapterO) {\n        try {\n          // used to be applySVGAttrbutes here, this is more efficient\n          for (var _b = __values(this._adapterO.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var key = _c.value;\n\n            switch (key) {\n              case \"mask\":\n              case \"fill\":\n              case \"opacity\":\n              case \"fillOpacity\":\n              case \"stroke\":\n              case \"strokeOpacity\":\n              case \"strokeWidth\":\n              case \"shapeRendering\":\n              case \"strokeDasharray\":\n              case \"strokeDashoffset\":\n              case \"strokeLinecap\":\n              case \"strokeLinejoin\":\n              case \"textDecoration\":\n              case \"fontSize\":\n              case \"fontFamily\":\n              case \"fontWeight\":\n                //case \"focusable\":\n                //case \"tabindex\":\n                //case \"role\":\n                this[key] = this[key];\n                break;\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n\n      this.applyFilters();\n      this.visible = this.visible;\n      this.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\n\n      this._inited = true;\n\n      if (!this.showOnInit) {\n        this.appeared = true;\n      }\n\n      if (this.hidden) {\n        this.hide(0);\n      }\n\n      this.applyMask();\n      this.dispatch(\"validated\");\n      this.dispatch(\"inited\");\n      this.dispatchReady();\n    } else {\n      this.dispatch(\"validated\");\n    }\n\n    if (this.showTooltipOn == \"always\") {\n      if (this.visible && !this.disabled && !this.__disabled) {\n        this.showTooltip();\n      } else {\n        this.hideTooltip(0);\n      }\n    }\n  };\n  /**\r\n   * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n   *\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.dispatchReady = function () {\n    if (!this.isReady()) {\n      this._ready = true;\n      this.dispatch(\"ready\");\n    }\n  };\n  /**\r\n   * Triggers a re-initialization of this element.\r\n   *\r\n   * Will result in complete redrawing of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.reinit = function () {\n    this._inited = false;\n    this.setState(this.defaultState);\n    this.invalidate();\n  };\n  /**\r\n   * Handles the situation where parent element is resized.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.handleGlobalScale = function () {\n    this.dispatch(\"globalscalechanged\");\n\n    if (this.nonScalingStroke) {\n      this.strokeWidth = this.strokeWidth;\n    }\n\n    if (this.nonScaling) {\n      this.validatePosition();\n    }\n\n    this.updateFilterScale();\n  };\n  /**\r\n   * Updates filter properties which might depend on scale\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.updateFilterScale = function () {\n    var _this = this;\n\n    $iter.each(this.filters.iterator(), function (filter) {\n      filter.scale = _this.globalScale;\n    });\n  };\n  /**\r\n   * Removes itself from system's invalid lists.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.removeFromInvalids = function () {\n    registry.removeFromInvalidSprites(this);\n    registry.removeFromInvalidPositions(this);\n  };\n  /**\r\n   * Copies all parameters from another [[Sprite]].\r\n   *\r\n   * @param source Source Sprite\r\n   */\n\n\n  Sprite.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    _super.prototype.copyFrom.call(this, source);\n\n    this.isMeasured = source.isMeasured;\n    this.states.copyFrom(source.states);\n\n    if (source.filters.length > 0) {\n      source.filters.each(function (filter) {\n        _this.filters.push(filter.clone());\n      });\n    }\n\n    if (source._adapterO) {\n      this.adapter.copyFrom(source._adapterO);\n    } //helps to avoid calling getter which creates instance\n\n\n    if (source[\"_interaction\"]) {\n      this.interactions.copyFrom(source.interactions);\n    }\n\n    if (source[\"_plugins\"]) {\n      this.plugins.copyFrom(source.plugins);\n    }\n\n    this.configField = source.configField;\n    this.applyOnClones = source.applyOnClones; // this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\n    //this.mask = source.mask; need to think about this, generally this causes a lot of problems\n\n    this.disabled = source.disabled;\n    this.virtualParent = source.virtualParent;\n    this.exportable = source.exportable; //@todo: create tooltip if it's on source but not on this?\n    //const tooltip = this._tooltip;\n    //if (tooltip) {\n    //\ttooltip.copyFrom(source.tooltip);\n    //}\n\n    if (source._tooltip) {\n      if (this._tooltip) {\n        this._tooltip.copyFrom(source.tooltip);\n      } else {\n        if (source.cloneTooltip) {\n          this.tooltip = source.tooltip.clone();\n        } else {\n          this._tooltip = source.tooltip;\n        }\n      }\n    } //if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\n    //\tthis._tooltip = (<any>source)[\"_tooltip\"];\n    //}\n\n\n    this._showSystemTooltip = source.showSystemTooltip;\n    $utils.copyProperties(source.propertyFields, this.propertyFields);\n    $utils.copyProperties(source.properties, this);\n\n    if (source.fillModifier) {\n      this.fillModifier = source.fillModifier.clone();\n    }\n\n    if (source.strokeModifier) {\n      this.strokeModifier = source.strokeModifier.clone();\n    }\n\n    if (source.focusFilter) {\n      this.focusFilter = source.focusFilter.clone();\n    }\n  };\n  /**\r\n   * Destroys this object and all related data.\r\n   */\n\n\n  Sprite.prototype.dispose = function () {\n    if (!this.isDisposed()) {\n      if (this.showTooltipOn == \"always\" && this.tooltip) {\n        this.tooltip.hide();\n      }\n\n      this.dispatchImmediately(\"beforedisposed\");\n\n      if (this.isBaseSprite) {\n        if (this.htmlContainer) {\n          while (this.htmlContainer.childNodes.length > 0) {\n            this.htmlContainer.removeChild(this.htmlContainer.firstChild);\n          }\n        }\n\n        this.isBaseSprite = false;\n      }\n\n      _super.prototype.dispose.call(this); // Clear adapters\n\n\n      if (this._adapterO) {\n        this._adapterO.clear();\n      }\n\n      if (this.applyOnClones) {\n        if (this._clones) {\n          for (var i = this._clones.length - 1; i >= 0; i--) {\n            var clone = this._clones.getIndex(i);\n\n            clone.dispose();\n          }\n        }\n      }\n\n      if (this._svgContainer) {\n        this._svgContainer.dispose();\n      }\n\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n\n        this._interactionDisposer = undefined;\n      }\n\n      if (this._urlDisposer) {\n        this._urlDisposer.dispose();\n      }\n\n      this.removeFromInvalids();\n\n      if (this.element) {\n        this.element.dispose();\n      }\n\n      if (this.group) {\n        this.group.dispose();\n      }\n\n      if (this._numberFormatter) {\n        this._numberFormatter.dispose();\n      }\n\n      if (this._focusFilter) {\n        this._focusFilter.dispose();\n      }\n\n      var stroke = this.stroke;\n\n      if (stroke && !(stroke instanceof Color) && stroke.dispose) {\n        if (this.clonedFrom && this.clonedFrom.stroke == stroke) {// do nothing\n        } else {\n          stroke.dispose();\n        }\n      } // TODO a bit hacky\n\n\n      var fill = this.fill;\n\n      if (fill && !(fill instanceof Color) && fill.dispose) {\n        if (this.clonedFrom && this.clonedFrom.fill == fill) {// do nothing\n        } else {\n          fill.dispose();\n        }\n      } // remove from map\n\n\n      if ($type.hasValue(this.id)) {\n        this.map.removeKey(this.id);\n      }\n\n      this.parent = undefined;\n\n      if (this._filters) {\n        while (this._filters.length > 0) {\n          var filter = this._filters.getIndex(0);\n\n          filter.dispose();\n\n          this._filters.removeValue(filter);\n        }\n      }\n\n      this._alwaysShowDisposers = undefined;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isTemplate\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Is template?\r\n     */\n    get: function () {\n      return this._isTemplate;\n    },\n\n    /**\r\n     * Indicates if this element is a \"template\".\r\n     *\r\n     * Template Sprites act only as a holders for config for other \"real\"\r\n     * elements to be cloned from.\r\n     *\r\n     * Templates are treated differently, as they are not validated, redrawn, or\r\n     * otherwise are processed.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Is template?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this._isTemplate != value) {\n        this._isTemplate = value;\n\n        if (this instanceof Container) {\n          $iter.each(this.children.iterator(), function (child) {\n            child.isTemplate = value;\n          });\n        }\n\n        if (value) {\n          this.parent = this._parent;\n          this.removeFromInvalids();\n        } else {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showSystemTooltip\", {\n    /**\r\n     * @return Show system tooltip?\r\n     */\n    get: function () {\n      if (!$type.hasValue(this._showSystemTooltip)) {\n        if (this.virtualParent) {\n          return this.virtualParent.showSystemTooltip;\n        } else if (this._parent) {\n          return this._parent.showSystemTooltip;\n        } else {\n          return false;\n        }\n      }\n\n      return this._showSystemTooltip;\n    },\n\n    /**\r\n     * Indicates whether the element should attempt to construct itself in a way\r\n     * so that system tooltip is shown if its `readerTitle` is set.\r\n     *\r\n     * @param value Show system tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this._showSystemTooltip != value) {\n        this._showSystemTooltip = value;\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"topParent\", {\n    /**\r\n     * ==========================================================================\r\n     * HIERARCHY AND STRUCTURE RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Sprites's top-level [[Container]].\r\n     *\r\n     * Please note that in most cases it won't be the chart element.\r\n     *\r\n     * To access base chart element, use `baseSprite` instead.\r\n     *\r\n     * @return Top-level ascendant\r\n     */\n    get: function () {\n      if (this._topParent) {\n        return this._topParent;\n      } else {\n        if (this._parent) {\n          return this._parent.topParent;\n        }\n      }\n    },\n\n    /**\r\n     * @ignore\r\n     * @param value {Container} top parent of a sprite\r\n     */\n    set: function (value) {\n      this._topParent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"parent\", {\n    /**\r\n     * @return Parent container\r\n     */\n    get: function () {\n      return this._parent;\n    },\n\n    /**\r\n     * Elements' parent [[Container]].\r\n     *\r\n     * @param parent  Parent container\r\n     */\n    set: function (parent) {\n      if (this._isTemplate) {\n        return;\n      } // TODO is this needed ?\n\n\n      $utils.used(this.paper);\n      var oldParent = this._parent;\n\n      if (oldParent != parent) {\n        if (oldParent) {\n          oldParent.children.removeValue(this);\n        }\n\n        this._parent = parent;\n\n        if (parent) {\n          this.topParent = parent.topParent;\n\n          if (parent.isTemplate) {\n            this.isTemplate = true;\n          }\n\n          this.baseId = parent.baseId;\n          parent.children.push(this); // insert handler at Container invalidates +  invalidatesLayout + adds to group\n\n          if (this._tooltip && !this._tooltipContainer) {\n            this._tooltip.parent = parent.tooltipContainer;\n          }\n\n          if (!this._dataItem) {\n            this.dataItem = parent.dataItem;\n          }\n\n          this.handleAlwaysShowTooltip();\n\n          if (this.dataItem) {\n            // No need to apply accessibility if there's no data item\n            // The whole reason of applying it here is to populate data\n            // placesholders, and if tehre's no data item, it won't work anyway\n            this.applyAccessibility();\n          }\n\n          this.dispatchImmediately(\"parentset\");\n        } else {\n          this.topParent = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.handleAlwaysShow = function () {\n    this.showTooltip();\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.handleAlwaysShowTooltip = function () {\n    var sprite = this;\n    var oldDisposers = this._alwaysShowDisposers;\n\n    if (oldDisposers) {\n      $array.each(oldDisposers, function (oldDisposer) {\n        oldDisposer.dispose();\n      });\n    }\n\n    this._alwaysShowDisposers = [];\n\n    if (this.showTooltipOn == \"always\") {\n      while (sprite != undefined) {\n        var disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\n        this.addDisposer(disposer);\n\n        this._alwaysShowDisposers.push(disposer);\n\n        sprite = sprite.parent;\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"virtualParent\", {\n    /**\r\n     * @return Virtual parent\r\n     */\n    get: function () {\n      return this._virtualParent;\n    },\n\n    /**\r\n     * Element's \"virtual\" parent.\r\n     *\r\n     * This is required in ordere to maintain proper inheritance (like\r\n     * formatters).\r\n     *\r\n     * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n     * ascendant.\r\n     *\r\n     * Example: a bullet is not a child of the axis, but it would make sense\r\n     * for it to inherit series' formatters.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Virtual parent\r\n     */\n    set: function (value) {\n      this._virtualParent = value;\n\n      if (this.dataItem) {\n        // No need to apply accessibility if there's no data item\n        // The whole reason of applying it here is to populate data\n        // placesholders, and if tehre's no data item, it won't work anyway\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves `<defs>` to correct place in DOM.\r\n   *\r\n   * Some elements are initially created in \"ghost\" container. When moving\r\n   * those into proper place in DOM, their respective `<defs>` need to be moved\r\n   * as well.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.appendDefs = function () {\n    if (this.filterElement) {\n      this.paper.appendDef(this.filterElement);\n    }\n\n    var fill = this.fill;\n\n    if (fill && fill.element) {\n      this.paper.appendDef(fill.element);\n    }\n\n    var stroke = this.stroke;\n\n    if (stroke && stroke.element) {\n      this.paper.appendDef(stroke.element);\n    }\n\n    if (this.fillModifier && this.fill instanceof Color) {\n      var fill_1 = this.fillModifier.modify(this.fill);\n\n      if (fill_1 && fill_1.element) {\n        this.paper.appendDef(fill_1.element);\n      }\n    }\n\n    if (this.strokeModifier && this.stroke instanceof Color) {\n      var stroke_1 = this.strokeModifier.modify(this.stroke);\n\n      if (stroke_1 && stroke_1.element) {\n        this.paper.appendDef(stroke_1.element);\n      }\n    }\n\n    if (this._clipPath) {\n      this.paper.appendDef(this._clipPath);\n    }\n\n    if (this._exportable === false) {\n      this.exportable = false;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"map\", {\n    /**\r\n     * Returns a [[Dictionary]] which maps object ids with their respective\r\n     * objects.\r\n     *\r\n     * Can be used to retrieve any object by id, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     * ```JavaScript\r\n     * console.log(mySprite.map.getKey(\"myid\"));\r\n     * ```\r\n     *\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n\n      if (top) {\n        return top.map;\n      } else if (!this._map) {\n        this._map = new Dictionary();\n      }\n\n      return this._map;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"delayedMap\", {\n    /**\r\n     * @ignore\r\n     * @return Map collection\r\n     */\n    get: function () {\n      var top = this.topParent;\n\n      if (top) {\n        return top.delayedMap;\n      } else if (!this._delayedMap) {\n        this._delayedMap = new Dictionary();\n      }\n\n      return this._delayedMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"id\", {\n    /**\r\n     * @return ID\r\n     */\n    get: function () {\n      return this._id;\n    },\n\n    /**\r\n     * Element's user-defined ID.\r\n     *\r\n     * Will throw an Error if there already is an object with the same ID.\r\n     *\r\n     * Please note that above check will be performed withing the scope of the\r\n     * current chart instance. It will not do checks across other chart instances\r\n     * or in globally in DOM.\r\n     *\r\n     * Make sure the IDs are unique.\r\n     *\r\n     * @param value ID\r\n     */\n    set: function (value) {\n      if (this._id != value) {\n        this._id = value;\n\n        if (this.map.hasKey(value)) {\n          throw Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\n        } else {\n          this.map.setKey(value, this);\n        }\n\n        if (options.autoSetClassName) {\n          this.setClassName();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dom\", {\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns DOM element reference associated with this element.\r\n     *\r\n     * @readonly\r\n     * @return DOM element\r\n     */\n    get: function () {\n      return this.group.node;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paper\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Paper\r\n     */\n    get: function () {\n      if (this._paper) {\n        return this._paper;\n      } else {\n        var parent_2 = this._parent;\n\n        if (parent_2) {\n          return parent_2.paper;\n        }\n      }\n\n      return getGhostPaper();\n    },\n\n    /**\r\n     * A [[Paper]] instance to place elements on.\r\n     *\r\n     * If there's no Paper set for this element, it goes up the ascendant tree\r\n     * until it finds one.\r\n     *\r\n     * This method is used by important `addChild()` method, so it's essential\r\n     * to have a [[Paper]] instance.\r\n     *\r\n     * If this element has a separate `htmlContainer` set, it will have a\r\n     * [[Paper]] instance itself.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param paper  Paper\r\n     */\n    set: function (paper) {\n      this.setPaper(paper);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets [[Paper]] instance to use to draw elements.\r\n   * @ignore\r\n   * @param paper Paper\r\n   * @return true if paper was changed, false, if it's the same\r\n   */\n\n  Sprite.prototype.setPaper = function (paper) {\n    var oldPaper = this._paper;\n\n    if (oldPaper != paper) {\n      this._paper = paper;\n      this.appendDefs();\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"htmlContainer\", {\n    /**\r\n     * @return HTML element\r\n     */\n    get: function () {\n      if (this._htmlContainer) {\n        return this._htmlContainer;\n      } else {\n        var parent_3 = this._parent;\n\n        if (parent_3) {\n          return parent_3.htmlContainer;\n        }\n      }\n    },\n\n    /**\r\n     * An HTML element to be used when placing wrapper element (`<div>`)\r\n     * for the whole chart.\r\n     *\r\n     * This is the same for **all** elements within the same chart.\r\n     *\r\n     * @param htmlContainer HTML element\r\n     */\n    set: function (htmlContainer) {\n      this._htmlContainer = htmlContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"titleElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<title>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Title element\r\n     */\n    get: function () {\n      if (!this._titleElement) {\n        this._titleElement = this.paper.add(\"title\");\n        this.group.add(this._titleElement);\n      }\n\n      return this._titleElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"descriptionElement\", {\n    /**\r\n     * Creates (if not yet created) and returns element's `<desc>` element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Desc element\r\n     */\n    get: function () {\n      if (!this._descriptionElement) {\n        this._descriptionElement = this.paper.add(\"desc\");\n        this.group.add(this._descriptionElement);\n      }\n\n      return this._descriptionElement;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"filters\", {\n    /**\r\n     * Returns list of SVG filters (effects) applied to element. If the filter\r\n     * list is not yet initilized, creates and returns an empty one.\r\n     * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n     *\r\n     * @return List of filters\r\n     */\n    get: function () {\n      if (!this._filters) {\n        this._filters = new List(); // TODO only add certain events ?\n\n        this._disposers.push(this._filters.events.onAll(this.applyFilters, this));\n\n        this._disposers.push(new ListDisposer(this._filters));\n      }\n\n      return this._filters;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets required SVG attributes. Must be called every time an element is\r\n   * redrawn so that attributes are (re)applied.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.setSVGAttributes = function () {\n    this.fill = this.fill;\n    this.opacity = this.opacity;\n    this.fillOpacity = this.fillOpacity;\n    this.stroke = this.stroke;\n    this.strokeOpacity = this.strokeOpacity;\n    this.shapeRendering = this.shapeRendering;\n    this.strokeDasharray = this.strokeDasharray;\n    this.strokeDashoffset = this.strokeDashoffset;\n    this.strokeLinecap = this.strokeLinecap;\n    this.strokeLinejoin = this.strokeLinejoin;\n    this.focusable = this.focusable;\n    this.tabindex = this.tabindex;\n    this.role = this.role;\n  };\n  /**\r\n   * Sets an attribute directly on an SVG element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param attribute Attribute object\r\n   */\n\n\n  Sprite.prototype.setSVGAttribute = function (attribute) {\n    this.group.attr(attribute);\n  };\n  /**\r\n   * Removes an attribute directly from SVG element.\r\n   *\r\n   * @param attribute Attribute key to remove\r\n   */\n\n\n  Sprite.prototype.removeSVGAttribute = function (attribute) {\n    this.group.removeAttr(attribute);\n  };\n  /**\r\n   * Sets `class` attribute of the elements SVG node.\r\n   *\r\n   * Uses `am4core.options.classNamePrefix`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.setClassName = function () {\n    var className = this.className;\n    var classNamePrefix = options.classNamePrefix;\n\n    if (this.element) {\n      this.element.addClass(classNamePrefix + className);\n    }\n\n    this.group.addClass(classNamePrefix + className + \"-group\");\n\n    if ($type.hasValue(this.id)) {\n      this.group.addClass(classNamePrefix + this.id);\n    }\n\n    if (this.userClassName) {\n      this.group.addClass(this.userClassName);\n    }\n  };\n  /**\r\n   * Adds an `id` attribute the the element and returns the id.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Element's ID\r\n   */\n\n\n  Sprite.prototype.uidAttr = function () {\n    this.setSVGAttribute({\n      \"id\": this.uid\n    });\n    return this.uid;\n  };\n  /**\r\n   * [updateClipPath description]\r\n   *\r\n   * @todo Description\r\n   */\n\n\n  Sprite.prototype.updateClipPath = function () {\n    var element = this._clipElement;\n\n    if (element) {\n      element.moveTo({\n        x: this.mask.pixelX,\n        y: this.mask.pixelY\n      });\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.createClipPath = function () {\n    if (!this._clipPath) {\n      this._clipPath = this.paper.addGroup(\"clipPath\");\n      this.paper.appendDef(this._clipPath);\n\n      this._disposers.push(this._clipPath);\n\n      var id = registry.getUniqueId();\n\n      this._clipPath.attr({\n        \"id\": id\n      });\n\n      this.group.attr({\n        \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    }\n  };\n  /**\r\n   * Applies the mask Sprite.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyMask = function () {\n    var mask = this.mask;\n\n    if (this._clipPath && mask) {\n      // Container\n      if (mask instanceof Container) {\n        this._clipElement.attr({\n          \"width\": $math.max(0, mask.pixelWidth),\n          \"height\": $math.max(0, mask.pixelHeight)\n        });\n\n        var point = $utils.spritePointToSprite({\n          x: mask.pixelX,\n          y: mask.pixelY\n        }, mask.parent, this);\n        this._clipPath.x = point.x;\n        this._clipPath.y = point.y;\n      } // Sprite\n      else {\n        if (mask.element && mask.element != this._clipElement) {\n          this._clipElement = mask.element;\n\n          this._clipPath.add(this._clipElement);\n        }\n\n        this._clipPath.scale = mask.scale;\n        this._clipPath.x = mask.pixelX;\n        this._clipPath.y = mask.pixelY;\n        this._clipPath.rotation = mask.rotation;\n      }\n    }\n  };\n  /**\r\n   * Applies filters to the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyFilters = function () {\n    var _this = this; // we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\n    // svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\n\n\n    if (this._filters && this._filters.length > 0) {\n      var width_1 = 100;\n      var height_1 = 100;\n\n      if (!this.filterElement) {\n        this.filterElement = this.paper.addGroup(\"filter\");\n\n        this._disposers.push(this.filterElement);\n      } else {\n        this.filterElement.removeChildNodes();\n      }\n\n      this.paper.appendDef(this.filterElement);\n      var id = \"filter-\" + this.uid;\n      this.filterElement.attr({\n        \"id\": id\n      });\n      $iter.each(this.filters.iterator(), function (filter) {\n        filter.sprite = _this;\n        filter.paper = _this.paper;\n\n        _this.filterElement.attr({\n          filterUnits: filter.filterUnits\n        });\n\n        filter.appendPrimitives(_this.filterElement);\n\n        if (filter.width > width_1) {\n          width_1 = filter.width;\n        }\n\n        if (filter.height > height_1) {\n          height_1 = filter.height;\n        }\n\n        filter.scale = _this.globalScale;\n      });\n      var w = width_1 + \"%\";\n      var h = height_1 + \"%\";\n      /* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n      if (this._measuredHeight <= 1) {\r\n          h = height + \"\";\r\n      }\r\n        if (this._measuredWidth <= 1) {\r\n          h = width + \"\";\r\n      }*/\n\n      this.filterElement.attr({\n        \"width\": w,\n        \"height\": h,\n        \"x\": -(width_1 - 100) / 2 + \"%\",\n        \"y\": -(height_1 - 100) / 2 + \"%\"\n      });\n      this.group.attr({\n        \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\"\n      });\n    } else if (this.filterElement) {\n      this.group.removeAttr(\"filter\");\n      this.filterElement.removeChildNodes();\n    }\n  };\n  /**\r\n   * [removeClipPath description]\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description\r\n   */\n\n\n  Sprite.prototype.removeClipPath = function () {\n    if (this._clipPath) {\n      //this._clipPath.dispose();\n      this.removeDispose(this._clipPath);\n      this._clipPath = undefined;\n    }\n  };\n  /**\r\n   * [setElement description]\r\n   *\r\n   * @ignore\r\n   * @todo Description\r\n   * @param element [description]\r\n   */\n\n\n  Sprite.prototype.setElement = function (element) {\n    this.element = element;\n    this.setSVGAttributes();\n    this.applyAccessibility();\n  };\n\n  Object.defineProperty(Sprite.prototype, \"element\", {\n    /**\r\n     * @return Element\r\n     */\n    get: function () {\n      return this._element;\n    },\n\n    /**\r\n     * The main element for this Sprite, usually an SVG `<g>`.\r\n     *\r\n     * All other sub-elements are created in it.\r\n     *\r\n     * @param element  Element\r\n     */\n    set: function (element) {\n      // Destroy previous element if there was one before\n      this.removeElement(); // Set new element\n\n      this._element = element; // Add element to group\n      // Since we are adding Element to group, which is already in the\n      // `.disposers` it will be removed automatically when Sprite is disposed\n      // of\n\n      this.group.add(element);\n\n      if (element.node instanceof SVGPathElement) {\n        this._isPath = true;\n      } // This is needed if someone is setting element not in draw method but\n      // from outside\n\n\n      if (!this.invalid) {\n        this.validate();\n      }\n\n      if (options.autoSetClassName) {\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"svgContainer\", {\n    /**\r\n     * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n     * in.\r\n     *\r\n     * @return Container for chart elements\r\n     */\n    get: function () {\n      if (this._svgContainer) {\n        return this._svgContainer;\n      } else if (this._parent) {\n        return this._parent.svgContainer;\n      }\n    },\n\n    /**\r\n     * Sets HTML container to add SVG and other chart elements to.\r\n     *\r\n     * @param svgContainer Container for chart elements\r\n     */\n    set: function (svgContainer) {\n      this._svgContainer = svgContainer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Measures main element.\r\n   *\r\n   * Saves measurements into private `_bbox` property.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.measureElement = function () {\n    if (this.element) {\n      if (this.definedBBox) {\n        this._bbox = this.definedBBox;\n      } else {\n        var svgBBox = this.element.getBBox();\n        this._bbox = {\n          x: svgBBox.x,\n          y: svgBBox.y,\n          width: svgBBox.width,\n          height: svgBBox.height\n        };\n      }\n    }\n  };\n  /**\r\n   * Positions element according its center settings.\r\n   *\r\n   * @todo Description (review)\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.updateCenter = function () {\n    if (this.element) {\n      var prevElementTransform = this.element.transformString;\n      var bbox = this.bbox;\n      var ex = 0;\n      var ey = 0;\n      var elementX = bbox.x;\n      var elementY = bbox.y;\n      var elementWidth = bbox.width;\n      var elementHeigth = bbox.height;\n      var pixelPaddingLeft = this.pixelPaddingLeft;\n      var pixelPaddingRight = this.pixelPaddingRight;\n      var pixelPaddingTop = this.pixelPaddingTop;\n      var pixelPaddingBottom = this.pixelPaddingBottom; // add padding to the measured size\n\n      var measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\n      var measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight); // extremes\n\n      var left = bbox.x;\n      var right = bbox.x + measuredWidth;\n      var top_1 = bbox.y;\n      var bottom = bbox.y + measuredHeight;\n      var horizontalCenter = this.horizontalCenter;\n      var verticalCenter = this.verticalCenter;\n\n      switch (horizontalCenter) {\n        case \"none\":\n          ex = elementX + pixelPaddingLeft;\n          break;\n\n        case \"left\":\n          ex = pixelPaddingLeft;\n          break;\n\n        case \"middle\":\n          ex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\n          break;\n\n        case \"right\":\n          ex = -pixelPaddingRight - elementWidth;\n          break;\n      }\n\n      switch (verticalCenter) {\n        case \"none\":\n          ey = elementY + pixelPaddingTop;\n          break;\n\n        case \"top\":\n          ey = pixelPaddingTop;\n          break;\n\n        case \"middle\":\n          ey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\n          break;\n\n        case \"bottom\":\n          ey = -pixelPaddingBottom - elementHeigth;\n          break;\n      }\n\n      this._measuredHeight = measuredHeight;\n      this._measuredWidth = measuredWidth;\n      var x = $math.round(ex - elementX, this._positionPrecision, true);\n      var y = $math.round(ey - elementY, this._positionPrecision, true);\n      this.ex = x - pixelPaddingLeft;\n      this.ey = y - pixelPaddingTop;\n      this.maxLeft = left + x - pixelPaddingLeft;\n      this.maxRight = right + x - pixelPaddingLeft;\n      this.maxTop = top_1 + y - pixelPaddingTop;\n      this.maxBottom = bottom + y - pixelPaddingTop;\n\n      if (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\n        x -= 0.5;\n        y -= 0.5;\n      }\n\n      this.element.moveTo({\n        x: x,\n        y: y\n      });\n\n      if (prevElementTransform != this.element.transformString) {\n        this.dispatchImmediately(\"transformed\");\n      }\n    }\n  };\n  /**\r\n   * Measures the whole element.\r\n   *\r\n   * Returns `true` if the size has changed from the last measurement.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Did the size changed from the last measurement?\r\n   */\n\n\n  Sprite.prototype.measure = function () {\n    this.updateCenter();\n    var measuredWidth = this._measuredWidth;\n    var measuredHeight = this._measuredHeight; // extremes\n\n    var left = this.maxLeft;\n    var right = this.maxRight;\n    var top = this.maxTop;\n    var bottom = this.maxBottom; // non-parent wise size\n\n    this._measuredWidthSelf = measuredWidth;\n    this._measuredHeightSelf = measuredHeight;\n    var positionPrecision = this._positionPrecision;\n    this.maxLeftSelf = this.maxLeft;\n    this.maxRightSelf = this.maxRight;\n    this.maxTopSelf = this.maxTop;\n    this.maxBottomSelf = this.maxBottom; // if a sprite is rotated or scaled, calculate measured size after transformations\n\n    if (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\n      // not good to handleGlobalScale here.\n      if (this.nonScalingStroke) {\n        this.strokeWidth = this.strokeWidth;\n      }\n\n      var svg = this.paper.svg;\n      var matrix = svg.createSVGMatrix();\n      var rotation = this.rotation;\n      var scale = this.scale;\n\n      if (this.nonScaling) {\n        scale = this.scale / this.globalScale;\n      }\n\n      matrix.a = $math.cos(rotation) * scale;\n      matrix.c = -$math.sin(rotation) * scale;\n      matrix.e = 0;\n      matrix.b = $math.sin(rotation) * scale;\n      matrix.d = $math.cos(rotation) * scale;\n      matrix.f = 0;\n      var p1 = svg.createSVGPoint();\n      p1.x = left;\n      p1.y = top;\n      var p2 = svg.createSVGPoint();\n      p2.x = right;\n      p2.y = top;\n      var p3 = svg.createSVGPoint();\n      p3.x = right;\n      p3.y = bottom;\n      var p4 = svg.createSVGPoint();\n      p4.x = left;\n      p4.y = bottom;\n      var pt1 = p1.matrixTransform(matrix);\n      var pt2 = p2.matrixTransform(matrix);\n      var pt3 = p3.matrixTransform(matrix);\n      var pt4 = p4.matrixTransform(matrix);\n      left = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\n      right = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\n      top = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\n      bottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\n      measuredWidth = right - left;\n      measuredHeight = bottom - top;\n      this.maxLeft = $math.round(left, positionPrecision, true);\n      this.maxRight = $math.round(right, positionPrecision, true);\n      this.maxTop = $math.round(top, positionPrecision, true);\n      this.maxBottom = $math.round(bottom, positionPrecision, true);\n    }\n\n    this._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\n    this._measuredHeight = $math.round(measuredHeight, positionPrecision, true); // dispatch event\n\n    if (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\n      this._prevMeasuredHeight = this._measuredHeight;\n      this._prevMeasuredWidth = this._measuredWidth; // TODO clear existing sizechanged dispatches ?\n\n      this.dispatch(\"sizechanged\");\n\n      if ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\n        this.updateTooltipPosition();\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Insert this element before sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n\n\n  Sprite.prototype.insertBefore = function (sprite) {\n    var parent = this._parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n\n      if (index !== -1) {\n        parent.children.moveValue(this, index);\n        parent.sortChildren();\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Insert this element after sibling element.\r\n   *\r\n   * @param sprite  Target element\r\n   * @return This element\r\n   */\n\n\n  Sprite.prototype.insertAfter = function (sprite) {\n    var parent = this._parent;\n\n    if (parent) {\n      var index = parent.children.indexOf(sprite);\n\n      if (index !== -1) {\n        parent.children.moveValue(this, index + 1);\n        parent.sortChildren();\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the main SVG element.\r\n   *\r\n   * This does not destroy the whole Sprite element. To do that use\r\n   * `dispose()` instead.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.removeElement = function () {\n    // remove visual element\n    if (this._element) {\n      this.removeDispose(this._element);\n      this._element = undefined;\n    }\n  };\n  /**\r\n   * Returns relative (percent) value of the X coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return Relative value\r\n   */\n\n\n  Sprite.prototype.getRelativeX = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerWidth;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Returns relative (percent) value of the Y coordindate within this element.\r\n   *\r\n   * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n   * as relative value.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Relative value\r\n   */\n\n\n  Sprite.prototype.getRelativeY = function (value) {\n    if (value instanceof Percent) {\n      return value.value;\n    } else if (this._parent) {\n      return value / this._parent.innerHeight;\n    }\n\n    return 0;\n  };\n  /**\r\n   * Returns an X coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative X coordinate\r\n   * @return X coordinate in pixels\r\n   */\n\n\n  Sprite.prototype.getPixelX = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\n      }\n    }\n\n    return pixel;\n  };\n  /**\r\n   * Returns an Y coordinate in pixel within the element.\r\n   *\r\n   * If number is passed in as parameter, the same number will be returned\r\n   * back.\r\n   *\r\n   * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n   *\r\n   * @param value  Absolute or relative Y coordinate\r\n   * @return Y coordinate in pixels\r\n   */\n\n\n  Sprite.prototype.getPixelY = function (value) {\n    // we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\n    // all the time and this would result chain of the same actions and will slow down the system a lot\n    var pixel = 0;\n\n    if ($type.isNumber(value)) {\n      pixel = value;\n    } else if (value instanceof Percent) {\n      var relative = value.value;\n\n      if (this._parent) {\n        pixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\n      }\n    }\n\n    return pixel;\n  };\n  /**\r\n   * Moves the element to a specified coordinates.\r\n   *\r\n   * Using this method is preferred method of moving element, as it saves some\r\n   * CPU processing power over setting `x` and `y` properties separately.\r\n   *\r\n   * The method respects element's center settings. The element will be\r\n   * positioned so that `point` coordinates come in whatever \"center\" of the\r\n   * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n   *\r\n   * Besides moving the element, you can also at the same time scale and\r\n   * rotate the element.\r\n   *\r\n   * @param point     New coordinates\r\n   * @param rotation  New rotation\r\n   * @param scale     New Scale\r\n   */\n\n\n  Sprite.prototype.moveTo = function (point, rotation, scale, isDragged) {\n    if (this.isDragged && !isDragged) {\n      return;\n    }\n\n    if (point) {\n      if ($type.isNumber(point.x)) {\n        this.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\n      }\n\n      if ($type.isNumber(point.y)) {\n        this.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\n      }\n    }\n\n    if ($type.isNumber(rotation)) {\n      this.rotation = rotation;\n    }\n\n    if ($type.isNumber(scale)) {\n      this.scale = scale;\n    } // must leave this\n\n\n    this.invalidatePosition();\n  };\n\n  Object.defineProperty(Sprite.prototype, \"mask\", {\n    /**\r\n     * Returns [[Sprite]] element currently used as mask for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return A [[Sprite]] to use as mask\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this._mask.get();\n      } else {\n        return this._adapterO.apply(\"mask\", this._mask.get());\n      }\n    },\n\n    /**\r\n     * Sets another [[Sprite]] element as this elements mask.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param mask A [[Sprite]] to use as mask\r\n     */\n    set: function (mask) {\n      var _this = this;\n\n      if (this._mask.get() !== mask) {\n        // this is good\n        if (mask) {\n          this.createClipPath();\n\n          if (!(mask instanceof Container)) {\n            mask.isMeasured = false;\n\n            if (mask.element) {\n              this._clipElement = mask.element;\n            }\n          } else {\n            this._clipElement = this.paper.add(\"rect\");\n          }\n\n          if (this._clipElement) {\n            this._clipPath.add(this._clipElement);\n          }\n\n          this._mask.set(mask, new MultiDisposer([//mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\n          mask.events.on(\"maxsizechanged\", function () {\n            if (_this.inited) {\n              _this.applyMask();\n            }\n          }, undefined, false), mask.events.on(\"validated\", this.applyMask, this, false), mask.events.on(\"positionchanged\", this.applyMask, this, false)]));\n\n          this.applyMask();\n        } else {\n          this._mask.reset();\n\n          this.group.removeAttr(\"clip-path\");\n          this.removeClipPath();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maskRectangle\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Mask Rectangle\r\n     */\n    get: function () {\n      return this._maskRectangle;\n    },\n    // you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\n\n    /**\r\n     * Instead of creating a [[Sprite]] for mask, you can just use a\r\n     * [[Rectangle]] by setting this accessor.\r\n     *\r\n     * Please note that the element will not monitor any changes to the mask\r\n     * rectangle.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param rect Mask Rectangle\r\n     */\n    set: function (rect) {\n      if (rect) {\n        this.createClipPath();\n\n        if (!this._clipElement) {\n          this._clipElement = this.paper.add(\"rect\");\n\n          this._clipPath.add(this._clipElement);\n        }\n\n        this._clipElement.attr({\n          \"width\": rect.width,\n          \"height\": rect.height\n        });\n      } else {\n        this.removeClipPath();\n        this._clipElement = undefined;\n      }\n\n      this._maskRectangle = rect;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isMeasured\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Was element already measured?\r\n     */\n    get: function () {\n      return this._isMeasured;\n    },\n\n    /**\r\n     * Indicates if this element was already measured.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Was element already measured?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (!value) {\n        this._measuredWidth = 0;\n        this._measuredHeight = 0; //this._pixelHeight = 0;\n        //this._pixelWidth = 0;\n      }\n\n      if (this._isMeasured != value) {\n        this._isMeasured = value;\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if the this element has any of its parts overlapping with another\r\n   * element.\r\n   *\r\n   * @todo Description (review)\r\n   * @param sprite  Second element to test again\r\n   * @return Overlapping?\r\n   */\n\n  Sprite.prototype.hitTest = function (sprite) {\n    // validate, otherwise we will not know measuredWidth and measuredHeight\n    if (this.invalid) {\n      this.validate();\n    }\n\n    if (sprite.invalid) {\n      sprite.validate();\n    }\n\n    var ax1 = this.pixelX + this.maxLeft;\n    var ay1 = this.pixelY + this.maxTop;\n    var ax2 = ax1 + this.maxRight;\n    var ay2 = ay1 + this.maxBottom;\n    var bx1 = sprite.pixelX + sprite.maxLeft;\n    var by1 = sprite.pixelY + sprite.maxTop;\n    var bx2 = bx1 + sprite.maxRight;\n    var by2 = by1 + sprite.maxBottom;\n    return !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\n  };\n\n  Object.defineProperty(Sprite.prototype, \"inited\", {\n    /**\r\n     * ==========================================================================\r\n     * STATE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns `true` if Sprite has already finished initializing.\r\n     *\r\n     * @return Initialized?\r\n     */\n    get: function () {\n      return this._inited;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns `true` if Sprite has already finished initializing and is ready.\r\n   *\r\n   * If this object is a [[Container]] it will wait for all of its children\r\n   * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n   *\r\n   * @return is ready?\r\n   */\n\n  Sprite.prototype.isReady = function () {\n    return this._ready;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"states\", {\n    /**\r\n     * Returns a collection of element's available [[SpriteState]] entries.\r\n     *\r\n     * @see {@link SpriteState}\r\n     * @return States\r\n     */\n    get: function () {\n      if (!this._states) {\n        var state = new SpriteState(); // works\n\n        this._states = new DictionaryTemplate(state); // TODO what about removeKey ?\n\n        this._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\n\n        this._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\n\n        this._disposers.push(new DictionaryDisposer(this._states));\n\n        this._disposers.push(state);\n      }\n\n      return this._states;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hiddenState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"hidden\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"hidden\")) {\n        var hiddenState = this.states.create(\"hidden\");\n        hiddenState.properties.opacity = 0;\n        hiddenState.properties.visible = false;\n      }\n\n      return this.states.getKey(\"hidden\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"defaultState\", {\n    /**\r\n     * Returns a [[SpriteState]] object for \"default\" state.\r\n     *\r\n     * This is a shortcut to `this.states.getKey(\"default\")`.\r\n     *\r\n     * @return Hidden state\r\n     */\n    get: function () {\n      if (!this.states.getKey(\"default\")) {\n        var defaultState = this.states.create(\"default\");\n        defaultState.properties.opacity = 1;\n      }\n\n      return this.states.getKey(\"default\");\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks if some key states are defined and updates Sprite properties\r\n   * accordingly.\r\n   *\r\n   * For example if there's a state \"down\" defined for Sprite, we automatically\r\n   * make it \"clickable\".\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param event An event which caused state list update\r\n   */\n\n  Sprite.prototype.processState = function (event) {\n    var state = event.newValue;\n    state.sprite = this;\n    state.name = event.key;\n\n    if (this.states.hasKey(\"hover\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.hoverable = true;\n    }\n\n    if (this.states.hasKey(\"down\") || this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText))) {\n      this.clickable = true;\n    }\n\n    if (this.states.hasKey(\"focus\")) {\n      this.focusable = true;\n    } // Propagate the new state to clones\n\n\n    if (this.applyOnClones) {\n      var clones = this.clones.values;\n      var length_1 = clones.length;\n\n      for (var i = 0; i < length_1; ++i) {\n        var clone = clones[i];\n\n        if (!clone.isDisposed()) {\n          clone.states.setKey(state.name, state);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"animations\", {\n    /**\r\n     * Returns a list elements's animations currently being played.\r\n     *\r\n     * If the list has not been initialized it is created.\r\n     *\r\n     * @return List of animations\r\n     */\n    get: function () {\n      if (!this._animations) {\n        this._animations = [];\n\n        this._disposers.push(new AnimationDisposer(this._animations));\n      }\n\n      return this._animations;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts element's local coordinates to the coordinates within the main\r\n   * chart container.\r\n   *\r\n   * @param point  Local point\r\n   * @return Global point\r\n   */\n\n  Sprite.prototype.getSvgPoint = function (point) {\n    try {\n      // Calculate SVG point\n      var bbox = this.htmlContainer.getBoundingClientRect();\n      return {\n        \"x\": point.x - bbox.left,\n        \"y\": point.y - bbox.top\n      };\n    } catch (e) {\n      return point;\n    }\n  };\n  /**\r\n   * Creates and starts an [[Animation]] with given `animationOptions`.\r\n   *\r\n   * @see {@link Animation} for additional information about available options\r\n   * @param animationOptions  Animation options\r\n   * @param duration          Duration in milliseconds\r\n   * @param easing            Easing function\r\n   * @return Animation instance\r\n   */\n\n\n  Sprite.prototype.animate = function (animationOptions, duration, easing) {\n    return new Animation(this, animationOptions, duration, easing).start();\n  };\n  /**\r\n   * Applies a [[SpriteState]] on this element.\r\n   *\r\n   * The first parameter can either be a name state or a [[SpriteState]]\r\n   * instance.\r\n   *\r\n   * When run, this method will apply SVG properties defined in a\r\n   * [[SpriteState]], but only those that are relevant to this particular\r\n   * element, i.e. are in the `properties` array.\r\n   *\r\n   * @see {@link SpriteState}\r\n   * @param value               A state - name key or instance\r\n   * @param transitionDuration  Duration of the transition between current and new state\r\n   * @param easing              An easing function\r\n   */\n\n\n  Sprite.prototype.setState = function (value, transitionDuration, easing) {\n    var state;\n\n    if (value instanceof SpriteState) {\n      this.states.setKey(value.name, value);\n      state = value;\n    } else {\n      state = this.states.getKey(value);\n\n      if (!state) {\n        return;\n      }\n    } // stop previous transition\n    // not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\n    //if (this._transition) {\n    //this._transition.stop();\n    //}\n\n\n    if (state.name == \"hover\") {\n      if (this.isHidden) {\n        return;\n      }\n\n      this.isHover = true;\n    }\n\n    if (state.name == \"hidden\") {\n      this.isHiding = true;\n    } else {\n      if (!this.visible) {\n        this.setVisibility(state.properties.visible || this.defaultState.properties.visible);\n      }\n    }\n\n    if (state.name == \"active\") {\n      this.isActive = true;\n    } // we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\n\n\n    if (!$type.isNumber(transitionDuration)) {\n      transitionDuration = state.transitionDuration;\n    }\n\n    if (!$type.hasValue(easing)) {\n      easing = state.transitionEasing;\n    }\n\n    return this.transitTo(state, transitionDuration, easing);\n  };\n  /**\r\n   * Applies proper state based on the condition of the element. A condition is\r\n   * deducted in this order:\r\n   * * \"hover\" if Sprite has currently any pointers over it\r\n   * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n   * * \"focus\" if Sprite has currently got focus (accessibility)\r\n   * * \"hidden\" if Sprite is currently hidden\r\n   *\r\n   * Returns an [[Animation]] object, which is handling gradual transition from\r\n   * current values of properties, to the new target state(s).\r\n   *\r\n   * @param duration  Duration for the animation (ms)\r\n   * @return [[Animation]] object which is handling the transition\r\n   */\n\n\n  Sprite.prototype.applyCurrentState = function (duration) {\n    //if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\n    var animation = this.setState(this.defaultState, duration);\n\n    if (this.isHover) {\n      animation = this.setState(\"hover\", duration);\n    }\n\n    if (this.isDown && this.interactions.downPointers.length) {\n      animation = this.setState(\"down\", duration);\n    }\n\n    this.isFocused = this.isFocused;\n\n    if (this.isActive) {\n      animation = this.setState(\"active\", duration);\n\n      if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n        animation = this.setState(\"hoverActive\", duration);\n      }\n    }\n\n    return animation; //}\n  };\n  /**\r\n   * Starts an [[Animation]] of the properties to specific values as they are\r\n   * set in `state`.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param state     Target State\r\n   * @param duration  Duration in milliseconds\r\n   * @param easing    Easing function\r\n   * @return Transition Animation\r\n   */\n\n\n  Sprite.prototype.transitTo = function (state, duration, easing) {\n    var _this = this; // Init\n\n\n    var options = [],\n        propValues = state.allValues,\n        transition; // todo: do this for numeric/color properties only?\n    // @todo use state.getPropertyValue instead\n\n    $object.each(propValues, function (propertyName, finalValue) {\n      var currentValue = _this[propertyName]; // save current value to default state. this solves a big problem where values must be set both on sprite and default state\n\n      if (finalValue != currentValue && _this.defaultState.properties[propertyName] == undefined) {\n        _this.defaultState.properties[propertyName] = currentValue;\n      } //if (finalValue != currentValue && $type.hasValue(finalValue)) {\n\n\n      if (finalValue != \"__unset\") {\n        var option = {\n          from: currentValue,\n          to: finalValue,\n          property: propertyName\n        };\n        options.push(option);\n      }\n    });\n\n    if (options.length > 0) {\n      transition = this.animate(options, duration, easing);\n\n      if (transition && !transition.isFinished()) {\n        // TODO should this use events.once ?\n        // TODO push onto _disposers array ?\n        this._disposers.push(transition.events.on(\"animationended\", function () {\n          _this.dispatchImmediately(\"transitionended\");\n        }));\n      } else {\n        this.dispatchImmediately(\"transitionended\");\n      }\n    } // apply filters if set\n\n\n    if (state.filters.length > 0) {\n      var newFilters_1 = []; // check for the same filters\n\n      $iter.each(state.filters.iterator(), function (stateFilter) {\n        var newFilter = stateFilter.clone();\n        newFilters_1.push(newFilter);\n        var animationOptions = [];\n        $iter.each(_this.filters.iterator(), function (currentFilter) {\n          // if we have the same filters\n          if (currentFilter.className == newFilter.className) {\n            if (!$iter.contains(_this.defaultState.filters.iterator(), function (x) {\n              return x.className === newFilter.className;\n            })) {\n              _this.defaultState.filters.push(currentFilter);\n            }\n\n            $object.each(newFilter.properties, function (propertyName, newValue) {\n              var currentValue = currentFilter.properties[propertyName]; // if values are not the same, push to animation options array\n\n              if (currentValue != newValue) {\n                animationOptions.push({\n                  property: propertyName,\n                  from: currentValue,\n                  to: newValue\n                });\n              }\n            });\n          }\n        }); // animate to new value\n\n        newFilter.animate(animationOptions, duration, easing);\n      });\n      this.filters.clear();\n      this.filters.pushAll(newFilters_1);\n    }\n\n    return transition;\n  };\n  /**\r\n   * Returns `true` if Sprite is currently transiting from one state/value to\r\n   * another.\r\n   *\r\n   * @return Is in transition?\r\n   */\n\n\n  Sprite.prototype.isInTransition = function () {\n    return this.animations.length > 0;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isHover\", {\n    /**\r\n     * @return Is hovered?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isHover;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element has a mouse pointer currently hovering\r\n     * over it, or if it has any touch pointers pressed on it.\r\n     *\r\n     * You can force element to be \"hovered\" manually, by setting this property\r\n     * to `true`.\r\n     *\r\n     * @param value Is hovered?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (value !== this.isHover) {\n        if (this.isInteractive()) {\n          this.interactions.isHover = value;\n\n          if (value) {\n            this.handleOver();\n          } else {\n            this.interactions.isRealHover = false;\n            this.handleOut();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDragged\", {\n    /**\r\n     * Returns indicator if this element is being dragged at the moment.\r\n     *\r\n     * @return Is dragged?\r\n     */\n    get: function () {\n      return this._isDragged;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isResized\", {\n    /**\r\n     * Returns indicator if this element is being resized at the moment.\r\n     *\r\n     * @return Is resized?\r\n     */\n    get: function () {\n      return this._isResized;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isDown\", {\n    /**\r\n     * @return Is down?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isDown;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element has any pointers (mouse or touch) pressing down\r\n     * on it.\r\n     *\r\n     * @param value Is down?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.isInteractive() && this.isDown != value) {\n        this.interactions.isDown = value;\n\n        if (value) {\n          this.handleDown();\n        } else {\n          this.handleUp();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isFocused\", {\n    /**\r\n     * @return Is focused?\r\n     */\n    get: function () {\n      if (this.isInteractive()) {\n        return this.interactions.isFocused;\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Indicates if this element is focused (possibly by tab navigation).\r\n     *\r\n     * @param value Is focused?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.focusable && this.isFocused != value) {\n        if (this.isInteractive()) {\n          this.interactions.isFocused = value;\n\n          if (value === true) {\n            this.handleFocus();\n          } else {\n            this.handleBlur();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"isActive\", {\n    /**\r\n     * @return Is active?\r\n     */\n    get: function () {\n      return this._isActive;\n    },\n\n    /**\r\n     * Indicates if this element is currently active (toggled on) or not\r\n     * (toggled off).\r\n     *\r\n     * @param value Is active?\r\n     */\n    set: function (value) {\n      this.setActive(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setActive = function (value) {\n    value = $type.toBoolean(value);\n\n    if (this._isActive !== value) {\n      this._isActive = value;\n\n      if (value && this.states.hasKey(\"active\")) {\n        this.setState(\"active\");\n\n        if (this.isHover && this.states.hasKey(\"hoverActive\")) {\n          this.setState(\"hoverActive\");\n        }\n      } else {\n        this.applyCurrentState();\n      }\n\n      this.dispatchImmediately(\"toggled\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"disabled\", {\n    /**\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      //if(this._internalDisabled){\n      //\treturn true;\n      //}\n      var current = this.getPropertyValue(\"disabled\");\n\n      if ($type.hasValue(current)) {\n        return current;\n      } else {\n        if (this.virtualParent) {\n          return this.virtualParent.disabled;\n        }\n\n        if (this._parent) {\n          return this._parent.disabled;\n        }\n      }\n\n      return false;\n    },\n\n    /**\r\n     * Controls if element is disabled.\r\n     *\r\n     * A disabled element is hidden, and is removed from any processing, layout\r\n     * calculations, and generally treated as if it does not exist.\r\n     *\r\n     * The element itself is not destroyed, though. Setting this back to `false`,\r\n     * will \"resurrect\" the element.\r\n     *\r\n     * @param value  Disabled?\r\n     */\n    set: function (value) {\n      this.setDisabled(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setDisabled = function (value) {\n    value = $type.toBoolean(value);\n    var current = this.getPropertyValue(\"disabled\");\n\n    if (current != value) {\n      this.setPropertyValue(\"disabled\", value, true);\n\n      if (value) {\n        this.parent = this._parent;\n        this.removeFromInvalids();\n        this.group.attr({\n          \"display\": \"none\"\n        });\n        this.dispatch(\"disabled\");\n      } else {\n        if (this._parent) {\n          var group = this._parent.element;\n\n          if (!group.hasChild(this.group)) {\n            group.add(this.group);\n          }\n        }\n\n        if (this instanceof Container) {\n          this.deepInvalidate();\n\n          if (this._background) {\n            this._background.invalidate();\n          }\n        } else {\n          this.invalidate();\n        }\n\n        if (!this.__disabled) {\n          this.removeSVGAttribute(\"display\");\n        }\n\n        this.dispatch(\"enabled\");\n      }\n\n      this.dispatch(\"transformed\");\n      system.requestFrame();\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"__disabled\", {\n    /**\r\n     * @ignore\r\n     * @return Disabled?\r\n     */\n    get: function () {\n      return this._internalDisabled;\n    },\n\n    /**\r\n     * Internal disable method.\r\n     *\r\n     * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Disabled?\r\n     */\n    set: function (value) {\n      if (this._internalDisabled != value) {\n        this._internalDisabled = value;\n        this._updateDisabled = true;\n        this.invalidatePosition(); // better use this instead of invalidate()\n\n        if (!value) {\n          this.invalidate();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"numberFormatter\", {\n    /**\r\n     * @return A [[NumberFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._numberFormatter) {\n        return this._numberFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.numberFormatter;\n      } else if (this._parent) {\n        return this._parent.numberFormatter;\n      }\n\n      this._numberFormatter = new NumberFormatter();\n      this._numberFormatter.language = this.language;\n      return this.numberFormatter;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A [[NumberFormatter]] instance.\r\n     *\r\n     * This is used to format numbers.\r\n     *\r\n     * ```TypeScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"numberFormatter\": {\r\n     *     \"numberFormat\": \"#,###.#####\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     *\r\n     * @see {@link NumberFormatter} for more info on formatting numbers\r\n     * @param value  An instance of NumberFormatter\r\n     */\n    set: function (value) {\n      this._numberFormatter = value;\n      this._numberFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dateFormatter\", {\n    /**\r\n     * @return An instance of DateFormatter\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.dateFormatter;\n      } else if (this._parent) {\n        return this._parent.dateFormatter;\n      }\n\n      this._dateFormatter = new DateFormatter();\n      this._dateFormatter.language = this.language;\n      return this.dateFormatter;\n    },\n\n    /**\r\n     * A [[DateFormatter]] instance.\r\n     *\r\n     * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dateFormatter\": {\r\n     *     \"dateFormat\": \"yyyy-MM-dd\"\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DateFormatter} for more info on dates formatting\r\n     * @param value  An instance of DateFormatter\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n      this._dateFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"durationFormatter\", {\n    /**\r\n     * @return An instance of DurationFormatter\r\n     */\n    get: function () {\n      if (this._durationFormatter) {\n        return this._durationFormatter;\n      } else if (this.virtualParent) {\n        return this.virtualParent.durationFormatter;\n      } else if (this._parent) {\n        return this._parent.durationFormatter;\n      }\n\n      this._durationFormatter = new DurationFormatter();\n      this._durationFormatter.language = this.language;\n      return this.durationFormatter;\n    },\n\n    /**\r\n     * A [[DurationFormatter]] instance.\r\n     *\r\n     * This is used to format numbers as durations, e.g. on a value axes.\r\n     *\r\n     * You can set a separate instance of formatter for each\r\n     * individual element. However that would be unnecessary overhead as\r\n     * all elements would automatically inherit formatter from their parents,\r\n     * all the way up to the chart itself.\r\n     *\r\n     * @see {@link DurationFormatter} for more info on durations\r\n     * @param value  An instance of DurationFormatter\r\n     */\n    set: function (value) {\n      this._durationFormatter = value;\n      this._durationFormatter.language = this.language;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"language\", {\n    /**\r\n     * @return An instance of Language\r\n     */\n    get: function () {\n      var language = this._language.get();\n\n      if (language) {\n        return language;\n      } else if (this.virtualParent) {\n        return this.virtualParent.language;\n      } else if (this._parent) {\n        return this._parent.language;\n      }\n\n      language = new Language();\n      this.language = language;\n      return language;\n    },\n\n    /**\r\n     * A [[Language]] instance to use for translations.\r\n     *\r\n     * Normally it is enough to set language for the top-most element - chart.\r\n     *\r\n     * All other element child elements will automatically re-use that language\r\n     * object.\r\n     *\r\n     * @param value  An instance of Language\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._language.get() !== value) {\n        this._language.set(value, value.events.on(\"localechanged\", function (ev) {\n          if (_this._numberFormatter) {\n            _this._numberFormatter.language = _this.language;\n          }\n\n          if (_this._dateFormatter) {\n            _this._dateFormatter.language = _this.language;\n          }\n\n          if (_this._durationFormatter) {\n            _this._durationFormatter.language = _this.language;\n          }\n\n          if (_this._exporting.get()) {\n            var exporting = _this._exporting.get();\n\n            exporting.numberFormatter.language = _this.language;\n            exporting.dateFormatter.language = _this.language;\n            exporting.durationFormatter.language = _this.language;\n            exporting.language = _this.language;\n          }\n\n          if (_this instanceof Container) {\n            _this.deepInvalidate();\n          }\n        }));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * DATA-RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Parses the string for meta tags `{tag}` and replaces them with a real\r\n   * value. Supports straight up tags referring to the field in data, i.e.\r\n   * `{value}` or tags with additional formatting info. E.g.:\r\n   *\r\n   * ```Text\r\n   * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n   * {myfield.formatDate()}\r\n   * {myfield.formatNumber(\"#,####.00\")}\r\n   * {myfield.formatNumber()}\r\n   * {myField.formatDuration(\"mm:ss\")}\r\n   * ```\r\n   *\r\n   * Etc.\r\n   *\r\n   * This method Will automatically detect and use proper formatter for the\r\n   * value.\r\n   *\r\n   * The source value will be looked up in various places: (in order)\r\n   * * Sprite's own `dataItem`\r\n   * * Sprite's properties\r\n   * * Parent's `dataItem`\r\n   * * Parent's properties\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param string            A string to format\r\n   * @param dataItem          DataItem\r\n   * @return Formatted string\r\n   */\n\n  Sprite.prototype.populateString = function (string, dataItem) {\n    if ($type.hasValue(string)) {\n      string = $type.castString(string);\n      string = getTextFormatter().escape(string);\n      var tags = string.match(/\\{([^}]+)\\}/g);\n      var i = void 0;\n\n      if (tags) {\n        for (i = 0; i < tags.length; i++) {\n          var tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\n          var value = this.getTagValue(tag, \"\", dataItem);\n\n          if (!$type.hasValue(value)) {\n            value = \"\";\n          }\n\n          string = string.split(tags[i]).join(value);\n        }\n      }\n\n      string = getTextFormatter().unescape(string);\n    } else {\n      string = \"\";\n    }\n\n    if (!this._adapterO) {\n      return string;\n    } else {\n      return this._adapterO.apply(\"populateString\", string);\n    }\n  };\n  /**\r\n   * Gets the value from data item and formats it according to specified format.\r\n   *\r\n   * If `format` is specified, it will use its contents to choose formatter for\r\n   * the value. Otherwise it will select formatter accordingly to actual value\r\n   * type.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Ability to force certain formatter on known numeric and date values\r\n   * @see {@link NumberFormatter}\r\n   * @see {@link DateFormatter}\r\n   * @see {@link DurationFormatter}\r\n   * @param tagName           Tag name to replace\r\n   * @param format            Format to use\r\n   * @param dataItem          DataItem\r\n   * @return Formatted value\r\n   */\n\n\n  Sprite.prototype.getTagValue = function (tagName, format, dataItem) {\n    var value;\n\n    if (!$type.hasValue(dataItem)) {\n      dataItem = this.dataItem;\n    } // Parse parts\n\n\n    var parts = [];\n    var reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;\n    ;\n    var matches;\n\n    while (true) {\n      matches = reg.exec(tagName);\n\n      if (matches === null) {\n        break;\n      }\n\n      if (matches[3]) {\n        // Simple property\n        parts.push({\n          prop: matches[3]\n        });\n      } else {\n        // Method\n        // Parse parameters\n        var params = [];\n\n        if ($utils.trim(matches[2]) != \"\") {\n          var reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\n          var matches2 = void 0;\n\n          while (true) {\n            matches2 = reg2.exec(matches[2]);\n\n            if (matches2 === null) {\n              break;\n            }\n\n            params.push(matches2[1] || matches2[2] || matches2[3]);\n          }\n        }\n\n        parts.push({\n          method: matches[1],\n          params: params\n        });\n      }\n    } // Check if we can retrieve the value from data item\n\n\n    if (dataItem) {\n      // Check values\n      value = this.getTagValueFromObject(parts, dataItem.values); // Check properties\n\n      if (!$type.hasValue(value) || $type.isObject(value)) {\n        // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\n        value = this.getTagValueFromObject(parts, dataItem);\n      } // Check data context\n\n\n      var dataContext = dataItem.dataContext;\n\n      if (!$type.hasValue(value) && dataContext) {\n        value = this.getTagValueFromObject(parts, dataItem.dataContext); // Maybe it's a literal dot-separated name of the key in dataContext?\n\n        if (!$type.hasValue(value)) {\n          value = this.getTagValueFromObject([{\n            prop: tagName\n          }], dataContext);\n        } // scond data context level sometimes exist (tree map)\n\n\n        if (!$type.hasValue(value) && dataContext.dataContext) {\n          value = this.getTagValueFromObject(parts, dataContext.dataContext);\n        }\n      } // Check component's data item\n\n\n      if (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\n        value = dataItem.component.getTagValue(tagName, format);\n      }\n    } // Check sprite's properties\n\n\n    if (!$type.hasValue(value)) {\n      value = this.getTagValueFromObject(parts, this.populateStringFrom || this);\n    } // Finally, check the parent\n\n\n    if (!$type.hasValue(value) && this._parent) {\n      value = this._parent.getTagValue(tagName, format);\n    }\n\n    return value;\n  };\n  /**\r\n   * Tries to retrieve values from properties of any object, then applies\r\n   * proper formatting to it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Description (improve)\r\n   * @param parts   Properties ant methods to access\r\n   * @param object  Source object\r\n   * @param format  A specific format to apply\r\n   * @return Formatted value\r\n   */\n\n\n  Sprite.prototype.getTagValueFromObject = function (parts, object, format) {\n    var current = object;\n    var formatApplied = false;\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n\n      if (part.prop) {\n        // Regular property\n        current = current[part.prop];\n\n        if (!$type.hasValue(current)) {\n          // Not set, return undefined\n          return;\n        }\n      } else {\n        // Method\n        switch (part.method) {\n          case \"formatNumber\":\n            var numberValue = $utils.anyToNumber(current);\n\n            if ($type.hasValue(numberValue)) {\n              current = this.numberFormatter.format(numberValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"formatDate\":\n            var dateValue = void 0;\n\n            if ($type.isString(current)) {\n              dateValue = this.dateFormatter.parse(current);\n            } else {\n              dateValue = $utils.anyToDate(current);\n            }\n\n            if (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\n              // Was not able to get date out of value, quitting and letting\n              // calling method try another value\n              return;\n            }\n\n            if ($type.hasValue(dateValue)) {\n              current = this.dateFormatter.format(dateValue, format || part.params[0] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"formatDuration\":\n            var durationValue = $utils.anyToNumber(current);\n\n            if ($type.hasValue(durationValue)) {\n              current = this.durationFormatter.format(durationValue, format || part.params[0] || undefined, part.params[1] || undefined);\n              formatApplied = true;\n            }\n\n            break;\n\n          case \"urlEncode\":\n          case \"encodeURIComponent\":\n            current = encodeURIComponent(current);\n            break;\n\n          default:\n            if (current[part.method]) {\n              current[part.method].apply(this, part.params);\n            }\n\n            break;\n        }\n      }\n    } // Apply default format if it wasn't applied explicitly\n\n\n    if (!formatApplied) {\n      var formatParts = [{\n        method: \"\",\n        params: format\n      }];\n\n      if (!$type.hasValue(format)) {\n        // Format is not set\n        // Determine from the type of the value\n        if ($type.isNumber(current)) {\n          formatParts[0].method = \"formatNumber\";\n          formatParts[0].params = \"\";\n        } else if ($type.isDate(current)) {\n          formatParts[0].method = \"formatDate\";\n          formatParts[0].params = \"\";\n        }\n      } else {\n        // Format set\n        // Try to determine formatter based on the format\n        var formatterType = $utils.getFormat(format); // format\n\n        if (formatterType === $strings.NUMBER) {\n          formatParts[0].method = \"formatNumber\";\n        } else if (formatterType === $strings.DATE) {\n          formatParts[0].method = \"formatDate\";\n        } else if (formatterType === $strings.DURATION) {\n          formatParts[0].method = \"formatDuration\";\n        }\n      } // Apply format\n\n\n      if (formatParts[0].method) {\n        current = this.getTagValueFromObject(formatParts, current);\n      }\n    }\n\n    return current;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"dataItem\", {\n    /**\r\n     * @return [[DataItem]]\r\n     */\n    get: function () {\n      if (!this._dataItem) {\n        if (this.virtualParent) {\n          return this.virtualParent.dataItem;\n        }\n\n        if (this._parent) {\n          return this._parent.dataItem;\n        }\n      }\n\n      return this._dataItem;\n    },\n\n    /**\r\n     * A [[DataItem]] to use as element's data source.\r\n     *\r\n     * @todo Review type\r\n     * @param dataItem  DataItem\r\n     */\n    set: function (dataItem) {\n      //an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\n      // @todo:think about it\n      this.setDataItem(dataItem);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets currently used [[DataItem]].\r\n   *\r\n   * If the element has also `configField` set, it will also look for any\r\n   * config in DataItem's data context to apply to this element.\r\n   *\r\n   * @param dataItem DataItem\r\n   */\n\n  Sprite.prototype.setDataItem = function (dataItem) {\n    var _this = this;\n\n    if (this._dataItem != dataItem) {\n      this._dataItem = dataItem;\n\n      if (dataItem) {\n        if (this.configField) {\n          var dataContext_1 = dataItem.dataContext;\n\n          if (dataContext_1) {\n            this.config = dataContext_1[this.configField];\n\n            if (!this.config && dataContext_1.dataContext) {\n              this.config = dataContext_1.dataContext[this.configField];\n            }\n          }\n        }\n\n        var dataContext_2 = dataItem.dataContext;\n\n        if (dataContext_2) {\n          var dataContext2_1 = dataContext_2.dataContext;\n          $object.each(this.propertyFields, function (propertyName, fieldValue) {\n            if ($type.hasValue(dataContext_2[fieldValue])) {\n              var anyThis = _this;\n              anyThis[propertyName] = dataContext_2[fieldValue];\n            } else {\n              if (dataContext2_1) {\n                var value = dataContext2_1[fieldValue];\n\n                if ($type.hasValue(value)) {\n                  var anyThis = _this;\n                  anyThis[propertyName] = value;\n                }\n              }\n            }\n          });\n        }\n      }\n\n      this.invalidate();\n    }\n  };\n  /**\r\n   * ==========================================================================\r\n   * PROPERTY UTILITIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Returns element's property value.\r\n   *\r\n   * Will check if there are any bindings with [[DataItem]].\r\n   *\r\n   * Will also apply any adapters bound to `propertyName`.\r\n   *\r\n   * @param propertyName  Property name\r\n   * @return Property value\r\n   */\n\n\n  Sprite.prototype.getPropertyValue = function (propertyName) {\n    var propValue = this.properties[propertyName]; // Apply adapter\n\n    if (!this._isTemplate) {\n      if (this._adapterO) {\n        propValue = this._adapterO.apply(propertyName, propValue);\n      }\n\n      propValue = globalAdapter.applyAll(this, propertyName, propValue);\n    }\n\n    return propValue;\n  };\n\n  Sprite.prototype.setColorProperty = function (property, value, invalidate) {\n    var currentValue = this.properties[property];\n\n    if (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\n      return false;\n    } else {\n      return this.setPropertyValue(property, value, invalidate);\n    }\n  };\n\n  Sprite.prototype.setPercentProperty = function (property, value, invalidate, transform, precision, floor) {\n    value = $type.toNumberOrPercent(value);\n\n    if ($type.isNumber(value)) {\n      if ($type.isNumber(precision)) {\n        value = $math.round(value, precision, floor);\n      }\n\n      return this.setPropertyValue(property, value, invalidate, transform);\n    } else {\n      var currentValue = this.properties[property];\n\n      if (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\n        return false;\n      } else {\n        return this.setPropertyValue(property, value, invalidate, transform);\n      }\n    }\n  };\n  /**\r\n   * Sets elements's property value. Will also propagate the same property value\r\n   * on all element's clones.\r\n   *\r\n   * @param property    Property\r\n   * @param value       Value\r\n   * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n   * @param transform   Re-apply positioning of the element\r\n   * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n   * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n   */\n\n\n  Sprite.prototype.setPropertyValue = function (property, value, invalidate, transform) {\n    if (this.properties[property] !== value && !this.isDisposed()) {\n      this.properties[property] = value;\n\n      if (this.events.isEnabled(\"propertychanged\")) {\n        var event_1 = {\n          type: \"propertychanged\",\n          target: this,\n          property: property\n        };\n        this.events.dispatchImmediately(\"propertychanged\", event_1);\n      }\n\n      if (invalidate) {\n        this.invalidate();\n      }\n\n      if (transform) {\n        this.invalidatePosition();\n      }\n\n      if (this.applyOnClones) {\n        var clones = this.clones.values;\n        var length_2 = clones.length;\n\n        for (var i = 0; i < length_2; ++i) {\n          var clone = clones[i];\n\n          if (!clone.isDisposed()) {\n            //(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\n            clone[property] = value;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  Sprite.prototype.bind = function (property, source, bindToProperty, modifier) {\n    var _this = this;\n\n    if (bindToProperty === void 0) {\n      bindToProperty = property;\n    }\n\n    if ($type.hasValue(this._bindings[property])) {\n      this._bindings[property].dispose();\n    } // set current value\n\n\n    this[property] = source[bindToProperty]; //source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\n\n    this._bindings[property] = source.events.on(\"propertychanged\", function (event) {\n      if (event.property === bindToProperty) {\n        var value = source[bindToProperty];\n\n        if (modifier) {\n          value = modifier(value);\n        } // TODO clonesById\n\n\n        _this[property] = value;\n      }\n    });\n  };\n  /**\r\n   * Sets up and obeserver function to monitor changes in particular property\r\n   * or properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param property  Element's property name\r\n   * @param listener  Handler function\r\n   * @param context   Context for handler function\r\n   * @returns Event Disposer\r\n   */\n\n\n  Sprite.prototype.observe = function (property, listener, context, shouldClone) {\n    var _this = this;\n\n    return new MultiDisposer($array.map($array.toArray(property), function (prop) {\n      return _this.events.on(\"propertychanged\", function (e) {\n        if (e.property === prop) {\n          listener.call(context, e);\n        }\n      }, context, shouldClone);\n    }));\n  };\n  /**\r\n   * ==========================================================================\r\n   * ACCESSIBILITY-RELATED PROPERTIES\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Applies accessibility to the SVG element.\r\n   *\r\n   * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n   * and `role` properties.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.applyAccessibility = function () {\n    // Check if we need to add label and description\n    var title = this.readerTitle,\n        description = this.readerDescription,\n        role = this.role,\n        hidden = this.readerHidden,\n        checked = this.readerChecked,\n        controls = this.readerControls,\n        live = this.readerLive,\n        orientation = this.readerOrientation,\n        valueNow = this.readerValueNow,\n        valueText = this.readerValueText; // Init label/describe ids\n\n    var labelledByIds = [];\n    var describedByIds = [];\n    var labelledBy = this.readerLabelledBy;\n\n    if (labelledBy) {\n      labelledByIds.push(labelledBy);\n    }\n\n    var describedBy = this.readerDescribedBy;\n\n    if (describedBy) {\n      describedByIds.push(describedBy);\n    } // Add arial-label attribute if present\n    // If not readerTitle and labelledBy is set we will use <title> element\n    // instead of aria-label\n    // TODO: should we check agains this.showSystemTooltip?\n\n\n    if (title) {\n      if (labelledByIds.length || this.showSystemTooltip) {\n        var titleElement = this.titleElement;\n        var titleId = this.uid + \"-title\";\n\n        if (titleElement.node.textContent != title) {\n          titleElement.node.textContent = title;\n          titleElement.attr({\n            id: titleId\n          });\n        }\n\n        labelledByIds.push(titleId);\n      } else {\n        if (this._titleElement) {\n          this.group.removeElement(this._titleElement);\n          this._titleElement = undefined;\n        }\n\n        this.setSVGAttribute({\n          \"aria-label\": title\n        });\n      }\n    } else {\n      this.removeSVGAttribute(\"aria-label\");\n\n      if (this._titleElement) {\n        this.group.removeElement(this._titleElement);\n        this._titleElement = undefined;\n      }\n    } // Add description\n\n\n    if (description) {\n      var descriptionElement = this.descriptionElement;\n      var descriptionId = this.uid + \"-description\";\n\n      if (descriptionElement.node.textContent != description) {\n        descriptionElement.node.textContent = description;\n        descriptionElement.attr({\n          id: descriptionId\n        });\n      }\n\n      describedByIds.push(descriptionId);\n    } else if (this._descriptionElement) {\n      this.group.removeElement(this._descriptionElement);\n      this._descriptionElement = undefined;\n    } // Add label and described properties\n\n\n    if (labelledByIds.length) {\n      this.setSVGAttribute({\n        \"aria-labelledby\": labelledByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-labelledby\");\n    }\n\n    if (describedByIds.length) {\n      this.setSVGAttribute({\n        \"aria-describedby\": describedByIds.join(\" \")\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-describedby\");\n    } // Apply role\n\n\n    if (role) {\n      this.setSVGAttribute({\n        \"role\": role\n      });\n    } else {\n      this.removeSVGAttribute(\"role\");\n    } // Apply aria-hidden\n\n\n    if (hidden) {\n      this.setSVGAttribute({\n        \"aria-hidden\": \"true\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-hidden\");\n    } // Apply aria-checked\n\n\n    if (checked) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"true\"\n      });\n    } else if (checked === false) {\n      this.setSVGAttribute({\n        \"aria-checked\": \"false\"\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-checked\");\n    } // Apply aria-controls\n\n\n    if (controls) {\n      this.setSVGAttribute({\n        \"aria-controls\": controls\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-controls\");\n    } // Apply aria-live\n\n\n    if (live) {\n      this.setSVGAttribute({\n        \"aria-live\": live\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-live\");\n    } // Apply aria-orientation\n\n\n    if (orientation) {\n      this.setSVGAttribute({\n        \"aria-orientation\": orientation\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-orientation\");\n    } // Apply aria-valuenow\n\n\n    if (valueNow) {\n      this.setSVGAttribute({\n        \"aria-valuenow\": valueNow\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuenow\");\n    } // Apply aria-valuetext\n\n\n    if (valueText) {\n      this.setSVGAttribute({\n        \"aria-valuetext\": valueText\n      });\n    } else {\n      this.removeSVGAttribute(\"aria-valuetext\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"readerTitle\", {\n    /**\r\n     * @return Title\r\n     */\n    get: function () {\n      var title = this.getPropertyValue(\"readerTitle\");\n\n      if ($type.hasValue(title) && this.dataItem) {\n        return this.populateString(title);\n      }\n\n      return title;\n    },\n\n    /**\r\n     * Screen reader title of the element.\r\n     *\r\n     * @param value Title\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerTitle\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescription\", {\n    /**\r\n     * @return Description\r\n     */\n    get: function () {\n      var description = this.getPropertyValue(\"readerDescription\");\n\n      if ($type.hasValue(description) && this.dataItem) {\n        return this.populateString(description);\n      }\n\n      return this.getPropertyValue(\"readerDescription\");\n    },\n\n    /**\r\n     * Screen reader description of the element.\r\n     *\r\n     * @param value Description\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerDescription\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"role\", {\n    /**\r\n     * @return Role\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"role\");\n    },\n\n    /**\r\n     * A WAI-ARIA role for the element.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n     * @param value  Role\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"role\", value)) {\n        this.applyAccessibility();\n\n        if (value == \"slider\") {\n          this.setSVGAttribute({\n            \"aria-valuemin\": \"0\"\n          });\n          this.setSVGAttribute({\n            \"aria-valuemax\": \"100\"\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerHidden\", {\n    /**\r\n     * @return Hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerHidden\");\n    },\n\n    /**\r\n     * Controls if element should be hidden from screen readers.\r\n     *\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n     * @param value  Hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"readerHidden\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerChecked\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Checked?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerChecked\");\n    },\n\n    /**\r\n     * Controls if element is currently marked as \"checked\".\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n     * @param value Checked?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"readerChecked\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerControls\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerControls\");\n    },\n\n    /**\r\n     * A `uid` of an element this element controls.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerControls\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLive\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Setting value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLive\");\n    },\n\n    /**\r\n     * Controls accessibility setting \"aria-live\" for the element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n     * @param value Setting value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerLive\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerLabelledBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerLabelledBy\");\n    },\n\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerLabelledBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerDescribedBy\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Target element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerDescribedBy\");\n    },\n\n    /**\r\n     * A `uid` of an element that describes this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n     * @param value Target element\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerDescribedBy\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerOrientation\", {\n    /**\r\n     * @return Orientation\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerOrientation\");\n    },\n\n    /**\r\n     * Orientation of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Orientation\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerOrientation\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueNow\", {\n    /**\r\n     * @return Current value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueNow\");\n    },\n\n    /**\r\n     * Current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerValueNow\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"readerValueText\", {\n    /**\r\n     * @return Current value (text)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"readerValueText\");\n    },\n\n    /**\r\n     * Text representation of the current value of the element.\r\n     *\r\n     * @since 4.7.16\r\n     * @param value Current value (text)\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"readerValueText\", value)) {\n        this.applyAccessibility();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"keyboardOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * USER INTERACTIONS\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns elements keyboard options.\r\n     *\r\n     * @return Keyboard options\r\n     */\n    get: function () {\n      if (!this.interactions.keyboardOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.keyboardOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.keyboardOptions;\n        }\n      }\n\n      return this.interactions.keyboardOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"mouseOptions\", {\n    /**\r\n     * Mouse options.\r\n     *\r\n     * Enables controlling options related to the mouse, for example sensitivity\r\n     * of its mouse wheel.\r\n     *\r\n     * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n     * speed:\r\n     *\r\n     * ```TypeScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"plotContainer\": {\r\n     *     \"mouseOptions\": {\r\n     *       \"sensitivity\": 0.5\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @return Mouse options\r\n     */\n    get: function () {\n      if (!this.interactions.mouseOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.mouseOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.mouseOptions;\n        }\n      }\n\n      return this.interactions.mouseOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"interactions\", {\n    /**\r\n     * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n     * this element.\r\n     *\r\n     * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n     * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n     *\r\n     * @return Interaction object\r\n     */\n    get: function () {\n      if (!this._interaction) {\n        var interaction = getInteraction().getInteraction(this.dom);\n        this._interaction = interaction;\n        this._interaction.clickable = this.clickable;\n        this._interaction.hoverable = this.hoverable;\n        this._interaction.trackable = this.trackable;\n        this._interaction.draggable = this.draggable;\n        this._interaction.swipeable = this.swipeable;\n        this._interaction.resizable = this.resizable;\n        this._interaction.wheelable = this.wheelable;\n        this._interaction.contextMenuDisabled = this.contextMenuDisabled;\n        this._interaction.inert = this.inert;\n        this._interaction.sprite = this;\n\n        this._disposers.push(this._interaction);\n      }\n\n      return this._interaction;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n   * @return Is Sprite interactive?\r\n   */\n\n  Sprite.prototype.isInteractive = function () {\n    if (this._interaction) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"focusable\", {\n    /**\r\n     * @return Can element be focused?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"focusable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * ELEMENT FOCUS-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Controls if the element can gain focus.\r\n     *\r\n     * Focusable element will be selectable via TAB key.\r\n     *\r\n     * Please note, clicking it with a mouse or touching will not add focus to\r\n     * it.\r\n     *\r\n     * Focused element will show a system-specific highlight, which might ruin\r\n     * the overal look. This is why we don't focus element on click/touch.\r\n     *\r\n     * A default setting varies for different elements. By default all elements\r\n     * are not focusable, except certain items like buttons, legend items, etc.\r\n     *\r\n     * @default undefined (auto)\r\n     * @param value  Can element be focused?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"focusable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.interactions.focusable = value;\n\n          if (value) {\n            this.setSVGAttribute({\n              \"focusable\": value\n            });\n\n            if (!$type.hasValue(this._tabindex)) {\n              this.tabindex = 0;\n            }\n          } else {\n            this.removeSVGAttribute(\"focusable\");\n            this.tabindex = undefined;\n          } // Set focus events that would apply \"focus\" state\n          // setEventDisposer will also remove listeners if value == false\n\n\n          this.interactions.setEventDisposer(\"sprite-focusable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"blur\", _this.handleBlur, _this, false), _this.events.on(\"focus\", _this.handleFocus, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies filters (if set) when element gains focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n\n  Sprite.prototype.handleFocus = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = true;\n        this.topParent.focusedElement = this;\n      }\n\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.push(this.focusFilter);\n      }\n\n      if (this.hoverOnFocus) {\n        // Trigger a hover event as well\n        this.isHover = true;\n        this.handleOver();\n      }\n    }\n  };\n  /**\r\n   * Removes focus filter (if set) when elementloses focus.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Original event\r\n   */\n\n\n  Sprite.prototype.handleBlur = function (ev) {\n    if (this.focusable) {\n      if (this.topParent) {\n        this.topParent.hasFocused = false;\n        this.topParent.focusedElement = undefined;\n      }\n\n      if (this.focusFilter) {\n        // Any `filters` manipulation will trigger `applyFilters()` so we don't\n        // need to call it here\n        this.filters.removeValue(this.focusFilter);\n      }\n\n      if (this.hoverOnFocus) {\n        // Trigger a out event as well\n        this.isHover = false;\n        this.handleOut();\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"focusFilter\", {\n    /**\r\n     * A reference to a [[Filter]] to apply to element when it gains focus.\r\n     *\r\n     * Normally, browsers will draw a default ugly square around focused element,\r\n     * which totally makes sense because its purpose is to help identify active\r\n     * element for visually impaired people.\r\n     *\r\n     * However, if you would rather apply a filter, so you can modify how focused\r\n     * element looks like, use `focusFilter`.\r\n     *\r\n     * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n     * object.\r\n     *\r\n     * ```TypeScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.focusFilter = new am4core.FocusFilter();\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"focusFilter\": {\r\n     *     \"type\": \"FocusFilter\"\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @see {@link Filter}\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n     * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n     * @ignore Exclude from docs\r\n     * @return Focused element filter\r\n     */\n    get: function () {\n      /*if (!this._focusFilter) {\r\n          this._focusFilter = new FocusFilter();\r\n          this._disposers.push(this._focusFilter);\r\n      }*/\n      //return this._focusFilter;\n      var focusFilter = this._focusFilter;\n\n      if (focusFilter) {\n        return focusFilter;\n      }\n\n      if (this.virtualParent) {\n        return this.virtualParent.focusFilter;\n      } else if (this._parent) {\n        return this._parent.focusFilter;\n      } //this._focusFilter = new FocusFilter();\n      //this._disposers.push(this._focusFilter);\n\n    },\n\n    /**\r\n     * @see {@link Filter}\r\n     * @ignore Exclude from docs\r\n     * @todo This is still experimental, don't use it\r\n     */\n    set: function (value) {\n      this._focusFilter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOnFocus\", {\n    /**\r\n     * @return Trigger hover on focus?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverOnFocus\");\n    },\n\n    /**\r\n     * If set to `true`, this element will also trigger `\"over\"` event with all\r\n     * the related consequences, like \"hover\" state being applied and tooltip\r\n     * being shown.\r\n     *\r\n     * Useful as an accessibility feature to display rollover tooltips on items\r\n     * selected via keyboard.\r\n     *\r\n     * @param value  Trigger hover on focus?\r\n     * @default false\r\n     */\n    set: function (value) {\n      if (value !== this.hoverOnFocus) {\n        this.setPropertyValue(\"hoverOnFocus\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tabindex\", {\n    /**\r\n     * @return TAB index\r\n     */\n    get: function () {\n      var index = this._tabindex;\n\n      if (index != null) {\n        return index;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tabindex;\n      } else if (this._parent) {\n        return this._parent.tabindex;\n      }\n    },\n\n    /**\r\n     * Sets or returns TAB index.\r\n     *\r\n     * Tab index maintains the order in which focusable elements gain focus when\r\n     * TAB key is pressed.\r\n     *\r\n     * Please note, tab index is not local to the chart. It affects the whole\r\n     * of the page, including non-SVG elements. Maintain extreme causion when\r\n     * setting tab indexes, as it affects the user experience for the whole\r\n     * web page.\r\n     *\r\n     * @param value TAB index\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\n        this.interactions.tabindex = value;\n        this.setSVGAttribute({\n          \"tabindex\": value\n        });\n        this._tabindex = value;\n        this.focusable = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"inertiaOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * DRAGGING AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's options to be used for inertia. This setting is\r\n     * inheritable, meaning that if not set directly, it will search in all its\r\n     * ascendants until very top.\r\n     *\r\n     * Inertia is used only if element's `inert` is set to `true`.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n     *\r\n     * @return Inertia options\r\n     */\n    get: function () {\n      if (!this.interactions.inertiaOptions) {\n        if (this._parent) {\n          return this._parent.inertiaOptions;\n        }\n      }\n\n      return this.interactions.inertiaOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"draggable\", {\n    /**\r\n     * @return `true` if element can be dragged\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"draggable\");\n    },\n\n    /**\r\n     * Controls if the element is draggable.\r\n     *\r\n     * @param value  `true` if element can be dragged\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"draggable\", value)) {\n        if (!value && !this.isInteractive()) {} else {\n          this.applyCursorStyle();\n          this.interactions.draggable = value; //interaction.processDraggable(this);\n          // Add events\n          // @todo Maybe attach to InteractionObject's multidisposer so that\n          // sprites events get disposed together with them?\n          // this.interactions.disposers.getItem(\"movable\")\n          // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-draggable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"dragstart\", _this.handleDragStart, _this, false), _this.events.on(\"drag\", _this.handleDragMove, _this, false), _this.events.on(\"dragstop\", _this.handleDragStop, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Executes when dragged element is being started to drag.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype.handleDragStart = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this._isDragged = true;\n      this.hideTooltip(0);\n    }\n  };\n  /**\r\n   * Tell this element to start being dragged. This is useful if you want to\r\n   * drag items by interactions performed not directly on the target element.\r\n   *\r\n   * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n   * will ensure that movement is tracked for the pointer that you want. If not\r\n   * supplied, the system will try to determine the most logical pointer.\r\n   *\r\n   * However this may fail if you have more than one pointer active, which\r\n   * might happen if you have several objects being dragged on a touch device.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use for movement\r\n   */\n\n\n  Sprite.prototype.dragStart = function (pointer) {\n    //this.dragStop(pointer);\n    //this.draggable = true;\n    this._isDragged = true;\n    getInteraction().dragStart(this.interactions, pointer);\n  };\n  /**\r\n   * Executes when dragged element is being dropped.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype.handleDragStop = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isDragged = false;\n      this.showTooltip();\n      this.interactions.originalPosition = undefined;\n    }\n  };\n  /**\r\n   * Stops manually initiated dragging of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param pointer Pointer to use as a reference\r\n   */\n\n\n  Sprite.prototype.dragStop = function (pointer, cancelled) {\n    //this.draggable = false;\n    this._isDragged = false;\n    getInteraction().dragStop(this.interactions, pointer, cancelled); //this.handleDragStop();\n  };\n  /**\r\n   * Executes when {Sprite} is being dragged.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   * @todo Implement parent position offset calculation\r\n   */\n\n\n  Sprite.prototype.handleDragMove = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      var point = this.interactions.originalPosition;\n\n      if (point && this._isDragged) {\n        var globalScale = this._parent.globalScale * this.svgContainer.cssScale;\n        this.moveTo({\n          x: point.x + ev.shift.x / globalScale,\n          y: point.y + ev.shift.y / globalScale\n        }, undefined, undefined, true);\n      }\n\n      this.dispatchImmediately(\"dragged\", ev);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"inert\", {\n    /**\r\n     * @return `true` if element should use inertia when animated\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"inert\");\n    },\n\n    /**\r\n     * Controls if the element should use inertia when interacted with.\r\n     *\r\n     * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n     * movement, and will continue moving in the same drag direction, gradually\r\n     * reducing in speed until finally stops.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element should use inertia when animated\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"inert\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.interactions.inert = value;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * HOVERING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns Sprite's hover options.\r\n     *\r\n     * @see {@link IHoverOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hoverOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hoverOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.hoverOptions;\n        }\n      }\n\n      return this.interactions.hoverOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"hoverable\", {\n    /**\r\n     * @return `true` if element is hoverable\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hoverable\");\n    },\n\n    /**\r\n     * Controls if the element is hoverable (hover events are registered).\r\n     *\r\n     * Use `over` and `out` events, to watch for those respective actions.\r\n     *\r\n     * @default false\r\n     * @param value `true` if element can be hovered\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"hoverable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.hoverable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-hoverable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"over\", _this.handleOver, _this, false), _this.events.on(\"out\", _this.handleOut, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles tasks when element becomes hovered:\r\n   * * Shows [[Tooltip]] if applicable\r\n   * * Applies \"hover\" state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n  Sprite.prototype.handleOver = function (ev) {\n    if (this._outTimeout) {\n      this._outTimeout.dispose();\n    }\n\n    if (this.isHover) {\n      if (this.states.hasKey(\"hover\")) {\n        //this.setState(\"hover\");\n        // This will check `isHover` and will set \"hover\" state\n        if (!this.isHidden) {\n          this.applyCurrentState();\n        }\n      }\n\n      var point = void 0;\n\n      if (ev && ev.pointer) {\n        point = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n      }\n\n      if (this.showTooltipOn == \"hover\") {\n        this.showTooltip(point);\n      }\n    } else {\n      if (this.showTooltipOn == \"hover\") {\n        this.hideTooltip();\n      }\n\n      if (!this.isHidden && this.states.hasKey(\"hover\")) {\n        this.applyCurrentState();\n      }\n    }\n  };\n  /**\r\n   * Handles tasks when element loses hover:\r\n   *\r\n   * * Hides [[Tooltip]]\r\n   * * Applies default state\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev [description]\r\n   */\n\n\n  Sprite.prototype.handleOut = function (ev) {\n    var _this = this;\n\n    if (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\n      this._outTimeout = this.setTimeout(function () {\n        if (!_this.tooltip.isHover) {\n          if (_this.tooltip.targetSprite == _this) {\n            _this.hideTooltip();\n          }\n\n          _this._outTimeout = _this.setTimeout(_this.handleOutReal.bind(_this), _this.rollOutDelay);\n        }\n      }, 10);\n      return;\n    }\n\n    if (this.showTooltipOn == \"hover\") {\n      this.hideTooltip();\n    }\n\n    this._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\n  };\n  /**\r\n   * [handleOutReal description]\r\n   *\r\n   * @ignore\r\n   * @todo description\r\n   */\n\n\n  Sprite.prototype.handleOutReal = function () {\n    if (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\n      this.applyCurrentState();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"hitOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * CLICKING/TAPPING AND TOGGLING STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns Sprite's click (hit) options.\r\n     *\r\n     * Click (hit) options control things like double-click, timeouts, etc.\r\n     *\r\n     * @see {@link IHitOptions} for available options.\r\n     * @return Options\r\n     */\n    get: function () {\n      if (!this.interactions.hitOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.hitOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.hitOptions;\n        }\n      }\n\n      return this.interactions.hitOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Prepares element's after `down` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n  Sprite.prototype.handleDown = function (ev) {\n    if (this.interactions.downPointers.length === 1) {\n      this.interactions.originalPosition = {\n        x: this.pixelX,\n        y: this.pixelY\n      };\n      this.interactions.originalAngle = this.rotation;\n      this.interactions.originalScale = this.scale;\n\n      if (this.states.hasKey(\"down\")) {\n        this.setState(\"down\");\n      }\n    }\n  };\n  /**\r\n   * Prepares element's after `up` event.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n\n  Sprite.prototype.handleUp = function (ev) {\n    var _this = this;\n    /*if (!this.isDown) {\r\n        this.interactions.originalPosition = null;\r\n        this.interactions.originalAngle = null;\r\n        this.interactions.originalScale = null;\r\n    }*/\n\n\n    this._isResized = false;\n\n    if (this.states.hasKey(\"down\")) {\n      this.applyCurrentState();\n    }\n\n    if (this.showTooltipOn == \"hit\") {\n      this.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\n\n      this._disposers.push(registry.events.once(\"exitframe\", function () {\n        _this.showTooltip();\n      }));\n\n      this._disposers.push(getInteraction().body.events.once(\"down\", function (ev) {\n        _this.hideTooltip();\n      }));\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"clickable\", {\n    /**\r\n     * @return {boolean}\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"clickable\");\n    },\n\n    /**\r\n     * Indicates if the element is clickable.\r\n     *\r\n     * Some type of the elements, like buttons are clickable by default.\r\n     *\r\n     * Most of the elements are not clickable by default.\r\n     *\r\n     * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n     * respective click/touch actions.\r\n     *\r\n     * @param value `true` if element can be clicked\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"clickable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.clickable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-clickable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"up\", _this.handleUp, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"togglable\", {\n    /**\r\n     * @return Is togglable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"togglable\");\n    },\n\n    /**\r\n     * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n     *\r\n     * Togglable element will alternate its `isActive` property between `true`\r\n     * and `false` with each click.\r\n     *\r\n     * @param value Is togglable?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"togglable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          // setEventDisposer will also remove listeners if value == false\n          this.interactions.setEventDisposer(\"sprite-togglable\", value, function () {\n            return _this.events.on(\"hit\", _this.handleToggle, _this, false);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles toggling of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event\r\n   */\n\n  Sprite.prototype.handleToggle = function (ev) {\n    this.isActive = !this.isActive;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"contextMenuDisabled\", {\n    /**\r\n     * @return Context menu disabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"contextMenuDisabled\");\n    },\n\n    /**\r\n     * Should element prevent context menu to be displayed, e.g. when\r\n     * right-clicked?\r\n     *\r\n     * @default false\r\n     * @param value Context menu disabled?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"contextMenuDisabled\", value)) {\n        this.interactions.contextMenuDisabled = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"url\");\n    },\n\n    /**\r\n     * Click-through URL for this element.\r\n     *\r\n     * If set, clicking/tapping this element will open the new URL in a target\r\n     * window/tab as set by `urlTarget`.\r\n     *\r\n     * Please note that URL will be parsed by data placeholders in curly\r\n     * brackets, to be populated from data. E.g.:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @param value URL\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"url\", value)) {\n        if (this._urlDisposer) {\n          this._urlDisposer.dispose();\n        } // If URL is not empty, set up events\n\n\n        if ($utils.isNotEmpty(value)) {\n          this._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false); // Set other required parameters\n\n          this.clickable = true;\n          this.cursorOverStyle = MouseCursorStyle.pointer;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"baseId\", {\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @return [description]\r\n     */\n    get: function () {\n      if (!this._baseId && this._parent) {\n        this.baseId = this._parent.baseId;\n      }\n\n      return this._baseId;\n    },\n\n    /**\r\n     * [baseId description]\r\n     *\r\n     * @ignore\r\n     * @param  value  [description]\r\n     */\n    set: function (value) {\n      this.setBaseId(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setBaseId = function (value) {\n    if (value != this._baseId) {\n      if (this.invalid) {\n        this.invalid = false;\n        registry.removeFromInvalidSprites(this);\n        this.invalidate();\n      }\n\n      this._baseId = value;\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"baseSprite\", {\n    /**\r\n     * Returns the mail chart object that this element belongs to.\r\n     *\r\n     * In most cases it will mean the chart object.\r\n     *\r\n     * Can be used to retrieve chart object in various events and adapters.\r\n     *\r\n     * ```TypeScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n     *   console.log(ev.target.baseSprite);\r\n     * });\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"seriesContainer\": {\r\n     *     \"events\": {\r\n     *       \"hit\": function(ev) {\r\n     *         console.log(ev.target.baseSprite);\r\n     *       }\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @readonly\r\n     * @return  Base chart object\r\n     */\n    get: function () {\n      if (this.isBaseSprite) {\n        return this;\n      } else if (this._parent) {\n        return this._parent.baseSprite;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"urlTarget\", {\n    /**\r\n     * @return URL target\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"urlTarget\");\n    },\n\n    /**\r\n     * Target to use for URL clicks:\r\n     *\r\n     * * _blank\r\n     * * _self (default)\r\n     * * _parent\r\n     * * _top\r\n     * * Name of the window/frame\r\n     *\r\n     * Ignored if `url` is not set.\r\n     *\r\n     * @param value URL target\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"urlTarget\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles URL transition on element click.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev An event object\r\n   */\n\n  Sprite.prototype.urlHandler = function (ev) {\n    // Is URL set?\n    if ($utils.isNotEmpty(this.url)) {\n      // Proceed to the URL\n      var url = this.populateString(this.url);\n\n      if (this.urlTarget === \"_self\") {\n        window.location.href = url;\n      } else {\n        window.open(url, this.urlTarget);\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"swipeOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * SWIPING GESTURE TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's swipe gesture options.\r\n     *\r\n     * @return Swipe gesture options\r\n     */\n    get: function () {\n      if (!this.interactions.swipeOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.swipeOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.swipeOptions;\n        }\n      }\n\n      return this.interactions.swipeOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"swipeable\", {\n    /**\r\n     * @return Element swipable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"swipeable\");\n    },\n\n    /**\r\n     * Controls if element is swipeable.\r\n     *\r\n     * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n     * when quick horizontal drag action is performed with either mouse or touch.\r\n     *\r\n     * Please note that combining swipe and drag is possible, however will incur\r\n     * a slight but noticeable delay in drag start.\r\n     *\r\n     * @param value  Element swipable?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"swipeable\", value)) {\n        this.applyCursorStyle();\n\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.interactions.swipeable = value;\n        } //interaction.processSwipeable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"trackable\", {\n    /**\r\n     * @return Track cursor movement over element?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"trackable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POINTER TRACKING\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if the element is trackable (mouse position over it is reported to\r\n     * event listeners).\r\n     *\r\n     * Will invoke `track` events whenever pointer (cursor) changes position\r\n     * while over element.\r\n     *\r\n     * Please note, touch devices will also invoke `track` events when touch\r\n     * point is moved while holding down on a trackable element.\r\n     *\r\n     * @param value Track cursor movement over element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"trackable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.trackable = value;\n        } //interaction.processTrackable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"wheelable\", {\n    /**\r\n     * @return Mouse wheel events enabled?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wheelable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-WHEEL RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if the element can be interacted with mouse wheel.\r\n     *\r\n     * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n     * events when using mouse wheel over the element.\r\n     *\r\n     * @param value Mouse wheel events enabled?\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"wheelable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.wheelable = value;\n        } //interaction.processWheelable(this);\n\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"resizable\", {\n    /**\r\n     * @return Element resizable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"resizable\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * RESIZE\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Indicates if this element is resizable.\r\n     *\r\n     * Enabling resize will turn on various interactions on the element. Their\r\n     * actual functionality will depend on other properties.\r\n     *\r\n     * If the element also `draggable`, resize will only happen with two points\r\n     * of contact on a touch device.\r\n     *\r\n     * If the element is not draggable, resize can be performed with just one\r\n     * point of contact, touch or mouse.\r\n     *\r\n     * Will invoke `resize` event every time the size of the element changes.\r\n     *\r\n     * @param value  Element resizable?\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"resizable\", value)) {\n        if (!value && !this.isInteractive()) {// void\n        } else {\n          this.applyCursorStyle();\n          this.interactions.resizable = value; // setEventDisposer will also remove listeners if value == false\n\n          this.interactions.setEventDisposer(\"sprite-resizable\", value, function () {\n            return new MultiDisposer([_this.events.on(\"down\", _this.handleDown, _this, false), _this.events.on(\"resize\", _this.handleResize, _this, false)]);\n          });\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Handles resize intermediate step.\r\n   *\r\n   * By default this method resizes actual element. Each element, can override\r\n   * this method to implement their own resize logic.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param ev Event object\r\n   */\n\n  Sprite.prototype.handleResize = function (ev) {\n    if (!this.interactions.isTouchProtected || !ev.touch) {\n      this._isResized = true;\n      this.scale = this.interactions.originalScale * ev.scale;\n      this.validatePosition();\n      /*center: (io.draggable\r\n      ? $math.getMidPoint(point1, point2)\r\n      : {\r\n          \"x\": io.originalPosition.x,\r\n          \"y\": io.originalPosition.y\r\n      })*/\n      //this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\n\n      if (this.draggable || this.dragWhileResize) {\n        this._isDragged = false;\n        var svgPoint1 = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\n        var svgPoint2 = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\n        var svgMidPoint = $math.getMidPoint(svgPoint1, svgPoint2);\n        var parentPoint1 = $utils.documentPointToSprite(ev.startPoint1, this._parent);\n        var parentPoint2 = $utils.documentPointToSprite(ev.startPoint2, this._parent);\n        var originalPosition = this.interactions.originalPosition;\n        var originalScale = this.interactions.originalScale;\n\n        if (originalPosition) {\n          var spritePoint1 = {\n            x: (parentPoint1.x - originalPosition.x) / originalScale,\n            y: (parentPoint1.y - originalPosition.y) / originalScale\n          };\n          var spritePoint2 = {\n            x: (parentPoint2.x - originalPosition.x) / originalScale,\n            y: (parentPoint2.y - originalPosition.y) / originalScale\n          };\n          var spriteMidPoint = $math.getMidPoint(spritePoint1, spritePoint2);\n          var parentPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\n          this.moveTo({\n            x: parentPoint.x - spriteMidPoint.x * this.scale,\n            y: parentPoint.y - spriteMidPoint.y * this.scale\n          }, undefined, undefined, true);\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"cursorOptions\", {\n    /**\r\n     * ==========================================================================\r\n     * MOUSE-RELATED\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Returns element's cursor options.\r\n     *\r\n     * Cursor options usually define cursor style for various states of the\r\n     * hovered element.\r\n     *\r\n     * Elements inherit `cursorOptions` from their parents if they don't have\r\n     * them set explicitly.\r\n     *\r\n     * @see {@link ICursorOptions} for a list of available options\r\n     * @return Cursor options\r\n     */\n    get: function () {\n      if (!this.interactions.cursorOptions) {\n        if (this.virtualParent) {\n          return this.virtualParent.cursorOptions;\n        }\n\n        if (this._parent) {\n          return this._parent.cursorOptions;\n        }\n      }\n\n      return this.interactions.cursorOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorOverStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor on hover.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorOverStyle\": \"pointer\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      if (!this.cursorOptions.overStyle) {\n        this.interactions.cursorOptions = {\n          defaultStyle: this.cursorOptions.defaultStyle\n        };\n      }\n\n      this.cursorOptions.overStyle = style;\n      getInteraction().applyCursorOverStyle(this.interactions);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"cursorDownStyle\", {\n    /**\r\n     * A shortcut to setting mouse cursor when button is pressed down.\r\n     *\r\n     * Example:\r\n     *\r\n     * ```TypeScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JavaScript\r\n     * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": {\r\n     *     // ...\r\n     *     \"slices\": {\r\n     *       \"cursorDownStyle\": \"grabbing\"\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @param style An array of styles to apply onhover\r\n     */\n    set: function (style) {\n      this.cursorOptions.downStyle = style;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Applies default cursor styles for interactable elements.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n   */\n\n  Sprite.prototype.applyCursorStyle = function () {// Draggable styles\n\n    /*if (this.draggable) {\r\n          if (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n            this.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n        }\r\n          if (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n            this.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n        }\r\n    }*/\n  };\n\n  Object.defineProperty(Sprite.prototype, \"interactionsEnabled\", {\n    /**\r\n     * @return Is interaction enabled for this element?\r\n     */\n    get: function () {\n      var value = this.getPropertyValue(\"interactionsEnabled\");\n\n      if (value === false) {\n        return false;\n      }\n\n      if (this.virtualParent) {\n        return this.virtualParent.interactionsEnabled;\n      }\n\n      if (this._parent) {\n        return this._parent.interactionsEnabled;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * Setting this to `false` will effectively disable all interactivity on the\r\n     * element.\r\n     *\r\n     * @param value  Is interaction enabled for this element?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"interactionsEnabled\", value)) {\n        var pointerEvents = null; // must be null, not \"null\"!\n\n        if (!value) {\n          pointerEvents = \"none\";\n        } else {\n          // this is for IE\n          this.group.node.style.pointerEvents = \"\";\n        }\n\n        this.group.node.style.pointerEvents = pointerEvents;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"exporting\", {\n    /**\r\n     * @return Export instance\r\n     */\n    get: function () {\n      return this.getExporting();\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * EXPORT-RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * An [[Export]] instance.\r\n     *\r\n     * Used to access API of the chart export functionality.\r\n     *\r\n     * If `exporting` is not set, the element inherits [[Export]] instance from\r\n     * its parents.\r\n     *\r\n     * Upon request, if no parent has such instance, a new one is created, using\r\n     * default settings, what in most cases is just enough.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n     * @param exp  Export\r\n     */\n    set: function (exp) {\n      this._exporting.set(exp, exp);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * This is here as a method so that inheriting classes could override it.\r\n   *\r\n   * @return Export instance\r\n   */\n\n  Sprite.prototype.getExporting = function () {\n    var _export = this._exporting.get();\n\n    if (_export) {\n      return _export;\n    } else {\n      if (this.isStandaloneInstance || !this._parent) {\n        _export = new Export(this.svgContainer.SVGContainer);\n        _export.sprite = this;\n        _export.language = this.language;\n        _export.numberFormatter = this.numberFormatter;\n        _export.dateFormatter = this.dateFormatter;\n        _export.durationFormatter = this.durationFormatter;\n\n        this._exporting.set(_export, _export);\n      } else {\n        return this._parent.exporting;\n      }\n    }\n\n    return _export;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"exportable\", {\n    /**\r\n     * @return Export?\r\n     */\n    get: function () {\n      return this._exportable;\n      /*const svgContainer = this.svgContainer;\r\n      return !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\n    },\n\n    /**\r\n     * If set to `false` this element will be omitted when exporting the chart\r\n     * to an image.\r\n     *\r\n     * @default true\r\n     * @param value  Export?\r\n     */\n    set: function (value) {\n      var svgContainer = this.svgContainer;\n      this._exportable = value;\n\n      if (svgContainer) {\n        if (value) {\n          $array.remove(svgContainer.nonExportableSprites, this);\n        } else if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\n          svgContainer.nonExportableSprites.push(this);\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * MODAL/POPUP RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n   *\r\n   * @param value  Prefix\r\n   */\n\n  Sprite.prototype.modalPrefix = function (value) {\n    value = options.classNamePrefix + value;\n    return value;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"modal\", {\n    /**\r\n     * Returns a [[Modal]] instance, associated with this chart.\r\n     * (elements top parent)\r\n     *\r\n     * Accessing modal does not make it appear. To make a modal appear, use\r\n     * `showModal()` method.\r\n     *\r\n     * @see {@link Modal} for more information about using Modal windows\r\n     * @return Modal instance\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n\n      if (svgContainer) {\n        var modal = svgContainer.modal;\n\n        if (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          modal.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n\n        return modal;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Opens a modal window with specific content (`text` parameter) and,\r\n   * optionally, `title`.\r\n   *\r\n   * The `text` parameter can contain HTML content.\r\n   *\r\n   * @see {@link Modal} for more information about using Modal windows\r\n   * @param text   Modal contents\r\n   * @param title  Title for the modal window\r\n   */\n\n  Sprite.prototype.openModal = function (text, title) {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      return svgContainer.openModal(text, title);\n    }\n  };\n  /**\r\n   * Hides modal window if there is one currently open.\r\n   */\n\n\n  Sprite.prototype.closeModal = function () {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      svgContainer.closeModal();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"popups\", {\n    /**\r\n     * A list of popups for this chart.\r\n     *\r\n     * @return Popups\r\n     */\n    get: function () {\n      var svgContainer = this.svgContainer;\n\n      if (svgContainer) {\n        var popups = svgContainer.popups;\n        popups.template.sprite = this;\n\n        if (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\n          popups.template.adapter.add(\"classPrefix\", this.modalPrefix);\n        }\n\n        return popups;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Creates, opens, and returns a new [[Popup]] window.\r\n   *\r\n   * `text` can be any valid HTML.\r\n   *\r\n   * `title` is currently not supported.\r\n   *\r\n   * @param text   Popup contents\r\n   * @param title  Popup title\r\n   * @return Popup instance\r\n   */\n\n  Sprite.prototype.openPopup = function (text, title) {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      return svgContainer.openPopup(text, title);\n    }\n  };\n  /**\r\n   * Closes all currently open popup windows\r\n   */\n\n\n  Sprite.prototype.closeAllPopups = function () {\n    var svgContainer = this.svgContainer;\n\n    if (svgContainer) {\n      svgContainer.closeAllPopups();\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"x\", {\n    /**\r\n     * @return X coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"x\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * POSITIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Element's absolute or relative X coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value X coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelX\", {\n    /**\r\n     * Returns element's current absolute X coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return X coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelX\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeX\", {\n    /**\r\n     * Returns element's current relative X coordinate in [[Percent]].\r\n     *\r\n     * @return X coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.x);\n      } else {\n        return this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minX\");\n    },\n\n    /**\r\n     * The smallest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxX\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max X (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxX\");\n    },\n\n    /**\r\n     * The biggest allowable absolute X coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Max X (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxX\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"y\", {\n    /**\r\n     * @return Y coordinate\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"y\");\n    },\n\n    /**\r\n     * Element's absolute or relative Y coordinate.\r\n     *\r\n     * If setting both X and Y, please consider using `moveTo()` method instead,\r\n     * as it will be faster to set both coordinates at once.\r\n     *\r\n     * @param value  Y coordinate\r\n     */\n    set: function (value) {\n      if (!this.isDragged) {\n        this.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelY\", {\n    /**\r\n     * Returns element's current absolute Y coordinate in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate (px)\r\n     */\n    get: function () {\n      var value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelY\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeY\", {\n    /**\r\n     * Returns element's current relative Y coordinate in [[Percent]].\r\n     *\r\n     * @readonly\r\n     * @return Y coordinate ([[Percent]])\r\n     */\n    get: function () {\n      if (!this._adapterO) {\n        return this.getRelativeX(this.y);\n      } else {\n        return this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Min Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minY\");\n    },\n\n    /**\r\n     * The smallest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Min Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"minY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxY\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Max Y (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"maxY\");\n    },\n\n    /**\r\n     * The biggest allowable absolute Y coordinate for this element.\r\n     *\r\n     * This is used to contain element movement within certain boundaries.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value  Max Y (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"maxY\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dx\", {\n    /**\r\n     * @return Horizontal offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dx\");\n    },\n\n    /**\r\n     * A horizontal offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset to the left.\r\n     *\r\n     * @param value  Horizontal offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dx\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"dy\", {\n    /**\r\n     * @return Vertical offset (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"dy\");\n    },\n\n    /**\r\n     * A vertical offset for the element in pixels.\r\n     *\r\n     * Can be negative value for offset upwards.\r\n     *\r\n     * @param value  Vertical offset (px)\r\n     */\n    set: function (value) {\n      if ($type.isNumber(value)) {\n        value = $math.round(value, this._positionPrecision, true);\n        this.setPropertyValue(\"dy\", value, false, true);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rotation\", {\n    /**\r\n     * @return Rotation (0-360)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"rotation\");\n    },\n\n    /**\r\n     * Rotation of the element in degrees. (0-360)\r\n     *\r\n     * Note: For convenience purposes, negative values (for counter-clockwise\r\n     * rotation) and values exceeding 360 can also be used.\r\n     *\r\n     * @param value  Rotation (0-360)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (!$type.isNumber(value)) {\n        value = 0;\n      }\n\n      this.setPropertyValue(\"rotation\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"align\", {\n    /**\r\n     * @return Horizontal align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"align\");\n    },\n\n    /**\r\n     * Controls horizontal alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Horizontal align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"align\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"valign\", {\n    /**\r\n     * @return Vertical align\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"valign\");\n    },\n\n    /**\r\n     * Controls vertical alignment of the element.\r\n     *\r\n     * This is used by parent [[Container]] when layouting its children.\r\n     *\r\n     * @param value  Vertical align\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"valign\", value)) {\n        if (this._parent) {\n          this._parent.invalidateLayout();\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"horizontalCenter\", {\n    /**\r\n     * @return Horizontal center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"horizontalCenter\");\n    },\n\n    /**\r\n     * Controls which part of the element to treat as a horizontal center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Horizontal center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"horizontalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"verticalCenter\", {\n    /**\r\n     * @return Vertical center\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"verticalCenter\");\n    },\n\n    /**\r\n     * Controls which part of the element to treat as a vertical center.\r\n     *\r\n     * The setting will be used when positioning, resizing and rotating the\r\n     * element.\r\n     *\r\n     * @param value  Vertical center\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"verticalCenter\", value)) {\n        this.updateCenter();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"maxWidth\", {\n    /**\r\n     * @return Maximum width (px)\r\n     */\n    get: function () {\n      var maxWidth = this.getPropertyValue(\"maxWidth\");\n\n      if (!$type.isNumber(maxWidth)) {\n        if (this._parent) {\n          var parentWidth = this._parent.maxWidth;\n\n          if (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\n            parentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\n          }\n\n          return parentWidth;\n        }\n      }\n\n      return maxWidth;\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Maximum allowed width for the element in pixels.\r\n     *\r\n     * @param value  Maximum width (px)\r\n     */\n    set: function (value) {\n      this.setMaxWidth(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setMaxWidth = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n\n    if (this.setPropertyValue(\"maxWidth\", value)) {\n      if ($type.isNumber(this.relativeWidth)) {\n        this.invalidate();\n      }\n\n      var event_2 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_2);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"maxHeight\", {\n    /**\r\n     * @return Maximum height (px)\r\n     */\n    get: function () {\n      var maxHeight = this.getPropertyValue(\"maxHeight\");\n\n      if (!$type.isNumber(maxHeight)) {\n        if (this._parent) {\n          var parentHeight = this._parent.maxHeight;\n\n          if (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\n            parentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\n          }\n\n          return parentHeight;\n        }\n      }\n\n      return maxHeight;\n    },\n\n    /**\r\n     * Maximum allowed height for the element in pixels.\r\n     *\r\n     * @param value  Maximum height (px)\r\n     */\n    set: function (value) {\n      this.setMaxHeight(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sprite.prototype.setMaxHeight = function (value) {\n    var prevWidth = this.maxWidth;\n    var prevHeight = this.maxHeight;\n\n    if (this.setPropertyValue(\"maxHeight\", value)) {\n      if ($type.isNumber(this.relativeHeight)) {\n        this.invalidate();\n      }\n\n      var event_3 = {\n        type: \"maxsizechanged\",\n        target: this,\n        previousWidth: prevWidth,\n        previousHeight: prevHeight\n      };\n      this.dispatchImmediately(\"maxsizechanged\", event_3);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"minWidth\", {\n    /**\r\n     * @return Minimum width (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minWidth\");\n    },\n\n    /**\r\n     * Minimum width of the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum width (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minWidth\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"minHeight\", {\n    /**\r\n     * @return Minimum height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"minHeight\");\n    },\n\n    /**\r\n     * Minimum height for the element in pixels.\r\n     *\r\n     * Set to `undefined` to remove the limit.\r\n     *\r\n     * @param value  Minimum height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"minHeight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"width\", {\n    /**\r\n     * @return Width (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"width\");\n    },\n\n    /**\r\n     * Element's absolute or relative width.\r\n     *\r\n     * The width can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative width will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n     * you need to add an adapter for width add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Width (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\n\n      if (changed) {\n        this.percentWidth = undefined;\n        this.relativeWidth = undefined;\n\n        if (value instanceof Percent) {\n          this.percentWidth = value.percent;\n\n          if ($type.isNumber(this._pixelWidth)) {\n            this.maxWidth = undefined;\n          }\n\n          this._pixelWidth = undefined;\n        } else {\n          this._pixelWidth = Number(value); //this._measuredWidth = this._pixelWidth;\n\n          this.maxWidth = this._pixelWidth;\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"height\", {\n    /**\r\n     * @return height (absolute or relative)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"height\");\n    },\n\n    /**\r\n     * Element's absolute or relative height.\r\n     *\r\n     * The height can either be absolute, set in numeric pixels, or relative, set\r\n     * in [[Percent]].\r\n     *\r\n     * Relative height will be calculated using closest measured ancestor\r\n     * [[Container]].\r\n     *\r\n     * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n     * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n     * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n     * you need to add an adapter for height add it for either of the two\r\n     * properties - whichever suits your requirements.\r\n     *\r\n     * @param value  Height (numeric in pixels or relative)\r\n     */\n    set: function (value) {\n      var changed = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\n\n      if (changed) {\n        this.percentHeight = undefined;\n        this._relativeHeight = undefined;\n\n        if (value instanceof Percent) {\n          this.percentHeight = value.percent;\n\n          if ($type.isNumber(this._pixelHeight)) {\n            this.maxHeight = undefined;\n          }\n\n          this._pixelHeight = undefined;\n        } else {\n          this._pixelHeight = Number(value); //this._measuredHeight = this._pixelHeight;\n\n          this.maxHeight = this._pixelHeight; // yes, we reset maxWidth\n        }\n\n        this.invalidatePosition();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelWidth\", {\n    /**\r\n     * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      var width;\n\n      if ($type.isNumber(this.percentWidth)) {\n        width = this.maxWidth;\n      } else if ($type.isNumber(this._pixelWidth)) {\n        width = this._pixelWidth;\n      } else {\n        width = 0;\n      }\n\n      var minWidth = this.minWidth;\n\n      if (minWidth != null && width < minWidth) {\n        width = minWidth;\n      }\n\n      var value = $math.round(width, this._positionPrecision, true);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelHeight\", {\n    /**\r\n     * Returns element's height in pixels. For actual height use measuredHeight property.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      var height;\n\n      if ($type.isNumber(this.percentHeight)) {\n        height = this.maxHeight;\n      } else if ($type.isNumber(this._pixelHeight)) {\n        height = this._pixelHeight;\n      } else {\n        height = 0; //this._measuredHeightSelf;\n      }\n\n      var minHeight = this.minHeight;\n\n      if (minHeight != null && height < minHeight) {\n        height = minHeight;\n      }\n\n      var value = $math.round(height, this._positionPrecision, true);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeWidth\", {\n    /**\r\n     * @return Relative width\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeWidth = this._relativeWidth;\n\n      if ($type.isNumber(relativeWidth)) {\n        if (!this._adapterO) {\n          return relativeWidth;\n        } else {\n          return this._adapterO.apply(\"relativeWidth\", relativeWidth);\n        }\n      }\n    },\n\n    /**\r\n     * Element's relative width in [[Percent]].\r\n     * @ignore\r\n     *\r\n     * @param value  Relative width\r\n     */\n    set: function (value) {\n      if (this._relativeWidth != value) {\n        this._relativeWidth = value; //\t\t\tthis.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeHeight\", {\n    /**\r\n     * @return Relative height\r\n     * @ignore\r\n     */\n    get: function () {\n      var relativeHeight = this._relativeHeight;\n\n      if ($type.isNumber(relativeHeight)) {\n        if (!this._adapterO) {\n          return relativeHeight;\n        } else {\n          return this._adapterO.apply(\"relativeHeight\", relativeHeight);\n        }\n      }\n    },\n\n    /**\r\n     * Element's relative height in [[Percent]].\r\n     *\r\n     * @param value  Relative height\r\n     * @ignore\r\n     */\n    set: function (value) {\n      if (this._relativeHeight != value) {\n        this._relativeHeight = value; //\t\t\tthis.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredWidth\", {\n    /**\r\n     * Returns element's measured width in pixels.\r\n     *\r\n     * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n     * rotation and scale is taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Width (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      }\n\n      if (!this._adapterO) {\n        return this._measuredWidth;\n      } else {\n        return this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\n      } // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\n\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"measuredHeight\", {\n    /**\r\n     * Returns elements's measured height in pixels.\r\n     *\r\n     * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n     * rotation and scale taken into account.\r\n     *\r\n     * @readonly\r\n     * @return Height (px)\r\n     */\n    get: function () {\n      if (this.disabled || this.__disabled) {\n        return 0;\n      } // it's not good to fit to min/max range as then rotations and scale won't be taken into account\n      //return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\n\n\n      if (!this._adapterO) {\n        return this._measuredHeight;\n      } else {\n        return this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerWidth\", {\n    /**\r\n     * Returns element's measured width plus its left and right margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer width (px)\r\n     */\n    get: function () {\n      var value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"outerHeight\", {\n    /**\r\n     * Returns element's measured height plus its top and bottom margins in\r\n     * pixels.\r\n     *\r\n     * @readonly\r\n     * @return Outer height (px)\r\n     */\n    get: function () {\n      var value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"outerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerWidth\", {\n    /**\r\n     * Returns element's measured inner width in pixels.\r\n     *\r\n     * Inner width is actual available space for content, e.g. element's width\r\n     * minus horizontal padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner width (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerWidth\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"innerHeight\", {\n    /**\r\n     * Returns element's measured inner height in pixels.\r\n     *\r\n     * Inner height is actual available space for content, e.g. element's height\r\n     * minus vertical padding.\r\n     *\r\n     * @readonly\r\n     * @return Inner height (px)\r\n     */\n    get: function () {\n      var value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"innerHeight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"globalScale\", {\n    /**\r\n     * Returns element's current \"global\" scale.\r\n     *\r\n     * Scale values accumulate over hierarchy of elements.\r\n     *\r\n     * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n     * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n     *\r\n     * @readonly\r\n     * @return Global scale\r\n     */\n    get: function () {\n      var scale = this.scale;\n\n      if (this._parent) {\n        scale = scale * this._parent.globalScale;\n      }\n\n      if (!this._adapterO) {\n        return scale;\n      } else {\n        return this._adapterO.apply(\"globalScale\", scale);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"scale\", {\n    /**\r\n     * @return Scale (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"scale\");\n    },\n\n    /**\r\n     * Scale of the element.\r\n     *\r\n     * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n     * * 2 will mean element is increased twice.\r\n     * * 0.5 - reduced by 50%.\r\n     *\r\n     * Etc.\r\n     *\r\n     * @param value  Scale (0-1)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (value < 0) {\n        value = 0;\n      }\n\n      if (value != this.getPropertyValue(\"scale\")) {\n        this.setPropertyValue(\"scale\", value, false, true);\n        this.handleGlobalScale();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets all four margins for the element at once.\r\n   *\r\n   * Margins are set in pixels.\r\n   *\r\n   * @param top     Top margin\r\n   * @param right   Right margin\r\n   * @param bottom  Bottom margin\r\n   * @param left    Left margin\r\n   * @return Current element\r\n   */\n\n  Sprite.prototype.margin = function (top, right, bottom, left) {\n    this.marginTop = top;\n    this.marginRight = right;\n    this.marginBottom = bottom;\n    this.marginLeft = left;\n    return this;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"marginLeft\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginLeft\");\n    },\n\n    /**\r\n     * Left margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginRight\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginRight\");\n    },\n\n    /**\r\n     * Right margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginTop\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginTop\");\n    },\n\n    /**\r\n     * Top margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"marginBottom\", {\n    /**\r\n     * @return Margin value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"marginBottom\");\n    },\n\n    /**\r\n     * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Margin value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginRight\", {\n    /**\r\n     * Returns current right margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginRight);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginRight\", {\n    /**\r\n     * Returns current relative right margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative right margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginRight);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginRight\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginLeft\", {\n    /**\r\n     * Returns current left margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelX(this.marginLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginLeft\", {\n    /**\r\n     * Returns current relative left margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative left margin\r\n     */\n    get: function () {\n      //@todo Maybe use [[Percent]]?\n      var value = this.getRelativeX(this.marginLeft);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginLeft\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginTop\", {\n    /**\r\n     * Returns current top margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginTop);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginTop\", {\n    /**\r\n     * Returns current relative top margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative top margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginTop);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginTop\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelMarginBottom\", {\n    /**\r\n     * Returns current bottom margin in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom margin (px)\r\n     */\n    get: function () {\n      var value = this.getPixelY(this.marginBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"pixelMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativeMarginBottom\", {\n    /**\r\n     * Returns current relative bottom margin.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom margin\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      var value = this.getRelativeY(this.marginBottom);\n\n      if (!this._adapterO) {\n        return value;\n      } else {\n        return this._adapterO.apply(\"relativeMarginBottom\", value);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets padding for the element in pixels.\r\n   *\r\n   * @param top     Top padding (px)\r\n   * @param right   Right padding (px)\r\n   * @param bottom  Bottom padding (px)\r\n   * @param left    Left padding (px)\r\n   * @return Element\r\n   */\n\n  Sprite.prototype.padding = function (top, right, bottom, left) {\n    this.paddingTop = top;\n    this.paddingRight = right;\n    this.paddingBottom = bottom;\n    this.paddingLeft = left;\n    return this;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"paddingLeft\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingLeft\");\n    },\n\n    /**\r\n     * Left padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingRight\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingRight\");\n    },\n\n    /**\r\n     * Right padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingTop\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingTop\");\n    },\n\n    /**\r\n     * Top padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"paddingBottom\", {\n    /**\r\n     * @return Padding value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"paddingBottom\");\n    },\n\n    /**\r\n     * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n     *\r\n     * @param value  Padding value\r\n     */\n    set: function (value) {\n      this.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingRight\", {\n    /**\r\n     * Returns current right padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Right padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingRight\", {\n    /**\r\n     * Returns current relative right padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative right padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingRight);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingLeft\", {\n    /**\r\n     * Returns current left padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Left padding (px)\r\n     */\n    get: function () {\n      return this.getPixelX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingLeft\", {\n    /**\r\n     * Returns current relative left padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative left padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeX(this.paddingLeft);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingTop\", {\n    /**\r\n     * Returns current top padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Top padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingTop\", {\n    /**\r\n     * Returns current relative top padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative top padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingTop);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPaddingBottom\", {\n    /**\r\n     * Returns current bottom padding in pixels.\r\n     *\r\n     * @readonly\r\n     * @return Bottom padding (px)\r\n     */\n    get: function () {\n      return this.getPixelY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"relativePaddingBottom\", {\n    /**\r\n     * Returns current relative bottom padding.\r\n     *\r\n     * @readonly\r\n     * @return Relative bottom padding\r\n     */\n    get: function () {\n      // @todo Maybe use [[Percent]]?\n      return this.getRelativeY(this.paddingBottom);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"path\", {\n    /**\r\n     * @return Path of a Sprite element\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"path\");\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * Path of Sprite element\r\n     */\n    set: function (value) {\n      this.setPath(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.setPath = function (value) {\n    if (this.setPropertyValue(\"path\", value)) {\n      if (this._adapterO) {\n        value = this._adapterO.apply(\"path\", value);\n      }\n\n      if (!this._isPath) {\n        if (!this.element || this.element.node && !(this.element.node instanceof SVGPathElement)) {\n          this.element = this.paper.add(\"path\");\n        }\n\n        this._isPath = true;\n      }\n\n      if ($type.hasValue(value)) {\n        this.element.attr({\n          \"d\": value\n        });\n      } else {\n        this.element.removeAttr(\"d\");\n      }\n\n      this.invalidatePosition(); // otherwise is 0x0\n\n      if (!this.inited) {\n        this.events.once(\"inited\", this.validatePosition, this, false);\n      }\n\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"fillModifier\", {\n    /**\r\n     * @return Fill color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillModifier\");\n    },\n\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's fill, e.g. create gradients.\r\n     *\r\n     * @param value  Fill color modifiier\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"fillModifier\", value)) {\n        this.setFill(this.fill);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeModifier\", {\n    /**\r\n     * @return Stroke color modifier\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeModifier\");\n    },\n\n    /**\r\n     * [[ColorModifier]] that can be used to modify color and pattern of the\r\n     * element's stroke (outline), e.g. create gradients.\r\n     *\r\n     * @param value  Stroke color modifier\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"strokeModifier\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fillOpacity\", {\n    /**\r\n     * @return Opacity (0-9)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fillOpacity\");\n    },\n\n    /**\r\n     * Element's fill opacity.\r\n     *\r\n     * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"fillOpacity\", value)) {\n        this.setSVGAttribute({\n          \"fill-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"fill\", {\n    /**\r\n     * @return Fill\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"fill\");\n    },\n\n    /**\r\n     * Element's fill color or pattern.\r\n     *\r\n     * @param value  Fill\r\n     */\n    set: function (value) {\n      this.setFill(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `fill` property on the SVG element, including applicable color\r\n   * modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value  Fill\r\n   */\n\n  Sprite.prototype.setFill = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n\n    if (this.setColorProperty(\"fill\", value) || this.fillModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.fillModifier) {\n          value = this.fillModifier.modify(value);\n        }\n      }\n\n      this.realFill = value; // todo: review this place when some Color type will be added\n\n      if (value instanceof Color) {\n        this.setSVGAttribute({\n          \"fill\": value.toString()\n        });\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"fill\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var fill = value;\n        fill.paper = this.paper;\n        this.setSVGAttribute({\n          \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\"\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"opacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"opacity\");\n    },\n\n    /**\r\n     * Element's opacity.\r\n     *\r\n     * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n     * element. The charts use `opacity` to hide/show elements, so your setting\r\n     * might be lost if element is hidden and then later shown.\r\n     *\r\n     * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n     * the element.\r\n     *\r\n     * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n     * the element semi-transparent.\r\n     *\r\n     * @param value Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"opacity\", value)) {\n        this.setSVGAttribute({\n          \"opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"stroke\", {\n    /**\r\n     * @return Stroke setting\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"stroke\");\n    },\n\n    /**\r\n     * Element's stroke (outline) color or pattern.\r\n     *\r\n     * @param value  Stroke setting\r\n     */\n    set: function (value) {\n      this.setStroke(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets actual `stroke` property on the SVG element, including applicable\r\n   * color modifiers.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param value Stroke setting\r\n   */\n\n  Sprite.prototype.setStroke = function (value) {\n    if (!$type.isObject(value) || \"r\" in value) {\n      value = toColor(value);\n    }\n\n    if (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\n      // this can not go into next if, as value is turned to Gradient\n      if (value instanceof Color) {\n        if (this.strokeModifier) {\n          value = this.strokeModifier.modify(value);\n        }\n      }\n\n      this.realStroke = value;\n\n      if (value instanceof Color) {\n        if (value.hex == \"none\") {\n          this.removeSVGAttribute(\"stroke\");\n        } else {\n          this.setSVGAttribute({\n            \"stroke\": value.toString()\n          });\n        }\n      } else if (!$type.hasValue(value)) {\n        this.removeSVGAttribute(\"stroke\");\n      } else if (value instanceof Pattern || value instanceof LinearGradient || value instanceof RadialGradient) {\n        var stroke = value;\n        stroke.paper = this.paper;\n        this.setSVGAttribute({\n          \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\"\n        });\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"strokeOpacity\", {\n    /**\r\n     * @return Opacity (0-1)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeOpacity\");\n    },\n\n    /**\r\n     * Stroke (outline) opacity.\r\n     *\r\n     * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n     *\r\n     * @param value  Opacity (0-1)\r\n     */\n    set: function (value) {\n      value = $math.toNumberRange(value, 0, 1);\n\n      if (this.setPropertyValue(\"strokeOpacity\", value)) {\n        this.setSVGAttribute({\n          \"stroke-opacity\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScalingStroke\", {\n    /**\r\n     * @return Do not scale stroke (outline)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScalingStroke\");\n    },\n\n    /**\r\n     * Controls if the element's stroke (outline) should remain keep constant\r\n     * thicnkess and do not scale when the whole element is resized.\r\n     *\r\n     * @param value  Do not scale stroke (outline)\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.setPropertyValue(\"nonScalingStroke\", value)) {\n        this.strokeWidth = this.strokeWidth;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"nonScaling\", {\n    /**\r\n     * @return Is element scaleable?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"nonScaling\");\n    },\n\n    /**\r\n     * Controls if element should keep constant size and not scale even if there is\r\n     * space available, or it does not fit.\r\n     *\r\n     * @param value  Is element scaleable?\r\n     */\n    set: function (value) {\n      // @todo Description (review)\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"nonScaling\", value, false, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeWidth\", {\n    /**\r\n     * @return Thickness (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeWidth\");\n    },\n\n    /**\r\n     * Stroke (outline) thickness in pixels.\r\n     *\r\n     * @param value  Thickness (px)\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n      this.setPropertyValue(\"strokeWidth\", value, true);\n\n      if (this.nonScalingStroke) {\n        if (!$type.isNumber(value)) {\n          value = 1;\n        }\n\n        value = value / this.globalScale;\n      }\n\n      this.setSVGAttribute({\n        \"stroke-width\": value\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDasharray\", {\n    /**\r\n     * @return `stroke-dasharray`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDasharray\");\n    },\n\n    /**\r\n     * A `stroke-dasharray` for the stroke (outline).\r\n     *\r\n     * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n     * @param value  `stroke-dasharray`\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"strokeDasharray\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dasharray\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeDashoffset\", {\n    /**\r\n     * @return `stroke-dashoffset`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeDashoffset\");\n    },\n\n    /**\r\n     * A `stroke-dashoffset` for the stroke (outline).\r\n     *\r\n     * \"Dashoffset\" allows setting the start position of the dashes if\r\n     * `strokeDasharray` is used.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n     * @param value  `stroke-dashoffset`\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"strokeDashoffset\", value)) {\n        this.setSVGAttribute({\n          \"stroke-dashoffset\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinecap\", {\n    /**\r\n     * @return `stroke-linecap`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinecap\");\n    },\n\n    /**\r\n     * A `stroke-linecap` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n     * @param value  `stroke-linecap`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinecap\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linecap\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"strokeLinejoin\", {\n    /**\r\n     * @return `stroke-linejoin`\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"strokeLinejoin\");\n    },\n\n    /**\r\n     * A `stroke-linejoin` to indicate how line ends are drawn.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n     * @param value  `stroke-linejoin`\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"strokeLinejoin\", value)) {\n        this.setSVGAttribute({\n          \"stroke-linejoin\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"shapeRendering\", {\n    /**\r\n     * @return 'shape-rendering' value\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"shapeRendering\");\n    },\n\n    /**\r\n     * An SVG-specific `shape-rendering` value.\r\n     *\r\n     * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n     * @default \"auto\"\r\n     * @param value  'shape-rendering' value\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (this.setPropertyValue(\"shapeRendering\", value)) {\n        this.setSVGAttribute({\n          \"shape-rendering\": value\n        });\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"pixelPerfect\", {\n    /**\r\n     * @return Use pixel perfect?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"pixelPerfect\");\n    },\n\n    /**\r\n     * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n     * perfectly crisp lines on retina displays.\r\n     *\r\n     * Setting this to `true` might improve visual quality, but may have a\r\n     * negative effect on performance.\r\n     *\r\n     * Different elements use different default setting for `pixelPerfect`.\r\n     *\r\n     * We recommend leaving this at their default settings, unless there's a\r\n     * specific need.\r\n     *\r\n     * @param value  Use pixel perfect?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (value) {\n        this._positionPrecision = options.pixelPerfectPrecision;\n      } else {\n        this._positionPrecision = 3;\n      }\n\n      this.setPropertyValue(\"pixelPerfect\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"rtl\", {\n    /**\r\n     * @return RTL?\r\n     */\n    get: function () {\n      if ($type.hasValue(this._rtl)) {\n        return this._rtl;\n      } else if (this._topParent) {\n        return this._topParent.rtl;\n      } //this.rtl = false;\n\n\n      return false;\n    },\n\n    /**\r\n     * An RTL (right-to-left) setting.\r\n     *\r\n     * RTL may affect alignment, text, and other visual properties.\r\n     *\r\n     * If you set this on a top-level chart object, it will be used for all\r\n     * child elements, e.g. labels, unless they have their own `rtl` setting\r\n     * set directly on them.\r\n     *\r\n     * @param value  `true` for to use RTL\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (this.isBaseSprite) {\n        this.topParent.rtl = value;\n      }\n\n      this._rtl = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * ==========================================================================\r\n   * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n   * ==========================================================================\r\n   * @hidden\r\n   */\n\n  /**\r\n   * Reveals hidden element.\r\n   *\r\n   * Has no effect if element is already visible.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * @param duration  Fade in duration (ms)\r\n   * @return Animation object if such object was created\r\n   */\n\n  Sprite.prototype.show = function (duration) {\n    return this.showReal(duration);\n  };\n  /**\r\n   * Performs actual operations to reveal this element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param duration Fade in duration (ms)\r\n   * @return Fade in duration (ms)\r\n   */\n\n\n  Sprite.prototype.showReal = function (duration) {\n    var _this = this;\n\n    if (this.preventShow) {\n      return;\n    }\n\n    var transition;\n    var properties = this.defaultState.properties;\n\n    if (!this.disabled && (this.isHidden || !this.visible || this.isHiding || properties.opacity != null && this.opacity < properties.opacity && !this.isShowing) && !this.isDisposed()) {\n      // helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\n      if (this.invalid) {\n        this.validate();\n      }\n\n      if (this.positionInvalid) {\n        this.validatePosition();\n      }\n\n      if (!$type.isNumber(duration)) {\n        duration = this.defaultState.transitionDuration;\n      }\n\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n\n        this._hideAnimation = undefined;\n      } // Cancel hide handler just in case it was there\n\n\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      }\n\n      this._isHidden = false;\n      this.isHiding = false;\n      this.isShowing = true; // Apply current state\n\n      transition = this.applyCurrentState(duration);\n\n      if (transition && !transition.isFinished()) {\n        this._showHideDisposer = transition.events.on(\"animationended\", function () {\n          _this.isShowing = false;\n        });\n\n        this._disposers.push(this._showHideDisposer);\n      } else {\n        this.isShowing = false;\n      } // Make it visible\n\n\n      var visible = this.defaultState.properties.visible;\n\n      if (!$type.hasValue(visible)) {\n        visible = true;\n      }\n\n      this.visible = visible; // Unhide from screen readers\n\n      this.readerHidden = false; // Dispatch \"show\" event\n\n      this.dispatchImmediately(\"shown\");\n    }\n\n    return transition;\n  };\n  /**\r\n   * Initiates hiding of Sprite.\r\n   * When called it will fade out the the Sprite to transparency, then make it\r\n   * invisible.\r\n   * @param duration Duration in millisecons\r\n   */\n\n  /**\r\n   * Hides the element, by applying `hidden` state.\r\n   *\r\n   * Has no effect if element is already hidden.\r\n   *\r\n   * If `duration` is not specified, it will use default.\r\n   *\r\n   * While element is fading out, its `isHiding` property will resolve to\r\n   * `true`.\r\n   *\r\n   * When element is hidden, its `visible` property will resolve to `false`.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return hide Animation object if such object was created\r\n   */\n\n\n  Sprite.prototype.hide = function (duration) {\n    return this.hideReal(duration);\n  };\n  /**\r\n   * Hides actual SVG elements and handles hiding animations.\r\n   *\r\n   * @param duration  Fade out duration (ms)\r\n   * @return Fade out duration (ms)\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.hideReal = function (duration) {\n    var _this = this;\n\n    var transition;\n\n    if (!this.isHiding && this.visible && !this.isDisposed()) {\n      // added to solve 51375\n      if (this.tooltip && this.tooltip.currentSprite == this) {\n        this.hideTooltip(0);\n      }\n\n      if (this._hideAnimation) {\n        this._hideAnimation.kill();\n\n        this._hideAnimation = undefined;\n      }\n\n      this.isShowing = false; // Cancel hide handler just in case it was there\n\n      if (this._showHideDisposer) {\n        this.removeDispose(this._showHideDisposer);\n      } // Get state\n\n\n      var hiddenState_1 = this.hiddenState; // Transition to \"hidden\" state, provided Sprite has one set\n\n      if (hiddenState_1) {\n        // Yes, we have a \"hidden\" state\n        // `setState` will return an `Animation` object which we can set\n        // events on\n        transition = this.setState(hiddenState_1, duration, undefined);\n\n        if (transition && !transition.isFinished()) {\n          this._hideAnimation = transition;\n          this._showHideDisposer = transition.events.on(\"animationended\", function () {\n            _this.isHiding = false;\n            _this._isHidden = true;\n\n            if (hiddenState_1.properties.visible == false) {\n              _this.visible = false;\n            }\n          }, this);\n\n          this._disposers.push(this._showHideDisposer); // Thrown everything into `_disposers` just in case Sprite gets\n          // destroyed in the meantime\n\n\n          this._disposers.push(transition);\n        } else {\n          this.isHiding = false;\n          this._isHidden = true;\n        }\n      } else {\n        // No hidden state, let's just set `visible` and call it a day\n        this.visible = false;\n        this.isHiding = false;\n        this._isHidden = true;\n      } // Hide from screen readers\n\n\n      this.readerHidden = true; // Dispach \"hidden\" event\n\n      this.dispatchImmediately(\"hidden\");\n      this.invalidate(); // hide it at once to avoid flickers // validate() causes SO\n    }\n\n    if (!$type.isNumber(duration)) {\n      duration = this.hiddenState.transitionDuration;\n    }\n\n    return transition;\n  };\n\n  Object.defineProperty(Sprite.prototype, \"visible\", {\n    /**\r\n     * @return Visible?\r\n     */\n    get: function () {\n      return this.getVisibility();\n    },\n\n    /**\r\n     * Indicates if element is current visible (`true`) or hidden (`false`).\r\n     *\r\n     * @param value Visible?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setVisibility(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns visibility value\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.getVisibility = function () {\n    var value = this.getPropertyValue(\"visible\");\n\n    if (!$type.hasValue(value)) {\n      value = true;\n    }\n\n    return value;\n  };\n  /**\r\n   * Sets `visibility` property:\r\n   *\r\n   * * `true` - visible\r\n   * * `false` - hidden\r\n   *\r\n   * @param value  true - visible, false - hidden\r\n   * @return Current visibility\r\n   */\n\n\n  Sprite.prototype.setVisibility = function (value) {\n    if (this.setPropertyValue(\"visible\", value)) {\n      if (value) {\n        this.group.removeAttr(\"visibility\");\n      } else {\n        this.group.attr({\n          \"visibility\": \"hidden\"\n        });\n      } //this.invalidatePosition();\n\n\n      if (this.events.isEnabled(\"visibilitychanged\")) {\n        var event_4 = {\n          type: \"visibilitychanged\",\n          target: this,\n          visible: value\n        };\n        this.events.dispatchImmediately(\"visibilitychanged\", event_4);\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"zIndex\", {\n    /**\r\n     * @return zIndex\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"zIndex\");\n    },\n\n    /**\r\n     * A \"zIndex\" of the element.\r\n     *\r\n     * \"zIndex\" determines the order of how elements are placed over each other.\r\n     *\r\n     * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n     * with lower \"zIndexes\".\r\n     *\r\n     * @param value  zIndex\r\n     */\n    set: function (value) {\n      value = $type.toNumber(value);\n\n      if (this.setPropertyValue(\"zIndex\", value)) {\n        this.dispatch(\"zIndexChanged\");\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Moves the element to the very top in element order, so that it appears\r\n   * in front of other elements.\r\n   */\n\n  Sprite.prototype.toFront = function () {\n    var parent = this._parent;\n\n    if (parent && parent.children.indexOf(this) != parent.children.length - 1) {\n      parent.children.moveValue(this, parent.children.length - 1);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n  /**\r\n   * Moves the element to the very bottom in the element order, so that it\r\n   * appears behind other elements.\r\n   */\n\n\n  Sprite.prototype.toBack = function () {\n    var parent = this._parent;\n\n    if (parent && parent.children.indexOf(this) != 0) {\n      parent.children.moveValue(this, 0);\n      this.dispatch(\"zIndexChanged\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"userClassName\", {\n    /**\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"userClassName\");\n    },\n\n    /**\r\n     * A custom class name to set on the element.\r\n     *\r\n     * If set, the value will be added to element's `class` attribute.\r\n     *\r\n     * @since 4.9.11\r\n     * @param  value  Class name\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"userClassName\", value)) {\n        if (!value && this.userClassName) {\n          this.group.removeClass(this.userClassName);\n        }\n\n        this.setClassName();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltip\", {\n    /**\r\n     * @return Tooltip\r\n     */\n    get: function () {\n      if (this._tooltip) {\n        return this._tooltip;\n      } else if (this.virtualParent) {\n        return this.virtualParent.tooltip;\n      } else if (this._parent) {\n        return this._parent.tooltip;\n      }\n    },\n\n    /**\r\n     * ==========================================================================\r\n     * TOOLTIP-RELATED PROPERTIES STUFF\r\n     * ==========================================================================\r\n     * @hidden\r\n     */\n\n    /**\r\n     * A [[Tooltip]] object to be used when displayed rollover information for\r\n     * the element.\r\n     *\r\n     * @param tooltip  Tooltip\r\n     */\n    set: function (tooltip) {\n      if (this._tooltip) {\n        //this._tooltip.dispose();\n        this.removeDispose(this._tooltip);\n      }\n\n      this._tooltip = tooltip;\n\n      if (tooltip) {\n        tooltip.parent = this.tooltipContainer;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipDataItem\", {\n    /**\r\n     * @return Tooltip data item\r\n     */\n    get: function () {\n      var tooltipDataItem = this._tooltipDataItem;\n\n      if (tooltipDataItem) {\n        return tooltipDataItem;\n      } else {\n        return this.dataItem;\n      }\n    },\n\n    /**\r\n     * A [[DataItem]] to use when populating content for the element's\r\n     * [[Tooltip]].\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link DataItem}\r\n     * @param value  Tooltip data item\r\n     */\n    set: function (value) {\n      // important: do not dispose tooltip dataItem, as it is some actual data item from data!\n      this._tooltipDataItem = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipColorSource\", {\n    /**\r\n     * @return Tooltip color source\r\n     */\n    get: function () {\n      return this._tooltipColorSource;\n    },\n\n    /**\r\n     * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n     * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n     *\r\n     * @see {@link Tooltip}\r\n     * @see {@link Sprite}\r\n     * @param sprite Sprite\r\n     */\n    set: function (sprite) {\n      this._tooltipColorSource = sprite;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Shows the element's [[Tooltip]].\r\n   *\r\n   * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n   * `tooltipText` as well as data in `tooltipDataItem`.\r\n   *\r\n   * @see {@link Tooltip}\r\n   * @param optional point (sprite-related) to which tooltip must point.\r\n   * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n   */\n\n  Sprite.prototype.showTooltip = function (point) {\n    if (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\n      this._tooltip = this.tooltip.clone();\n    }\n\n    if (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\n      point = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\n    } // do not show if hidden\n\n\n    var sprite = this;\n\n    while (sprite != undefined) {\n      if (!sprite.visible || sprite.disabled || sprite.__disabled) {\n        if (this._tooltip && this._tooltip.visible) {\n          this._tooltip.hide(0);\n        }\n\n        return;\n      }\n\n      sprite = sprite.parent;\n    }\n\n    if ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\n      var tooltip = this.tooltip;\n      var tooltipDataItem = this.tooltipDataItem;\n\n      if (tooltip) {\n        tooltip.targetSprite = this;\n        var colorSource_1 = this;\n        var tooltipColorSource_1 = this.tooltipColorSource;\n\n        if ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource_1) {\n          if (tooltipColorSource_1.isTemplate) {\n            if (tooltipDataItem) {\n              $array.eachContinue(tooltipDataItem.sprites, function (sprite) {\n                if (sprite.clonedFrom == tooltipColorSource_1) {\n                  colorSource_1 = sprite;\n                  return false;\n                }\n\n                return true;\n              });\n            }\n          } else {\n            colorSource_1 = tooltipColorSource_1;\n          }\n        }\n\n        if (tooltip.getStrokeFromObject) {\n          var stroke = this.stroke;\n          var source = colorSource_1;\n\n          while (source.parent != undefined) {\n            stroke = source.stroke;\n\n            if (stroke == undefined) {\n              source = source.parent;\n            }\n\n            if (stroke != undefined) {\n              break;\n            }\n          }\n\n          if (stroke instanceof Color) {\n            tooltip.background.animate({\n              property: \"stroke\",\n              to: stroke\n            }, tooltip.animationDuration);\n          } else {\n            tooltip.background.stroke = stroke;\n          }\n        } // Set data item\n\n\n        tooltip.dataItem = tooltipDataItem;\n        tooltip.label.populateStringFrom = this;\n\n        if (tooltip.getFillFromObject) {\n          var fill = this.fill;\n          var source = colorSource_1;\n\n          while (source.parent != undefined) {\n            fill = source.fill;\n\n            if (fill == undefined || fill instanceof Color && fill.rgb == undefined) {\n              source = source.parent;\n            } else if (fill != undefined) {\n              break;\n            }\n          }\n\n          if (fill == undefined) {\n            fill = color(\"#000000\");\n          }\n\n          if (fill instanceof Color) {\n            if (!tooltip.visible) {\n              tooltip.background.fill = fill;\n            } else {\n              tooltip.background.animate({\n                property: \"fill\",\n                to: fill\n              }, tooltip.animationDuration);\n            }\n          } else {\n            tooltip.background.fill = fill;\n          }\n\n          if (tooltip.autoTextColor && fill instanceof Color) {\n            tooltip.label.fill = fill.alternative;\n          }\n        } // Apply tooltip text\n\n\n        var text = \"\";\n\n        if (this.tooltipHTML) {\n          tooltip.html = this.tooltipHTML;\n          text = this.tooltipHTML;\n        }\n\n        if (this.tooltipText) {\n          tooltip.text = this.tooltipText;\n          text = this.tooltipText;\n        }\n\n        if (this.updateTooltipPosition(point)) {\n          // Set accessibility option\n          tooltip.readerDescribedBy = this.uidAttr(); // make label to render to be able to check currentText\n\n          if (tooltip.label.invalid) {\n            tooltip.label.validate();\n          }\n\n          if (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\n            //@todo: think of how to solve this better\n            if (tooltip && !tooltip.parent) {\n              tooltip.parent = this.tooltipContainer;\n            } // Reveal tooltip\n            // showing it in 1 ms helps to avoid strange flickering in IE\n\n\n            var duration = tooltip.defaultState.transitionDuration;\n\n            if (duration <= 0) {\n              duration = 1;\n            }\n\n            tooltip.show(duration);\n            tooltip.currentSprite = this;\n            return true;\n          } else {\n            this.hideTooltip(0);\n          }\n        } else {\n          this.hideTooltip(0);\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.updateTooltipPosition = function (point) {\n    var _this = this;\n\n    if (this.tooltipPosition == \"pointer\") {\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n      }\n\n      this._interactionDisposer = getInteraction().body.events.on(\"track\", function (ev) {\n        return _this.pointTooltipTo($utils.documentPointToSvg(ev.point, _this.svgContainer.SVGContainer, _this.svgContainer.cssScale), true);\n      });\n\n      if (point) {\n        return this.pointTooltipTo(point, true);\n      }\n    } else {\n      // Point to the X/Y of this Sprite\n      var globalPoint = $utils.spritePointToSvg({\n        \"x\": this.getTooltipX(),\n        \"y\": this.getTooltipY()\n      }, this);\n      return this.pointTooltipTo(globalPoint);\n    }\n  };\n  /**\r\n   * Sets the point the [[Tooltip]] should point to.\r\n   *\r\n   * @param point      Coordinates to point to\r\n   * @param instantly  Move instantly without animation\r\n   */\n\n\n  Sprite.prototype.pointTooltipTo = function (point, instantly) {\n    var tooltip = this.tooltip;\n\n    if (tooltip && this.topParent) {\n      if (tooltip.showInViewport) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n\n      if ($math.isInRectangle(point, {\n        x: 0,\n        y: 0,\n        width: this.topParent.maxWidth,\n        height: this.topParent.maxHeight\n      })) {\n        tooltip.pointTo(point, instantly);\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Hides element's [[Tooltip]].\r\n   *\r\n   * @see {@link Tooltip}\r\n   */\n\n\n  Sprite.prototype.hideTooltip = function (duration) {\n    if (this.showTooltipOn == \"always\") {\n      return;\n    }\n\n    var tooltip = this.tooltip;\n\n    if (tooltip) {\n      if (tooltip.targetSprite == this) {\n        tooltip.targetSprite = undefined;\n      }\n\n      tooltip.hide(duration);\n\n      if (this._interactionDisposer) {\n        this._interactionDisposer.dispose();\n\n        this._interactionDisposer = undefined;\n      }\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"tooltipHTML\", {\n    /**\r\n     * @return Tooltip HTML content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipHTML\");\n    },\n\n    /**\r\n     * An HTML template to be used to populate [[Tooltip]] contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * @param value Tooltip HTML content template\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n      this.hoverable = true;\n\n      if (this.setPropertyValue(\"tooltipHTML\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipText\", {\n    /**\r\n     * @return Tooltip content template\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipText\");\n    },\n\n    /**\r\n     * A text template to be used to populate Tooltip's contents.\r\n     *\r\n     * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n     * for any data values to be replaced with the values from respective data\r\n     * items.\r\n     *\r\n     * This template will also be parsed for any special formatting tags.\r\n     *\r\n     * @param value Tooltip content template\r\n     * @see {@link TextFormatter}\r\n     */\n    set: function (value) {\n      value = $type.toText(value);\n\n      if (value) {\n        this.hoverable = true;\n      }\n\n      if (this.setPropertyValue(\"tooltipText\", value)) {\n        if (this.tooltip) {\n          if (this.tooltip.visible) {\n            this.showTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipContainer\", {\n    /**\r\n     * @ignore Exclude from docs\r\n     * @return Container\r\n     */\n    get: function () {\n      if (this._tooltipContainer) {\n        return this._tooltipContainer;\n      } else if (this._parent) {\n        return this._parent.tooltipContainer;\n      }\n    },\n\n    /**\r\n     * A container reference that should be used to place element's\r\n     * [[Tooltip]] in.\r\n     *\r\n     * Will use parent's container if does not have one set.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param value Container\r\n     * @todo Dispose of the old _tooltipContainer ?\r\n     */\n    set: function (value) {\n      this._tooltipContainer = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipX\", {\n    /**\r\n     * @return Tooltip X (px)\r\n     */\n    get: function () {\n      return this.getTooltipX();\n    },\n\n    /**\r\n     * X coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip X (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"alwaysShowTooltip\", {\n    /**\r\n     * @return Always show tooltip?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\") == \"always\";\n    },\n\n    /**\r\n     * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n     * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n     *\r\n     * Indicates if this element should display a tooltip permanently.\r\n     *\r\n     * Useful, if you want to show permanent tooltips on some items.\r\n     *\r\n     * @default false\r\n     * @since 4.5.4\r\n     * @deprecated Use `showTooltipOn = \"always\"` instead\r\n     * @param  value  Always show tooltip?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n\n      if (value) {\n        this.showTooltipOn = \"always\";\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showTooltipOn\", {\n    /**\r\n     * @return When to show tooltip\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showTooltipOn\");\n    },\n\n    /**\r\n     * Indicates when tooltip needs to be shown on this element:\r\n     *\r\n     * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n     * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n     * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n     *\r\n     * For example, if you would like to show tooltips on all of the columns of\r\n     * a [[ColumnSeries]]:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.showTooltipOn = \"always\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"showTooltipOn\": \"always\"\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * It can even be set to display on a selected columns via `propertyFields`:\r\n     *\r\n     * ```TypeScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JavaScript\r\n     * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"series\": [{\r\n     *     // ...\r\n     *     \"columns\": {\r\n     *       \"propertyFields\": {\r\n     *         \"showTooltipOn\": \"tooltip\"\r\n     *       }\r\n     *     }\r\n     *   }]\r\n     * }\r\n     * ```\r\n     *\r\n     * @default \"hover\"\r\n     * @since 4.7.9\r\n     * @param  value  When to show tooltip\r\n     */\n    set: function (value) {\n      if (this.setPropertyValue(\"showTooltipOn\", value)) {\n        if (value == \"hit\") {\n          this.clickable = true;\n        }\n\n        if (this.tooltip) {\n          if (value == \"always\") {\n            this.showTooltip();\n          } else {\n            this.handleAlwaysShowTooltip();\n          }\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipPosition\", {\n    /**\r\n     * Position\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tooltipPosition\");\n    },\n\n    /**\r\n     * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n     * at the fixed position.\r\n     *\r\n     * @param value  Position\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tooltipPosition\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tooltipY\", {\n    /**\r\n     * @return Tooltip Y (px)\r\n     */\n    get: function () {\n      return this.getTooltipY();\n    },\n\n    /**\r\n     * Y coordinate the [[Tooltip]] should be shown at.\r\n     *\r\n     * @param value  Tooltip Y (px)\r\n     */\n    set: function (value) {\n      if (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\n        this.tooltip.invalidate();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return X (px)\r\n   */\n\n  Sprite.prototype.getTooltipX = function () {\n    var x = this.getPropertyValue(\"tooltipX\");\n\n    if (!$type.hasValue(x)) {\n      x = percent(50);\n    }\n\n    var value;\n\n    if ($type.isNumber(x)) {\n      value = x;\n    }\n\n    if (x instanceof Percent) {\n      value = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n\n    return value;\n  };\n  /**\r\n   * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Y (px)\r\n   */\n\n\n  Sprite.prototype.getTooltipY = function () {\n    var y = this.getPropertyValue(\"tooltipY\");\n\n    if (!$type.hasValue(y)) {\n      y = percent(50);\n    }\n\n    var value;\n\n    if ($type.isNumber(y)) {\n      value = y;\n    }\n\n    if (y instanceof Percent) {\n      value = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey; // overflow is know only for measured items, so this is not always good\n    }\n\n    if (!$type.isNumber(value)) {\n      value = 0;\n    }\n\n    return value;\n  };\n  /**\r\n   * Displays a modal or console message with error, and halts any further\r\n   * processing of this item.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param e Error\r\n   * @todo Implement from applying further actions to this item\r\n   */\n\n\n  Sprite.prototype.raiseCriticalError = function (e, closable) {\n    if (this.svgContainer) {\n      if (!this._adapterO) {\n        this.modal.content = e.message;\n      } else {\n        this.modal.content = this._adapterO.apply(\"criticalError\", e).message;\n      }\n\n      if (!closable) {\n        this.disabled = true;\n      } else {\n        this.modal.closable = true;\n      }\n\n      if (!options.suppressErrors) {\n        this.modal.open();\n      }\n    }\n\n    if (options.verbose) {\n      console.log(e);\n    }\n  };\n  /**\r\n  * Processes JSON-based config before it is applied to the object.\r\n  *\r\n  * @ignore Exclude from docs\r\n  * @param config  Config\r\n  */\n\n\n  Sprite.prototype.processConfig = function (config) {\n    if (config) {\n      // Tooltip color source\n      if ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\n        config.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\n      } // Cursor styles\n\n\n      if ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\n        config.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\n      }\n\n      if ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\n        config.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\n      }\n\n      if ($type.hasValue(config.cursorOptions)) {\n        if ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\n          config.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\n        }\n\n        if ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\n          config.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\n        }\n      }\n    }\n\n    _super.prototype.processConfig.call(this, config);\n\n    this.processDelayedMap();\n  };\n  /**\r\n   * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n   *\r\n   * @param style  Cursor type\r\n   * @return Cursor definition\r\n   */\n\n\n  Sprite.prototype.getCursorStyle = function (style) {\n    switch (style) {\n      case \"grab\":\n        return MouseCursorStyle.grab;\n\n      case \"grabbing\":\n        return MouseCursorStyle.grabbing;\n\n      case \"pointer\":\n        return MouseCursorStyle.pointer;\n\n      case \"horizontalResize\":\n        return MouseCursorStyle.horizontalResize;\n\n      case \"verticalResize\":\n        return MouseCursorStyle.verticalResize;\n\n      default:\n        return MouseCursorStyle.default;\n    }\n  };\n  /**\r\n   * This function is used to sort element's JSON config properties, so that\r\n   * some properties that absolutely need to be processed last, can be put at\r\n   * the end.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param a  Element 1\r\n   * @param b  Element 2\r\n   * @return Sorting number\r\n   */\n\n\n  Sprite.prototype.configOrder = function (a, b) {\n    if (a == b) {\n      return 0;\n    } // Must come last\n    else if (a == \"tooltipColorSource\") {\n      return 1;\n    } else if (b == \"tooltipColorSource\") {\n      return -1;\n    } else {\n      return _super.prototype.configOrder.call(this, a, b);\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"isHidden\", {\n    /**\r\n     * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n     * This was added becaus hidden state might have visibility set to true and so\r\n     * there would not be possible to find out if a sprite is technically hidden or not.\r\n     */\n    get: function () {\n      if (this._isHidden) {\n        return this._isHidden;\n      } else if (this._parent) {\n        return this._parent.isHidden;\n      }\n\n      return false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"showOnInit\", {\n    /**\r\n     * @return Show on init?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"showOnInit\");\n    },\n\n    /**\r\n     * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n     * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n     *\r\n     * If your \"default\" state's `transitionDuration > 0` this will result in\r\n     * initial animation from \"hidden\" state to \"default\" state.\r\n     *\r\n     * If you need a Sprite which has `showOnInit = true` not to be shown\r\n     * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n     * will not prevent the animation and the sprite will be shown.\r\n     *\r\n     * @param value show on init?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setShowOnInit(value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @ignore\r\n   */\n\n  Sprite.prototype.setShowOnInit = function (value) {\n    if (this.setPropertyValue(\"showOnInit\", value)) {\n      if (!this.isTemplate) {\n        if (value && !this.inited && !this.hidden) {\n          this._showOnInitDisposer = new MultiDisposer([registry.events.once(\"enterframe\", this.hideInitially, this), this.events.once(\"beforevalidated\", this.hideInitially, this, false), this.events.on(\"inited\", this.appear, this, false)]);\n\n          this._disposers.push(this._showOnInitDisposer);\n        } else {\n          if (this._showOnInitDisposer) {\n            this._showOnInitDisposer.dispose();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  Sprite.prototype.hideInitially = function () {\n    if (!this.isDisposed()) {\n      this.appeared = false; //if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\n\n      if (!this.inited) {\n        this.hide(0);\n      }\n    }\n  };\n  /**\r\n   * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n   */\n\n\n  Sprite.prototype.appear = function () {\n    var _this = this;\n\n    this.appeared = false;\n\n    if (!this.hidden && !this.isHidden) {\n      this.hide(0);\n    }\n\n    if (!this.hidden) {\n      var animation = this.show();\n\n      if (animation && !animation.isFinished()) {\n        this.addDisposer(animation.events.on(\"animationended\", function () {\n          _this.appeared = true;\n\n          _this.dispatch(\"appeared\");\n        }));\n      } else {\n        this.appeared = true;\n        this.dispatch(\"appeared\");\n      }\n    } else {\n      this.appeared = true;\n      this.dispatch(\"appeared\");\n    }\n  };\n\n  Object.defineProperty(Sprite.prototype, \"hidden\", {\n    /**\r\n     * @return Is initially hidden?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"hidden\");\n    },\n\n    /**\r\n     * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n     * \"default\" state when initialized. To prevent this but keep\r\n     * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n     *\r\n     * @param value initially hidden?\r\n     */\n    set: function (value) {\n      value = $type.toBoolean(value);\n      this.setPropertyValue(\"hidden\", value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"bbox\", {\n    /**\r\n     * Returns bounding box (square) for this element.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\n    get: function () {\n      if (this.definedBBox) {\n        return this.definedBBox;\n      }\n\n      return this._bbox;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"plugins\", {\n    /**\r\n     * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n     * to this object.\r\n     *\r\n     * @since 4.2.2\r\n     * @return List of plugins\r\n     */\n    get: function () {\n      var _this = this;\n\n      if (!this._plugins) {\n        this._plugins = new List();\n\n        this._disposers.push(this._plugins.events.on(\"inserted\", function (ev) {\n          ev.newValue.target = _this;\n          ev.newValue.init();\n        }));\n\n        this._disposers.push(new ListDisposer(this._plugins));\n      }\n\n      return this._plugins;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  Sprite.prototype._systemUpdate = function (skippedSprites) {\n    this.validate();\n  };\n  /**\r\n   * Called during the System.update method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemCheckIfValidate = function () {\n    return true;\n  };\n  /**\r\n   * Called during the System.validatePositions method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemValidatePositions = function () {\n    this.validatePosition();\n  };\n  /**\r\n   * Called during the System.validateLayouts method\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Sprite.prototype._systemValidateLayouts = function () {};\n\n  return Sprite;\n}(BaseObjectEvents);\n\nexport { Sprite };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Sprite\"] = Sprite;","map":{"version":3,"mappings":"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","names":["SpriteState","SpriteEventDispatcher","BaseObjectEvents","Adapter","globalAdapter","Dictionary","DictionaryTemplate","DictionaryDisposer","ListDisposer","List","MultiDisposer","Disposer","MutableValueDisposer","Animation","AnimationDisposer","getGhostPaper","Container","Pattern","LinearGradient","RadialGradient","Color","color","toColor","getInteraction","MouseCursorStyle","options","registry","NumberFormatter","DateFormatter","DurationFormatter","getTextFormatter","Language","Export","$utils","$math","$strings","$array","$object","$type","$iter","system","Percent","percent","visualProperties","__extends","_super","_this","x","y","width","height","className","_disposers","push","_eventDispatcher","used","uid","group","paper","addGroup","setPropertyValue","_prevMeasuredWidth","_prevMeasuredHeight","_measuredWidth","_measuredHeight","_isMeasured","invalidate","applyTheme","events","_mask","_language","_exporting","each","_bindings","key","value","dispose","Object","Sprite","_adapterO","call","autoSetClassName","setClassName","themes","_themes","parent_1","_parent","getCurrentThemes","_internalDefaultsApplied","disabled","_isTemplate","__disabled","invalid","addToInvalidSprites","requestFrame","dispatchImmediately","applyInternalDefaults","beforeDraw","draw","removeFromInvalidSprites","afterDraw","positionInvalid","addToInvalidPositions","pixelX","pixelY","dx","dy","_updateDisabled","_internalDisabled","attr","removeSVGAttribute","sizeChanged","measure","prevGroupTransform","transformString","moveTo","rotation","nonScaling","scale","globalScale","dispatch","showTooltipOn","updateTooltipPosition","removeFromInvalidPositions","maskRectangle","_maskRectangle","_clipElement","isMeasured","horizontalCenter","verticalCenter","measureElement","_inited","keys","_c","applyFilters","visible","interactionsEnabled","getPropertyValue","showOnInit","appeared","hidden","hide","applyMask","dispatchReady","showTooltip","hideTooltip","isReady","_ready","setState","defaultState","nonScalingStroke","strokeWidth","validatePosition","updateFilterScale","filters","iterator","filter","source","copyFrom","states","length","clone","adapter","interactions","plugins","configField","applyOnClones","virtualParent","exportable","_tooltip","tooltip","cloneTooltip","_showSystemTooltip","showSystemTooltip","copyProperties","propertyFields","properties","fillModifier","strokeModifier","focusFilter","isDisposed","isBaseSprite","htmlContainer","childNodes","removeChild","firstChild","clear","_clones","i","getIndex","_svgContainer","_interactionDisposer","undefined","_urlDisposer","removeFromInvalids","element","_numberFormatter","_focusFilter","stroke","clonedFrom","fill","hasValue","id","map","removeKey","parent","_filters","removeValue","_alwaysShowDisposers","toBoolean","children","child","isTemplate","applyAccessibility","_topParent","topParent","oldParent","baseId","_tooltipContainer","tooltipContainer","_dataItem","dataItem","handleAlwaysShowTooltip","sprite","oldDisposers","oldDisposer","disposer","on","handleAlwaysShow","addDisposer","_virtualParent","filterElement","appendDef","fill_1","modify","stroke_1","_clipPath","_exportable","top","_map","delayedMap","_delayedMap","_id","hasKey","Error","setKey","node","_paper","parent_2","setPaper","oldPaper","appendDefs","_htmlContainer","parent_3","_titleElement","add","_descriptionElement","onAll","opacity","fillOpacity","strokeOpacity","shapeRendering","strokeDasharray","strokeDashoffset","strokeLinecap","strokeLinejoin","focusable","tabindex","role","attribute","removeAttr","classNamePrefix","addClass","userClassName","setSVGAttribute","mask","getUniqueId","getBaseURI","max","pixelWidth","pixelHeight","point","spritePointToSprite","width_1","height_1","removeChildNodes","filterUnits","appendPrimitives","w","h","removeDispose","setSVGAttributes","_element","removeElement","SVGPathElement","_isPath","validate","svgContainer","definedBBox","_bbox","svgBBox","getBBox","prevElementTransform","bbox","ex","ey","elementX","elementY","elementWidth","elementHeigth","pixelPaddingLeft","pixelPaddingRight","pixelPaddingTop","pixelPaddingBottom","measuredWidth","measuredHeight","left","right","top_1","bottom","round","_positionPrecision","maxLeft","maxRight","maxTop","maxBottom","pixelPerfect","pixelPerfectPrecision","updateCenter","_measuredWidthSelf","_measuredHeightSelf","positionPrecision","maxLeftSelf","maxRightSelf","maxTopSelf","maxBottomSelf","svg","matrix","createSVGMatrix","a","cos","c","sin","e","b","d","f","p1","createSVGPoint","p2","p3","p4","pt1","matrixTransform","pt2","pt3","pt4","Math","min","isHover","tooltipText","tooltipHTML","index","indexOf","moveValue","sortChildren","innerWidth","innerHeight","pixel","isNumber","relative","isDragged","invalidatePosition","get","apply","createClipPath","set","inited","reset","removeClipPath","rect","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","_states","state","processState","getKey","hiddenState","create","event","newValue","name","hoverable","clickable","clones","values","length_1","_animations","getBoundingClientRect","animationOptions","duration","easing","start","transitionDuration","isHidden","isHiding","setVisibility","isActive","transitionEasing","transitTo","animation","isDown","downPointers","isFocused","propValues","allValues","transition","propertyName","finalValue","currentValue","option","from","to","property","animate","isFinished","newFilters_1","stateFilter","newFilter","currentFilter","contains","pushAll","animations","isInteractive","handleOver","isRealHover","handleOut","_isDragged","_isResized","handleDown","handleUp","handleFocus","handleBlur","_isActive","setActive","applyCurrentState","current","setDisabled","hasChild","deepInvalidate","_background","numberFormatter","language","_dateFormatter","dateFormatter","_durationFormatter","durationFormatter","ev","exporting","string","castString","escape","tags","match","tag","replace","getTagValue","split","join","unescape","tagName","format","parts","reg","matches","exec","prop","params","trim","reg2","matches2","method","getTagValueFromObject","isObject","dataContext","component","populateStringFrom","object","formatApplied","len","part","numberValue","anyToNumber","dateValue","isString","parse","anyToDate","isDate","isNaN","getTime","durationValue","encodeURIComponent","formatParts","formatterType","getFormat","NUMBER","DATE","DURATION","setDataItem","dataContext_1","config","dataContext_2","dataContext2_1","fieldValue","anyThis","propValue","applyAll","toString","transform","precision","floor","toNumberOrPercent","isEnabled","event_1","type","target","length_2","bindToProperty","modifier","listener","context","shouldClone","toArray","title","readerTitle","description","readerDescription","readerHidden","checked","readerChecked","controls","readerControls","live","readerLive","orientation","readerOrientation","valueNow","readerValueNow","valueText","readerValueText","labelledByIds","describedByIds","labelledBy","readerLabelledBy","describedBy","readerDescribedBy","titleElement","titleId","textContent","descriptionElement","descriptionId","populateString","toText","keyboardOptions","mouseOptions","_interaction","interaction","dom","trackable","draggable","swipeable","resizable","wheelable","contextMenuDisabled","inert","_tabindex","setEventDisposer","hasFocused","focusedElement","hoverOnFocus","toNumber","inertiaOptions","applyCursorStyle","handleDragStart","handleDragMove","handleDragStop","isTouchProtected","touch","originalPosition","pointer","dragStart","cancelled","dragStop","cssScale","shift","hoverOptions","_outTimeout","documentPointToSvg","SVGContainer","targetSprite","keepTargetHover","setTimeout","handleOutReal","bind","rollOutDelay","hitOptions","originalAngle","originalScale","once","body","handleToggle","isNotEmpty","urlHandler","cursorOverStyle","_baseId","setBaseId","baseSprite","url","urlTarget","window","location","href","open","swipeOptions","handleResize","dragWhileResize","svgPoint1","point1","svgPoint2","point2","svgMidPoint","getMidPoint","parentPoint1","documentPointToSprite","startPoint1","parentPoint2","startPoint2","spritePoint1","spritePoint2","spriteMidPoint","parentPoint","svgPointToSprite","cursorOptions","style","overStyle","defaultStyle","applyCursorOverStyle","downStyle","pointerEvents","getExporting","exp","_export","isStandaloneInstance","remove","nonExportableSprites","modal","has","modalPrefix","text","openModal","closeModal","popups","template","openPopup","closeAllPopups","setPercentProperty","fitToRange","getPixelX","minX","maxX","getRelativeX","getPixelY","minY","maxY","invalidateLayout","maxWidth","parentWidth","layout","align","pixelMarginLeft","pixelMarginRight","setMaxWidth","prevWidth","prevHeight","maxHeight","relativeWidth","event_2","previousWidth","previousHeight","parentHeight","valign","pixelMarginTop","pixelMarginBottom","setMaxHeight","relativeHeight","event_3","changed","percentWidth","_pixelWidth","Number","percentHeight","_relativeHeight","_pixelHeight","minWidth","minHeight","_relativeWidth","handleGlobalScale","marginTop","marginRight","marginBottom","marginLeft","getRelativeY","paddingTop","paddingRight","paddingBottom","paddingLeft","setPath","setFill","toNumberRange","setColorProperty","realFill","setStroke","realStroke","hex","_rtl","rtl","showReal","preventShow","isShowing","_hideAnimation","kill","_showHideDisposer","_isHidden","hideReal","currentSprite","hiddenState_1","getVisibility","event_4","removeClass","tooltipDataItem","_tooltipDataItem","_tooltipColorSource","tooltipPosition","lastPointer","colorSource_1","tooltipColorSource_1","tooltipColorSource","getStrokeFromObject","getFillFromObject","eachContinue","sprites","background","animationDuration","label","rgb","autoTextColor","alternative","html","uidAttr","currentText","show","pointTooltipTo","globalPoint","spritePointToSvg","getTooltipX","getTooltipY","instantly","showInViewport","pointTo","isInRectangle","closable","content","message","suppressErrors","verbose","console","log","getCursorStyle","cursorDowntyle","processConfig","processDelayedMap","grab","grabbing","horizontalResize","verticalResize","default","configOrder","setShowOnInit","_showOnInitDisposer","hideInitially","appear","_plugins","init","skippedSprites","registeredClasses"],"sourceRoot":"","sources":["../../../../src/.internal/core/Sprite.ts"],"sourcesContent":["/**\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n */\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SpriteState } from \"./SpriteState\";\r\nimport { ISpriteEvents, SpriteEventDispatcher, AMEvent } from \"./SpriteEvents\";\r\nexport { ISpriteEvents, SpriteEventDispatcher, AMEvent };\r\n\r\nimport { BaseObjectEvents } from \"./Base\";\r\nimport { Adapter, globalAdapter } from \"./utils/Adapter\";\r\nimport { ITheme } from \"../themes/ITheme\";\r\nimport { Dictionary, IDictionaryEvents, DictionaryTemplate, DictionaryDisposer } from \"./utils/Dictionary\";\r\nimport { ListTemplate, ListDisposer, List } from \"./utils/List\";\r\nimport { EventDispatcher } from \"./utils/EventDispatcher\";\r\nimport { MultiDisposer, IDisposer, Disposer, MutableValueDisposer } from \"./utils/Disposer\";\r\nimport { Animation, IAnimatable, IAnimationOptions, AnimationDisposer } from \"./utils/Animation\";\r\nimport { Optional } from \"./utils/Type\";\r\nimport { Group } from \"./rendering/Group\";\r\nimport { Paper, getGhostPaper } from \"./rendering/Paper\";\r\nimport { DataItem } from \"./DataItem\";\r\nimport { Container } from \"./Container\";\r\nimport { Pattern } from \"./rendering/fills/Pattern\";\r\nimport { LinearGradient } from \"./rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"./rendering/fills/RadialGradient\";\r\nimport { SVGContainer } from \"./rendering/SVGContainer\";\r\nimport { Align } from \"./defs/Align\";\r\nimport { Roles, AriaLive } from \"./defs/Accessibility\";\r\nimport { IPlugin } from \"./utils/Plugin\";\r\nimport { Popup } from \"./elements/Popup\";\r\nimport { Modal } from \"./elements/Modal\";\r\nimport { Color, color, toColor } from \"./utils/Color\";\r\nimport { Ordering } from \"./utils/Order\";\r\n\r\nimport { HorizontalCenter } from \"./defs/HorizontalCenter\";\r\nimport { VerticalCenter } from \"./defs/VerticalCenter\";\r\nimport { VerticalAlign } from \"./defs/VerticalAlign\";\r\nimport { ShapeRendering } from \"./defs/ShapeRendering\";\r\nimport { AMElement } from \"./rendering/AMElement\";\r\nimport { Filter } from \"./rendering/filters/Filter\";\r\n\r\nimport { ColorModifier } from \"./rendering/fills/ColorModifier\";\r\n\r\nimport { getInteraction } from \"./interaction/Interaction\";\r\nimport { InteractionObject } from \"./interaction/InteractionObject\";\r\n\r\nimport { IInertiaOptions, ISwipeOptions, IHitOptions, IHoverOptions, ICursorOptions, IKeyboardOptions, IMouseOptions } from \"./interaction/InteractionOptions\";\r\nimport { IPointer } from \"./interaction/Pointer\";\r\nimport { MouseCursorStyle } from \"./interaction/Mouse\";\r\nimport { InertiaTypes } from \"./interaction/Inertia\";\r\nimport { IStyleProperty } from \"./defs/IStyleProperty\";\r\n\r\nimport { options } from \"./Options\";\r\nimport { registry } from \"./Registry\";\r\nimport { IPoint } from \"./defs/IPoint\";\r\nimport { IRectangle } from \"./defs/IRectangle\";\r\nimport { Tooltip } from \"./elements/Tooltip\";\r\n\r\nimport { NumberFormatter } from \"./formatters/NumberFormatter\";\r\nimport { DateFormatter } from \"./formatters/DateFormatter\";\r\nimport { DurationFormatter } from \"./formatters/DurationFormatter\";\r\nimport { getTextFormatter } from \"./formatters/TextFormatter\";\r\nimport { Language } from \"./utils/Language\";\r\nimport { Export } from \"./export/Export\";\r\nimport { AmChartsLogo } from \"./elements/AmChartsLogo\";\r\n\r\n\r\nimport { ISVGAttribute } from \"./rendering/AMElement\";\r\n\r\nimport * as $utils from \"./utils/Utils\";\r\nimport * as $math from \"./utils/Math\";\r\nimport * as $strings from \"./utils/Strings\";\r\nimport * as $array from \"./utils/Array\";\r\nimport * as $object from \"./utils/Object\";\r\nimport * as $type from \"./utils/Type\";\r\nimport * as $iter from \"./utils/Iterator\";\r\n\r\nimport { system } from \"./System\";\r\n\r\nimport { Percent, percent } from \"./utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Sprite]]\r\n */\r\nexport interface ISpriteProperties {\r\n\tdisabled?: boolean;\r\n\tx?: number | Percent;\r\n\ty?: number | Percent;\r\n\twidth?: number | Percent;\r\n\theight?: number | Percent;\r\n\tscale?: number;\r\n\trotation?: number;\r\n\tpixelPerfect?: boolean;\r\n\tmarginLeft?: number;\r\n\tmarginRight?: number;\r\n\tmarginTop?: number;\r\n\tmarginBottom?: number;\r\n\tfillOpacity?: number;\r\n\tfill?: Color | LinearGradient | RadialGradient | Pattern;\r\n\topacity?: number;\r\n\tstroke?: Color | LinearGradient | RadialGradient | Pattern;\r\n\tstrokeOpacity?: number;\r\n\tstrokeWidth?: number;\r\n\tstrokeDasharray?: string;\r\n\tstrokeDashoffset?: number;\r\n\tstrokeLinecap?: \"butt\" | \"square\" | \"round\";\r\n\tstrokeLinejoin?: \"miter\" | \"round\" | \"bevel\";\r\n\tshapeRendering?: ShapeRendering;\r\n\tdraggable?: boolean;\r\n\tinert?: boolean;\r\n\tresizable?: boolean;\r\n\tswipeable?: boolean;\r\n\ttrackable?: boolean;\r\n\thoverable?: boolean;\r\n\tclickable?: boolean;\r\n\ttogglable?: boolean;\r\n\twheelable?: boolean;\r\n\tfocusable?: boolean;\r\n\ttabindex?: number;\r\n\tcontextMenuDisabled?: boolean;\r\n\tvisible?: boolean;\r\n\ttooltipText?: string;\r\n\ttooltipHTML?: string;\r\n\ttooltipX?: number | Percent;\r\n\ttooltipY?: number | Percent;\r\n\talwaysShowTooltip?: boolean;\r\n\ttooltipPosition?: \"fixed\" | \"pointer\";\r\n\tshowTooltipOn?: \"hover\" | \"hit\" | \"always\";\r\n\tinteractionsEnabled?: boolean;\r\n\thorizontalCenter?: HorizontalCenter;\r\n\tverticalCenter?: VerticalCenter;\r\n\talign?: Align;\r\n\tvalign?: VerticalAlign;\r\n\tpaddingLeft?: number;\r\n\tpaddingRight?: number;\r\n\tpaddingTop?: number;\r\n\tpaddingBottom?: number;\r\n\tminX?: number;\r\n\tminY?: number;\r\n\tmaxX?: number;\r\n\tmaxY?: number;\r\n\tdx?: number;\r\n\tdy?: number;\r\n\trole?: Roles;\r\n\treaderDescribedBy?: string;\r\n\treaderLabelledBy?: string;\r\n\treaderLive?: AriaLive;\r\n\treaderControls?: string;\r\n\treaderChecked?: boolean;\r\n\treaderHidden?: boolean;\r\n\treaderDescription?: string;\r\n\treaderTitle?: string;\r\n\treaderOrientation?: string;\r\n\treaderValueNow?: string;\r\n\treaderValueText?: string;\r\n\tnonScaling?: boolean;\r\n\tnonScalingStroke?: boolean;\r\n\tzIndex?: number;\r\n\tminWidth?: number;\r\n\tmaxWidth?: number;\r\n\tminHeight?: number;\r\n\tmaxHeight?: number;\r\n\tfillModifier?: ColorModifier;\r\n\tstrokeModifier?: ColorModifier;\r\n\thoverOnFocus?: boolean;\r\n\tpath?: string;\r\n\turlTarget?: string;\r\n\turl?: string;\r\n\thidden?: boolean;\r\n\tshowOnInit?: boolean;\r\n\tid?: string;\r\n\tisActive?: boolean;\r\n\tisHover?: boolean;\r\n\tuserClassName?: string;\r\n}\r\n\r\n/**\r\n * Defines animation options\r\n */\r\nexport interface ISpriteAnimationOptions {\r\n\tfrom?: Percent | Color | number | string;\r\n\tto: Percent | Color | number | string;\r\n\tproperty: any; // todo: this[\"_properties\"] can not be used here, think.\r\n}\r\n\r\n/**\r\n * Defines list ofvisual properties\r\n */\r\nexport const visualProperties: (keyof ISpriteProperties)[] = [\"fill\", \"fillOpacity\", \"stroke\", \"strokeOpacity\", \"strokeWidth\", \"strokeDasharray\", \"strokeDashoffset\", \"strokeLinecap\", \"strokeLinejoin\"]; // do not add opacity here, as it is used for showing/hiding\r\n\r\n/**\r\n * Represents a list of available adapters for [[Sprite]]\r\n */\r\nexport interface ISpriteAdapters extends ISpriteProperties {\r\n\r\n\tpixelHeight: number;\r\n\tpixelWidth: number;\r\n\trelativeHeight: number\r\n\trelativeWidth: number;\r\n\tmeasuredHeight: number;\r\n\tmeasuredWidth: number;\r\n\touterHeight: number;\r\n\touterWidth: number;\r\n\tinnerHeight: number;\r\n\tinnerWidth: number;\r\n\tglobalScale: number;\r\n\tpixelMarginRight: number;\r\n\trelativeMarginRight: number;\r\n\tpixelMarginLeft: number;\r\n\trelativeMarginLeft: number;\r\n\tpixelMarginTop: number;\r\n\trelativeMarginTop: number;\r\n\tpixelMarginBottom: number;\r\n\trelativeMarginBottom: number;\r\n\tpixelX: number;\r\n\trelativeX: number;\r\n\tpixelY: number;\r\n\trelativeY: number;\r\n\tmask: Sprite;\r\n\tpopulateString: string;\r\n\r\n\tinertiaOptions: Dictionary<InertiaTypes, IInertiaOptions>;\r\n\thitOptions: IHitOptions;\r\n\thoverOptions: IHoverOptions;\r\n\tswipeOptions: ISwipeOptions;\r\n\tkeyboardOptions: IKeyboardOptions;\r\n\tmouseOptions: IMouseOptions;\r\n\tcursorOptions: ICursorOptions;\r\n\tcriticalError: Error;\r\n};\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Sprite represents any displayable element.\r\n *\r\n * This is the main class that encapsulates every object on the chart.\r\n *\r\n * If it's an element that is to be displayed on the screen at some point, its\r\n * class must extend [[Sprite]] class.\r\n *\r\n * [[Sprite]] class represents the a hierarchical structure. Every object that\r\n * extends [[Sprite]] can have children, that would inherit their properties,\r\n * such as language, formatters, etc.\r\n *\r\n * @see {@link SpriteState}\r\n * @see {@link ISpriteEvents} for a list of available events\r\n * @see {@link ISpriteAdapters} for a list of available Adapters\r\n *\r\n * @todo Review child elements that need to go into `_disposers`\r\n * @important\r\n */\r\nexport class Sprite extends BaseObjectEvents implements IAnimatable {\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: ISpriteProperties;\r\n\r\n\t/**\r\n\t * Defines state type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\t//public _state: SpriteState;\r\n\r\n\t/**\r\n\t * Defines type used in the Sprite.\r\n\t */\r\n\tpublic _adapter!: ISpriteAdapters;\r\n\r\n\t/**\r\n\t * Holds values for Sprite's properties.\r\n\t */\r\n\tpublic properties: this[\"_properties\"] = {};\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISpriteEvents;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _eventDispatcher: SpriteEventDispatcher<AMEvent<this, this[\"_events\"]>> = new SpriteEventDispatcher(this);\r\n\r\n\t/**\r\n\t * Event dispatcher.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/event-listeners/} for more info about Events\r\n\t */\r\n\tpublic get events(): SpriteEventDispatcher<AMEvent<this, this[\"_events\"]>> {\r\n\t\treturn this._eventDispatcher;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _adapterO: Adapter<this, this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/adapters/} for more info about Adapters\r\n\t */\r\n\tpublic get adapter(): Adapter<this, this[\"_adapter\"]> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\tthis._adapterO = new Adapter<this, this[\"_adapter\"]>(this);\r\n\t\t}\r\n\t\treturn this._adapterO;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprivate _bindings: { [key: string]: IDisposer } = {};\r\n\r\n\t/**\r\n\t * Holds indicator if this Sprite is a \"template\" to be used for creating\r\n\t * other Sprites from and should not be treated as full-fledged element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _isTemplate: boolean = false;\r\n\r\n\tprotected _isPath: boolean = false;\r\n\r\n\t/**\r\n\t * Holds collection of Sprite States.\r\n\t */\r\n\tpublic _states: $type.Optional<DictionaryTemplate<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>>>;\r\n\r\n\t/**\r\n\t * Holds indicator whether this sprite was already initialized.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _inited: boolean = false;\r\n\r\n\t/**\r\n\t * Holds indicator whether this sprite was already initialized and ready.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _ready: boolean = false;\r\n\r\n\t/**\r\n\t * A reference to a Tooltip for this Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltip: $type.Optional<Tooltip>;\r\n\r\n\t/**\r\n\t * A special data item which tooltip will use when formatting data. In case\r\n\t * it is not set, dataItem will be used.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltipDataItem: $type.Optional<DataItem>;\r\n\r\n\t/**\r\n\t * A reference to another sprite or sprite template from which tooltip should take colors if getFillFromObject or getStrokeFromObject are set to true.\r\n\t * Mostly used when we need to adjust tooltip color for a series, depending on column or bullet color.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltipColorSource: $type.Optional<Sprite>;\r\n\r\n\t/**\r\n\t * If `sprite.hide()` is called and we have \"hidden\" state and\r\n\t * `transitionDuration > 0`, we set `isHiding` flag to `true` in order to\r\n\t * avoid restarting animations in case `hide()` method is called multiple\r\n\t * times.\r\n\t */\r\n\tpublic isHiding: boolean = false;\r\n\r\n\t/**\r\n\t * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n\t * This was added becaus hidden state might have visibility set to true and so\r\n\t * there would not be possible to find out if a sprite is technically hidden or not.\r\n\t */\r\n\tprotected _isHidden: boolean = false;\r\n\r\n\t/**\r\n\t * This property indicates if Sprite is currently being revealed from hidden\r\n\t * state. This is used to prevent multiple calls to `sprite.show()` to\r\n\t * restart reveal animation. (if enabled)\r\n\t */\r\n\tpublic isShowing: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates if this element is a standalone instance. A \"standalone\r\n\t * instance\" means this is a autonomous object which maintains its own\r\n\t * set of controls like Preloader, Export, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic isStandaloneInstance: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates if togglable Sprite is currently active (toggled on).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _isActive: boolean = false;\r\n\r\n\t/**\r\n\t * A Sprite element to use as a mask for this Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _mask = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _clipPath: Optional<Group>;\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _clipElement: $type.Optional<AMElement>;\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _positionPrecision: number = 3;\r\n\r\n\t/**\r\n\t * Holds reference to Sprite's [[InteractionObject]]. Sprite does not\r\n\t * perform any user interactions directly, it happens via [[InteractionObject]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _interaction: $type.Optional<InteractionObject>;\r\n\r\n\t/**\r\n\t * An instance of [[Language]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _language = new MutableValueDisposer<Language>();\r\n\r\n\t/**\r\n\t * An instance of [[NumberFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _numberFormatter: $type.Optional<NumberFormatter>;\r\n\r\n\t/**\r\n\t * An instance of [[DateFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _dateFormatter: $type.Optional<DateFormatter>;\r\n\r\n\t/**\r\n\t * An instance of [[DurationFormatter]].\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _durationFormatter: $type.Optional<DurationFormatter>;\r\n\r\n\t/**\r\n\t * An HTML element to which [[svgContainer]] is added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _htmlContainer: $type.Optional<HTMLElement>;\r\n\r\n\t/**\r\n\t * An HTML element to which all chart elements are added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _svgContainer: $type.Optional<SVGContainer>;\r\n\r\n\t/**\r\n\t * A [[Container]] instance to place this element's [[Tooltip]] elements in\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tooltipContainer: $type.Optional<Container>;\r\n\r\n\r\n\tprotected _urlDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * Should this element be measured when measuring its parent container's\r\n\t * dimentions?\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _isMeasured: $type.Optional<boolean>;\r\n\r\n\t/**\r\n\t * Indicates if the chart should follow right-to-left rules.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _rtl: boolean;\r\n\r\n\t/**\r\n\t * Holds [[Export]] object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _exporting = new MutableValueDisposer<Export>();\r\n\r\n\t/**\r\n\t * Should this Sprite be included when exporting?\r\n\t */\r\n\tprotected _exportable: boolean = true;\r\n\r\n\t/**\r\n\t * A reference to a top-level SVG node for this Sprite element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _element: Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Holds Sprite's main SVG group (`<g>`) element. Other Sprite's elements\r\n\t * are all placed in this group.\r\n\t */\r\n\tpublic group: Group;\r\n\r\n\t/**\r\n\t * A reference to [[Paper]] SVG renderer used to create SVG nodes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _paper: $type.Optional<Paper>;\r\n\r\n\t/**\r\n\t * Elements's top-level [[Container]].\r\n\t *\r\n\t *\r\n\t * @return Top-level ascendant\r\n\t */\r\n\tprotected _topParent: Optional<Container>;\r\n\r\n\t/**\r\n\t * Data item assigned to the sprite. It might contain information defining\r\n\t * some style properties.\r\n\t */\r\n\tpublic _dataItem: $type.Optional<DataItem>;\r\n\r\n\t/**\r\n\t * Parent container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _parent: Container;\r\n\r\n\t/**\r\n\t * Sprite's \"virtual\" parent.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _virtualParent: Sprite;\r\n\r\n\t/**\r\n\t * Defines bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _bbox: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t/**\r\n\t * Base tab index for the Sprite. Used for TAB-key selection order.\r\n\t *\r\n\t * Use accessors `tabIndex` to set and retrieve.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _tabindex: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Should system tooltips be allowed to be displayed if the element has\r\n\t * `readerTitle` set?\r\n\t *\r\n\t * Use accessors `showSystemTooltip` to set and retrieve.\r\n\t *\r\n\t * This is an accessibility feature.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _showSystemTooltip: $type.Optional<boolean>;\r\n\r\n\t/**\r\n\t * List of animations currently playing for this Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _animations: $type.Optional<Array<Animation>>;\r\n\r\n\t/**\r\n\t * A link to [[Disposer]] for event handler which is attached to hide\r\n\t * animation. In some cases we need to cancel this event. This property is\r\n\t * used to hold the reference to disposer of this event so that we can\r\n\t * cancel it by calling its `dispose()` method.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _showHideDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * If element is currently hiding, this property will hold a reference to\r\n\t * [[Animation]] instance, which is handling hiding animation.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _hideAnimation: $type.Optional<Animation>;\r\n\r\n\t/**\r\n\t * List of [[Filter]] items that are currently applied to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _filters: $type.Optional<List<Filter>>;\r\n\r\n\t/**\r\n\t * A shortcut to the special \"Focus\" filter which is applied when the element\r\n\t * gains focus.\r\n\t *\r\n\t * This is an accessibility feature.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _focusFilter: $type.Optional<Filter>;\r\n\r\n\t/**\r\n\t * Indicates if this element is invalid and should be re-validated (redrawn).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalid: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates if this elements position is invalid and should be repositioned\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic positionInvalid: boolean = false;\r\n\r\n\t/**\r\n\t * A collection of key/value pairs that can be used to bind specific Sprite\r\n\t * properties to [[DataItem]].\r\n\t *\r\n\t * For example: `fill` property can be bound to `myCustomColor` field in\r\n\t * DataItem. The Sprite will automatically get the value for `fill` from its\r\n\t * DataItem.\r\n\t *\r\n\t * Can be set for each [[SpriteState]] individually to override default\r\n\t * bindings.\r\n\t *\r\n\t * @see {@link SpriteState}\r\n\t */\r\n\tpublic propertyFields: { [index in keyof this[\"_properties\"]]?: string } = {};\r\n\t//public propertyFields: Dictionary<keyof this[\"_properties\"], string> = new Dictionary<keyof this[\"_properties\"], string>();\r\n\r\n\t/**\r\n\t * Element's relative width.\r\n\t *\r\n\t * Do not set this property directly. Use `width` accessor with [[Percent]]\r\n\t * value instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic percentWidth: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * Element's relative height.\r\n\t *\r\n\t * Do not set this property directly. Use `height` accessor with [[Percent]]\r\n\t * value instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic percentHeight: $type.Optional<number>;\r\n\r\n\t/**\r\n\t * An SVG group element that is used to put all SVG filters to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic filterElement: $type.Optional<Group>;\r\n\r\n\t/**\r\n\t * A field in data context of element's `dataItem` that holds config values\r\n\t * for this element.\r\n\t *\r\n\t * This is a very powerful feature, allowing changing virtually any setting,\r\n\t * including those for element's children, for the element via data.\r\n\t *\r\n\t * Example data:\r\n\t *\r\n\t * ```JSON\r\n\t * {\r\n\t *   \"value\": 100,\r\n\t *   \"config\": {\r\n\t *     \"fill\": \"#F00\"\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * If you set element's `configField = \"config\"`, the element for this\r\n\t * specific data point will have a red fill.\r\n\t */\r\n\tpublic configField: $type.Optional<string>;\r\n\r\n\t/**\r\n\t * Reference to element's `<title>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _titleElement: Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Reference to element's `<description>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _descriptionElement: Optional<AMElement>;\r\n\r\n\t/**\r\n\t * Specifies if property changes on this object should be propagated to the\r\n\t * objects cloned from this object.\r\n\t *\r\n\t * This setting affects property changes *after* cloning, since at the moment\r\n\t * of cloning all of properties from source object are copied to the clone\r\n\t * anyway.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tpublic applyOnClones: boolean = false;\r\n\r\n\t/**\r\n\t * a reference to an object which should be used when populating string. used for tooltip label mostly.\r\n\t * @ignore\r\n\t */\r\n\tpublic populateStringFrom: any;\r\n\r\n\t/**\r\n\t * Internal storage properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected _measuredWidth: number;\r\n\tprotected _measuredHeight: number;\r\n\r\n\t// unrotated unscaled\r\n\tprotected _measuredWidthSelf: number = 0;\r\n\tprotected _measuredHeightSelf: number = 0;\r\n\r\n\tprotected _prevMeasuredWidth: number;\r\n\tprotected _prevMeasuredHeight: number;\r\n\r\n\tprotected _pixelWidth: $type.Optional<number>;\r\n\tprotected _pixelHeight: $type.Optional<number>;\r\n\r\n\tprotected _relativeWidth: $type.Optional<number>;\r\n\tprotected _relativeHeight: $type.Optional<number>;\r\n\r\n\t// read only, sprite extreme coordinates\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxLeft: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxRight: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxTop: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxBottom: number = 0;\r\n\r\n\t// not rotated and not scaled\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxLeftSelf: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxRightSelf: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxTopSelf: number = 0;\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic maxBottomSelf: number = 0;\r\n\r\n\tprotected _isDragged: boolean = false;\r\n\r\n\tprotected _isResized: boolean = false;\r\n\r\n\t/**\r\n\t * @deprecated Moved to [[SpriteProperties]]\r\n\t */\r\n\tprotected _disabled: boolean = false;\r\n\r\n\tprotected _internalDisabled: boolean = false;\r\n\r\n\tprotected _updateDisabled: boolean = false;\r\n\r\n\tprotected _maskRectangle: $type.Optional<IRectangle>;\r\n\r\n\tprotected _internalDefaultsApplied: boolean = false;\r\n\r\n\tprotected _interactionDisposer: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * You can set bbox from outside if you know what size your element must be (used in radar chart for example)\r\n\t * @ignore\r\n\t */\r\n\tpublic definedBBox: IRectangle;\r\n\r\n\t/**\r\n\t * Time in milliseconds after which rollout event happens when user rolls-out of the sprite. This helps to avoid flickering in some cases.\r\n\t */\r\n\tpublic rollOutDelay: number = 0;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected _outTimeout: $type.Optional<IDisposer>;\r\n\r\n\t/**\r\n\t * This flag is set to `true` for the initial sprite you create and place\r\n\t * to the div so that we could clear all additional\r\n\t * sprites/containers when this sprite is disposed.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic isBaseSprite: boolean = false;\r\n\r\n\t/**\r\n\t * Indicates whether this sprite should be cloned when cloning its parent\r\n\t * container. We set this to `false` in those cases when a sprite is created\r\n\t * by the class, so that when cloning a duplicate sprite would not appear.\r\n\t */\r\n\tpublic shouldClone: boolean = true;\r\n\r\n\t/**\r\n\t * A property which you can use to store any data you want.\r\n\t */\r\n\tpublic dummyData: any;\r\n\r\n\t/**\r\n\t * A reference to a real fill object. Sometimes might be useful to modify\r\n\t * gradient (when fill is color but we have FillModifier).\r\n\t */\r\n\tpublic realFill: Color | Pattern | LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * A reference to a real stroke object. Sometimes might be useful to modify\r\n\t * gradient (when fill is color but we have a FillModifier).\r\n\t */\r\n\tpublic realStroke: Color | Pattern | LinearGradient | RadialGradient;\r\n\r\n\t/**\r\n\t * A reference to amCharts logo element.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic logo: AmChartsLogo;\r\n\r\n\t/**\r\n\t * [_baseId description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _baseId: string;\r\n\r\n\t/**\r\n\t * A read-only flag which indicates if a sprite has completed its initial\r\n\t * animation (if `showOnInit = true`).\r\n\t *\r\n\t * In case `showOnInit = false`, `appeared` is set to `true` on init.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic appeared: boolean = false;\r\n\r\n\t/**\r\n\t * [ex description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore\r\n\t */\r\n\tpublic ex: number = 0;\r\n\r\n\t/**\r\n\t * [ey description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore\r\n\t */\r\n\tpublic ey: number = 0;\r\n\r\n\t/**\r\n\t * [_showOnInitDisposer description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _showOnInitDisposer: MultiDisposer;\r\n\r\n\t/**\r\n\t * Holds the list of plugins attached to this Sprite.\r\n\t */\r\n\tprotected _plugins: $type.Optional<List<IPlugin>>;\r\n\r\n\t/**\r\n\t * Indicates if the sprite can be moved around when resizing it with two fingers (will only work if draggable = false)\r\n\t * @ignore\r\n\t */\r\n\tpublic dragWhileResize: boolean = false;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic vpDisposer: MultiDisposer;\r\n\r\n\tprotected _alwaysShowDisposers: IDisposer[];\r\n\r\n\t/**\r\n\t *  @ignore\r\n\t */\r\n\tpublic measureFailed: boolean = false;\r\n\r\n\t/**\r\n\t * If this flag is set to true, calling show() will not reveal the sprite.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic preventShow: boolean = false;\r\n\r\n\t/**\r\n\t * When cloning a sprite, if the template has it's own tooltip assigned, this tooltip is also cloned by default.\r\n\t * This is not good for cpu and sometimes you might only need one single tooltip for all clones. Set this to false in order not to clone tooltip.\r\n\t */\r\n\tpublic cloneTooltip: boolean = true;\r\n\r\n\t/**\r\n\t * Constructor:\r\n\t * * Creates initial node\r\n\t * * Sets default properties\r\n\t * * Creates required default states\r\n\t * * Inits accessibility\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"Sprite\";\r\n\r\n\t\tthis._disposers.push(this._eventDispatcher);\r\n\r\n\t\t// Generate a unique ID\r\n\t\t$utils.used(this.uid);\r\n\r\n\t\t// Create SVG group to hold everything in\r\n\t\tthis.group = this.paper.addGroup(\"g\");\r\n\r\n\t\t// Set defaults\r\n\t\t// it is better to set defauls like this in order to save invaliation calls and events\r\n\t\tthis.setPropertyValue(\"scale\", 1);\r\n\t\tthis.setPropertyValue(\"rotation\", 0);\r\n\t\tthis.setPropertyValue(\"align\", \"none\");\r\n\t\tthis.setPropertyValue(\"valign\", \"none\");\r\n\t\tthis.setPropertyValue(\"pixelPerfect\", false);\r\n\t\tthis.setPropertyValue(\"visible\", true);\r\n\t\tthis.setPropertyValue(\"tooltipPosition\", \"fixed\");\r\n\t\tthis.setPropertyValue(\"verticalCenter\", \"none\");\r\n\t\tthis.setPropertyValue(\"horizontalCenter\", \"none\");\r\n\r\n\t\tthis.setPropertyValue(\"tooltipX\", percent(50));\r\n\t\tthis.setPropertyValue(\"tooltipX\", percent(50));\r\n\r\n\t\tthis.setPropertyValue(\"marginTop\", 0);\r\n\t\tthis.setPropertyValue(\"marginBottom\", 0);\r\n\t\tthis.setPropertyValue(\"marginLeft\", 0);\r\n\t\tthis.setPropertyValue(\"marginRight\", 0);\r\n\r\n\t\tthis.setPropertyValue(\"dx\", 0);\r\n\t\tthis.setPropertyValue(\"dy\", 0);\r\n\r\n\t\tthis.setPropertyValue(\"paddingTop\", 0);\r\n\t\tthis.setPropertyValue(\"paddingBottom\", 0);\r\n\t\tthis.setPropertyValue(\"paddingRight\", 0);\r\n\t\tthis.setPropertyValue(\"paddingLeft\", 0);\r\n\r\n\t\tthis.setPropertyValue(\"togglable\", false);\r\n\t\tthis.setPropertyValue(\"hidden\", false);\r\n\t\tthis.setPropertyValue(\"urlTarget\", \"_self\");\r\n\t\tthis.setPropertyValue(\"alwaysShowTooltip\", false);\r\n\t\tthis.setPropertyValue(\"showTooltipOn\", \"hover\");\r\n\r\n\t\tthis._prevMeasuredWidth = 0;\r\n\t\tthis._prevMeasuredHeight = 0;\r\n\t\tthis._measuredWidth = 0;\r\n\t\tthis._measuredHeight = 0;\r\n\r\n\t\tthis._isMeasured = true;\r\n\r\n\t\t// Invalidate the Sprite so that renderer knows it needs to be drawn\r\n\t\tthis.invalidate();\r\n\r\n\t\t//this.states.create(\"default\").properties.opacity = 1;\r\n\r\n\t\t// Apply the theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\t//this._disposers.push(this._clickable);\r\n\r\n\t\t// Decorate adapter with events so that we can apply its settings whenever\r\n\t\t// it is modified\r\n\t\t// @todo Think what to do here. We can't just apply the adapter value to\r\n\t\t// property since not all of those are for properties. Commented out for\r\n\t\t// now.\r\n\t\t/*this.adapter.events.on(\"inserted\", (ev: any) => {\r\n\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t});\r\n\t\tthis.adapter.events.on(\"removed\", (ev: any) => {\r\n\t\t\t(<any>this)[ev.newValue.key] = (<any>this)[ev.newValue.key];\r\n\t\t});*/\r\n\r\n\t\t// Add disposable dependencies to `_disposers` so they are automatically\r\n\t\t// disposed of when this object is disposed\r\n\t\tthis._disposers.push(this.events);\r\n\t\tthis._disposers.push(this.group);\r\n\t\tthis._disposers.push(this._mask);\r\n\t\tthis._disposers.push(this._language);\r\n\t\tthis._disposers.push(this._exporting);\r\n\t\t//this._disposers.push(this._parent);\r\n\t\t//this._disposers.push(this._modal);\r\n\r\n\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t$object.each(this._bindings, (key, value) => {\r\n\t\t\t\tvalue.dispose();\r\n\t\t\t});\r\n\t\t}));\r\n\r\n\t\tthis.setPropertyValue(\"interactionsEnabled\", true);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ELEMENT VALIDATION, INIT, AND DRAWING STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Applies properties from all assigned themes.\r\n\t *\r\n\t * We do this here so that we can apply class names as well.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic applyTheme(): void {\r\n\t\tsuper.applyTheme();\r\n\t\tif (options.autoSetClassName) {\r\n\t\t\tthis.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns theme(s) used by this object either set explicitly on this\r\n\t * element, inherited from parent, or inherited from [[System]].\r\n\t *\r\n\t * @return An array of theme references\r\n\t */\r\n\tpublic getCurrentThemes(): ITheme[] {\r\n\t\tconst themes = this._themes;\r\n\r\n\t\tif (themes) {\r\n\t\t\treturn themes;\r\n\r\n\t\t} else {\r\n\t\t\tconst parent = this._parent;\r\n\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn parent.getCurrentThemes();\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn registry.themes;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called just before element's validation, this function allows setting\r\n\t * defaults.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\t// Nothing here, but extending classes might override this function\r\n\t\t// so that they can set their defaults\r\n\t\tthis._internalDefaultsApplied = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates element.\r\n\t *\r\n\t * Object will be redrawn during the next update cycle.\r\n\t *\r\n\t * Please note that in most cases elements will auto-invalidate when needed. If\r\n\t * everything works, DO NOT use this method. Use it only if some changes do\r\n\t * not take otherwise.\r\n\t */\r\n\tpublic invalidate(): void {\r\n\t\tif (this.disabled || this._isTemplate || this.__disabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// We no longer reset this on each invalidate, so that they are applied\r\n\t\t// only once, and do not overwrite user-defined settings\r\n\t\t//this._internalDefaultsApplied = false;\r\n\r\n\t\tif (!this.invalid) {\r\n\t\t\tthis.invalid = true;\r\n\t\t\tregistry.addToInvalidSprites(this);\r\n\t\t\tsystem.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates element:\r\n\t * * Triggers events\r\n\t * * Redraws the element\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tthis.dispatchImmediately(\"beforevalidated\");\r\n\r\n\t\t// prevents from drawing if topparent is 0x0\r\n\t\t/*\r\n\t\tlet topParent = this.topParent;\r\n\r\n\t\tif (topParent) {\r\n\t\t\tif (!topParent.maxWidth || !topParent.maxHeight) {\r\n\t\t\t\tthis._disposers.push(topParent.events.once(\"maxsizechanged\", this.invalidate, this));\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t\t// Set internal defaults\r\n\t\tif (!this._internalDefaultsApplied) {\r\n\t\t\tthis.applyInternalDefaults();\r\n\t\t}\r\n\r\n\t\tthis.beforeDraw();\r\n\t\tthis.draw();\r\n\r\n\t\tthis.invalid = false;\r\n\r\n\t\tregistry.removeFromInvalidSprites(this);\r\n\t\tthis.afterDraw();\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates element's position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidatePosition(): void {\r\n\t\tif (this.disabled || this._isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!this.positionInvalid) {\r\n\t\t\tthis.positionInvalid = true;\r\n\t\t\tregistry.addToInvalidPositions(this);\r\n\t\t\tsystem.requestFrame();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Transforms the element.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validatePosition(): void {\r\n\r\n\t\tlet pixelX = this.pixelX;\r\n\t\tlet pixelY = this.pixelY;\r\n\t\tlet dx = this.dx;\r\n\t\tlet dy = this.dy;\r\n\r\n\t\tlet x: number = pixelX + dx;\r\n\t\tlet y: number = pixelY + dy;\r\n\r\n\t\tif (this._updateDisabled) {\r\n\t\t\tif (this._internalDisabled) {\r\n\t\t\t\tthis.group.attr({ \"display\": \"none\" })\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (!this.disabled) {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"display\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._updateDisabled = false;\r\n\t\t}\r\n\r\n\t\tlet sizeChanged: boolean = this.measure();\r\n\r\n\t\t//if (!this.invalid) {\r\n\t\tlet prevGroupTransform: string = this.group.transformString;\r\n\r\n\t\tthis.group.moveTo({ x: x, y: y });\r\n\t\tthis.group.rotation = this.rotation;\r\n\t\tif (this.nonScaling) {\r\n\t\t\tthis.group.scale = this.scale / this.globalScale;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.group.scale = this.scale;\r\n\t\t}\r\n\r\n\t\tif (prevGroupTransform != this.group.transformString || sizeChanged) {\r\n\t\t\t// not yet sure, this is to avoid many transforms=>container layout invalidation on initial buid\r\n\t\t\tif (prevGroupTransform == null) {\r\n\t\t\t\tthis.dispatch(\"transformed\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dispatchImmediately(\"transformed\");\r\n\t\t\t}\r\n\t\t\t// TODO clear existing positionchanged dispatches ?\r\n\t\t\tthis.dispatch(\"positionchanged\");\r\n\r\n\t\t\tif (this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") {\r\n\t\t\t\tthis.updateTooltipPosition();\r\n\t\t\t}\r\n\t\t}\r\n\t\t//}\r\n\r\n\t\t// it might happen that x and y changed again, so we only remove if they didn't\r\n\t\tif (pixelX + dx == x && pixelY + dy == y) {\r\n\t\t\tregistry.removeFromInvalidPositions(this);\r\n\t\t\tthis.positionInvalid = false;\r\n\t\t}\r\n\t\tlet maskRectangle = this._maskRectangle;\r\n\t\t// todo: verify this\r\n\t\tif (maskRectangle) {\r\n\t\t\tthis._clipElement.moveTo({ x: maskRectangle.x - pixelX, y: maskRectangle.y - pixelY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A placeholder method that is called **before** element begins to be drawn.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A placeholder method that draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected draw(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A placeholder method that is called **after** element finishes drawing\r\n\t * itself.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tif (this.isMeasured || this.horizontalCenter !== \"none\" || this.verticalCenter !== \"none\") {\r\n\t\t\tthis.measureElement();\r\n\t\t}\r\n\r\n\t\t//this.applyMask();\r\n\r\n\t\tif (!this._inited) {\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\t// used to be applySVGAttrbutes here, this is more efficient\r\n\t\t\t\tfor (let key of this._adapterO.keys()) {\r\n\t\t\t\t\tswitch (key) {\r\n\t\t\t\t\t\tcase \"mask\":\r\n\t\t\t\t\t\tcase \"fill\":\r\n\t\t\t\t\t\tcase \"opacity\":\r\n\t\t\t\t\t\tcase \"fillOpacity\":\r\n\t\t\t\t\t\tcase \"stroke\":\r\n\t\t\t\t\t\tcase \"strokeOpacity\":\r\n\t\t\t\t\t\tcase \"strokeWidth\":\r\n\t\t\t\t\t\tcase \"shapeRendering\":\r\n\t\t\t\t\t\tcase \"strokeDasharray\":\r\n\t\t\t\t\t\tcase \"strokeDashoffset\":\r\n\t\t\t\t\t\tcase \"strokeLinecap\":\r\n\t\t\t\t\t\tcase \"strokeLinejoin\":\r\n\t\t\t\t\t\tcase \"textDecoration\":\r\n\t\t\t\t\t\tcase \"fontSize\":\r\n\t\t\t\t\t\tcase \"fontFamily\":\r\n\t\t\t\t\t\tcase \"fontWeight\":\r\n\t\t\t\t\t\t\t//case \"focusable\":\r\n\t\t\t\t\t\t\t//case \"tabindex\":\r\n\t\t\t\t\t\t\t//case \"role\":\r\n\t\t\t\t\t\t\t(<any>this)[key] = (<any>this)[key];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.applyFilters();\r\n\r\n\t\t\tthis.visible = this.visible;\r\n\t\t\tthis.interactionsEnabled = this.getPropertyValue(\"interactionsEnabled\"); // can't use .interactionsEnabled as it get's parent's\r\n\r\n\t\t\tthis._inited = true;\r\n\r\n\t\t\tif (!this.showOnInit) {\r\n\t\t\t\tthis.appeared = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.hidden) {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.applyMask();\r\n\t\t\tthis.dispatch(\"validated\");\r\n\t\t\tthis.dispatch(\"inited\");\r\n\t\t\tthis.dispatchReady();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.dispatch(\"validated\");\r\n\t\t}\r\n\r\n\t\tif (this.showTooltipOn == \"always\") {\r\n\t\t\tif (this.visible && !this.disabled && !this.__disabled) {\r\n\t\t\t\tthis.showTooltip();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches `\"ready\"` event. Sprite dispatches it right after `\"inited\"` event.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic dispatchReady(): void {\r\n\t\tif (!this.isReady()) {\r\n\t\t\tthis._ready = true;\r\n\t\t\tthis.dispatch(\"ready\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tthis._inited = false;\r\n\t\tthis.setState(this.defaultState);\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the situation where parent element is resized.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleGlobalScale(): void {\r\n\t\tthis.dispatch(\"globalscalechanged\");\r\n\r\n\t\tif (this.nonScalingStroke) {\r\n\t\t\tthis.strokeWidth = this.strokeWidth;\r\n\t\t}\r\n\r\n\t\tif (this.nonScaling) {\r\n\t\t\tthis.validatePosition();\r\n\t\t}\r\n\r\n\t\tthis.updateFilterScale();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates filter properties which might depend on scale\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateFilterScale(): void {\r\n\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\tfilter.scale = this.globalScale;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes itself from system's invalid lists.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected removeFromInvalids() {\r\n\t\tregistry.removeFromInvalidSprites(this);\r\n\t\tregistry.removeFromInvalidPositions(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tthis.isMeasured = source.isMeasured;\r\n\r\n\t\tthis.states.copyFrom(source.states);\r\n\r\n\t\tif (source.filters.length > 0) {\r\n\t\t\tsource.filters.each((filter) => {\r\n\t\t\t\tthis.filters.push(filter.clone());\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (source._adapterO) {\r\n\t\t\tthis.adapter.copyFrom(source._adapterO);\r\n\t\t}\r\n\r\n\t\t//helps to avoid calling getter which creates instance\r\n\t\tif ((<any>source)[\"_interaction\"]) {\r\n\t\t\tthis.interactions.copyFrom(source.interactions);\r\n\t\t}\r\n\r\n\t\tif ((<any>source)[\"_plugins\"]) {\r\n\t\t\tthis.plugins.copyFrom(source.plugins);\r\n\t\t}\r\n\r\n\t\tthis.configField = source.configField;\r\n\r\n\t\tthis.applyOnClones = source.applyOnClones;\r\n\r\n\t\t// this.numberFormatter = source.numberFormatter; // todo: this creates loose number formatter and copies it to all clones. somehow we need to know if source had numberFormatter explicitly created and not just because a getter was called.\r\n\r\n\t\t//this.mask = source.mask; need to think about this, generally this causes a lot of problems\r\n\t\tthis.disabled = source.disabled;\r\n\r\n\t\tthis.virtualParent = source.virtualParent;\r\n\r\n\t\tthis.exportable = source.exportable;\r\n\t\t//@todo: create tooltip if it's on source but not on this?\r\n\t\t//const tooltip = this._tooltip;\r\n\t\t//if (tooltip) {\r\n\t\t//\ttooltip.copyFrom(source.tooltip);\r\n\t\t//}\r\n\r\n\t\tif (source._tooltip) {\r\n\t\t\tif (this._tooltip) {\r\n\t\t\t\tthis._tooltip.copyFrom(source.tooltip);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (source.cloneTooltip) {\r\n\t\t\t\t\tthis.tooltip = source.tooltip.clone();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._tooltip = source.tooltip;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ((<any>source)[\"_tooltip\"] && !this._tooltip) {\r\n\t\t//\tthis._tooltip = (<any>source)[\"_tooltip\"];\r\n\t\t//}\r\n\r\n\t\tthis._showSystemTooltip = source.showSystemTooltip;\r\n\r\n\t\t$utils.copyProperties(source.propertyFields, this.propertyFields);\r\n\t\t$utils.copyProperties(source.properties, this);\r\n\r\n\t\tif (source.fillModifier) {\r\n\t\t\tthis.fillModifier = source.fillModifier.clone();\r\n\t\t}\r\n\r\n\t\tif (source.strokeModifier) {\r\n\t\t\tthis.strokeModifier = source.strokeModifier.clone();\r\n\t\t}\r\n\r\n\t\tif (source.focusFilter) {\r\n\t\t\tthis.focusFilter = source.focusFilter.clone();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose(): void {\r\n\t\tif (!this.isDisposed()) {\r\n\r\n\t\t\tif (this.showTooltipOn == \"always\" && this.tooltip) {\r\n\t\t\t\tthis.tooltip.hide();\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"beforedisposed\");\r\n\r\n\t\t\tif (this.isBaseSprite) {\r\n\t\t\t\tif (this.htmlContainer) {\r\n\t\t\t\t\twhile (this.htmlContainer.childNodes.length > 0) {\r\n\t\t\t\t\t\tthis.htmlContainer.removeChild(this.htmlContainer.firstChild);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.isBaseSprite = false;\r\n\t\t\t}\r\n\r\n\t\t\tsuper.dispose();\r\n\r\n\t\t\t// Clear adapters\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\tthis._adapterO.clear();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.applyOnClones) {\r\n\t\t\t\tif (this._clones) {\r\n\t\t\t\t\tfor (let i = this._clones.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tlet clone = this._clones.getIndex(i);\r\n\t\t\t\t\t\tclone.dispose();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this._svgContainer) {\r\n\t\t\t\tthis._svgContainer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._interactionDisposer) {\r\n\t\t\t\tthis._interactionDisposer.dispose();\r\n\t\t\t\tthis._interactionDisposer = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._urlDisposer) {\r\n\t\t\t\tthis._urlDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tthis.removeFromInvalids();\r\n\r\n\t\t\tif (this.element) {\r\n\t\t\t\tthis.element.dispose();\r\n\t\t\t}\r\n\t\t\tif (this.group) {\r\n\t\t\t\tthis.group.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._numberFormatter) {\r\n\t\t\t\tthis._numberFormatter.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (this._focusFilter) {\r\n\t\t\t\tthis._focusFilter.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tlet stroke = this.stroke;\r\n\t\t\tif (stroke && !(stroke instanceof Color) && stroke.dispose) {\r\n\t\t\t\tif (this.clonedFrom && this.clonedFrom.stroke == stroke) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tstroke.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// TODO a bit hacky\r\n\t\t\tlet fill = this.fill;\r\n\t\t\tif (fill && !(fill instanceof Color) && fill.dispose) {\r\n\t\t\t\tif (this.clonedFrom && this.clonedFrom.fill == fill) {\r\n\t\t\t\t\t// do nothing\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfill.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// remove from map\r\n\t\t\tif ($type.hasValue(this.id)) {\r\n\t\t\t\tthis.map.removeKey(this.id);\r\n\t\t\t}\r\n\r\n\t\t\tthis.parent = undefined;\r\n\t\t\tif (this._filters) {\r\n\t\t\t\twhile (this._filters.length > 0) {\r\n\t\t\t\t\tlet filter = <Filter>this._filters.getIndex(0);\r\n\t\t\t\t\tfilter.dispose();\r\n\t\t\t\t\tthis._filters.removeValue(filter);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._alwaysShowDisposers = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is a \"template\".\r\n\t *\r\n\t * Template Sprites act only as a holders for config for other \"real\"\r\n\t * elements to be cloned from.\r\n\t *\r\n\t * Templates are treated differently, as they are not validated, redrawn, or\r\n\t * otherwise are processed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Is template?\r\n\t */\r\n\tpublic set isTemplate(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this._isTemplate != value) {\r\n\t\t\tthis._isTemplate = value;\r\n\r\n\t\t\tif (this instanceof Container) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tchild.isTemplate = value;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.parent = this._parent;\r\n\t\t\t\tthis.removeFromInvalids();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Is template?\r\n\t */\r\n\tpublic get isTemplate(): boolean {\r\n\t\treturn this._isTemplate;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates whether the element should attempt to construct itself in a way\r\n\t * so that system tooltip is shown if its `readerTitle` is set.\r\n\t *\r\n\t * @param value Show system tooltip?\r\n\t */\r\n\tpublic set showSystemTooltip(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this._showSystemTooltip != value) {\r\n\t\t\tthis._showSystemTooltip = value;\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Show system tooltip?\r\n\t */\r\n\tpublic get showSystemTooltip(): boolean {\r\n\t\tif (!$type.hasValue(this._showSystemTooltip)) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.showSystemTooltip;\r\n\t\t\t}\r\n\t\t\telse if (this._parent) {\r\n\t\t\t\treturn this._parent.showSystemTooltip;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._showSystemTooltip;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * HIERARCHY AND STRUCTURE RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Sprites's top-level [[Container]].\r\n\t *\r\n\t * Please note that in most cases it won't be the chart element.\r\n\t *\r\n\t * To access base chart element, use `baseSprite` instead.\r\n\t *\r\n\t * @return Top-level ascendant\r\n\t */\r\n\tpublic get topParent(): Optional<Container> {\r\n\t\tif (this._topParent) {\r\n\t\t\treturn this._topParent;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.topParent;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @param value {Container} top parent of a sprite\r\n\t */\r\n\tpublic set topParent(value: Container) {\r\n\t\tthis._topParent = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Elements' parent [[Container]].\r\n\t *\r\n\t * @param parent  Parent container\r\n\t */\r\n\tpublic set parent(parent: Optional<Container>) {\r\n\t\tif (this._isTemplate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// TODO is this needed ?\r\n\t\t$utils.used(this.paper);\r\n\r\n\t\tlet oldParent = this._parent;\r\n\t\tif (oldParent != parent) {\r\n\r\n\t\t\tif (oldParent) {\r\n\t\t\t\toldParent.children.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._parent = parent;\r\n\r\n\t\t\tif (parent) {\r\n\r\n\t\t\t\tthis.topParent = parent.topParent;\r\n\r\n\t\t\t\tif (parent.isTemplate) {\r\n\t\t\t\t\tthis.isTemplate = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.baseId = parent.baseId;\r\n\r\n\t\t\t\tparent.children.push(this);\r\n\t\t\t\t// insert handler at Container invalidates +  invalidatesLayout + adds to group\r\n\r\n\t\t\t\tif (this._tooltip && !this._tooltipContainer) {\r\n\t\t\t\t\tthis._tooltip.parent = parent.tooltipContainer;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this._dataItem) {\r\n\t\t\t\t\tthis.dataItem = parent.dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.handleAlwaysShowTooltip();\r\n\r\n\t\t\t\tif (this.dataItem) {\r\n\t\t\t\t\t// No need to apply accessibility if there's no data item\r\n\t\t\t\t\t// The whole reason of applying it here is to populate data\r\n\t\t\t\t\t// placesholders, and if tehre's no data item, it won't work anyway\r\n\t\t\t\t\tthis.applyAccessibility();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"parentset\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.topParent = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAlwaysShow() {\r\n\t\tthis.showTooltip();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAlwaysShowTooltip() {\r\n\t\tlet sprite: Sprite = this;\r\n\r\n\t\tlet oldDisposers = this._alwaysShowDisposers;\r\n\t\tif (oldDisposers) {\r\n\t\t\t$array.each(oldDisposers, (oldDisposer) => {\r\n\t\t\t\toldDisposer.dispose();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._alwaysShowDisposers = [];\r\n\r\n\t\tif (this.showTooltipOn == \"always\") {\r\n\t\t\twhile (sprite != undefined) {\r\n\t\t\t\tlet disposer = sprite.events.on(\"visibilitychanged\", this.handleAlwaysShow, this, false);\r\n\t\t\t\tthis.addDisposer(disposer);\r\n\t\t\t\tthis._alwaysShowDisposers.push(disposer);\r\n\t\t\t\tsprite = sprite.parent;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Parent container\r\n\t */\r\n\tpublic get parent(): Optional<Container> {\r\n\t\treturn this._parent;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's \"virtual\" parent.\r\n\t *\r\n\t * This is required in ordere to maintain proper inheritance (like\r\n\t * formatters).\r\n\t *\r\n\t * Sometimes an element is a \"logical\" parent, even though it's not a direct\r\n\t * ascendant.\r\n\t *\r\n\t * Example: a bullet is not a child of the axis, but it would make sense\r\n\t * for it to inherit series' formatters.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Virtual parent\r\n\t */\r\n\tpublic set virtualParent(value: Sprite) {\r\n\t\tthis._virtualParent = value;\r\n\t\tif (this.dataItem) {\r\n\t\t\t// No need to apply accessibility if there's no data item\r\n\t\t\t// The whole reason of applying it here is to populate data\r\n\t\t\t// placesholders, and if tehre's no data item, it won't work anyway\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Virtual parent\r\n\t */\r\n\tpublic get virtualParent(): Optional<Sprite> {\r\n\t\treturn this._virtualParent;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves `<defs>` to correct place in DOM.\r\n\t *\r\n\t * Some elements are initially created in \"ghost\" container. When moving\r\n\t * those into proper place in DOM, their respective `<defs>` need to be moved\r\n\t * as well.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic appendDefs(): void {\r\n\r\n\t\tif (this.filterElement) {\r\n\t\t\tthis.paper.appendDef(this.filterElement);\r\n\t\t}\r\n\r\n\t\tlet fill = <any>this.fill;\r\n\r\n\t\tif (fill && fill.element) {\r\n\t\t\tthis.paper.appendDef(fill.element);\r\n\t\t}\r\n\r\n\t\tlet stroke = <any>this.stroke;\r\n\t\tif (stroke && stroke.element) {\r\n\t\t\tthis.paper.appendDef(stroke.element);\r\n\t\t}\r\n\r\n\t\tif (this.fillModifier && this.fill instanceof Color) {\r\n\t\t\tlet fill = <any>this.fillModifier.modify(this.fill);\r\n\t\t\tif (fill && fill.element) {\r\n\t\t\t\tthis.paper.appendDef(fill.element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.strokeModifier && this.stroke instanceof Color) {\r\n\t\t\tlet stroke = <any>this.strokeModifier.modify(this.stroke);\r\n\t\t\tif (stroke && stroke.element) {\r\n\t\t\t\tthis.paper.appendDef(stroke.element);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._clipPath) {\r\n\t\t\tthis.paper.appendDef(this._clipPath);\r\n\t\t}\r\n\r\n\t\tif (this._exportable === false) {\r\n\t\t\tthis.exportable = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Dictionary]] which maps object ids with their respective\r\n\t * objects.\r\n\t *\r\n\t * Can be used to retrieve any object by id, e.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * console.log(mySprite.map.getKey(\"myid\"));\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * console.log(mySprite.map.getKey(\"myid\"));\r\n\t * ```\r\n\t *\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get map(): Dictionary<string, any> {\r\n\t\tconst top = this.topParent;\r\n\r\n\t\tif (top) {\r\n\t\t\treturn top.map;\r\n\t\t} else if (!this._map) {\r\n\t\t\tthis._map = new Dictionary<string, any>();\r\n\t\t}\r\n\r\n\t\treturn this._map;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Map collection\r\n\t */\r\n\tpublic get delayedMap(): Dictionary<string, any> {\r\n\t\tconst top = this.topParent;\r\n\r\n\t\tif (top) {\r\n\t\t\treturn top.delayedMap;\r\n\t\t} else if (!this._delayedMap) {\r\n\t\t\tthis._delayedMap = new Dictionary<string, any>();\r\n\t\t}\r\n\r\n\t\treturn this._delayedMap;\r\n\t}\r\n\r\n\t/**\r\n\t * Element's user-defined ID.\r\n\t *\r\n\t * Will throw an Error if there already is an object with the same ID.\r\n\t *\r\n\t * Please note that above check will be performed withing the scope of the\r\n\t * current chart instance. It will not do checks across other chart instances\r\n\t * or in globally in DOM.\r\n\t *\r\n\t * Make sure the IDs are unique.\r\n\t *\r\n\t * @param value ID\r\n\t */\r\n\tpublic set id(value: string) {\r\n\t\tif (this._id != value) {\r\n\t\t\tthis._id = value;\r\n\t\t\tif (this.map.hasKey(value)) {\r\n\t\t\t\tthrow Error(\"Duplicate id (\" + value + \") used on multiple objects.\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.map.setKey(value, this);\r\n\t\t\t}\r\n\t\t\tif (options.autoSetClassName) {\r\n\t\t\t\tthis.setClassName();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return ID\r\n\t */\r\n\tpublic get id(): string {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ELEMENT AND DOM TREE MANIPULATION AND MEASURING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns DOM element reference associated with this element.\r\n\t *\r\n\t * @readonly\r\n\t * @return DOM element\r\n\t */\r\n\tpublic get dom(): SVGSVGElement {\r\n\t\treturn this.group.node;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Paper]] instance to place elements on.\r\n\t *\r\n\t * If there's no Paper set for this element, it goes up the ascendant tree\r\n\t * until it finds one.\r\n\t *\r\n\t * This method is used by important `addChild()` method, so it's essential\r\n\t * to have a [[Paper]] instance.\r\n\t *\r\n\t * If this element has a separate `htmlContainer` set, it will have a\r\n\t * [[Paper]] instance itself.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param paper  Paper\r\n\t */\r\n\tpublic set paper(paper: Paper) {\r\n\t\tthis.setPaper(paper);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets [[Paper]] instance to use to draw elements.\r\n\t * @ignore\r\n\t * @param paper Paper\r\n\t * @return true if paper was changed, false, if it's the same\r\n\t */\r\n\tpublic setPaper(paper: Paper): boolean {\r\n\t\tlet oldPaper = this._paper;\r\n\r\n\t\tif (oldPaper != paper) {\r\n\t\t\tthis._paper = paper;\r\n\r\n\t\t\tthis.appendDefs();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Paper\r\n\t */\r\n\tpublic get paper(): Paper {\r\n\t\tif (this._paper) {\r\n\t\t\treturn this._paper;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet parent = this._parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn parent.paper;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn getGhostPaper();\r\n\t}\r\n\r\n\t/**\r\n\t * An HTML element to be used when placing wrapper element (`<div>`)\r\n\t * for the whole chart.\r\n\t *\r\n\t * This is the same for **all** elements within the same chart.\r\n\t *\r\n\t * @param htmlContainer HTML element\r\n\t */\r\n\tpublic set htmlContainer(htmlContainer: $type.Optional<HTMLElement>) {\r\n\t\tthis._htmlContainer = htmlContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * @return HTML element\r\n\t */\r\n\tpublic get htmlContainer(): $type.Optional<HTMLElement> {\r\n\t\tif (this._htmlContainer) {\r\n\t\t\treturn this._htmlContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet parent = this._parent;\r\n\t\t\tif (parent) {\r\n\t\t\t\treturn parent.htmlContainer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates (if not yet created) and returns element's `<title>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Title element\r\n\t */\r\n\tpublic get titleElement(): AMElement {\r\n\t\tif (!this._titleElement) {\r\n\t\t\tthis._titleElement = this.paper.add(\"title\");\r\n\t\t\tthis.group.add(this._titleElement);\r\n\t\t}\r\n\t\treturn this._titleElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates (if not yet created) and returns element's `<desc>` element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Desc element\r\n\t */\r\n\tpublic get descriptionElement(): AMElement {\r\n\t\tif (!this._descriptionElement) {\r\n\t\t\tthis._descriptionElement = this.paper.add(\"desc\");\r\n\t\t\tthis.group.add(this._descriptionElement);\r\n\t\t}\r\n\t\treturn this._descriptionElement;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns list of SVG filters (effects) applied to element. If the filter\r\n\t * list is not yet initilized, creates and returns an empty one.\r\n\t * Note, not all filters combine well with one another. We recommend using one filter per sprite.\r\n\t *\r\n\t * @return List of filters\r\n\t */\r\n\tpublic get filters(): List<Filter> {\r\n\t\tif (!this._filters) {\r\n\t\t\tthis._filters = new List<Filter>();\r\n\t\t\t// TODO only add certain events ?\r\n\t\t\tthis._disposers.push(this._filters.events.onAll(this.applyFilters, this));\r\n\t\t\tthis._disposers.push(new ListDisposer(this._filters));\r\n\t\t}\r\n\t\treturn this._filters;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets required SVG attributes. Must be called every time an element is\r\n\t * redrawn so that attributes are (re)applied.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected setSVGAttributes(): void {\r\n\t\tthis.fill = this.fill;\r\n\t\tthis.opacity = this.opacity;\r\n\t\tthis.fillOpacity = this.fillOpacity;\r\n\t\tthis.stroke = this.stroke;\r\n\t\tthis.strokeOpacity = this.strokeOpacity;\r\n\t\tthis.shapeRendering = this.shapeRendering;\r\n\t\tthis.strokeDasharray = this.strokeDasharray;\r\n\t\tthis.strokeDashoffset = this.strokeDashoffset;\r\n\t\tthis.strokeLinecap = this.strokeLinecap;\r\n\t\tthis.strokeLinejoin = this.strokeLinejoin;\r\n\t\tthis.focusable = this.focusable;\r\n\t\tthis.tabindex = this.tabindex;\r\n\t\tthis.role = this.role;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an attribute directly on an SVG element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param attribute Attribute object\r\n\t */\r\n\tprotected setSVGAttribute(attribute: ISVGAttribute): void {\r\n\t\tthis.group.attr(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Removes an attribute directly from SVG element.\r\n\t *\r\n\t * @param attribute Attribute key to remove\r\n\t */\r\n\tprotected removeSVGAttribute(attribute: string): void {\r\n\t\tthis.group.removeAttr(attribute);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets `class` attribute of the elements SVG node.\r\n\t *\r\n\t * Uses `am4core.options.classNamePrefix`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic setClassName(): void {\r\n\r\n\t\tlet className = this.className;\r\n\t\tlet classNamePrefix = options.classNamePrefix;\r\n\r\n\t\tif (this.element) {\r\n\t\t\tthis.element.addClass(classNamePrefix + className);\r\n\t\t}\r\n\r\n\t\tthis.group.addClass(classNamePrefix + className + \"-group\");\r\n\r\n\t\tif ($type.hasValue(this.id)) {\r\n\t\t\tthis.group.addClass(classNamePrefix + this.id);\r\n\t\t}\r\n\r\n\t\tif (this.userClassName) {\r\n\t\t\tthis.group.addClass(this.userClassName);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds an `id` attribute the the element and returns the id.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element's ID\r\n\t */\r\n\tpublic uidAttr(): string {\r\n\t\tthis.setSVGAttribute({ \"id\": this.uid });\r\n\t\treturn this.uid;\r\n\t}\r\n\r\n\t/**\r\n\t * [updateClipPath description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected updateClipPath(): void {\r\n\t\tconst element = this._clipElement;\r\n\r\n\t\tif (element) {\r\n\t\t\telement.moveTo({ x: this.mask.pixelX, y: this.mask.pixelY });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createClipPath() {\r\n\t\tif (!this._clipPath) {\r\n\t\t\tthis._clipPath = this.paper.addGroup(\"clipPath\");\r\n\t\t\tthis.paper.appendDef(this._clipPath);\r\n\t\t\tthis._disposers.push(this._clipPath);\r\n\t\t\tlet id: string = registry.getUniqueId();\r\n\t\t\tthis._clipPath.attr({ \"id\": id });\r\n\t\t\tthis.group.attr({ \"clip-path\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Applies the mask Sprite.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyMask(): void {\r\n\t\tlet mask = this.mask;\r\n\r\n\t\tif (this._clipPath && mask) {\r\n\t\t\t// Container\r\n\t\t\tif (mask instanceof Container) {\r\n\t\t\t\tthis._clipElement.attr({ \"width\": $math.max(0, mask.pixelWidth), \"height\": $math.max(0, mask.pixelHeight) });\r\n\r\n\t\t\t\tlet point = $utils.spritePointToSprite({ x: mask.pixelX, y: mask.pixelY }, mask.parent, this);\r\n\r\n\t\t\t\tthis._clipPath.x = point.x;\r\n\t\t\t\tthis._clipPath.y = point.y;\r\n\t\t\t}\r\n\t\t\t// Sprite\r\n\t\t\telse {\r\n\t\t\t\tif (mask.element && mask.element != this._clipElement) {\r\n\t\t\t\t\tthis._clipElement = mask.element;\r\n\t\t\t\t\tthis._clipPath.add(this._clipElement);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._clipPath.scale = mask.scale;\r\n\t\t\t\tthis._clipPath.x = mask.pixelX;\r\n\t\t\t\tthis._clipPath.y = mask.pixelY;\r\n\t\t\t\tthis._clipPath.rotation = mask.rotation;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Applies filters to the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyFilters(): void {\r\n\t\t// we create a separate filter for each sprite as otherwise it would be impossible to animate filter.\r\n\t\t// svg doesn't support multiple filters applied to one element, so we put all the primitives to one filterElement of a sprite.\r\n\t\tif (this._filters && this._filters.length > 0) {\r\n\r\n\t\t\tlet width = 100;\r\n\t\t\tlet height = 100;\r\n\r\n\t\t\tif (!this.filterElement) {\r\n\t\t\t\tthis.filterElement = this.paper.addGroup(\"filter\");\r\n\t\t\t\tthis._disposers.push(this.filterElement);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.filterElement.removeChildNodes();\r\n\t\t\t}\r\n\r\n\t\t\tthis.paper.appendDef(this.filterElement);\r\n\r\n\t\t\tlet id: string = \"filter-\" + this.uid;\r\n\t\t\tthis.filterElement.attr({ \"id\": id });\r\n\r\n\t\t\t$iter.each(this.filters.iterator(), (filter) => {\r\n\t\t\t\tfilter.sprite = this;\r\n\t\t\t\tfilter.paper = this.paper;\r\n\r\n\t\t\t\tthis.filterElement.attr({ filterUnits: filter.filterUnits });\r\n\r\n\t\t\t\tfilter.appendPrimitives(this.filterElement);\r\n\r\n\t\t\t\tif (filter.width > width) {\r\n\t\t\t\t\twidth = filter.width;\r\n\t\t\t\t}\r\n\t\t\t\tif (filter.height > height) {\r\n\t\t\t\t\theight = filter.height;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfilter.scale = this.globalScale;\r\n\t\t\t});\r\n\r\n\t\t\tlet w = width + \"%\";\r\n\t\t\tlet h = height + \"%\";\r\n\r\n\t\t\t/* temporarily removed as it is breaking tooltips on Safari @todo come back to this\r\n\t\t\tif (this._measuredHeight <= 1) {\r\n\t\t\t\th = height + \"\";\r\n\t\t\t}\r\n\r\n\t\t\tif (this._measuredWidth <= 1) {\r\n\t\t\t\th = width + \"\";\r\n\t\t\t}*/\r\n\r\n\t\t\tthis.filterElement.attr({ \"width\": w, \"height\": h, \"x\": -(width - 100) / 2 + \"%\", \"y\": -(height - 100) / 2 + \"%\" });\r\n\r\n\t\t\tthis.group.attr({ \"filter\": \"url(\\\"\" + $utils.getBaseURI() + id + \"\\\")\" });\r\n\t\t}\r\n\t\telse if (this.filterElement) {\r\n\t\t\tthis.group.removeAttr(\"filter\");\r\n\t\t\tthis.filterElement.removeChildNodes();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [removeClipPath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected removeClipPath(): void {\r\n\t\tif (this._clipPath) {\r\n\t\t\t//this._clipPath.dispose();\r\n\t\t\tthis.removeDispose(this._clipPath);\r\n\t\t\tthis._clipPath = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [setElement description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t * @param element [description]\r\n\t */\r\n\tpublic setElement(element: AMElement) {\r\n\t\tthis.element = element;\r\n\t\tthis.setSVGAttributes();\r\n\t\tthis.applyAccessibility();\r\n\t}\r\n\r\n\t/**\r\n\t * The main element for this Sprite, usually an SVG `<g>`.\r\n\t *\r\n\t * All other sub-elements are created in it.\r\n\t *\r\n\t * @param element  Element\r\n\t */\r\n\tpublic set element(element: Optional<AMElement>) {\r\n\r\n\t\t// Destroy previous element if there was one before\r\n\t\tthis.removeElement();\r\n\r\n\t\t// Set new element\r\n\t\tthis._element = element;\r\n\r\n\t\t// Add element to group\r\n\t\t// Since we are adding Element to group, which is already in the\r\n\t\t// `.disposers` it will be removed automatically when Sprite is disposed\r\n\t\t// of\r\n\t\tthis.group.add(element);\r\n\r\n\t\tif (element.node instanceof SVGPathElement) {\r\n\t\t\tthis._isPath = true;\r\n\t\t}\r\n\r\n\t\t// This is needed if someone is setting element not in draw method but\r\n\t\t// from outside\r\n\t\tif (!this.invalid) {\r\n\t\t\tthis.validate();\r\n\t\t}\r\n\r\n\t\tif (options.autoSetClassName) {\r\n\t\t\tthis.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element\r\n\t */\r\n\tpublic get element(): Optional<AMElement> {\r\n\t\treturn this._element;\r\n\t}\r\n\r\n\t/**\r\n\t * HTML container (`<div>`) which is used to place chart's `<svg>` element\r\n\t * in.\r\n\t *\r\n\t * @return Container for chart elements\r\n\t */\r\n\tpublic get svgContainer(): $type.Optional<SVGContainer> {\r\n\t\tif (this._svgContainer) {\r\n\t\t\treturn this._svgContainer;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.svgContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets HTML container to add SVG and other chart elements to.\r\n\t *\r\n\t * @param svgContainer Container for chart elements\r\n\t */\r\n\tpublic set svgContainer(svgContainer: $type.Optional<SVGContainer>) {\r\n\t\tthis._svgContainer = svgContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Measures main element.\r\n\t *\r\n\t * Saves measurements into private `_bbox` property.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected measureElement() {\r\n\r\n\t\tif (this.element) {\r\n\t\t\tif (this.definedBBox) {\r\n\t\t\t\tthis._bbox = this.definedBBox;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet svgBBox: IRectangle = this.element.getBBox();\r\n\t\t\t\tthis._bbox = { x: svgBBox.x, y: svgBBox.y, width: svgBBox.width, height: svgBBox.height };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Positions element according its center settings.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateCenter() {\r\n\t\tif (this.element) {\r\n\t\t\tlet prevElementTransform: string = this.element.transformString;\r\n\r\n\t\t\tlet bbox = this.bbox;\r\n\r\n\t\t\tlet ex = 0;\r\n\t\t\tlet ey = 0;\r\n\r\n\t\t\tlet elementX = bbox.x;\r\n\t\t\tlet elementY = bbox.y;\r\n\r\n\t\t\tlet elementWidth = bbox.width;\r\n\t\t\tlet elementHeigth = bbox.height;\r\n\r\n\t\t\tlet pixelPaddingLeft = this.pixelPaddingLeft;\r\n\t\t\tlet pixelPaddingRight = this.pixelPaddingRight;\r\n\t\t\tlet pixelPaddingTop = this.pixelPaddingTop;\r\n\t\t\tlet pixelPaddingBottom = this.pixelPaddingBottom;\r\n\r\n\t\t\t// add padding to the measured size\r\n\t\t\tlet measuredWidth = $math.max(elementWidth + pixelPaddingLeft + pixelPaddingRight, this.pixelWidth);\r\n\t\t\tlet measuredHeight = $math.max(elementHeigth + pixelPaddingTop + pixelPaddingBottom, this.pixelHeight);\r\n\r\n\t\t\t// extremes\r\n\t\t\tlet left = bbox.x;\r\n\t\t\tlet right = bbox.x + measuredWidth;\r\n\r\n\t\t\tlet top = bbox.y;\r\n\t\t\tlet bottom = bbox.y + measuredHeight;\r\n\r\n\t\t\tlet horizontalCenter = this.horizontalCenter;\r\n\t\t\tlet verticalCenter = this.verticalCenter;\r\n\r\n\t\t\tswitch (horizontalCenter) {\r\n\t\t\t\tcase \"none\":\r\n\t\t\t\t\tex = elementX + pixelPaddingLeft;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"left\":\r\n\t\t\t\t\tex = pixelPaddingLeft;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tex = pixelPaddingLeft - (elementWidth + pixelPaddingRight + pixelPaddingLeft) / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"right\":\r\n\t\t\t\t\tex = -pixelPaddingRight - elementWidth;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tswitch (verticalCenter) {\r\n\t\t\t\tcase \"none\":\r\n\t\t\t\t\tey = elementY + pixelPaddingTop;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"top\":\r\n\t\t\t\t\tey = pixelPaddingTop;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tey = pixelPaddingTop - (elementHeigth + pixelPaddingBottom + pixelPaddingTop) / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tey = -pixelPaddingBottom - elementHeigth;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tthis._measuredHeight = measuredHeight;\r\n\t\t\tthis._measuredWidth = measuredWidth;\r\n\r\n\t\t\tlet x: number = $math.round(ex - elementX, this._positionPrecision, true);\r\n\t\t\tlet y: number = $math.round(ey - elementY, this._positionPrecision, true);\r\n\r\n\t\t\tthis.ex = x - pixelPaddingLeft;\r\n\t\t\tthis.ey = y - pixelPaddingTop;\r\n\r\n\t\t\tthis.maxLeft = left + x - pixelPaddingLeft;\r\n\t\t\tthis.maxRight = right + x - pixelPaddingLeft;\r\n\r\n\t\t\tthis.maxTop = top + y - pixelPaddingTop;\r\n\t\t\tthis.maxBottom = bottom + y - pixelPaddingTop;\r\n\r\n\t\t\tif (this.pixelPerfect && options.pixelPerfectPrecision == 0) {\r\n\t\t\t\tx -= 0.5;\r\n\t\t\t\ty -= 0.5;\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.moveTo({ x: x, y: y });\r\n\r\n\t\t\tif (prevElementTransform != this.element.transformString) {\r\n\t\t\t\tthis.dispatchImmediately(\"transformed\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the whole element.\r\n\t *\r\n\t * Returns `true` if the size has changed from the last measurement.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Did the size changed from the last measurement?\r\n\t */\r\n\tpublic measure(): boolean {\r\n\r\n\t\tthis.updateCenter();\r\n\r\n\t\tlet measuredWidth = this._measuredWidth;\r\n\t\tlet measuredHeight = this._measuredHeight;\r\n\r\n\t\t// extremes\r\n\t\tlet left = this.maxLeft;\r\n\t\tlet right = this.maxRight;\r\n\r\n\t\tlet top = this.maxTop;\r\n\t\tlet bottom = this.maxBottom;\r\n\r\n\t\t// non-parent wise size\r\n\t\tthis._measuredWidthSelf = measuredWidth;\r\n\t\tthis._measuredHeightSelf = measuredHeight;\r\n\r\n\t\tlet positionPrecision = this._positionPrecision;\r\n\r\n\t\tthis.maxLeftSelf = this.maxLeft;\r\n\t\tthis.maxRightSelf = this.maxRight;\r\n\t\tthis.maxTopSelf = this.maxTop;\r\n\t\tthis.maxBottomSelf = this.maxBottom;\r\n\r\n\t\t// if a sprite is rotated or scaled, calculate measured size after transformations\r\n\r\n\t\tif (this.rotation !== 0 || this.scale !== 1 || this.nonScaling) {\r\n\r\n\t\t\t// not good to handleGlobalScale here.\r\n\t\t\tif (this.nonScalingStroke) {\r\n\t\t\t\tthis.strokeWidth = this.strokeWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet svg = this.paper.svg;\r\n\r\n\t\t\tlet matrix: SVGMatrix = svg.createSVGMatrix();\r\n\t\t\tlet rotation: number = this.rotation;\r\n\r\n\t\t\tlet scale = this.scale;\r\n\r\n\t\t\tif (this.nonScaling) {\r\n\t\t\t\tscale = this.scale / this.globalScale;\r\n\t\t\t}\r\n\r\n\t\t\tmatrix.a = $math.cos(rotation) * scale;\r\n\t\t\tmatrix.c = - $math.sin(rotation) * scale;\r\n\t\t\tmatrix.e = 0;\r\n\t\t\tmatrix.b = $math.sin(rotation) * scale;\r\n\t\t\tmatrix.d = $math.cos(rotation) * scale;\r\n\t\t\tmatrix.f = 0;\r\n\r\n\t\t\tlet p1: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp1.x = left;\r\n\t\t\tp1.y = top;\r\n\r\n\t\t\tlet p2: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp2.x = right;\r\n\t\t\tp2.y = top;\r\n\r\n\t\t\tlet p3: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp3.x = right;\r\n\t\t\tp3.y = bottom;\r\n\r\n\t\t\tlet p4: SVGPoint = svg.createSVGPoint();\r\n\t\t\tp4.x = left;\r\n\t\t\tp4.y = bottom;\r\n\r\n\t\t\tlet pt1: SVGPoint = p1.matrixTransform(matrix);\r\n\t\t\tlet pt2: SVGPoint = p2.matrixTransform(matrix);\r\n\t\t\tlet pt3: SVGPoint = p3.matrixTransform(matrix);\r\n\t\t\tlet pt4: SVGPoint = p4.matrixTransform(matrix);\r\n\r\n\t\t\tleft = Math.min(pt1.x, pt2.x, pt3.x, pt4.x);\r\n\t\t\tright = Math.max(pt1.x, pt2.x, pt3.x, pt4.x);\r\n\t\t\ttop = Math.min(pt1.y, pt2.y, pt3.y, pt4.y);\r\n\t\t\tbottom = Math.max(pt1.y, pt2.y, pt3.y, pt4.y);\r\n\r\n\t\t\tmeasuredWidth = right - left;\r\n\t\t\tmeasuredHeight = bottom - top;\r\n\r\n\t\t\tthis.maxLeft = $math.round(left, positionPrecision, true);\r\n\t\t\tthis.maxRight = $math.round(right, positionPrecision, true);\r\n\t\t\tthis.maxTop = $math.round(top, positionPrecision, true);\r\n\t\t\tthis.maxBottom = $math.round(bottom, positionPrecision, true);\r\n\t\t}\r\n\r\n\t\tthis._measuredWidth = $math.round(measuredWidth, positionPrecision, true);\r\n\t\tthis._measuredHeight = $math.round(measuredHeight, positionPrecision, true);\r\n\r\n\r\n\t\t// dispatch event\r\n\t\tif (this._measuredWidth != this._prevMeasuredWidth || this._measuredHeight != this._prevMeasuredHeight) {\r\n\t\t\tthis._prevMeasuredHeight = this._measuredHeight;\r\n\t\t\tthis._prevMeasuredWidth = this._measuredWidth;\r\n\r\n\t\t\t// TODO clear existing sizechanged dispatches ?\r\n\t\t\tthis.dispatch(\"sizechanged\");\r\n\r\n\t\t\tif ((this.isHover || this.showTooltipOn == \"hit\" || this.showTooltipOn == \"always\") && this.tooltip && this.tooltip.visible && ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML))) {\r\n\t\t\t\tthis.updateTooltipPosition();\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Insert this element before sibling element.\r\n\t *\r\n\t * @param sprite  Target element\r\n\t * @return This element\r\n\t */\r\n\tpublic insertBefore(sprite: Sprite): Sprite {\r\n\t\tlet parent = this._parent;\r\n\r\n\t\tif (parent) {\r\n\t\t\tlet index: number = parent.children.indexOf(sprite);\r\n\t\t\tif (index !== -1) {\r\n\t\t\t\tparent.children.moveValue(this, index);\r\n\t\t\t\tparent.sortChildren();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Insert this element after sibling element.\r\n\t *\r\n\t * @param sprite  Target element\r\n\t * @return This element\r\n\t */\r\n\tpublic insertAfter(sprite: Sprite): Sprite {\r\n\t\tlet parent = this._parent;\r\n\r\n\t\tif (parent) {\r\n\t\t\tlet index: number = parent.children.indexOf(sprite);\r\n\t\t\tif (index !== -1) {\r\n\t\t\t\tparent.children.moveValue(this, index + 1);\r\n\t\t\t\tparent.sortChildren();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the main SVG element.\r\n\t *\r\n\t * This does not destroy the whole Sprite element. To do that use\r\n\t * `dispose()` instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected removeElement() {\r\n\t\t// remove visual element\r\n\t\tif (this._element) {\r\n\t\t\tthis.removeDispose(this._element);\r\n\t\t\tthis._element = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative (percent) value of the X coordindate within this element.\r\n\t *\r\n\t * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n\t * as relative value.\r\n\t *\r\n\t * @param value  Absolute or relative X coordinate\r\n\t * @return Relative value\r\n\t */\r\n\tpublic getRelativeX(value: number | Percent): number {\r\n\t\tif (value instanceof Percent) {\r\n\t\t\treturn value.value;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn value / this._parent.innerWidth;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative (percent) value of the Y coordindate within this element.\r\n\t *\r\n\t * A relative value is a hundredth of a percent. So 100% would result in a 1\r\n\t * as relative value.\r\n\t *\r\n\t * @param value  Absolute or relative Y coordinate\r\n\t * @return Relative value\r\n\t */\r\n\tpublic getRelativeY(value: number | Percent): number {\r\n\t\tif (value instanceof Percent) {\r\n\t\t\treturn value.value;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn value / this._parent.innerHeight;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an X coordinate in pixel within the element.\r\n\t *\r\n\t * If number is passed in as parameter, the same number will be returned\r\n\t * back.\r\n\t *\r\n\t * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n\t *\r\n\t * @param value  Absolute or relative X coordinate\r\n\t * @return X coordinate in pixels\r\n\t */\r\n\tpublic getPixelX(value: number | Percent): number {\r\n\r\n\t\t// we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n\t\t// all the time and this would result chain of the same actions and will slow down the system a lot\r\n\r\n\t\tlet pixel: number = 0;\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tpixel = value;\r\n\t\t}\r\n\t\telse if (value instanceof Percent) {\r\n\t\t\tlet relative: number = value.value;\r\n\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tpixel = $math.round(this._parent.innerWidth * relative, this._positionPrecision, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn pixel;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an Y coordinate in pixel within the element.\r\n\t *\r\n\t * If number is passed in as parameter, the same number will be returned\r\n\t * back.\r\n\t *\r\n\t * If [[Percent]] is passed in, it will be recalculated to pixels.\r\n\t *\r\n\t * @param value  Absolute or relative Y coordinate\r\n\t * @return Y coordinate in pixels\r\n\t */\r\n\tpublic getPixelY(value: number | Percent): number {\r\n\r\n\t\t// we don't use $utils.valueToRelative as this would mean that we should access parent.innerWidth\r\n\t\t// all the time and this would result chain of the same actions and will slow down the system a lot\r\n\r\n\t\tlet pixel: number = 0;\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tpixel = value;\r\n\t\t}\r\n\t\telse if (value instanceof Percent) {\r\n\t\t\tlet relative: number = value.value;\r\n\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tpixel = $math.round(this._parent.innerHeight * relative, this._positionPrecision, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn pixel;\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to a specified coordinates.\r\n\t *\r\n\t * Using this method is preferred method of moving element, as it saves some\r\n\t * CPU processing power over setting `x` and `y` properties separately.\r\n\t *\r\n\t * The method respects element's center settings. The element will be\r\n\t * positioned so that `point` coordinates come in whatever \"center\" of the\r\n\t * element is, as set in `horizontalCenter` and `verticalCenter`.\r\n\t *\r\n\t * Besides moving the element, you can also at the same time scale and\r\n\t * rotate the element.\r\n\t *\r\n\t * @param point     New coordinates\r\n\t * @param rotation  New rotation\r\n\t * @param scale     New Scale\r\n\t */\r\n\tpublic moveTo(point: IPoint, rotation?: number, scale?: number, isDragged?: boolean): void {\r\n\t\tif (this.isDragged && !isDragged) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (point) {\r\n\t\t\tif ($type.isNumber(point.x)) {\r\n\t\t\t\tthis.setPropertyValue(\"x\", $math.round(point.x, this._positionPrecision, true));\r\n\t\t\t}\r\n\t\t\tif ($type.isNumber(point.y)) {\r\n\t\t\t\tthis.setPropertyValue(\"y\", $math.round(point.y, this._positionPrecision, true));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(rotation)) {\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(scale)) {\r\n\t\t\tthis.scale = scale;\r\n\t\t}\r\n\r\n\t\t// must leave this\r\n\t\tthis.invalidatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets another [[Sprite]] element as this elements mask.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param mask A [[Sprite]] to use as mask\r\n\t */\r\n\tpublic set mask(mask: Optional<Sprite>) {\r\n\t\tif (this._mask.get() !== mask) {\r\n\t\t\t// this is good\r\n\t\t\tif (mask) {\r\n\r\n\t\t\t\tthis.createClipPath();\r\n\r\n\t\t\t\tif (!(mask instanceof Container)) {\r\n\t\t\t\t\tmask.isMeasured = false;\r\n\t\t\t\t\tif (mask.element) {\r\n\t\t\t\t\t\tthis._clipElement = mask.element;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._clipElement = this.paper.add(\"rect\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._clipElement) {\r\n\t\t\t\t\tthis._clipPath.add(this._clipElement);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._mask.set(mask, new MultiDisposer([\r\n\t\t\t\t\t//mask.addEventListener(SpriteEvent.TRANSFORMED, this.applyMask, false, this);\r\n\t\t\t\t\tmask.events.on(\"maxsizechanged\", () => { if (this.inited) { this.applyMask(); } }, undefined, false),\r\n\t\t\t\t\tmask.events.on(\"validated\", this.applyMask, this, false),\r\n\t\t\t\t\tmask.events.on(\"positionchanged\", this.applyMask, this, false)\r\n\t\t\t\t]));\r\n\r\n\t\t\t\tthis.applyMask();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._mask.reset();\r\n\t\t\t\tthis.group.removeAttr(\"clip-path\");\r\n\t\t\t\tthis.removeClipPath();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns [[Sprite]] element currently used as mask for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return A [[Sprite]] to use as mask\r\n\t */\r\n\tpublic get mask(): Optional<Sprite> {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._mask.get();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"mask\", this._mask.get());\r\n\t\t}\r\n\t}\r\n\r\n\t// you can set IRectangle as a mask instead o a sprite. Note, the changes of the object won't be monitored\r\n\r\n\t/**\r\n\t * Instead of creating a [[Sprite]] for mask, you can just use a\r\n\t * [[Rectangle]] by setting this accessor.\r\n\t *\r\n\t * Please note that the element will not monitor any changes to the mask\r\n\t * rectangle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param rect Mask Rectangle\r\n\t */\r\n\tpublic set maskRectangle(rect: IRectangle) {\r\n\t\tif (rect) {\r\n\r\n\t\t\tthis.createClipPath();\r\n\r\n\t\t\tif (!this._clipElement) {\r\n\t\t\t\tthis._clipElement = this.paper.add(\"rect\");\r\n\t\t\t\tthis._clipPath.add(this._clipElement);\r\n\t\t\t}\r\n\t\t\tthis._clipElement.attr({ \"width\": rect.width, \"height\": rect.height });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeClipPath();\r\n\t\t\tthis._clipElement = undefined;\r\n\t\t}\r\n\t\tthis._maskRectangle = rect;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Mask Rectangle\r\n\t */\r\n\tpublic get maskRectangle(): IRectangle {\r\n\t\treturn this._maskRectangle;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element was already measured.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Was element already measured?\r\n\t */\r\n\tpublic set isMeasured(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\r\n\t\tif (!value) {\r\n\t\t\tthis._measuredWidth = 0;\r\n\t\t\tthis._measuredHeight = 0;\r\n\t\t\t//this._pixelHeight = 0;\r\n\t\t\t//this._pixelWidth = 0;\r\n\t\t}\r\n\r\n\t\tif (this._isMeasured != value) {\r\n\t\t\tthis._isMeasured = value;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Was element already measured?\r\n\t */\r\n\tpublic get isMeasured(): boolean {\r\n\t\treturn this._isMeasured;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the this element has any of its parts overlapping with another\r\n\t * element.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param sprite  Second element to test again\r\n\t * @return Overlapping?\r\n\t */\r\n\tpublic hitTest(sprite: Sprite): boolean {\r\n\t\t// validate, otherwise we will not know measuredWidth and measuredHeight\r\n\t\tif (this.invalid) {\r\n\t\t\tthis.validate();\r\n\t\t}\r\n\t\tif (sprite.invalid) {\r\n\t\t\tsprite.validate();\r\n\t\t}\r\n\r\n\t\tlet ax1 = this.pixelX + this.maxLeft;\r\n\t\tlet ay1 = this.pixelY + this.maxTop;\r\n\t\tlet ax2 = ax1 + this.maxRight;\r\n\t\tlet ay2 = ay1 + this.maxBottom;\r\n\r\n\t\tlet bx1 = sprite.pixelX + sprite.maxLeft;\r\n\t\tlet by1 = sprite.pixelY + sprite.maxTop;\r\n\t\tlet bx2 = bx1 + sprite.maxRight;\r\n\t\tlet by2 = by1 + sprite.maxBottom;\r\n\r\n\t\treturn !(bx1 > ax2 || bx2 < ax1 || by1 > ay2 || by2 < ay1);\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * STATE-RELATED\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns `true` if Sprite has already finished initializing.\r\n\t *\r\n\t * @return Initialized?\r\n\t */\r\n\tpublic get inited(): boolean {\r\n\t\treturn this._inited;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if Sprite has already finished initializing and is ready.\r\n\t *\r\n\t * If this object is a [[Container]] it will wait for all of its children\r\n\t * are ready before becoming ready itself and firing a `\"ready\"` event.\r\n\t *\r\n\t * @return is ready?\r\n\t */\r\n\tpublic isReady(): boolean {\r\n\t\treturn this._ready;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a collection of element's available [[SpriteState]] entries.\r\n\t *\r\n\t * @see {@link SpriteState}\r\n\t * @return States\r\n\t */\r\n\tpublic get states(): DictionaryTemplate<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>> {\r\n\t\tif (!this._states) {\r\n\t\t\tconst state = new SpriteState<this[\"_properties\"], this[\"_adapter\"]>();\r\n\r\n\t\t\t// works\r\n\t\t\tthis._states = new DictionaryTemplate<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>>(state);\r\n\r\n\t\t\t// TODO what about removeKey ?\r\n\t\t\tthis._disposers.push(this._states.events.on(\"insertKey\", this.processState, this, false));\r\n\t\t\tthis._disposers.push(this._states.events.on(\"setKey\", this.processState, this, false));\r\n\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._states));\r\n\t\t\tthis._disposers.push(state);\r\n\t\t}\r\n\t\treturn this._states;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[SpriteState]] object for \"hidden\" state.\r\n\t *\r\n\t * This is a shortcut to `this.states.getKey(\"hidden\")`.\r\n\t *\r\n\t * @return Hidden state\r\n\t */\r\n\tpublic get hiddenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this.states.getKey(\"hidden\")) {\r\n\t\t\tlet hiddenState = this.states.create(\"hidden\");\r\n\t\t\thiddenState.properties.opacity = 0;\r\n\t\t\thiddenState.properties.visible = false;\r\n\t\t}\r\n\r\n\t\treturn this.states.getKey(\"hidden\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[SpriteState]] object for \"default\" state.\r\n\t *\r\n\t * This is a shortcut to `this.states.getKey(\"default\")`.\r\n\t *\r\n\t * @return Hidden state\r\n\t */\r\n\tpublic get defaultState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\r\n\t\tif (!this.states.getKey(\"default\")) {\r\n\t\t\tlet defaultState = this.states.create(\"default\");\r\n\t\t\tdefaultState.properties.opacity = 1;\r\n\t\t}\r\n\r\n\t\treturn this.states.getKey(\"default\");\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if some key states are defined and updates Sprite properties\r\n\t * accordingly.\r\n\t *\r\n\t * For example if there's a state \"down\" defined for Sprite, we automatically\r\n\t * make it \"clickable\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event which caused state list update\r\n\t */\r\n\tprotected processState(event: IDictionaryEvents<string, SpriteState<this[\"_properties\"], this[\"_adapter\"]>>[\"insertKey\" | \"setKey\"]): void {\r\n\t\tlet state: SpriteState<this[\"_properties\"], this[\"_adapter\"]> = event.newValue;\r\n\t\tstate.sprite = this;\r\n\t\tstate.name = event.key;\r\n\t\tif (this.states.hasKey(\"hover\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n\t\t\tthis.hoverable = true;\r\n\t\t}\r\n\r\n\t\tif (this.states.hasKey(\"down\") || (this.showTooltipOn == \"hover\" && ($type.hasValue(this.tooltipHTML) || $type.hasValue(this.tooltipText)))) {\r\n\t\t\tthis.clickable = true;\r\n\t\t}\r\n\r\n\t\tif (this.states.hasKey(\"focus\")) {\r\n\t\t\tthis.focusable = true;\r\n\t\t}\r\n\r\n\t\t// Propagate the new state to clones\r\n\t\tif (this.applyOnClones) {\r\n\t\t\tconst clones = this.clones.values;\r\n\t\t\tconst length = clones.length;\r\n\r\n\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\tconst clone = clones[i];\r\n\t\t\t\tif (!clone.isDisposed()) {\r\n\t\t\t\t\tclone.states.setKey(state.name, state);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a list elements's animations currently being played.\r\n\t *\r\n\t * If the list has not been initialized it is created.\r\n\t *\r\n\t * @return List of animations\r\n\t */\r\n\tpublic get animations(): Array<Animation> {\r\n\t\tif (!this._animations) {\r\n\t\t\tthis._animations = [];\r\n\t\t\tthis._disposers.push(new AnimationDisposer(this._animations));\r\n\t\t}\r\n\t\treturn this._animations;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts element's local coordinates to the coordinates within the main\r\n\t * chart container.\r\n\t *\r\n\t * @param point  Local point\r\n\t * @return Global point\r\n\t */\r\n\tpublic getSvgPoint(point: IPoint): IPoint {\r\n\t\ttry {\r\n\t\t\t// Calculate SVG point\r\n\t\t\tlet bbox = this.htmlContainer.getBoundingClientRect();\r\n\r\n\t\t\treturn {\r\n\t\t\t\t\"x\": point.x - bbox.left,\r\n\t\t\t\t\"y\": point.y - bbox.top\r\n\t\t\t};\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\treturn point;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and starts an [[Animation]] with given `animationOptions`.\r\n\t *\r\n\t * @see {@link Animation} for additional information about available options\r\n\t * @param animationOptions  Animation options\r\n\t * @param duration          Duration in milliseconds\r\n\t * @param easing            Easing function\r\n\t * @return Animation instance\r\n\t */\r\n\tpublic animate(animationOptions: ISpriteAnimationOptions[] | ISpriteAnimationOptions, duration: number, easing?: (value: number) => number): Animation {\r\n\t\treturn new Animation(this, animationOptions, duration, easing).start();\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a [[SpriteState]] on this element.\r\n\t *\r\n\t * The first parameter can either be a name state or a [[SpriteState]]\r\n\t * instance.\r\n\t *\r\n\t * When run, this method will apply SVG properties defined in a\r\n\t * [[SpriteState]], but only those that are relevant to this particular\r\n\t * element, i.e. are in the `properties` array.\r\n\t *\r\n\t * @see {@link SpriteState}\r\n\t * @param value               A state - name key or instance\r\n\t * @param transitionDuration  Duration of the transition between current and new state\r\n\t * @param easing              An easing function\r\n\t */\r\n\tpublic setState(value: string | SpriteState<this[\"_properties\"], this[\"_adapter\"]>, transitionDuration?: number, easing?: (value: number) => number): $type.Optional<Animation> {\r\n\t\tlet state: Optional<SpriteState<this[\"_properties\"], this[\"_adapter\"]>>;\r\n\t\tif (value instanceof SpriteState) {\r\n\t\t\tthis.states.setKey(value.name, value);\r\n\t\t\tstate = value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstate = this.states.getKey(value);\r\n\t\t\tif (!state) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// stop previous transition\r\n\t\t// not good - foe expample, we are animating to some \"active\" state and in them middle \"hover\" state happens. then \"active\" stat won't be applied\r\n\t\t//if (this._transition) {\r\n\t\t//this._transition.stop();\r\n\t\t//}\r\n\r\n\t\tif (state.name == \"hover\") {\r\n\t\t\tif (this.isHidden) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.isHover = true;\r\n\t\t}\r\n\r\n\t\tif (state.name == \"hidden\") {\r\n\t\t\tthis.isHiding = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (!this.visible) {\r\n\t\t\t\tthis.setVisibility(state.properties.visible || this.defaultState.properties.visible);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (state.name == \"active\") {\r\n\t\t\tthis.isActive = true;\r\n\t\t}\r\n\t\t// we do not set isActive = false here if it's not active, but container does that if setStateOnChildren = true\r\n\r\n\r\n\t\tif (!$type.isNumber(transitionDuration)) {\r\n\t\t\ttransitionDuration = state.transitionDuration;\r\n\t\t}\r\n\r\n\t\tif (!$type.hasValue(easing)) {\r\n\t\t\teasing = state.transitionEasing;\r\n\t\t}\r\n\r\n\t\treturn this.transitTo(state, transitionDuration, easing);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies proper state based on the condition of the element. A condition is\r\n\t * deducted in this order:\r\n\t * * \"hover\" if Sprite has currently any pointers over it\r\n\t * * \"down\" if Sprite has any pointers (touch or mouse) currently pressed over it\r\n\t * * \"focus\" if Sprite has currently got focus (accessibility)\r\n\t * * \"hidden\" if Sprite is currently hidden\r\n\t *\r\n\t * Returns an [[Animation]] object, which is handling gradual transition from\r\n\t * current values of properties, to the new target state(s).\r\n\t *\r\n\t * @param duration  Duration for the animation (ms)\r\n\t * @return [[Animation]] object which is handling the transition\r\n\t */\r\n\tpublic applyCurrentState(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\t//if (!this.isHidden) { // this was done for hover state not to take effect if \"hidden\" is actually visible, need to think about it.\r\n\r\n\t\tlet animation: $type.Optional<Animation> = this.setState(this.defaultState, duration);\r\n\r\n\t\tif (this.isHover) {\r\n\t\t\tanimation = this.setState(\"hover\", duration);\r\n\t\t}\r\n\r\n\t\tif (this.isDown && this.interactions.downPointers.length) {\r\n\t\t\tanimation = this.setState(\"down\", duration);\r\n\t\t}\r\n\r\n\t\tthis.isFocused = this.isFocused;\r\n\r\n\t\tif (this.isActive) {\r\n\t\t\tanimation = this.setState(\"active\", duration);\r\n\t\t\tif (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n\t\t\t\tanimation = this.setState(\"hoverActive\", duration);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Starts an [[Animation]] of the properties to specific values as they are\r\n\t * set in `state`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param state     Target State\r\n\t * @param duration  Duration in milliseconds\r\n\t * @param easing    Easing function\r\n\t * @return Transition Animation\r\n\t */\r\n\tprotected transitTo(state: SpriteState<this[\"_properties\"], this[\"_adapter\"]>, duration: number, easing?: (value: number) => number): Optional<Animation> {\r\n\t\t// Init\r\n\t\tlet options: ISpriteAnimationOptions[] = [],\r\n\t\t\tpropValues = state.allValues,\r\n\t\t\ttransition: Optional<Animation>;\r\n\r\n\t\t// todo: do this for numeric/color properties only?\r\n\t\t// @todo use state.getPropertyValue instead\r\n\t\t$object.each(propValues, (propertyName, finalValue) => {\r\n\t\t\tlet currentValue: any = (<any>this)[propertyName];\r\n\t\t\t// save current value to default state. this solves a big problem where values must be set both on sprite and default state\r\n\t\t\tif (finalValue != currentValue && this.defaultState.properties[propertyName] == undefined) {\r\n\t\t\t\tthis.defaultState.properties[propertyName] = currentValue;\r\n\t\t\t}\r\n\r\n\t\t\t//if (finalValue != currentValue && $type.hasValue(finalValue)) {\r\n\t\t\tif (<any>finalValue != \"__unset\") {\r\n\t\t\t\tlet option: ISpriteAnimationOptions = { from: currentValue, to: <any>finalValue, property: propertyName };\r\n\t\t\t\toptions.push(option);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (options.length > 0) {\r\n\t\t\ttransition = this.animate(options, duration, easing);\r\n\t\t\tif (transition && !transition.isFinished()) {\r\n\t\t\t\t// TODO should this use events.once ?\r\n\t\t\t\t// TODO push onto _disposers array ?\r\n\t\t\t\tthis._disposers.push(transition.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.dispatchImmediately(\"transitionended\");\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.dispatchImmediately(\"transitionended\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// apply filters if set\r\n\t\tif (state.filters.length > 0) {\r\n\t\t\tlet newFilters: Filter[] = [];\r\n\t\t\t// check for the same filters\r\n\t\t\t$iter.each(state.filters.iterator(), (stateFilter) => {\r\n\t\t\t\tlet newFilter: Filter = <Filter>stateFilter.clone();\r\n\t\t\t\tnewFilters.push(newFilter);\r\n\t\t\t\tlet animationOptions: IAnimationOptions[] = [];\r\n\r\n\t\t\t\t$iter.each(this.filters.iterator(), (currentFilter) => {\r\n\t\t\t\t\t// if we have the same filters\r\n\t\t\t\t\tif (currentFilter.className == newFilter.className) {\r\n\r\n\t\t\t\t\t\tif (!$iter.contains(this.defaultState.filters.iterator(), (x) => x.className === newFilter.className)) {\r\n\t\t\t\t\t\t\tthis.defaultState.filters.push(currentFilter);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t$object.each(newFilter.properties, (propertyName, newValue) => {\r\n\t\t\t\t\t\t\tlet currentValue = (<any>currentFilter).properties[propertyName];\r\n\t\t\t\t\t\t\t// if values are not the same, push to animation options array\r\n\t\t\t\t\t\t\tif (currentValue != newValue) {\r\n\t\t\t\t\t\t\t\tanimationOptions.push({ property: propertyName, from: currentValue, to: newValue });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t// animate to new value\r\n\t\t\t\tnewFilter.animate(animationOptions, duration, easing);\r\n\t\t\t});\r\n\t\t\tthis.filters.clear();\r\n\t\t\tthis.filters.pushAll(newFilters);\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if Sprite is currently transiting from one state/value to\r\n\t * another.\r\n\t *\r\n\t * @return Is in transition?\r\n\t */\r\n\tpublic isInTransition(): boolean {\r\n\t\treturn this.animations.length > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element has a mouse pointer currently hovering\r\n\t * over it, or if it has any touch pointers pressed on it.\r\n\t *\r\n\t * You can force element to be \"hovered\" manually, by setting this property\r\n\t * to `true`.\r\n\t *\r\n\t * @param value Is hovered?\r\n\t */\r\n\tpublic set isHover(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (value !== this.isHover) {\r\n\t\t\tif (this.isInteractive()) {\r\n\t\t\t\tthis.interactions.isHover = value;\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis.handleOver();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.interactions.isRealHover = false;\r\n\t\t\t\t\tthis.handleOut();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is hovered?\r\n\t */\r\n\tpublic get isHover(): boolean {\r\n\t\tif (this.isInteractive()) {\r\n\t\t\treturn this.interactions.isHover;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns indicator if this element is being dragged at the moment.\r\n\t *\r\n\t * @return Is dragged?\r\n\t */\r\n\tpublic get isDragged(): boolean {\r\n\t\treturn this._isDragged;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns indicator if this element is being resized at the moment.\r\n\t *\r\n\t * @return Is resized?\r\n\t */\r\n\tpublic get isResized(): boolean {\r\n\t\treturn this._isResized;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element has any pointers (mouse or touch) pressing down\r\n\t * on it.\r\n\t *\r\n\t * @param value Is down?\r\n\t */\r\n\tpublic set isDown(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.isInteractive() && this.isDown != value) {\r\n\t\t\tthis.interactions.isDown = value;\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.handleDown();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.handleUp();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is down?\r\n\t */\r\n\tpublic get isDown(): boolean {\r\n\t\tif (this.isInteractive()) {\r\n\t\t\treturn this.interactions.isDown;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is focused (possibly by tab navigation).\r\n\t *\r\n\t * @param value Is focused?\r\n\t */\r\n\tpublic set isFocused(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.focusable && this.isFocused != value) {\r\n\t\t\tif (this.isInteractive()) {\r\n\t\t\t\tthis.interactions.isFocused = value;\r\n\t\t\t\tif (value === true) {\r\n\t\t\t\t\tthis.handleFocus();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.handleBlur();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is focused?\r\n\t */\r\n\tpublic get isFocused(): boolean {\r\n\t\tif (this.isInteractive()) {\r\n\t\t\treturn this.interactions.isFocused;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if this element is currently active (toggled on) or not\r\n\t * (toggled off).\r\n\t *\r\n\t * @param value Is active?\r\n\t */\r\n\tpublic set isActive(value: boolean) {\r\n\t\tthis.setActive(value);\r\n\t}\r\n\r\n\r\n\tprotected setActive(value: boolean) {\r\n\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this._isActive !== value) {\r\n\t\t\tthis._isActive = value;\r\n\t\t\tif (value && this.states.hasKey(\"active\")) {\r\n\t\t\t\tthis.setState(\"active\");\r\n\t\t\t\tif (this.isHover && this.states.hasKey(\"hoverActive\")) {\r\n\t\t\t\t\tthis.setState(\"hoverActive\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCurrentState();\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"toggled\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is active?\r\n\t */\r\n\tpublic get isActive(): boolean {\r\n\t\treturn this._isActive;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element is disabled.\r\n\t *\r\n\t * A disabled element is hidden, and is removed from any processing, layout\r\n\t * calculations, and generally treated as if it does not exist.\r\n\t *\r\n\t * The element itself is not destroyed, though. Setting this back to `false`,\r\n\t * will \"resurrect\" the element.\r\n\t *\r\n\t * @param value  Disabled?\r\n\t */\r\n\tpublic set disabled(value: boolean) {\r\n\t\tthis.setDisabled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Disabled?\r\n\t */\r\n\tpublic get disabled(): boolean {\r\n\t\t//if(this._internalDisabled){\r\n\t\t//\treturn true;\r\n\t\t//}\r\n\t\tlet current = this.getPropertyValue(\"disabled\");\r\n\t\tif ($type.hasValue(current)) {\r\n\t\t\treturn current;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.disabled;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.disabled;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprotected setDisabled(value: boolean): boolean {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tlet current = this.getPropertyValue(\"disabled\");\r\n\t\tif (current != value) {\r\n\t\t\tthis.setPropertyValue(\"disabled\", value, true);\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.parent = this._parent;\r\n\t\t\t\tthis.removeFromInvalids();\r\n\t\t\t\tthis.group.attr({ \"display\": \"none\" });\r\n\t\t\t\tthis.dispatch(\"disabled\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._parent) {\r\n\t\t\t\t\tlet group = <Group>this._parent.element;\r\n\t\t\t\t\tif (!group.hasChild(this.group)) {\r\n\t\t\t\t\t\tgroup.add(this.group);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this instanceof Container) {\r\n\t\t\t\t\tthis.deepInvalidate();\r\n\t\t\t\t\tif (this._background) {\r\n\t\t\t\t\t\tthis._background.invalidate();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.invalidate();\r\n\t\t\t\t}\r\n\t\t\t\tif (!this.__disabled) {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"display\");\r\n\t\t\t\t}\r\n\t\t\t\tthis.dispatch(\"enabled\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatch(\"transformed\");\r\n\t\t\tsystem.requestFrame();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Internal disable method.\r\n\t *\r\n\t * Do not use it for disabling elements. Use `disabled` accessor instead.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Disabled?\r\n\t */\r\n\tpublic set __disabled(value: boolean) {\r\n\t\tif (this._internalDisabled != value) {\r\n\t\t\tthis._internalDisabled = value;\r\n\t\t\tthis._updateDisabled = true;\r\n\t\t\tthis.invalidatePosition(); // better use this instead of invalidate()\r\n\r\n\t\t\tif(!value){\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * @return Disabled?\r\n\t */\r\n\tpublic get __disabled(): boolean {\r\n\t\treturn this._internalDisabled;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * FORMATTERS AND OTHER EXTERNAL HELPERS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * A [[NumberFormatter]] instance.\r\n\t *\r\n\t * This is used to format numbers.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.numberFormatter.numberFormat = \"#,###.#####\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"numberFormatter\": {\r\n\t *     \"numberFormat\": \"#,###.#####\"\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * You can set a separate instance of formatter for each\r\n\t * individual element. However that would be unnecessary overhead as\r\n\t * all elements would automatically inherit formatter from their parents,\r\n\t * all the way up to the chart itself.\r\n\t *\r\n\t *\r\n\t * @see {@link NumberFormatter} for more info on formatting numbers\r\n\t * @param value  An instance of NumberFormatter\r\n\t */\r\n\tpublic set numberFormatter(value: NumberFormatter) {\r\n\t\tthis._numberFormatter = value;\r\n\t\tthis._numberFormatter.language = this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * @return A [[NumberFormatter]] instance to be used\r\n\t */\r\n\tpublic get numberFormatter(): NumberFormatter {\r\n\t\tif (this._numberFormatter) {\r\n\t\t\treturn this._numberFormatter;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.numberFormatter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.numberFormatter;\r\n\t\t}\r\n\t\tthis._numberFormatter = new NumberFormatter();\r\n\t\tthis._numberFormatter.language = this.language;\r\n\t\treturn this.numberFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DateFormatter]] instance.\r\n\t *\r\n\t * This is used to format dates, e.g. on a date axes, balloons, etc.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.dateFormatter.dateFormat = \"yyyy-MM-dd\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"dateFormatter\": {\r\n\t *     \"dateFormat\": \"yyyy-MM-dd\"\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * You can set a separate instance of formatter for each\r\n\t * individual element. However that would be unnecessary overhead as\r\n\t * all elements would automatically inherit formatter from their parents,\r\n\t * all the way up to the chart itself.\r\n\t *\r\n\t * @see {@link DateFormatter} for more info on dates formatting\r\n\t * @param value  An instance of DateFormatter\r\n\t */\r\n\tpublic set dateFormatter(value: DateFormatter) {\r\n\t\tthis._dateFormatter = value;\r\n\t\tthis._dateFormatter.language = this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * @return An instance of DateFormatter\r\n\t */\r\n\tpublic get dateFormatter(): DateFormatter {\r\n\t\tif (this._dateFormatter) {\r\n\t\t\treturn this._dateFormatter;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.dateFormatter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.dateFormatter;\r\n\t\t}\r\n\t\tthis._dateFormatter = new DateFormatter();\r\n\t\tthis._dateFormatter.language = this.language;\r\n\t\treturn this.dateFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DurationFormatter]] instance.\r\n\t *\r\n\t * This is used to format numbers as durations, e.g. on a value axes.\r\n\t *\r\n\t * You can set a separate instance of formatter for each\r\n\t * individual element. However that would be unnecessary overhead as\r\n\t * all elements would automatically inherit formatter from their parents,\r\n\t * all the way up to the chart itself.\r\n\t *\r\n\t * @see {@link DurationFormatter} for more info on durations\r\n\t * @param value  An instance of DurationFormatter\r\n\t */\r\n\tpublic set durationFormatter(value: DurationFormatter) {\r\n\t\tthis._durationFormatter = value;\r\n\t\tthis._durationFormatter.language = this.language;\r\n\t}\r\n\r\n\t/**\r\n\t * @return An instance of DurationFormatter\r\n\t */\r\n\tpublic get durationFormatter(): DurationFormatter {\r\n\t\tif (this._durationFormatter) {\r\n\t\t\treturn this._durationFormatter;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.durationFormatter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.durationFormatter;\r\n\t\t}\r\n\t\tthis._durationFormatter = new DurationFormatter();\r\n\t\tthis._durationFormatter.language = this.language;\r\n\t\treturn this.durationFormatter;\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Language]] instance to use for translations.\r\n\t *\r\n\t * Normally it is enough to set language for the top-most element - chart.\r\n\t *\r\n\t * All other element child elements will automatically re-use that language\r\n\t * object.\r\n\t *\r\n\t * @param value  An instance of Language\r\n\t */\r\n\tpublic set language(value: Language) {\r\n\t\tif (this._language.get() !== value) {\r\n\t\t\tthis._language.set(value, value.events.on(\"localechanged\", (ev) => {\r\n\t\t\t\tif (this._numberFormatter) {\r\n\t\t\t\t\tthis._numberFormatter.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._dateFormatter) {\r\n\t\t\t\t\tthis._dateFormatter.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._durationFormatter) {\r\n\t\t\t\t\tthis._durationFormatter.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._exporting.get()) {\r\n\t\t\t\t\tconst exporting = this._exporting.get();\r\n\t\t\t\t\texporting.numberFormatter.language = this.language;\r\n\t\t\t\t\texporting.dateFormatter.language = this.language;\r\n\t\t\t\t\texporting.durationFormatter.language = this.language;\r\n\t\t\t\t\texporting.language = this.language;\r\n\t\t\t\t}\r\n\t\t\t\tif (this instanceof Container) {\r\n\t\t\t\t\tthis.deepInvalidate();\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return An instance of Language\r\n\t */\r\n\tpublic get language(): Language {\r\n\t\tlet language = this._language.get();\r\n\t\tif (language) {\r\n\t\t\treturn language;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.language;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.language;\r\n\t\t}\r\n\t\tlanguage = new Language();\r\n\t\tthis.language = language;\r\n\t\treturn language;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * DATA-RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Parses the string for meta tags `{tag}` and replaces them with a real\r\n\t * value. Supports straight up tags referring to the field in data, i.e.\r\n\t * `{value}` or tags with additional formatting info. E.g.:\r\n\t *\r\n\t * ```Text\r\n\t * {myfield.formatDate(\"yyyy-MM-dd\")}\r\n\t * {myfield.formatDate()}\r\n\t * {myfield.formatNumber(\"#,####.00\")}\r\n\t * {myfield.formatNumber()}\r\n\t * {myField.formatDuration(\"mm:ss\")}\r\n\t * ```\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * This method Will automatically detect and use proper formatter for the\r\n\t * value.\r\n\t *\r\n\t * The source value will be looked up in various places: (in order)\r\n\t * * Sprite's own `dataItem`\r\n\t * * Sprite's properties\r\n\t * * Parent's `dataItem`\r\n\t * * Parent's properties\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param string            A string to format\r\n\t * @param dataItem          DataItem\r\n\t * @return Formatted string\r\n\t */\r\n\r\n\tpublic populateString(string: string, dataItem?: DataItem): string {\r\n\t\tif ($type.hasValue(string)) {\r\n\t\t\tstring = $type.castString(string);\r\n\t\t\tstring = getTextFormatter().escape(string);\r\n\t\t\tlet tags = string.match(/\\{([^}]+)\\}/g);\r\n\t\t\tlet i;\r\n\t\t\tif (tags) {\r\n\t\t\t\tfor (i = 0; i < tags.length; i++) {\r\n\t\t\t\t\tlet tag = tags[i].replace(/\\{([^}]+)\\}/, \"$1\");\r\n\t\t\t\t\tlet value = this.getTagValue(tag, \"\", dataItem);\r\n\r\n\t\t\t\t\tif (!$type.hasValue(value)) {\r\n\t\t\t\t\t\tvalue = \"\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstring = string.split(tags[i]).join(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstring = getTextFormatter().unescape(string);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstring = \"\";\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn string;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"populateString\", string);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the value from data item and formats it according to specified format.\r\n\t *\r\n\t * If `format` is specified, it will use its contents to choose formatter for\r\n\t * the value. Otherwise it will select formatter accordingly to actual value\r\n\t * type.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Ability to force certain formatter on known numeric and date values\r\n\t * @see {@link NumberFormatter}\r\n\t * @see {@link DateFormatter}\r\n\t * @see {@link DurationFormatter}\r\n\t * @param tagName           Tag name to replace\r\n\t * @param format            Format to use\r\n\t * @param dataItem          DataItem\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic getTagValue(tagName: string, format?: string, dataItem?: DataItem): string {\r\n\t\tlet value: any;\r\n\t\tif (!$type.hasValue(dataItem)) {\r\n\t\t\tdataItem = this.dataItem;\r\n\t\t}\r\n\r\n\t\t// Parse parts\r\n\t\tlet parts: any[] = [];\r\n\t\tlet reg = /([^.]+)\\(([^)]*)\\)|([^.]+)/g;;\r\n\t\tlet matches;\r\n\r\n\t\twhile (true) {\r\n\t\t\tmatches = reg.exec(tagName);\r\n\r\n\t\t\tif (matches === null) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (matches[3]) {\r\n\t\t\t\t// Simple property\r\n\t\t\t\tparts.push({\r\n\t\t\t\t\tprop: matches[3]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Method\r\n\t\t\t\t// Parse parameters\r\n\t\t\t\tlet params: any[] = [];\r\n\t\t\t\tif ($utils.trim(matches[2]) != \"\") {\r\n\t\t\t\t\tlet reg2 = /'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;\r\n\t\t\t\t\tlet matches2;\r\n\r\n\t\t\t\t\twhile (true) {\r\n\t\t\t\t\t\tmatches2 = reg2.exec(matches[2]);\r\n\r\n\t\t\t\t\t\tif (matches2 === null) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tparams.push(matches2[1] || matches2[2] || matches2[3])\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tparts.push({\r\n\t\t\t\t\tmethod: matches[1],\r\n\t\t\t\t\tparams: params\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Check if we can retrieve the value from data item\r\n\t\tif (dataItem) {\r\n\r\n\r\n\t\t\t// Check values\r\n\t\t\tvalue = this.getTagValueFromObject(parts, dataItem.values);\r\n\r\n\t\t\t// Check properties\r\n\t\t\tif (!$type.hasValue(value) || $type.isObject(value)) { // isObject helps to solve problem with date axis, as for example dateX will get dateX from values object and won't get to the dateX date.\r\n\t\t\t\tvalue = this.getTagValueFromObject(parts, dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// Check data context\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (!$type.hasValue(value) && dataContext) {\r\n\t\t\t\tvalue = this.getTagValueFromObject(parts, dataItem.dataContext);\r\n\r\n\t\t\t\t// Maybe it's a literal dot-separated name of the key in dataContext?\r\n\t\t\t\tif (!$type.hasValue(value)) {\r\n\t\t\t\t\tvalue = this.getTagValueFromObject([{\r\n\t\t\t\t\t\tprop: tagName\r\n\t\t\t\t\t}], dataContext);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// scond data context level sometimes exist (tree map)\r\n\t\t\t\tif (!$type.hasValue(value) && dataContext.dataContext) {\r\n\t\t\t\t\tvalue = this.getTagValueFromObject(parts, dataContext.dataContext);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Check component's data item\r\n\t\t\tif (!$type.hasValue(value) && dataItem.component && dataItem.component.dataItem !== dataItem) {\r\n\t\t\t\tvalue = dataItem.component.getTagValue(tagName, format);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check sprite's properties\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tvalue = this.getTagValueFromObject(parts, this.populateStringFrom || <any>this);\r\n\t\t}\r\n\r\n\t\t// Finally, check the parent\r\n\t\tif (!$type.hasValue(value) && this._parent) {\r\n\t\t\tvalue = this._parent.getTagValue(tagName, format);\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Tries to retrieve values from properties of any object, then applies\r\n\t * proper formatting to it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (improve)\r\n\t * @param parts   Properties ant methods to access\r\n\t * @param object  Source object\r\n\t * @param format  A specific format to apply\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic getTagValueFromObject(parts: any[], object: any, format?: string): any {\r\n\t\tlet current: any = object;\r\n\t\tlet formatApplied = false;\r\n\t\tfor (let i = 0, len = parts.length; i < len; i++) {\r\n\t\t\tlet part = parts[i];\r\n\t\t\tif (part.prop) {\r\n\t\t\t\t// Regular property\r\n\t\t\t\tcurrent = current[part.prop];\r\n\t\t\t\tif (!$type.hasValue(current)) {\r\n\t\t\t\t\t// Not set, return undefined\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Method\r\n\r\n\t\t\t\tswitch (part.method) {\r\n\t\t\t\t\tcase \"formatNumber\":\r\n\t\t\t\t\t\tlet numberValue = $utils.anyToNumber(current);\r\n\t\t\t\t\t\tif ($type.hasValue(numberValue)) {\r\n\t\t\t\t\t\t\tcurrent = this.numberFormatter.format(\r\n\t\t\t\t\t\t\t\tnumberValue,\r\n\t\t\t\t\t\t\t\tformat || part.params[0] || undefined\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tformatApplied = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"formatDate\":\r\n\t\t\t\t\t\tlet dateValue;\r\n\t\t\t\t\t\tif ($type.isString(current)) {\r\n\t\t\t\t\t\t\tdateValue = this.dateFormatter.parse(current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tdateValue = $utils.anyToDate(current);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!$type.isDate(dateValue) || $type.isNaN(dateValue.getTime())) {\r\n\t\t\t\t\t\t\t// Was not able to get date out of value, quitting and letting\r\n\t\t\t\t\t\t\t// calling method try another value\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ($type.hasValue(dateValue)) {\r\n\t\t\t\t\t\t\tcurrent = this.dateFormatter.format(\r\n\t\t\t\t\t\t\t\tdateValue,\r\n\t\t\t\t\t\t\t\tformat || part.params[0] || undefined\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tformatApplied = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"formatDuration\":\r\n\t\t\t\t\t\tlet durationValue = $utils.anyToNumber(current);\r\n\t\t\t\t\t\tif ($type.hasValue(durationValue)) {\r\n\t\t\t\t\t\t\tcurrent = this.durationFormatter.format(\r\n\t\t\t\t\t\t\t\tdurationValue,\r\n\t\t\t\t\t\t\t\tformat || part.params[0] || undefined,\r\n\t\t\t\t\t\t\t\tpart.params[1] || undefined\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tformatApplied = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"urlEncode\":\r\n\t\t\t\t\tcase \"encodeURIComponent\":\r\n\t\t\t\t\t\tcurrent = encodeURIComponent(current);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tif (current[part.method]) {\r\n\t\t\t\t\t\t\tcurrent[part.method].apply(this, part.params);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Apply default format if it wasn't applied explicitly\r\n\t\tif (!formatApplied) {\r\n\r\n\t\t\tlet formatParts = [{\r\n\t\t\t\tmethod: \"\",\r\n\t\t\t\tparams: format\r\n\t\t\t}];\r\n\r\n\t\t\tif (!$type.hasValue(format)) {\r\n\r\n\t\t\t\t// Format is not set\r\n\t\t\t\t// Determine from the type of the value\r\n\t\t\t\tif ($type.isNumber(current)) {\r\n\t\t\t\t\tformatParts[0].method = \"formatNumber\";\r\n\t\t\t\t\tformatParts[0].params = \"\";\r\n\t\t\t\t}\r\n\t\t\t\telse if ($type.isDate(current)) {\r\n\t\t\t\t\tformatParts[0].method = \"formatDate\";\r\n\t\t\t\t\tformatParts[0].params = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Format set\r\n\t\t\t\t// Try to determine formatter based on the format\r\n\t\t\t\tlet formatterType: string = $utils.getFormat(format);\r\n\r\n\t\t\t\t// format\r\n\t\t\t\tif (formatterType === $strings.NUMBER) {\r\n\t\t\t\t\tformatParts[0].method = \"formatNumber\";\r\n\t\t\t\t}\r\n\t\t\t\telse if (formatterType === $strings.DATE) {\r\n\t\t\t\t\tformatParts[0].method = \"formatDate\";\r\n\t\t\t\t}\r\n\t\t\t\telse if (formatterType === $strings.DURATION) {\r\n\t\t\t\t\tformatParts[0].method = \"formatDuration\";\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Apply format\r\n\t\t\tif (formatParts[0].method) {\r\n\t\t\t\tcurrent = this.getTagValueFromObject(formatParts, current);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn current;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A [[DataItem]] to use as element's data source.\r\n\t *\r\n\t * @todo Review type\r\n\t * @param dataItem  DataItem\r\n\t */\r\n\tpublic set dataItem(dataItem: this[\"_dataItem\"]) {\r\n\t\t//an not use this[\"_dataItem\"] here, as we return parent data item if this sprite doesn't have one.\r\n\t\t// @todo:think about it\r\n\t\tthis.setDataItem(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [[DataItem]]\r\n\t */\r\n\tpublic get dataItem(): this[\"_dataItem\"] {\r\n\t\tif (!this._dataItem) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.dataItem;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.dataItem;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets currently used [[DataItem]].\r\n\t *\r\n\t * If the element has also `configField` set, it will also look for any\r\n\t * config in DataItem's data context to apply to this element.\r\n\t *\r\n\t * @param dataItem DataItem\r\n\t */\r\n\tprotected setDataItem(dataItem: DataItem) {\r\n\t\tif (this._dataItem != dataItem) {\r\n\t\t\tthis._dataItem = dataItem;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (this.configField) {\r\n\t\t\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\t\t\tif (dataContext) {\r\n\t\t\t\t\t\tthis.config = dataContext[this.configField];\r\n\t\t\t\t\t\tif (!this.config && dataContext.dataContext) {\r\n\t\t\t\t\t\t\tthis.config = dataContext.dataContext[this.configField];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\r\n\t\t\t\tif (dataContext) {\r\n\r\n\t\t\t\t\tlet dataContext2 = dataContext.dataContext;\r\n\r\n\t\t\t\t\t$object.each(this.propertyFields, (propertyName, fieldValue) => {\r\n\t\t\t\t\t\tif ($type.hasValue(dataContext[fieldValue])) {\r\n\t\t\t\t\t\t\tlet anyThis = <any>this;\r\n\t\t\t\t\t\t\tanyThis[propertyName] = dataContext[fieldValue];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (dataContext2) {\r\n\t\t\t\t\t\t\t\tlet value = dataContext2[fieldValue];\r\n\t\t\t\t\t\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\t\t\t\t\t\tlet anyThis = <any>this;\r\n\t\t\t\t\t\t\t\t\tanyThis[propertyName] = value;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * PROPERTY UTILITIES\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's property value.\r\n\t *\r\n\t * Will check if there are any bindings with [[DataItem]].\r\n\t *\r\n\t * Will also apply any adapters bound to `propertyName`.\r\n\t *\r\n\t * @param propertyName  Property name\r\n\t * @return Property value\r\n\t */\r\n\tpublic getPropertyValue<Key extends keyof this[\"_properties\"]>(propertyName: Key): this[\"_properties\"][Key] {\r\n\t\tlet propValue: this[\"_properties\"][Key] = this.properties[propertyName];\r\n\r\n\t\t// Apply adapter\r\n\t\tif (!this._isTemplate) {\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\tpropValue = this._adapterO.apply(propertyName, <any>propValue);\r\n\t\t\t}\r\n\r\n\t\t\tpropValue = globalAdapter.applyAll(this, propertyName, propValue);\r\n\t\t}\r\n\r\n\t\treturn propValue;\r\n\t}\r\n\r\n\r\n\tprotected setColorProperty<Key extends keyof this[\"properties\"]>(property: Key, value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>, invalidate?: boolean): boolean {\r\n\t\tlet currentValue = this.properties[property];\r\n\t\tif (value instanceof Color && currentValue instanceof Color && value.toString() == currentValue.toString()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.setPropertyValue(property, value, invalidate);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected setPercentProperty<Key extends keyof this[\"properties\"]>(property: Key, value: Percent | number, invalidate?: boolean, transform?: boolean, precision?: number, floor?: boolean): boolean {\r\n\t\tvalue = $type.toNumberOrPercent(value);\r\n\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tif ($type.isNumber(precision)) {\r\n\t\t\t\tvalue = $math.round(value, precision, floor);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.setPropertyValue(property, value, invalidate, transform);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet currentValue = this.properties[property];\r\n\r\n\t\t\tif (value instanceof Percent && currentValue instanceof Percent && value.value == currentValue.value) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.setPropertyValue(property, value, invalidate, transform);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets elements's property value. Will also propagate the same property value\r\n\t * on all element's clones.\r\n\t *\r\n\t * @param property    Property\r\n\t * @param value       Value\r\n\t * @param invalidate  Should the sprite be invalidated, cause it's re-rendering\r\n\t * @param transform   Re-apply positioning of the element\r\n\t * @return Did the value change? It will return `true` if the new value and the old value of the property are not the same\r\n\t * @todo Review propagation to clones. Right now we simply check if clone is disposed before setting the same property on it. It's better to remove from clone list altogether.\r\n\t */\r\n\tpublic setPropertyValue<Key extends keyof this[\"properties\"]>(property: Key, value: any, invalidate?: boolean, transform?: boolean): boolean {\r\n\t\tif (this.properties[property] !== value && !this.isDisposed()) {\r\n\t\t\tthis.properties[property] = value;\r\n\r\n\t\t\tif (this.events.isEnabled(\"propertychanged\")) {\r\n\r\n\t\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"propertychanged\"] = {\r\n\t\t\t\t\ttype: \"propertychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tproperty: <string>property\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"propertychanged\", event);\r\n\t\t\t}\r\n\r\n\t\t\tif (invalidate) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tif (transform) {\r\n\t\t\t\tthis.invalidatePosition();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.applyOnClones) {\r\n\t\t\t\tconst clones = this.clones.values;\r\n\t\t\t\tconst length = clones.length;\r\n\r\n\t\t\t\tfor (let i = 0; i < length; ++i) {\r\n\t\t\t\t\tconst clone = clones[i];\r\n\r\n\t\t\t\t\tif (!clone.isDisposed()) {\r\n\t\t\t\t\t\t//(<Sprite>clone).setPropertyValue(<any>property, value, invalidate, transform);\r\n\t\t\t\t\t\t(<any>clone)[property] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Verify this\r\n\t */\r\n\tpublic bind<\r\n\t\tS extends { cloneId: string, events: EventDispatcher<{ propertychanged: { property: string } }> },\r\n\t\tFrom extends (keyof S & keyof this),\r\n\t\tTo extends keyof this\r\n\t>(\r\n\t\tproperty: To,\r\n\t\tsource: S,\r\n\t\tbindToProperty: From,\r\n\t\tmodifier?: (value: this[From]) => this[To]\r\n\t): void;\r\n\tpublic bind<\r\n\t\tS extends { cloneId: string, events: EventDispatcher<{ propertychanged: { property: string } }> },\r\n\t\tKey extends (keyof S & keyof this)\r\n\t>(\r\n\t\tproperty: Key,\r\n\t\tsource: S,\r\n\t\tmodifier?: (value: this[Key]) => this[Key]\r\n\t): void;\r\n\tpublic bind<\r\n\t\tS extends this & { cloneId: string, events: EventDispatcher<{ propertychanged: { property: string } }> },\r\n\t\tKey extends (keyof S & keyof this)\r\n\t>(\r\n\t\tproperty: Key,\r\n\t\tsource: S,\r\n\t\tbindToProperty: Key = property,\r\n\t\tmodifier?: (value: this[Key]) => this[Key]\r\n\t): void {\r\n\t\tif ($type.hasValue(this._bindings[<string>property])) {\r\n\t\t\tthis._bindings[<string>property].dispose();\r\n\t\t}\r\n\r\n\t\t// set current value\r\n\t\tthis[property] = source[bindToProperty];\r\n\r\n\t\t//source.addEventListener(AMEvent.PROPERTY_CHANGED, this.handleBindings, false, this);\r\n\t\tthis._bindings[<string>property] = source.events.on(\"propertychanged\", (event) => {\r\n\t\t\tif (event.property === bindToProperty) {\r\n\t\t\t\tlet value: this[Key] = source[bindToProperty];\r\n\r\n\t\t\t\tif (modifier) {\r\n\t\t\t\t\tvalue = modifier(value);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO clonesById\r\n\t\t\t\tthis[property] = value;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up and obeserver function to monitor changes in particular property\r\n\t * or properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param property  Element's property name\r\n\t * @param listener  Handler function\r\n\t * @param context   Context for handler function\r\n\t * @returns Event Disposer\r\n\t */\r\n\tpublic observe<C>(property: string | string[], listener: (this: C, event: AMEvent<this, ISpriteEvents>[\"propertychanged\"]) => void, context?: C, shouldClone?: boolean): IDisposer {\r\n\t\treturn new MultiDisposer($array.map($array.toArray(property), (prop) => {\r\n\t\t\treturn this.events.on(\"propertychanged\", (e) => {\r\n\t\t\t\tif (e.property === prop) {\r\n\t\t\t\t\tlistener.call(context, e);\r\n\t\t\t\t}\r\n\t\t\t}, context, shouldClone);\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ACCESSIBILITY-RELATED PROPERTIES\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Applies accessibility to the SVG element.\r\n\t *\r\n\t * Adds `<title>` and `<description>` elements as well as `aria-labelledby`\r\n\t * and `role` properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected applyAccessibility(): void {\r\n\r\n\t\t// Check if we need to add label and description\r\n\t\tlet title = this.readerTitle,\r\n\t\t\tdescription = this.readerDescription,\r\n\t\t\trole = this.role,\r\n\t\t\thidden = this.readerHidden,\r\n\t\t\tchecked = this.readerChecked,\r\n\t\t\tcontrols = this.readerControls,\r\n\t\t\tlive = this.readerLive,\r\n\t\t\torientation = this.readerOrientation,\r\n\t\t\tvalueNow = this.readerValueNow,\r\n\t\t\tvalueText = this.readerValueText;\r\n\r\n\t\t// Init label/describe ids\r\n\t\tlet labelledByIds: string[] = [];\r\n\t\tlet describedByIds: string[] = [];\r\n\r\n\t\tlet labelledBy: string = this.readerLabelledBy;\r\n\t\tif (labelledBy) {\r\n\t\t\tlabelledByIds.push(labelledBy);\r\n\t\t}\r\n\r\n\t\tlet describedBy: string = this.readerDescribedBy;\r\n\t\tif (describedBy) {\r\n\t\t\tdescribedByIds.push(describedBy);\r\n\t\t}\r\n\r\n\t\t// Add arial-label attribute if present\r\n\t\t// If not readerTitle and labelledBy is set we will use <title> element\r\n\t\t// instead of aria-label\r\n\t\t// TODO: should we check agains this.showSystemTooltip?\r\n\t\tif (title) {\r\n\r\n\t\t\tif (labelledByIds.length || this.showSystemTooltip) {\r\n\r\n\t\t\t\tconst titleElement = this.titleElement;\r\n\t\t\t\tconst titleId = this.uid + \"-title\";\r\n\t\t\t\tif (titleElement.node.textContent != title) {\r\n\t\t\t\t\ttitleElement.node.textContent = title;\r\n\t\t\t\t\ttitleElement.attr({ id: titleId });\r\n\t\t\t\t}\r\n\t\t\t\tlabelledByIds.push(titleId);\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\tif (this._titleElement) {\r\n\t\t\t\t\tthis.group.removeElement(this._titleElement);\r\n\t\t\t\t\tthis._titleElement = undefined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setSVGAttribute({\r\n\t\t\t\t\t\"aria-label\": title\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-label\");\r\n\t\t\tif (this._titleElement) {\r\n\t\t\t\tthis.group.removeElement(this._titleElement);\r\n\t\t\t\tthis._titleElement = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Add description\r\n\t\tif (description) {\r\n\r\n\t\t\tconst descriptionElement = this.descriptionElement;\r\n\t\t\tconst descriptionId = this.uid + \"-description\";\r\n\t\t\tif (descriptionElement.node.textContent != description) {\r\n\t\t\t\tdescriptionElement.node.textContent = description;\r\n\t\t\t\tdescriptionElement.attr({ id: descriptionId });\r\n\t\t\t}\r\n\t\t\tdescribedByIds.push(descriptionId);\r\n\r\n\t\t}\r\n\t\telse if (this._descriptionElement) {\r\n\t\t\tthis.group.removeElement(this._descriptionElement);\r\n\t\t\tthis._descriptionElement = undefined;\r\n\t\t}\r\n\r\n\r\n\t\t// Add label and described properties\r\n\t\tif (labelledByIds.length) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-labelledby\": labelledByIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-labelledby\");\r\n\t\t}\r\n\r\n\t\tif (describedByIds.length) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-describedby\": describedByIds.join(\" \") });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-describedby\");\r\n\t\t}\r\n\r\n\t\t// Apply role\r\n\t\tif (role) {\r\n\t\t\tthis.setSVGAttribute({ \"role\": role });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"role\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-hidden\r\n\t\tif (hidden) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-hidden\": \"true\" });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-hidden\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-checked\r\n\t\tif (checked) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-checked\": \"true\" });\r\n\t\t}\r\n\t\telse if (checked === false) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-checked\": \"false\" });\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.removeSVGAttribute(\"aria-checked\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-controls\r\n\t\tif (controls) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-controls\": controls });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-controls\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-live\r\n\t\tif (live) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-live\": live });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-live\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-orientation\r\n\t\tif (orientation) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-orientation\": orientation });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-orientation\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-valuenow\r\n\t\tif (valueNow) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-valuenow\": valueNow });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-valuenow\");\r\n\t\t}\r\n\r\n\t\t// Apply aria-valuetext\r\n\t\tif (valueText) {\r\n\t\t\tthis.setSVGAttribute({ \"aria-valuetext\": valueText });\r\n\t\t} else {\r\n\t\t\tthis.removeSVGAttribute(\"aria-valuetext\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader title of the element.\r\n\t *\r\n\t * @param value Title\r\n\t */\r\n\tpublic set readerTitle(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerTitle\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Title\r\n\t */\r\n\tpublic get readerTitle(): string {\r\n\t\tconst title = this.getPropertyValue(\"readerTitle\");\r\n\t\tif ($type.hasValue(title) && this.dataItem) {\r\n\t\t\treturn this.populateString(title);\r\n\t\t}\r\n\t\treturn title;\r\n\t}\r\n\r\n\t/**\r\n\t * Screen reader description of the element.\r\n\t *\r\n\t * @param value Description\r\n\t */\r\n\tpublic set readerDescription(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerDescription\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Description\r\n\t */\r\n\tpublic get readerDescription(): string {\r\n\t\tconst description = this.getPropertyValue(\"readerDescription\");\r\n\t\tif ($type.hasValue(description) && this.dataItem) {\r\n\t\t\treturn this.populateString(description);\r\n\t\t}\r\n\t\treturn this.getPropertyValue(\"readerDescription\");\r\n\t}\r\n\r\n\t/**\r\n\t * A WAI-ARIA role for the element.\r\n\t *\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#role_definitions} for more information on WAI-ARIA roles\r\n\t * @param value  Role\r\n\t */\r\n\tpublic set role(value: Roles) {\r\n\t\tvalue = <Roles>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"role\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\r\n\t\t\tif (value == \"slider\") {\r\n\t\t\t\tthis.setSVGAttribute({ \"aria-valuemin\": \"0\" });\r\n\t\t\t\tthis.setSVGAttribute({ \"aria-valuemax\": \"100\" });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Role\r\n\t */\r\n\tpublic get role(): Roles {\r\n\t\treturn this.getPropertyValue(\"role\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element should be hidden from screen readers.\r\n\t *\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden} for more information\r\n\t * @param value  Hidden?\r\n\t */\r\n\tpublic set readerHidden(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"readerHidden\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hidden?\r\n\t */\r\n\tpublic get readerHidden(): boolean {\r\n\t\treturn this.getPropertyValue(\"readerHidden\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element is currently marked as \"checked\".\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-checked} for more information\r\n\t * @param value Checked?\r\n\t */\r\n\tpublic set readerChecked(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"readerChecked\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Checked?\r\n\t */\r\n\tpublic get readerChecked(): boolean {\r\n\t\treturn this.getPropertyValue(\"readerChecked\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `uid` of an element this element controls.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls} for more information\r\n\t * @param value Setting value\r\n\t */\r\n\tpublic set readerControls(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerControls\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Setting value\r\n\t */\r\n\tpublic get readerControls(): string {\r\n\t\treturn this.getPropertyValue(\"readerControls\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls accessibility setting \"aria-live\" for the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions} for more information\r\n\t * @param value Setting value\r\n\t */\r\n\tpublic set readerLive(value: AriaLive) {\r\n\t\tvalue = <AriaLive>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerLive\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Setting value\r\n\t */\r\n\tpublic get readerLive(): AriaLive {\r\n\t\treturn this.getPropertyValue(\"readerLive\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `uid` of an element that describes this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby} for more information\r\n\t * @param value Target element\r\n\t */\r\n\tpublic set readerLabelledBy(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerLabelledBy\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Target element\r\n\t */\r\n\tpublic get readerLabelledBy(): string {\r\n\t\treturn this.getPropertyValue(\"readerLabelledBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `uid` of an element that describes this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @see {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby} for more information\r\n\t * @param value Target element\r\n\t */\r\n\tpublic set readerDescribedBy(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerDescribedBy\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Target element\r\n\t */\r\n\tpublic get readerDescribedBy(): string {\r\n\t\treturn this.getPropertyValue(\"readerDescribedBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the element.\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set readerOrientation(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerOrientation\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get readerOrientation(): string {\r\n\t\treturn this.getPropertyValue(\"readerOrientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current value of the element.\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @param value Current value\r\n\t */\r\n\tpublic set readerValueNow(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerValueNow\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current value\r\n\t */\r\n\tpublic get readerValueNow(): string {\r\n\t\treturn this.getPropertyValue(\"readerValueNow\");\r\n\t}\r\n\r\n\t/**\r\n\t * Text representation of the current value of the element.\r\n\t *\r\n\t * @since 4.7.16\r\n\t * @param value Current value (text)\r\n\t */\r\n\tpublic set readerValueText(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"readerValueText\", value)) {\r\n\t\t\tthis.applyAccessibility();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current value (text)\r\n\t */\r\n\tpublic get readerValueText(): string {\r\n\t\treturn this.getPropertyValue(\"readerValueText\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * USER INTERACTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns elements keyboard options.\r\n\t *\r\n\t * @return Keyboard options\r\n\t */\r\n\tpublic get keyboardOptions(): IKeyboardOptions {\r\n\t\tif (!this.interactions.keyboardOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.keyboardOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.keyboardOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.keyboardOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Mouse options.\r\n\t *\r\n\t * Enables controlling options related to the mouse, for example sensitivity\r\n\t * of its mouse wheel.\r\n\t *\r\n\t * E.g. the below will reduce chart's wheel-zoom speed to half its default\r\n\t * speed:\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.plotContainer.mouseOptions.sensitivity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"plotContainer\": {\r\n\t *     \"mouseOptions\": {\r\n\t *       \"sensitivity\": 0.5\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mouse options\r\n\t */\r\n\tpublic get mouseOptions(): IMouseOptions {\r\n\t\tif (!this.interactions.mouseOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.mouseOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.mouseOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.mouseOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns (creates if necessary) an [[InteractionObject]] associated with\r\n\t * this element.\r\n\t *\r\n\t * [[InteractionObject]] is used to attach all kinds of user-interactions to\r\n\t * the element, e.g. click/touch, dragging, hovering, and similar events.\r\n\t *\r\n\t * @return Interaction object\r\n\t */\r\n\tpublic get interactions(): InteractionObject {\r\n\t\tif (!this._interaction) {\r\n\t\t\tconst interaction = getInteraction().getInteraction(this.dom);\r\n\t\t\tthis._interaction = interaction;\r\n\t\t\tthis._interaction.clickable = this.clickable;\r\n\t\t\tthis._interaction.hoverable = this.hoverable;\r\n\t\t\tthis._interaction.trackable = this.trackable;\r\n\t\t\tthis._interaction.draggable = this.draggable;\r\n\t\t\tthis._interaction.swipeable = this.swipeable;\r\n\t\t\tthis._interaction.resizable = this.resizable;\r\n\t\t\tthis._interaction.wheelable = this.wheelable;\r\n\t\t\tthis._interaction.contextMenuDisabled = this.contextMenuDisabled;\r\n\t\t\tthis._interaction.inert = this.inert;\r\n\t\t\tthis._interaction.sprite = this;\r\n\t\t\tthis._disposers.push(this._interaction);\r\n\t\t}\r\n\t\treturn this._interaction;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if interactions object was created. Mostly used just to avoid creating interactions object if not needed.\r\n\t * @return Is Sprite interactive?\r\n\t */\r\n\tpublic isInteractive(): boolean {\r\n\t\tif (this._interaction) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * ELEMENT FOCUS-RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Controls if the element can gain focus.\r\n\t *\r\n\t * Focusable element will be selectable via TAB key.\r\n\t *\r\n\t * Please note, clicking it with a mouse or touching will not add focus to\r\n\t * it.\r\n\t *\r\n\t * Focused element will show a system-specific highlight, which might ruin\r\n\t * the overal look. This is why we don't focus element on click/touch.\r\n\t *\r\n\t * A default setting varies for different elements. By default all elements\r\n\t * are not focusable, except certain items like buttons, legend items, etc.\r\n\t *\r\n\t * @default undefined (auto)\r\n\t * @param value  Can element be focused?\r\n\t */\r\n\tpublic set focusable(value: Optional<boolean>) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"focusable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.interactions.focusable = value;\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tthis.setSVGAttribute({ \"focusable\": value });\r\n\t\t\t\t\tif (!$type.hasValue(this._tabindex)) {\r\n\t\t\t\t\t\tthis.tabindex = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"focusable\");\r\n\t\t\t\t\tthis.tabindex = undefined;\r\n\t\t\t\t}\r\n\t\t\t\t// Set focus events that would apply \"focus\" state\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-focusable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"blur\", this.handleBlur, this, false),\r\n\t\t\t\t\tthis.events.on(\"focus\", this.handleFocus, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can element be focused?\r\n\t */\r\n\tpublic get focusable(): Optional<boolean> {\r\n\t\treturn this.getPropertyValue(\"focusable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Applies filters (if set) when element gains focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Original event\r\n\t */\r\n\tpublic handleFocus(ev?: AMEvent<Sprite, ISpriteEvents>[\"focus\"]): void {\r\n\t\tif (this.focusable) {\r\n\t\t\tif (this.topParent) {\r\n\t\t\t\tthis.topParent.hasFocused = true;\r\n\t\t\t\tthis.topParent.focusedElement = this;\r\n\t\t\t}\r\n\t\t\tif (this.focusFilter) {\r\n\t\t\t\t// Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n\t\t\t\t// need to call it here\r\n\t\t\t\tthis.filters.push(this.focusFilter);\r\n\t\t\t}\r\n\t\t\tif (this.hoverOnFocus) {\r\n\t\t\t\t// Trigger a hover event as well\r\n\t\t\t\tthis.isHover = true;\r\n\t\t\t\tthis.handleOver();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes focus filter (if set) when elementloses focus.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Original event\r\n\t */\r\n\tpublic handleBlur(ev?: AMEvent<Sprite, ISpriteEvents>[\"blur\"]): void {\r\n\t\tif (this.focusable) {\r\n\t\t\tif (this.topParent) {\r\n\t\t\t\tthis.topParent.hasFocused = false;\r\n\t\t\t\tthis.topParent.focusedElement = undefined;\r\n\t\t\t}\r\n\t\t\tif (this.focusFilter) {\r\n\t\t\t\t// Any `filters` manipulation will trigger `applyFilters()` so we don't\r\n\t\t\t\t// need to call it here\r\n\t\t\t\tthis.filters.removeValue(this.focusFilter);\r\n\t\t\t}\r\n\t\t\tif (this.hoverOnFocus) {\r\n\t\t\t\t// Trigger a out event as well\r\n\t\t\t\tthis.isHover = false;\r\n\t\t\t\tthis.handleOut();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Filter]] to apply to element when it gains focus.\r\n\t *\r\n\t * Normally, browsers will draw a default ugly square around focused element,\r\n\t * which totally makes sense because its purpose is to help identify active\r\n\t * element for visually impaired people.\r\n\t *\r\n\t * However, if you would rather apply a filter, so you can modify how focused\r\n\t * element looks like, use `focusFilter`.\r\n\t *\r\n\t * Simply set it to an anstance of [[FocusFilter]], or any other filter\r\n\t * object.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.focusFilter = new am4core.FocusFilter();\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.focusFilter = new am4core.FocusFilter();\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"focusFilter\": {\r\n\t *     \"type\": \"FocusFilter\"\r\n\t *   },\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link Filter}\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/accessibility/} more about accessibility\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/changing-appearance-of-focused-items/} cusomizing focus appearance\r\n\t * @ignore Exclude from docs\r\n\t * @return Focused element filter\r\n\t */\r\n\tpublic get focusFilter(): $type.Optional<Filter> {\r\n\t\t/*if (!this._focusFilter) {\r\n\t\t\tthis._focusFilter = new FocusFilter();\r\n\t\t\tthis._disposers.push(this._focusFilter);\r\n\t\t}*/\r\n\t\t//return this._focusFilter;\r\n\r\n\t\tconst focusFilter = this._focusFilter;\r\n\r\n\t\tif (focusFilter) {\r\n\t\t\treturn focusFilter;\r\n\t\t}\r\n\t\tif (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.focusFilter;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.focusFilter;\r\n\t\t}\r\n\r\n\t\t//this._focusFilter = new FocusFilter();\r\n\t\t//this._disposers.push(this._focusFilter);\r\n\t}\r\n\r\n\t/**\r\n\t * @see {@link Filter}\r\n\t * @ignore Exclude from docs\r\n\t * @todo This is still experimental, don't use it\r\n\t */\r\n\tpublic set focusFilter(value: $type.Optional<Filter>) {\r\n\t\tthis._focusFilter = value;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `true`, this element will also trigger `\"over\"` event with all\r\n\t * the related consequences, like \"hover\" state being applied and tooltip\r\n\t * being shown.\r\n\t *\r\n\t * Useful as an accessibility feature to display rollover tooltips on items\r\n\t * selected via keyboard.\r\n\t *\r\n\t * @param value  Trigger hover on focus?\r\n\t * @default false\r\n\t */\r\n\tpublic set hoverOnFocus(value: boolean) {\r\n\t\tif (value !== this.hoverOnFocus) {\r\n\t\t\tthis.setPropertyValue(\"hoverOnFocus\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Trigger hover on focus?\r\n\t */\r\n\tpublic get hoverOnFocus(): boolean {\r\n\t\treturn this.getPropertyValue(\"hoverOnFocus\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets or returns TAB index.\r\n\t *\r\n\t * Tab index maintains the order in which focusable elements gain focus when\r\n\t * TAB key is pressed.\r\n\t *\r\n\t * Please note, tab index is not local to the chart. It affects the whole\r\n\t * of the page, including non-SVG elements. Maintain extreme causion when\r\n\t * setting tab indexes, as it affects the user experience for the whole\r\n\t * web page.\r\n\t *\r\n\t * @param value TAB index\r\n\t */\r\n\tpublic set tabindex(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (this.setPropertyValue(\"tabindex\", value) && $type.isNumber(value)) {\r\n\t\t\tthis.interactions.tabindex = value;\r\n\t\t\tthis.setSVGAttribute({ \"tabindex\": value });\r\n\t\t\tthis._tabindex = value;\r\n\t\t\tthis.focusable = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return TAB index\r\n\t */\r\n\tpublic get tabindex(): $type.Optional<number> {\r\n\t\tconst index = this._tabindex;\r\n\r\n\t\tif (index != null) {\r\n\t\t\treturn index;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.tabindex;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.tabindex;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * DRAGGING AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's options to be used for inertia. This setting is\r\n\t * inheritable, meaning that if not set directly, it will search in all its\r\n\t * ascendants until very top.\r\n\t *\r\n\t * Inertia is used only if element's `inert` is set to `true`.\r\n\t *\r\n\t * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n\t * movement, and will continue moving in the same drag direction, gradually\r\n\t * reducing in speed until finally stops.\r\n\t *\r\n\t * Check [[IInertiaOptions]] for how you tweak inertia animations.\r\n\t *\r\n\t * @return Inertia options\r\n\t */\r\n\tpublic get inertiaOptions(): Dictionary<InertiaTypes, IInertiaOptions> {\r\n\t\tif (!this.interactions.inertiaOptions) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.inertiaOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.inertiaOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element is draggable.\r\n\t *\r\n\t * @param value  `true` if element can be dragged\r\n\t */\r\n\tpublic set draggable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"draggable\", value)) {\r\n\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.draggable = value;\r\n\t\t\t\t//interaction.processDraggable(this);\r\n\r\n\t\t\t\t// Add events\r\n\t\t\t\t// @todo Maybe attach to InteractionObject's multidisposer so that\r\n\t\t\t\t// sprites events get disposed together with them?\r\n\t\t\t\t// this.interactions.disposers.getItem(\"movable\")\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-draggable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"down\", this.handleDown, this, false),\r\n\t\t\t\t\tthis.events.on(\"dragstart\", this.handleDragStart, this, false),\r\n\t\t\t\t\tthis.events.on(\"drag\", this.handleDragMove, this, false),\r\n\t\t\t\t\tthis.events.on(\"dragstop\", this.handleDragStop, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `true` if element can be dragged\r\n\t */\r\n\tpublic get draggable(): boolean {\r\n\t\treturn this.getPropertyValue(\"draggable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Executes when dragged element is being started to drag.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected handleDragStart(ev: AMEvent<Sprite, ISpriteEvents>[\"dragstart\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tthis.interactions.originalPosition = {\r\n\t\t\t\tx: this.pixelX,\r\n\t\t\t\ty: this.pixelY\r\n\t\t\t};\r\n\t\t\tthis._isDragged = true;\r\n\t\t\tthis.hideTooltip(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Tell this element to start being dragged. This is useful if you want to\r\n\t * drag items by interactions performed not directly on the target element.\r\n\t *\r\n\t * Parameter `pointer` is highly recommended. By passing in the Pointer you\r\n\t * will ensure that movement is tracked for the pointer that you want. If not\r\n\t * supplied, the system will try to determine the most logical pointer.\r\n\t *\r\n\t * However this may fail if you have more than one pointer active, which\r\n\t * might happen if you have several objects being dragged on a touch device.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointer Pointer to use for movement\r\n\t */\r\n\tpublic dragStart(pointer?: IPointer): void {\r\n\t\t//this.dragStop(pointer);\r\n\t\t//this.draggable = true;\r\n\t\tthis._isDragged = true;\r\n\t\tgetInteraction().dragStart(this.interactions, pointer);\r\n\t}\r\n\r\n\t/**\r\n\t * Executes when dragged element is being dropped.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected handleDragStop(ev: AMEvent<Sprite, ISpriteEvents>[\"dragstop\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tthis._isDragged = false;\r\n\t\t\tthis.showTooltip();\r\n\t\t\tthis.interactions.originalPosition = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Stops manually initiated dragging of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param pointer Pointer to use as a reference\r\n\t */\r\n\tpublic dragStop(pointer?: IPointer, cancelled?: boolean): void {\r\n\t\t//this.draggable = false;\r\n\t\tthis._isDragged = false;\r\n\t\tgetInteraction().dragStop(this.interactions, pointer, cancelled);\r\n\t\t//this.handleDragStop();\r\n\t}\r\n\r\n\t/**\r\n\t * Executes when {Sprite} is being dragged.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t * @todo Implement parent position offset calculation\r\n\t */\r\n\tpublic handleDragMove(ev: AMEvent<Sprite, ISpriteEvents>[\"drag\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tlet point: Optional<IPoint> = this.interactions.originalPosition;\r\n\r\n\t\t\tif (point && this._isDragged) {\r\n\t\t\t\tlet globalScale = this._parent.globalScale * this.svgContainer.cssScale;\r\n\t\t\t\tthis.moveTo({ x: point.x + ev.shift.x / globalScale, y: point.y + ev.shift.y / globalScale }, undefined, undefined, true);\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispatchImmediately(\"dragged\", ev);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element should use inertia when interacted with.\r\n\t *\r\n\t * \"Inert\" element, when dragged and released, will carry the momentum of the\r\n\t * movement, and will continue moving in the same drag direction, gradually\r\n\t * reducing in speed until finally stops.\r\n\t *\r\n\t * @default false\r\n\t * @param value `true` if element should use inertia when animated\r\n\t */\r\n\tpublic set inert(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"inert\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.interactions.inert = value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `true` if element should use inertia when animated\r\n\t */\r\n\tpublic get inert(): boolean {\r\n\t\treturn this.getPropertyValue(\"inert\");\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * HOVERING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns Sprite's hover options.\r\n\t *\r\n\t * @see {@link IHoverOptions} for available options.\r\n\t * @return Options\r\n\t */\r\n\tpublic get hoverOptions(): IHoverOptions {\r\n\t\tif (!this.interactions.hoverOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.hoverOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.hoverOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.hoverOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element is hoverable (hover events are registered).\r\n\t *\r\n\t * Use `over` and `out` events, to watch for those respective actions.\r\n\t *\r\n\t * @default false\r\n\t * @param value `true` if element can be hovered\r\n\t */\r\n\tpublic set hoverable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"hoverable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.hoverable = value;\r\n\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-hoverable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"over\", this.handleOver, this, false),\r\n\t\t\t\t\tthis.events.on(\"out\", this.handleOut, this, false),\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `true` if element is hoverable\r\n\t */\r\n\tpublic get hoverable(): boolean {\r\n\t\treturn this.getPropertyValue(\"hoverable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles tasks when element becomes hovered:\r\n\t * * Shows [[Tooltip]] if applicable\r\n\t * * Applies \"hover\" state\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleOver(ev?: AMEvent<Sprite, ISpriteEvents>[\"over\"]): void {\r\n\t\tif (this._outTimeout) {\r\n\t\t\tthis._outTimeout.dispose();\r\n\t\t}\r\n\t\tif (this.isHover) {\r\n\r\n\t\t\tif (this.states.hasKey(\"hover\")) {\r\n\t\t\t\t//this.setState(\"hover\");\r\n\t\t\t\t// This will check `isHover` and will set \"hover\" state\r\n\t\t\t\tif (!this.isHidden) {\r\n\t\t\t\t\tthis.applyCurrentState();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet point: IPoint\r\n\t\t\tif (ev && ev.pointer) {\r\n\t\t\t\tpoint = $utils.documentPointToSvg(ev.pointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale)\r\n\t\t\t}\r\n\r\n\t\t\tif (this.showTooltipOn == \"hover\") {\r\n\t\t\t\tthis.showTooltip(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.showTooltipOn == \"hover\") {\r\n\t\t\t\tthis.hideTooltip();\r\n\t\t\t}\r\n\t\t\tif (!this.isHidden && this.states.hasKey(\"hover\")) {\r\n\t\t\t\tthis.applyCurrentState();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles tasks when element loses hover:\r\n\t *\r\n\t * * Hides [[Tooltip]]\r\n\t * * Applies default state\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev [description]\r\n\t */\r\n\tpublic handleOut(ev?: AMEvent<Sprite, ISpriteEvents>[\"out\"]): void {\r\n\t\tif (this.tooltip && this.tooltip.targetSprite == this && this.tooltip.keepTargetHover) {\r\n\t\t\tthis._outTimeout = this.setTimeout(() => {\r\n\t\t\t\tif (!this.tooltip.isHover) {\r\n\t\t\t\t\tif (this.tooltip.targetSprite == this) {\r\n\t\t\t\t\t\tthis.hideTooltip();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n\t\t\t\t}\r\n\t\t\t}, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (this.showTooltipOn == \"hover\") {\r\n\t\t\tthis.hideTooltip();\r\n\t\t}\r\n\t\tthis._outTimeout = this.setTimeout(this.handleOutReal.bind(this), this.rollOutDelay);\r\n\t}\r\n\r\n\t/**\r\n\t * [handleOutReal description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo description\r\n\t */\r\n\tpublic handleOutReal() {\r\n\t\tif (!this.isHidden && !this.isHiding && this.states.hasKey(\"hover\")) {\r\n\t\t\tthis.applyCurrentState();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * CLICKING/TAPPING AND TOGGLING STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns Sprite's click (hit) options.\r\n\t *\r\n\t * Click (hit) options control things like double-click, timeouts, etc.\r\n\t *\r\n\t * @see {@link IHitOptions} for available options.\r\n\t * @return Options\r\n\t */\r\n\tpublic get hitOptions(): IHitOptions {\r\n\t\tif (!this.interactions.hitOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.hitOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.hitOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.hitOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares element's after `down` event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic handleDown(ev?: AMEvent<Sprite, ISpriteEvents>[\"down\"]): void {\r\n\t\tif (this.interactions.downPointers.length === 1) {\r\n\t\t\tthis.interactions.originalPosition = {\r\n\t\t\t\tx: this.pixelX,\r\n\t\t\t\ty: this.pixelY\r\n\t\t\t};\r\n\t\t\tthis.interactions.originalAngle = this.rotation;\r\n\t\t\tthis.interactions.originalScale = this.scale;\r\n\t\t\tif (this.states.hasKey(\"down\")) {\r\n\t\t\t\tthis.setState(\"down\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prepares element's after `up` event.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic handleUp(ev?: AMEvent<Sprite, ISpriteEvents>[\"up\"]): void {\r\n\t\t/*if (!this.isDown) {\r\n\t\t\tthis.interactions.originalPosition = null;\r\n\t\t\tthis.interactions.originalAngle = null;\r\n\t\t\tthis.interactions.originalScale = null;\r\n\t\t}*/\r\n\t\tthis._isResized = false;\r\n\t\tif (this.states.hasKey(\"down\")) {\r\n\t\t\tthis.applyCurrentState();\r\n\t\t}\r\n\t\tif (this.showTooltipOn == \"hit\") {\r\n\t\t\tthis.updateTooltipPosition(ev.pointer ? ev.pointer.point : undefined);\r\n\t\t\tthis._disposers.push(registry.events.once(\"exitframe\", () => {\r\n\t\t\t\tthis.showTooltip();\r\n\t\t\t}));\r\n\r\n\t\t\tthis._disposers.push(getInteraction().body.events.once(\"down\", (ev) => {\r\n\t\t\t\tthis.hideTooltip();\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if the element is clickable.\r\n\t *\r\n\t * Some type of the elements, like buttons are clickable by default.\r\n\t *\r\n\t * Most of the elements are not clickable by default.\r\n\t *\r\n\t * Use `hit`, `doublehit`, `up`, `down`, `toggled` events to watch for\r\n\t * respective click/touch actions.\r\n\t *\r\n\t * @param value `true` if element can be clicked\r\n\t */\r\n\tpublic set clickable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"clickable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.clickable = value;\r\n\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-clickable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"down\", this.handleDown, this, false),\r\n\t\t\t\t\tthis.events.on(\"up\", this.handleUp, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {boolean}\r\n\t */\r\n\tpublic get clickable(): boolean {\r\n\t\treturn this.getPropertyValue(\"clickable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element can be toggled on and off by subsequent clicks/taps.\r\n\t *\r\n\t * Togglable element will alternate its `isActive` property between `true`\r\n\t * and `false` with each click.\r\n\t *\r\n\t * @param value Is togglable?\r\n\t */\r\n\tpublic set togglable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"togglable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-togglable\", value, () => this.events.on(\"hit\", this.handleToggle, this, false));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is togglable?\r\n\t */\r\n\tpublic get togglable(): boolean {\r\n\t\treturn this.getPropertyValue(\"togglable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles toggling of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event\r\n\t */\r\n\tpublic handleToggle(ev: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tthis.isActive = !this.isActive;\r\n\t}\r\n\r\n\t/**\r\n\t * Should element prevent context menu to be displayed, e.g. when\r\n\t * right-clicked?\r\n\t *\r\n\t * @default false\r\n\t * @param value Context menu disabled?\r\n\t */\r\n\tpublic set contextMenuDisabled(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"contextMenuDisabled\", value)) {\r\n\t\t\tthis.interactions.contextMenuDisabled = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Context menu disabled?\r\n\t */\r\n\tpublic get contextMenuDisabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"contextMenuDisabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Click-through URL for this element.\r\n\t *\r\n\t * If set, clicking/tapping this element will open the new URL in a target\r\n\t * window/tab as set by `urlTarget`.\r\n\t *\r\n\t * Please note that URL will be parsed by data placeholders in curly\r\n\t * brackets, to be populated from data. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.columns.template.url = \"https://www.google.com/search?q={category.urlEncode()}\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"columns\": {\r\n\t *       \"url\": \"https://www.google.com/search?q={category.urlEncode()}\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param value URL\r\n\t */\r\n\tpublic set url(value: $type.Optional<string>) {\r\n\t\tif (this.setPropertyValue(\"url\", value)) {\r\n\t\t\tif (this._urlDisposer) {\r\n\t\t\t\tthis._urlDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\t// If URL is not empty, set up events\r\n\t\t\tif ($utils.isNotEmpty(value)) {\r\n\t\t\t\tthis._urlDisposer = this.events.on(\"hit\", this.urlHandler, this, false);\r\n\r\n\t\t\t\t// Set other required parameters\r\n\t\t\t\tthis.clickable = true;\r\n\t\t\t\tthis.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return URL\r\n\t */\r\n\tpublic get url(): $type.Optional<string> {\r\n\t\treturn this.getPropertyValue(\"url\");\r\n\t}\r\n\r\n\t/**\r\n\t * [baseId description]\r\n\t *\r\n\t * @ignore\r\n\t * @param  value  [description]\r\n\t */\r\n\tpublic set baseId(value: string) {\r\n\t\tthis.setBaseId(value);\r\n\t}\r\n\r\n\t/**\r\n\t * [baseId description]\r\n\t *\r\n\t * @ignore\r\n\t * @return [description]\r\n\t */\r\n\tpublic get baseId(): string {\r\n\t\tif (!this._baseId && this._parent) {\r\n\t\t\tthis.baseId = this._parent.baseId;\r\n\t\t}\r\n\r\n\t\treturn this._baseId;\r\n\t}\r\n\r\n\tprotected setBaseId(value: string) {\r\n\t\tif (value != this._baseId) {\r\n\t\t\tif (this.invalid) {\r\n\t\t\t\tthis.invalid = false;\r\n\t\t\t\tregistry.removeFromInvalidSprites(this);\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\t\t\tthis._baseId = value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the mail chart object that this element belongs to.\r\n\t *\r\n\t * In most cases it will mean the chart object.\r\n\t *\r\n\t * Can be used to retrieve chart object in various events and adapters.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n\t *   console.log(ev.target.baseSprite);\r\n\t * });\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.seriesContainer.events.on(\"hit\", function(ev) {\r\n\t *   console.log(ev.target.baseSprite);\r\n\t * });\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"seriesContainer\": {\r\n\t *     \"events\": {\r\n\t *       \"hit\": function(ev) {\r\n\t *         console.log(ev.target.baseSprite);\r\n\t *       }\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @readonly\r\n\t * @return  Base chart object\r\n\t */\r\n\tpublic get baseSprite(): $type.Optional<Sprite> {\r\n\t\tif (this.isBaseSprite) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.baseSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Target to use for URL clicks:\r\n\t *\r\n\t * * _blank\r\n\t * * _self (default)\r\n\t * * _parent\r\n\t * * _top\r\n\t * * Name of the window/frame\r\n\t *\r\n\t * Ignored if `url` is not set.\r\n\t *\r\n\t * @param value URL target\r\n\t */\r\n\tpublic set urlTarget(value: string) {\r\n\t\tthis.setPropertyValue(\"urlTarget\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return URL target\r\n\t */\r\n\tpublic get urlTarget(): string {\r\n\t\treturn this.getPropertyValue(\"urlTarget\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles URL transition on element click.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev An event object\r\n\t */\r\n\tpublic urlHandler(ev: AMEvent<Sprite, ISpriteEvents>[\"hit\"]): void {\r\n\t\t// Is URL set?\r\n\t\tif ($utils.isNotEmpty(this.url)) {\r\n\t\t\t// Proceed to the URL\r\n\t\t\tlet url = this.populateString(this.url);\r\n\t\t\tif (this.urlTarget === \"_self\") {\r\n\t\t\t\twindow.location.href = url;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\twindow.open(url, this.urlTarget);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * SWIPING GESTURE TRACKING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's swipe gesture options.\r\n\t *\r\n\t * @return Swipe gesture options\r\n\t */\r\n\tpublic get swipeOptions(): ISwipeOptions {\r\n\t\tif (!this.interactions.swipeOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.swipeOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.swipeOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.swipeOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element is swipeable.\r\n\t *\r\n\t * Swipable element will invoke `swipe`, `swipeleft` and `swiperight` events,\r\n\t * when quick horizontal drag action is performed with either mouse or touch.\r\n\t *\r\n\t * Please note that combining swipe and drag is possible, however will incur\r\n\t * a slight but noticeable delay in drag start.\r\n\t *\r\n\t * @param value  Element swipable?\r\n\t */\r\n\tpublic set swipeable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"swipeable\", value)) {\r\n\t\t\tthis.applyCursorStyle();\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.interactions.swipeable = value;\r\n\t\t\t}\r\n\t\t\t//interaction.processSwipeable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element swipable?\r\n\t */\r\n\tpublic get swipeable(): boolean {\r\n\t\treturn this.getPropertyValue(\"swipeable\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * POINTER TRACKING\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Indicates if the element is trackable (mouse position over it is reported to\r\n\t * event listeners).\r\n\t *\r\n\t * Will invoke `track` events whenever pointer (cursor) changes position\r\n\t * while over element.\r\n\t *\r\n\t * Please note, touch devices will also invoke `track` events when touch\r\n\t * point is moved while holding down on a trackable element.\r\n\t *\r\n\t * @param value Track cursor movement over element?\r\n\t */\r\n\tpublic set trackable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"trackable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.trackable = value;\r\n\t\t\t}\r\n\t\t\t//interaction.processTrackable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Track cursor movement over element?\r\n\t */\r\n\tpublic get trackable(): boolean {\r\n\t\treturn this.getPropertyValue(\"trackable\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MOUSE-WHEEL RELATED\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Indicates if the element can be interacted with mouse wheel.\r\n\t *\r\n\t * Will invoke `wheel`, `wheelup`, `wheeldown`, `wheelleft`, and `wheelright`\r\n\t * events when using mouse wheel over the element.\r\n\t *\r\n\t * @param value Mouse wheel events enabled?\r\n\t */\r\n\tpublic set wheelable(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"wheelable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.wheelable = value;\r\n\t\t\t}\r\n\t\t\t//interaction.processWheelable(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel events enabled?\r\n\t */\r\n\tpublic get wheelable(): boolean {\r\n\t\treturn this.getPropertyValue(\"wheelable\");\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * RESIZE\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Indicates if this element is resizable.\r\n\t *\r\n\t * Enabling resize will turn on various interactions on the element. Their\r\n\t * actual functionality will depend on other properties.\r\n\t *\r\n\t * If the element also `draggable`, resize will only happen with two points\r\n\t * of contact on a touch device.\r\n\t *\r\n\t * If the element is not draggable, resize can be performed with just one\r\n\t * point of contact, touch or mouse.\r\n\t *\r\n\t * Will invoke `resize` event every time the size of the element changes.\r\n\t *\r\n\t * @param value  Element resizable?\r\n\t */\r\n\tpublic set resizable(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"resizable\", value)) {\r\n\t\t\tif (!value && !this.isInteractive()) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.applyCursorStyle();\r\n\t\t\t\tthis.interactions.resizable = value;\r\n\t\t\t\t// setEventDisposer will also remove listeners if value == false\r\n\t\t\t\tthis.interactions.setEventDisposer(\"sprite-resizable\", value, () => new MultiDisposer([\r\n\t\t\t\t\tthis.events.on(\"down\", this.handleDown, this, false),\r\n\t\t\t\t\tthis.events.on(\"resize\", this.handleResize, this, false)\r\n\t\t\t\t]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Element resizable?\r\n\t */\r\n\tpublic get resizable(): boolean {\r\n\t\treturn this.getPropertyValue(\"resizable\");\r\n\t}\r\n\r\n\t/**\r\n\t * Handles resize intermediate step.\r\n\t *\r\n\t * By default this method resizes actual element. Each element, can override\r\n\t * this method to implement their own resize logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param ev Event object\r\n\t */\r\n\tpublic handleResize(ev: AMEvent<Sprite, ISpriteEvents>[\"resize\"]): void {\r\n\t\tif (!this.interactions.isTouchProtected || !ev.touch) {\r\n\t\t\tthis._isResized = true;\r\n\r\n\t\t\tthis.scale = this.interactions.originalScale * ev.scale;\r\n\r\n\t\t\tthis.validatePosition();\r\n\t\t\t/*center: (io.draggable\r\n\t\t\t? $math.getMidPoint(point1, point2)\r\n\t\t\t: {\r\n\t\t\t\t\"x\": io.originalPosition.x,\r\n\t\t\t\t\"y\": io.originalPosition.y\r\n\t\t\t})*/\r\n\t\t\t//this.moveTo(this.originalPosition.x + ev.shift.x, this.originalPosition.y + ev.shift.y);\r\n\t\t\tif (this.draggable || this.dragWhileResize) {\r\n\t\t\t\tthis._isDragged = false;\r\n\t\t\t\tlet svgPoint1: IPoint = $utils.documentPointToSvg(ev.point1, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\t\t\tlet svgPoint2: IPoint = $utils.documentPointToSvg(ev.point2, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\t\t\tlet svgMidPoint: IPoint = $math.getMidPoint(svgPoint1, svgPoint2);\r\n\r\n\t\t\t\tlet parentPoint1: IPoint = $utils.documentPointToSprite(ev.startPoint1, this._parent);\r\n\t\t\t\tlet parentPoint2: IPoint = $utils.documentPointToSprite(ev.startPoint2, this._parent);\r\n\r\n\t\t\t\tlet originalPosition: Optional<IPoint> = this.interactions.originalPosition;\r\n\t\t\t\tlet originalScale: number = this.interactions.originalScale;\r\n\r\n\t\t\t\tif (originalPosition) {\r\n\t\t\t\t\tlet spritePoint1: IPoint = { x: (parentPoint1.x - originalPosition.x) / originalScale, y: (parentPoint1.y - originalPosition.y) / originalScale };\r\n\t\t\t\t\tlet spritePoint2: IPoint = { x: (parentPoint2.x - originalPosition.x) / originalScale, y: (parentPoint2.y - originalPosition.y) / originalScale };\r\n\r\n\t\t\t\t\tlet spriteMidPoint: IPoint = $math.getMidPoint(spritePoint1, spritePoint2);\r\n\r\n\t\t\t\t\tlet parentPoint: IPoint = $utils.svgPointToSprite(svgMidPoint, this._parent);\r\n\t\t\t\t\tthis.moveTo({ x: parentPoint.x - spriteMidPoint.x * this.scale, y: parentPoint.y - spriteMidPoint.y * this.scale }, undefined, undefined, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MOUSE-RELATED\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Returns element's cursor options.\r\n\t *\r\n\t * Cursor options usually define cursor style for various states of the\r\n\t * hovered element.\r\n\t *\r\n\t * Elements inherit `cursorOptions` from their parents if they don't have\r\n\t * them set explicitly.\r\n\t *\r\n\t * @see {@link ICursorOptions} for a list of available options\r\n\t * @return Cursor options\r\n\t */\r\n\tpublic get cursorOptions(): ICursorOptions {\r\n\t\tif (!this.interactions.cursorOptions) {\r\n\t\t\tif (this.virtualParent) {\r\n\t\t\t\treturn this.virtualParent.cursorOptions;\r\n\t\t\t}\r\n\t\t\tif (this._parent) {\r\n\t\t\t\treturn this._parent.cursorOptions;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.interactions.cursorOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * A shortcut to setting mouse cursor on hover.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.cursorOverStyle = am4core.MouseCursorStyle.pointer;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": {\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"cursorOverStyle\": \"pointer\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param style An array of styles to apply onhover\r\n\t */\r\n\tpublic set cursorOverStyle(style: Array<IStyleProperty>) {\r\n\t\tif (!this.cursorOptions.overStyle) {\r\n\t\t\tthis.interactions.cursorOptions = {\r\n\t\t\t\tdefaultStyle: this.cursorOptions.defaultStyle\r\n\t\t\t};\r\n\t\t}\r\n\t\tthis.cursorOptions.overStyle = style;\r\n\t\tgetInteraction().applyCursorOverStyle(this.interactions);\r\n\t}\r\n\r\n\t/**\r\n\t * A shortcut to setting mouse cursor when button is pressed down.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.slices.template.cursorDownStyle = am4core.MouseCursorStyle.grabbing;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": {\r\n\t *     // ...\r\n\t *     \"slices\": {\r\n\t *       \"cursorDownStyle\": \"grabbing\"\r\n\t *     }\r\n\t *   }\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param style An array of styles to apply onhover\r\n\t */\r\n\tpublic set cursorDownStyle(style: Array<IStyleProperty>) {\r\n\t\tthis.cursorOptions.downStyle = style;\r\n\t}\r\n\r\n\t/**\r\n\t * Applies default cursor styles for interactable elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Determine if this is necessary. Maybe let's not apply any cursor styles by default\r\n\t */\r\n\tpublic applyCursorStyle(): void {\r\n\r\n\t\t// Draggable styles\r\n\t\t/*if (this.draggable) {\r\n\r\n\t\t\tif (!$type.hasValue(this.cursorOptions.overStyle)) {\r\n\t\t\t\tthis.cursorOptions.overStyle = MouseCursorStyle.grab;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.hasValue(this.cursorOptions.downStyle)) {\r\n\t\t\t\tthis.cursorOptions.downStyle = MouseCursorStyle.grabbing;\r\n\t\t\t}\r\n\t\t}*/\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setting this to `false` will effectively disable all interactivity on the\r\n\t * element.\r\n\t *\r\n\t * @param value  Is interaction enabled for this element?\r\n\t */\r\n\tpublic set interactionsEnabled(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\r\n\t\tif (this.setPropertyValue(\"interactionsEnabled\", value)) {\r\n\t\t\tlet pointerEvents = null; // must be null, not \"null\"!\r\n\t\t\tif (!value) {\r\n\t\t\t\tpointerEvents = \"none\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// this is for IE\r\n\t\t\t\tthis.group.node.style.pointerEvents = \"\";\r\n\t\t\t}\r\n\t\t\tthis.group.node.style.pointerEvents = pointerEvents;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is interaction enabled for this element?\r\n\t */\r\n\tpublic get interactionsEnabled(): boolean {\r\n\t\tlet value = this.getPropertyValue(\"interactionsEnabled\");\r\n\t\tif (value === false) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.interactionsEnabled;\r\n\t\t}\r\n\t\tif (this._parent) {\r\n\t\t\treturn this._parent.interactionsEnabled;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * EXPORT-RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * An [[Export]] instance.\r\n\t *\r\n\t * Used to access API of the chart export functionality.\r\n\t *\r\n\t * If `exporting` is not set, the element inherits [[Export]] instance from\r\n\t * its parents.\r\n\t *\r\n\t * Upon request, if no parent has such instance, a new one is created, using\r\n\t * default settings, what in most cases is just enough.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/exporting/} for more info about exporting\r\n\t * @param exp  Export\r\n\t */\r\n\tpublic set exporting(exp: Export) {\r\n\t\tthis._exporting.set(exp, exp);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Export instance\r\n\t */\r\n\tpublic get exporting(): Export {\r\n\t\treturn this.getExporting();\r\n\t}\r\n\r\n\t/**\r\n\t * This is here as a method so that inheriting classes could override it.\r\n\t *\r\n\t * @return Export instance\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tlet _export = this._exporting.get();\r\n\r\n\t\tif (_export) {\r\n\t\t\treturn _export;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.isStandaloneInstance || !this._parent) {\r\n\t\t\t\t_export = new Export(this.svgContainer.SVGContainer);\r\n\t\t\t\t_export.sprite = this;\r\n\t\t\t\t_export.language = this.language;\r\n\t\t\t\t_export.numberFormatter = this.numberFormatter;\r\n\t\t\t\t_export.dateFormatter = this.dateFormatter;\r\n\t\t\t\t_export.durationFormatter = this.durationFormatter;\r\n\t\t\t\tthis._exporting.set(_export, _export);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._parent.exporting;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn _export;\r\n\t}\r\n\r\n\t/**\r\n\t * If set to `false` this element will be omitted when exporting the chart\r\n\t * to an image.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Export?\r\n\t */\r\n\tpublic set exportable(value: boolean) {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tthis._exportable = value;\r\n\t\tif (svgContainer) {\r\n\t\t\tif (value) {\r\n\t\t\t\t$array.remove(svgContainer.nonExportableSprites, this);\r\n\t\t\t}\r\n\t\t\telse if ($array.indexOf(svgContainer.nonExportableSprites, this) == -1) {\r\n\t\t\t\tsvgContainer.nonExportableSprites.push(this);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Export?\r\n\t */\r\n\tpublic get exportable(): boolean {\r\n\t\treturn this._exportable;\r\n\t\t/*const svgContainer = this.svgContainer;\r\n\t\treturn !svgContainer || $array.indexOf(svgContainer.nonExportableSprites, this) == -1;*/\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * MODAL/POPUP RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Private method to be used for \"classPrefix\" adapter for modals/popups.\r\n\t *\r\n\t * @param value  Prefix\r\n\t */\r\n\tprivate modalPrefix(value: string) {\r\n\t\tvalue = options.classNamePrefix + value;\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a [[Modal]] instance, associated with this chart.\r\n\t * (elements top parent)\r\n\t *\r\n\t * Accessing modal does not make it appear. To make a modal appear, use\r\n\t * `showModal()` method.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @return Modal instance\r\n\t */\r\n\tpublic get modal(): Optional<Modal> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tconst modal = svgContainer.modal;\r\n\t\t\tif (!modal.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n\t\t\t\tmodal.adapter.add(\"classPrefix\", this.modalPrefix);\r\n\t\t\t}\r\n\t\t\treturn modal;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Opens a modal window with specific content (`text` parameter) and,\r\n\t * optionally, `title`.\r\n\t *\r\n\t * The `text` parameter can contain HTML content.\r\n\t *\r\n\t * @see {@link Modal} for more information about using Modal windows\r\n\t * @param text   Modal contents\r\n\t * @param title  Title for the modal window\r\n\t */\r\n\tpublic openModal(text: string, title?: string): Optional<Modal> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\treturn svgContainer.openModal(text, title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides modal window if there is one currently open.\r\n\t */\r\n\tpublic closeModal(): void {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tsvgContainer.closeModal();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of popups for this chart.\r\n\t *\r\n\t * @return Popups\r\n\t */\r\n\tpublic get popups(): Optional<ListTemplate<Popup>> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tconst popups = svgContainer.popups;\r\n\t\t\tpopups.template.sprite = this;\r\n\r\n\t\t\tif (!popups.template.adapter.has(\"classPrefix\", this.modalPrefix)) {\r\n\t\t\t\tpopups.template.adapter.add(\"classPrefix\", this.modalPrefix);\r\n\t\t\t}\r\n\t\t\treturn popups;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates, opens, and returns a new [[Popup]] window.\r\n\t *\r\n\t * `text` can be any valid HTML.\r\n\t *\r\n\t * `title` is currently not supported.\r\n\t *\r\n\t * @param text   Popup contents\r\n\t * @param title  Popup title\r\n\t * @return Popup instance\r\n\t */\r\n\tpublic openPopup(text: string, title?: string): Optional<Popup> {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\treturn svgContainer.openPopup(text, title);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Closes all currently open popup windows\r\n\t */\r\n\tpublic closeAllPopups(): void {\r\n\t\tconst svgContainer = this.svgContainer;\r\n\t\tif (svgContainer) {\r\n\t\t\tsvgContainer.closeAllPopups();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * POSITIONAL PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Element's absolute or relative X coordinate.\r\n\t *\r\n\t * If setting both X and Y, please consider using `moveTo()` method instead,\r\n\t * as it will be faster to set both coordinates at once.\r\n\t *\r\n\t * @param value X coordinate\r\n\t */\r\n\tpublic set x(value: number | Percent) {\r\n\t\tif (!this.isDragged) {\r\n\t\t\tthis.setPercentProperty(\"x\", value, false, true, this._positionPrecision, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X coordinate\r\n\t */\r\n\tpublic get x(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"x\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current absolute X coordinate in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic get pixelX(): number {\r\n\t\tlet value = $math.fitToRange(this.getPixelX(this.x), this.minX, this.maxX);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelX\", value);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current relative X coordinate in [[Percent]].\r\n\t *\r\n\t * @return X coordinate ([[Percent]])\r\n\t */\r\n\tpublic get relativeX(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this.getRelativeX(this.x)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeX\", this.getRelativeX(this.x));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The smallest allowable absolute X coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Min X (px)\r\n\t */\r\n\tpublic set minX(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"minX\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Min X (px)\r\n\t */\r\n\tpublic get minX(): number {\r\n\t\treturn this.getPropertyValue(\"minX\");\r\n\t}\r\n\r\n\t/**\r\n\t * The biggest allowable absolute X coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Max X (px)\r\n\t */\r\n\tpublic set maxX(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"maxX\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Max X (px)\r\n\t */\r\n\tpublic get maxX(): number {\r\n\t\treturn this.getPropertyValue(\"maxX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's absolute or relative Y coordinate.\r\n\t *\r\n\t * If setting both X and Y, please consider using `moveTo()` method instead,\r\n\t * as it will be faster to set both coordinates at once.\r\n\t *\r\n\t * @param value  Y coordinate\r\n\t */\r\n\tpublic set y(value: number | Percent) {\r\n\t\tif (!this.isDragged) {\r\n\t\t\tthis.setPercentProperty(\"y\", value, false, true, this._positionPrecision, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y coordinate\r\n\t */\r\n\tpublic get y(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"y\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current absolute Y coordinate in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic get pixelY(): number {\r\n\t\tlet value = $math.fitToRange(this.getPixelY(this.y), this.minY, this.maxY);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelY\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current relative Y coordinate in [[Percent]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Y coordinate ([[Percent]])\r\n\t */\r\n\tpublic get relativeY(): number {\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this.getRelativeX(this.y);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeY\", this.getRelativeX(this.y));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The smallest allowable absolute Y coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Min Y (px)\r\n\t */\r\n\tpublic set minY(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"minY\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Min Y (px)\r\n\t */\r\n\tpublic get minY(): number {\r\n\t\treturn this.getPropertyValue(\"minY\");\r\n\t}\r\n\r\n\t/**\r\n\t * The biggest allowable absolute Y coordinate for this element.\r\n\t *\r\n\t * This is used to contain element movement within certain boundaries.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Max Y (px)\r\n\t */\r\n\tpublic set maxY(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"maxY\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Max Y (px)\r\n\t */\r\n\tpublic get maxY(): number {\r\n\t\treturn this.getPropertyValue(\"maxY\");\r\n\t}\r\n\r\n\t/**\r\n\t * A horizontal offset for the element in pixels.\r\n\t *\r\n\t * Can be negative value for offset to the left.\r\n\t *\r\n\t * @param value  Horizontal offset (px)\r\n\t */\r\n\tpublic set dx(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"dx\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal offset (px)\r\n\t */\r\n\tpublic get dx(): number {\r\n\t\treturn this.getPropertyValue(\"dx\");\r\n\t}\r\n\r\n\t/**\r\n\t * A vertical offset for the element in pixels.\r\n\t *\r\n\t * Can be negative value for offset upwards.\r\n\t *\r\n\t * @param value  Vertical offset (px)\r\n\t */\r\n\tpublic set dy(value: number) {\r\n\t\tif ($type.isNumber(value)) {\r\n\t\t\tvalue = $math.round(value, this._positionPrecision, true);\r\n\t\t\tthis.setPropertyValue(\"dy\", value, false, true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical offset (px)\r\n\t */\r\n\tpublic get dy(): number {\r\n\t\treturn this.getPropertyValue(\"dy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Rotation of the element in degrees. (0-360)\r\n\t *\r\n\t * Note: For convenience purposes, negative values (for counter-clockwise\r\n\t * rotation) and values exceeding 360 can also be used.\r\n\t *\r\n\t * @param value  Rotation (0-360)\r\n\t */\r\n\tpublic set rotation(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"rotation\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Rotation (0-360)\r\n\t */\r\n\tpublic get rotation(): number {\r\n\t\treturn this.getPropertyValue(\"rotation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls horizontal alignment of the element.\r\n\t *\r\n\t * This is used by parent [[Container]] when layouting its children.\r\n\t *\r\n\t * @param value  Horizontal align\r\n\t */\r\n\tpublic set align(value: Align) {\r\n\t\tvalue = <Align>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"align\", value)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tthis._parent.invalidateLayout();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal align\r\n\t */\r\n\tpublic get align(): Align {\r\n\t\treturn this.getPropertyValue(\"align\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls vertical alignment of the element.\r\n\t *\r\n\t * This is used by parent [[Container]] when layouting its children.\r\n\t *\r\n\t * @param value  Vertical align\r\n\t */\r\n\tpublic set valign(value: VerticalAlign) {\r\n\t\tvalue = <VerticalAlign>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"valign\", value)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tthis._parent.invalidateLayout();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical align\r\n\t */\r\n\tpublic get valign(): VerticalAlign {\r\n\t\treturn this.getPropertyValue(\"valign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls which part of the element to treat as a horizontal center.\r\n\t *\r\n\t * The setting will be used when positioning, resizing and rotating the\r\n\t * element.\r\n\t *\r\n\t * @param value  Horizontal center\r\n\t */\r\n\tpublic set horizontalCenter(value: HorizontalCenter) {\r\n\t\tvalue = <HorizontalCenter>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"horizontalCenter\", value)) {\r\n\t\t\tthis.updateCenter();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal center\r\n\t */\r\n\tpublic get horizontalCenter(): HorizontalCenter {\r\n\t\treturn this.getPropertyValue(\"horizontalCenter\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls which part of the element to treat as a vertical center.\r\n\t *\r\n\t * The setting will be used when positioning, resizing and rotating the\r\n\t * element.\r\n\t *\r\n\t * @param value  Vertical center\r\n\t */\r\n\tpublic set verticalCenter(value: VerticalCenter) {\r\n\t\tvalue = <VerticalCenter>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"verticalCenter\", value)) {\r\n\t\t\tthis.updateCenter();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical center\r\n\t */\r\n\tpublic get verticalCenter(): VerticalCenter {\r\n\t\treturn this.getPropertyValue(\"verticalCenter\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * DIMENSIONAL PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Maximum allowed width for the element in pixels.\r\n\t *\r\n\t * @param value  Maximum width (px)\r\n\t */\r\n\tpublic set maxWidth(value: number) {\r\n\t\tthis.setMaxWidth(value);\r\n\t}\r\n\r\n\tprotected setMaxWidth(value: number) {\r\n\t\tlet prevWidth = this.maxWidth;\r\n\t\tlet prevHeight = this.maxHeight;\r\n\t\tif (this.setPropertyValue(\"maxWidth\", value)) {\r\n\t\t\tif ($type.isNumber(this.relativeWidth)) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"maxsizechanged\"] = {\r\n\t\t\t\ttype: \"maxsizechanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tpreviousWidth: prevWidth,\r\n\t\t\t\tpreviousHeight: prevHeight\r\n\t\t\t};\r\n\r\n\t\t\tthis.dispatchImmediately(\"maxsizechanged\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum width (px)\r\n\t */\r\n\tpublic get maxWidth(): number {\r\n\t\tlet maxWidth = this.getPropertyValue(\"maxWidth\");\r\n\r\n\t\tif (!$type.isNumber(maxWidth)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tlet parentWidth = this._parent.maxWidth;\r\n\t\t\t\tif (this._parent.layout != \"absolute\" && this.align != \"none\" && this.align != undefined) {\r\n\t\t\t\t\tparentWidth = parentWidth - this.pixelMarginLeft - this.pixelMarginRight;\r\n\t\t\t\t}\r\n\t\t\t\treturn parentWidth;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum allowed height for the element in pixels.\r\n\t *\r\n\t * @param value  Maximum height (px)\r\n\t */\r\n\tpublic set maxHeight(value: number) {\r\n\t\tthis.setMaxHeight(value);\r\n\t}\r\n\r\n\tprotected setMaxHeight(value: number) {\r\n\r\n\t\tlet prevWidth = this.maxWidth;\r\n\t\tlet prevHeight = this.maxHeight;\r\n\r\n\t\tif (this.setPropertyValue(\"maxHeight\", value)) {\r\n\r\n\t\t\tif ($type.isNumber(this.relativeHeight)) {\r\n\t\t\t\tthis.invalidate();\r\n\t\t\t}\r\n\r\n\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"maxsizechanged\"] = {\r\n\t\t\t\ttype: \"maxsizechanged\",\r\n\t\t\t\ttarget: this,\r\n\t\t\t\tpreviousWidth: prevWidth,\r\n\t\t\t\tpreviousHeight: prevHeight\r\n\t\t\t};\r\n\r\n\t\t\tthis.dispatchImmediately(\"maxsizechanged\", event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum height (px)\r\n\t */\r\n\tpublic get maxHeight(): number {\r\n\t\tlet maxHeight = this.getPropertyValue(\"maxHeight\");\r\n\t\tif (!$type.isNumber(maxHeight)) {\r\n\t\t\tif (this._parent) {\r\n\t\t\t\tlet parentHeight = this._parent.maxHeight;\r\n\t\t\t\tif (this._parent.layout != \"absolute\" && this.valign != \"none\" && this.valign != undefined) {\r\n\t\t\t\t\tparentHeight = parentHeight - this.pixelMarginTop - this.pixelMarginBottom;\r\n\t\t\t\t}\r\n\t\t\t\treturn parentHeight;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum width of the element in pixels.\r\n\t *\r\n\t * Set to `undefined` to remove the limit.\r\n\t *\r\n\t * @param value  Minimum width (px)\r\n\t */\r\n\tpublic set minWidth(value: Optional<number>) {\r\n\t\tthis.setPropertyValue(\"minWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum width (px)\r\n\t */\r\n\tpublic get minWidth(): Optional<number> {\r\n\t\treturn this.getPropertyValue(\"minWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Minimum height for the element in pixels.\r\n\t *\r\n\t * Set to `undefined` to remove the limit.\r\n\t *\r\n\t * @param value  Minimum height (px)\r\n\t */\r\n\tpublic set minHeight(value: Optional<number>) {\r\n\t\tthis.setPropertyValue(\"minHeight\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Minimum height (px)\r\n\t */\r\n\tpublic get minHeight(): Optional<number> {\r\n\t\treturn this.getPropertyValue(\"minHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's absolute or relative width.\r\n\t *\r\n\t * The width can either be absolute, set in numeric pixels, or relative, set\r\n\t * in [[Percent]].\r\n\t *\r\n\t * Relative width will be calculated using closest measured ancestor\r\n\t * [[Container]].\r\n\t *\r\n\t * NOTE: `width` is an accessor, which allows setting width in pixels or\r\n\t * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n\t * not ever use it. It uses either `pixelWidth` or `percentWidth`, so if\r\n\t * you need to add an adapter for width add it for either of the two\r\n\t * properties - whichever suits your requirements.\r\n\t *\r\n\t * @param value  Width (numeric in pixels or relative)\r\n\t */\r\n\tpublic set width(value: number | Percent) {\r\n\r\n\t\tlet changed: boolean = this.setPercentProperty(\"width\", value, true, false, this._positionPrecision, true);\r\n\r\n\t\tif (changed) {\r\n\t\t\tthis.percentWidth = undefined;\r\n\t\t\tthis.relativeWidth = undefined;\r\n\r\n\t\t\tif (value instanceof Percent) {\r\n\t\t\t\tthis.percentWidth = value.percent;\r\n\t\t\t\tif ($type.isNumber(this._pixelWidth)) {\r\n\t\t\t\t\tthis.maxWidth = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._pixelWidth = undefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._pixelWidth = Number(value);\r\n\t\t\t\t//this._measuredWidth = this._pixelWidth;\r\n\t\t\t\tthis.maxWidth = this._pixelWidth;\r\n\t\t\t}\r\n\t\t\tthis.invalidatePosition();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (absolute or relative)\r\n\t */\r\n\tpublic get width(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"width\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's absolute or relative height.\r\n\t *\r\n\t * The height can either be absolute, set in numeric pixels, or relative, set\r\n\t * in [[Percent]].\r\n\t *\r\n\t * Relative height will be calculated using closest measured ancestor\r\n\t * [[Container]].\r\n\t *\r\n\t * NOTE: `height` is an accessor, which allows setting height in pixels or\r\n\t * percent. It is a sort of a \"shortcut\" for the users. Actual renderer does\r\n\t * not ever use it. It uses either `pixelHeight` or `percentHeight`, so if\r\n\t * you need to add an adapter for height add it for either of the two\r\n\t * properties - whichever suits your requirements.\r\n\t *\r\n\t * @param value  Height (numeric in pixels or relative)\r\n\t */\r\n\tpublic set height(value: number | Percent) {\r\n\r\n\t\tlet changed: boolean = this.setPercentProperty(\"height\", value, true, false, this._positionPrecision, true);\r\n\r\n\t\tif (changed) {\r\n\t\t\tthis.percentHeight = undefined;\r\n\t\t\tthis._relativeHeight = undefined;\r\n\r\n\t\t\tif (value instanceof Percent) {\r\n\t\t\t\tthis.percentHeight = value.percent;\r\n\t\t\t\tif ($type.isNumber(this._pixelHeight)) {\r\n\t\t\t\t\tthis.maxHeight = undefined;\r\n\t\t\t\t}\r\n\t\t\t\tthis._pixelHeight = undefined;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._pixelHeight = Number(value);\r\n\t\t\t\t//this._measuredHeight = this._pixelHeight;\r\n\t\t\t\tthis.maxHeight = this._pixelHeight; // yes, we reset maxWidth\r\n\t\t\t}\r\n\r\n\t\t\tthis.invalidatePosition();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return height (absolute or relative)\r\n\t */\r\n\tpublic get height(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"height\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's width in pixels, if width was set. For actual width use measuredWidth property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get pixelWidth(): number {\r\n\t\tlet width: number;\r\n\t\tif ($type.isNumber(this.percentWidth)) {\r\n\t\t\twidth = this.maxWidth;\r\n\t\t}\r\n\t\telse if ($type.isNumber(this._pixelWidth)) {\r\n\t\t\twidth = this._pixelWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\twidth = 0;\r\n\t\t}\r\n\r\n\t\tconst minWidth = this.minWidth;\r\n\r\n\t\tif (minWidth != null && width < minWidth) {\r\n\t\t\twidth = minWidth;\r\n\t\t}\r\n\t\tlet value = $math.round(width, this._positionPrecision, true);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelWidth\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's height in pixels. For actual height use measuredHeight property.\r\n\t *\r\n\t * @readonly\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get pixelHeight(): number {\r\n\t\tlet height: number;\r\n\t\tif ($type.isNumber(this.percentHeight)) {\r\n\t\t\theight = this.maxHeight;\r\n\t\t}\r\n\t\telse if ($type.isNumber(this._pixelHeight)) {\r\n\t\t\theight = this._pixelHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\theight = 0//this._measuredHeightSelf;\r\n\t\t}\r\n\r\n\t\tconst minHeight = this.minHeight;\r\n\r\n\t\tif (minHeight != null && height < minHeight) {\r\n\t\t\theight = minHeight;\r\n\t\t}\r\n\t\tlet value = $math.round(height, this._positionPrecision, true);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelHeight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Element's relative width in [[Percent]].\r\n\t * @ignore\r\n\t *\r\n\t * @param value  Relative width\r\n\t */\r\n\tpublic set relativeWidth(value: $type.Optional<number>) {\r\n\t\tif (this._relativeWidth != value) {\r\n\t\t\tthis._relativeWidth = value;\r\n\t\t\t//\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative width\r\n\t * @ignore\r\n\t */\r\n\tpublic get relativeWidth(): $type.Optional<number> {\r\n\t\tconst relativeWidth = this._relativeWidth;\r\n\r\n\t\tif ($type.isNumber(relativeWidth)) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn relativeWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"relativeWidth\", relativeWidth);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Element's relative height in [[Percent]].\r\n\t *\r\n\t * @param value  Relative height\r\n\t * @ignore\r\n\t */\r\n\tpublic set relativeHeight(value: $type.Optional<number>) {\r\n\t\tif (this._relativeHeight != value) {\r\n\t\t\tthis._relativeHeight = value;\r\n\t\t\t//\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Relative height\r\n\t * @ignore\r\n\t */\r\n\tpublic get relativeHeight(): $type.Optional<number> {\r\n\t\tconst relativeHeight = this._relativeHeight;\r\n\r\n\t\tif ($type.isNumber(relativeHeight)) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\treturn relativeHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this._adapterO.apply(\"relativeHeight\", relativeHeight);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured width in pixels.\r\n\t *\r\n\t * A measured width is actual width of contents plus `paddingRight` and* `paddingLeft`, relative to sprite parent, meaning that\r\n\t * rotation and scale is taken into account.\r\n\t *\r\n\t * @readonly\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get measuredWidth(): number {\r\n\r\n\t\tif (this.disabled || this.__disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._measuredWidth;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"measuredWidth\", this._measuredWidth);\r\n\t\t}\r\n\t\t// it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n\t\t//return this.adapter.apply(\"measuredWidth\", $math.fitToRange(this._measuredWidth, this.minWidth, this.maxWidth));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns elements's measured height in pixels.\r\n\t *\r\n\t * A measured height is actual height of contents plus `paddingTop` and `paddingBottom`, relative to sprite parent, meaning that\r\n\t * rotation and scale taken into account.\r\n\t *\r\n\t * @readonly\r\n\t * @return Height (px)\r\n\t */\r\n\tpublic get measuredHeight(): number {\r\n\r\n\t\tif (this.disabled || this.__disabled) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t// it's not good to fit to min/max range as then rotations and scale won't be taken into account\r\n\t\t//return this.adapter.apply(\"measuredHeight\", $math.fitToRange(this._measuredHeight, this.minHeight, this.maxHeight));\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn this._measuredHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"measuredHeight\", this._measuredHeight);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured width plus its left and right margins in\r\n\t * pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Outer width (px)\r\n\t */\r\n\tpublic get outerWidth(): number {\r\n\t\tlet value = this.pixelWidth + this.pixelMarginRight + this.pixelMarginLeft;\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"outerWidth\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured height plus its top and bottom margins in\r\n\t * pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Outer height (px)\r\n\t */\r\n\tpublic get outerHeight(): number {\r\n\t\tlet value = this.pixelHeight + this.pixelMarginTop + this.pixelMarginBottom;\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"outerHeight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured inner width in pixels.\r\n\t *\r\n\t * Inner width is actual available space for content, e.g. element's width\r\n\t * minus horizontal padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner width (px)\r\n\t */\r\n\tpublic get innerWidth(): number {\r\n\t\tlet value = Math.max(0, this.pixelWidth - this.pixelPaddingRight - this.pixelPaddingLeft);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"innerWidth\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's measured inner height in pixels.\r\n\t *\r\n\t * Inner height is actual available space for content, e.g. element's height\r\n\t * minus vertical padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Inner height (px)\r\n\t */\r\n\tpublic get innerHeight(): number {\r\n\t\tlet value = Math.max(0, this.pixelHeight - this.pixelPaddingTop - this.pixelPaddingBottom);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"innerHeight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns element's current \"global\" scale.\r\n\t *\r\n\t * Scale values accumulate over hierarchy of elements.\r\n\t *\r\n\t * E.g. if a [[Container]] has `scale = 2` and it's child has a `scale = 2`,\r\n\t * the child's `globalScale` will be 4. (a multitude of `2 x 2`)\r\n\t *\r\n\t * @readonly\r\n\t * @return Global scale\r\n\t */\r\n\tpublic get globalScale(): number {\r\n\t\tlet scale: number = this.scale;\r\n\t\tif (this._parent) {\r\n\t\t\tscale = scale * this._parent.globalScale;\r\n\t\t}\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn scale;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"globalScale\", scale);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Scale of the element.\r\n\t *\r\n\t * The scale is set from 0 (element reduced to nothing) to 1 (default size).\r\n\t * * 2 will mean element is increased twice.\r\n\t * * 0.5 - reduced by 50%.\r\n\t *\r\n\t * Etc.\r\n\t *\r\n\t * @param value  Scale (0-1)\r\n\t */\r\n\tpublic set scale(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (value < 0) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\tif (value != this.getPropertyValue(\"scale\")) {\r\n\t\t\tthis.setPropertyValue(\"scale\", value, false, true);\r\n\t\t\tthis.handleGlobalScale();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scale (0-1)\r\n\t */\r\n\tpublic get scale(): number {\r\n\t\treturn this.getPropertyValue(\"scale\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sets all four margins for the element at once.\r\n\t *\r\n\t * Margins are set in pixels.\r\n\t *\r\n\t * @param top     Top margin\r\n\t * @param right   Right margin\r\n\t * @param bottom  Bottom margin\r\n\t * @param left    Left margin\r\n\t * @return Current element\r\n\t */\r\n\tpublic margin(top: number, right: number, bottom: number, left: number): Sprite {\r\n\t\tthis.marginTop = top;\r\n\t\tthis.marginRight = right;\r\n\t\tthis.marginBottom = bottom;\r\n\t\tthis.marginLeft = left;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Left margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginLeft\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Right margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginRight\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginTop(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginTop\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginTop(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginTop\");\r\n\t}\r\n\r\n\t/**\r\n\t * Bottom margin - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Margin value\r\n\t */\r\n\tpublic set marginBottom(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"marginBottom\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Margin value\r\n\t */\r\n\tpublic get marginBottom(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"marginBottom\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current right margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Right margin (px)\r\n\t */\r\n\tpublic get pixelMarginRight(): number {\r\n\t\tlet value = this.getPixelX(this.marginRight);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginRight\", value);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative right margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative right margin\r\n\t */\r\n\tpublic get relativeMarginRight(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeX(this.marginRight);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginRight\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current left margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Left margin (px)\r\n\t */\r\n\tpublic get pixelMarginLeft(): number {\r\n\t\tlet value = this.getPixelX(this.marginLeft);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginLeft\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative left margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative left margin\r\n\t */\r\n\tpublic get relativeMarginLeft(): number {\r\n\t\t//@todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeX(this.marginLeft);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginLeft\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current top margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Top margin (px)\r\n\t */\r\n\tpublic get pixelMarginTop(): number {\r\n\t\tlet value = this.getPixelY(this.marginTop);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginTop\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative top margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative top margin\r\n\t */\r\n\tpublic get relativeMarginTop(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeY(this.marginTop);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginTop\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current bottom margin in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Bottom margin (px)\r\n\t */\r\n\tpublic get pixelMarginBottom(): number {\r\n\t\tlet value = this.getPixelY(this.marginBottom);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"pixelMarginBottom\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative bottom margin.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative bottom margin\r\n\t */\r\n\tpublic get relativeMarginBottom(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\tlet value = this.getRelativeY(this.marginBottom);\r\n\t\tif (!this._adapterO) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._adapterO.apply(\"relativeMarginBottom\", value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets padding for the element in pixels.\r\n\t *\r\n\t * @param top     Top padding (px)\r\n\t * @param right   Right padding (px)\r\n\t * @param bottom  Bottom padding (px)\r\n\t * @param left    Left padding (px)\r\n\t * @return Element\r\n\t */\r\n\tpublic padding(top: number, right: number, bottom: number, left: number): Sprite {\r\n\t\tthis.paddingTop = top;\r\n\t\tthis.paddingRight = right;\r\n\t\tthis.paddingBottom = bottom;\r\n\t\tthis.paddingLeft = left;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Left padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingLeft(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingLeft\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingLeft(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingLeft\");\r\n\t}\r\n\r\n\t/**\r\n\t * Right padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingRight(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingRight\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingRight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingRight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingTop(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingTop\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingTop(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingTop\");\r\n\t}\r\n\r\n\t/**\r\n\t * Bottom padding - absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Padding value\r\n\t */\r\n\tpublic set paddingBottom(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"paddingBottom\", value, true, true, this._positionPrecision, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding value\r\n\t */\r\n\tpublic get paddingBottom(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"paddingBottom\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current right padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Right padding (px)\r\n\t */\r\n\tpublic get pixelPaddingRight(): number {\r\n\t\treturn this.getPixelX(this.paddingRight);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative right padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative right padding\r\n\t */\r\n\tpublic get relativePaddingRight(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeX(this.paddingRight);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current left padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Left padding (px)\r\n\t */\r\n\tpublic get pixelPaddingLeft(): number {\r\n\t\treturn this.getPixelX(this.paddingLeft);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative left padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative left padding\r\n\t */\r\n\tpublic get relativePaddingLeft(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeX(this.paddingLeft);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current top padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Top padding (px)\r\n\t */\r\n\tpublic get pixelPaddingTop(): number {\r\n\t\treturn this.getPixelY(this.paddingTop);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative top padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative top padding\r\n\t */\r\n\tpublic get relativePaddingTop(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeY(this.paddingTop);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current bottom padding in pixels.\r\n\t *\r\n\t * @readonly\r\n\t * @return Bottom padding (px)\r\n\t */\r\n\tpublic get pixelPaddingBottom(): number {\r\n\t\treturn this.getPixelY(this.paddingBottom);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns current relative bottom padding.\r\n\t *\r\n\t * @readonly\r\n\t * @return Relative bottom padding\r\n\t */\r\n\tpublic get relativePaddingBottom(): number {\r\n\t\t// @todo Maybe use [[Percent]]?\r\n\t\treturn this.getRelativeY(this.paddingBottom);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * APPEARANCE-RELATED PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Path of Sprite element\r\n\t */\r\n\tpublic set path(value: string) {\r\n\t\tthis.setPath(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setPath(value: string): boolean {\r\n\t\tif (this.setPropertyValue(\"path\", value)) {\r\n\r\n\t\t\tif (this._adapterO) {\r\n\t\t\t\tvalue = this._adapterO.apply(\"path\", value);\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._isPath) {\r\n\t\t\t\tif (!this.element || (this.element.node && !(this.element.node instanceof SVGPathElement))) {\r\n\t\t\t\t\tthis.element = this.paper.add(\"path\");\r\n\t\t\t\t}\r\n\t\t\t\tthis._isPath = true;\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tthis.element.attr({ \"d\": value });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.element.removeAttr(\"d\");\r\n\t\t\t}\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// otherwise is 0x0\r\n\t\t\tif (!this.inited) {\r\n\t\t\t\tthis.events.once(\"inited\", this.validatePosition, this, false);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Path of a Sprite element\r\n\t */\r\n\tpublic get path(): string {\r\n\t\treturn this.getPropertyValue(\"path\");\r\n\t}\r\n\r\n\t/**\r\n\t * [[ColorModifier]] that can be used to modify color and pattern of the\r\n\t * element's fill, e.g. create gradients.\r\n\t *\r\n\t * @param value  Fill color modifiier\r\n\t */\r\n\tpublic set fillModifier(value: ColorModifier) {\r\n\t\tif (this.setPropertyValue(\"fillModifier\", value)) {\r\n\t\t\tthis.setFill(this.fill);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fill color modifier\r\n\t */\r\n\tpublic get fillModifier(): ColorModifier {\r\n\t\treturn this.getPropertyValue(\"fillModifier\");\r\n\t}\r\n\r\n\t/**\r\n\t * [[ColorModifier]] that can be used to modify color and pattern of the\r\n\t * element's stroke (outline), e.g. create gradients.\r\n\t *\r\n\t * @param value  Stroke color modifier\r\n\t */\r\n\tpublic set strokeModifier(value: ColorModifier) {\r\n\t\tthis.setPropertyValue(\"strokeModifier\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stroke color modifier\r\n\t */\r\n\tpublic get strokeModifier(): ColorModifier {\r\n\t\treturn this.getPropertyValue(\"strokeModifier\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's fill opacity.\r\n\t *\r\n\t * Opacity ranges from 0 (fully transparent) to 1 (fully opaque).\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set fillOpacity(value: number) {\r\n\t\tvalue = $math.toNumberRange(value, 0, 1);\r\n\t\tif (this.setPropertyValue(\"fillOpacity\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"fill-opacity\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-9)\r\n\t */\r\n\tpublic get fillOpacity(): number {\r\n\t\treturn this.getPropertyValue(\"fillOpacity\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's fill color or pattern.\r\n\t *\r\n\t * @param value  Fill\r\n\t */\r\n\tpublic set fill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>) {\r\n\t\tthis.setFill(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tif (!$type.isObject(value) || \"r\" in value) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tif (this.setColorProperty(\"fill\", value) || this.fillModifier) {\r\n\t\t\t// this can not go into next if, as value is turned to Gradient\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tif (this.fillModifier) {\r\n\t\t\t\t\tvalue = this.fillModifier.modify(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.realFill = value;\r\n\r\n\t\t\t// todo: review this place when some Color type will be added\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tthis.setSVGAttribute({ \"fill\": value.toString() });\r\n\t\t\t}\r\n\t\t\telse if (!$type.hasValue(value)) {\r\n\t\t\t\tthis.removeSVGAttribute(\"fill\");\r\n\t\t\t}\r\n\t\t\telse if (<any>value instanceof Pattern || <any>value instanceof LinearGradient || <any>value instanceof RadialGradient) {\r\n\t\t\t\tlet fill = value;\r\n\t\t\t\tfill.paper = this.paper;\r\n\t\t\t\tthis.setSVGAttribute({ \"fill\": \"url(\\\"\" + $utils.getBaseURI() + fill.id + \"\\\")\" });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Fill\r\n\t */\r\n\tpublic get fill(): $type.Optional<Color | Pattern | LinearGradient | RadialGradient> {\r\n\t\treturn this.getPropertyValue(\"fill\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's opacity.\r\n\t *\r\n\t * Opacity setting can range from 0 (fully transparent) to 1 (fully opaque).\r\n\t *\r\n\t * ATTENTION: It is highly not recommended to use `opacity` directly on the\r\n\t * element. The charts use `opacity` to hide/show elements, so your setting\r\n\t * might be lost if element is hidden and then later shown.\r\n\t *\r\n\t * Instead use methods `hide()` and `show()` to completely toggle off and on\r\n\t * the element.\r\n\t *\r\n\t * Or, use properties `fillOpacity` and `strokeOpacity`, if you need to make\r\n\t * the element semi-transparent.\r\n\t *\r\n\t * @param value Opacity (0-1)\r\n\t */\r\n\tpublic set opacity(value: number) {\r\n\t\tvalue = $math.toNumberRange(value, 0, 1);\r\n\t\tif (this.setPropertyValue(\"opacity\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"opacity\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get opacity(): number {\r\n\t\treturn this.getPropertyValue(\"opacity\");\r\n\t}\r\n\r\n\t/**\r\n\t * Element's stroke (outline) color or pattern.\r\n\t *\r\n\t * @param value  Stroke setting\r\n\t */\r\n\tpublic set stroke(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tthis.setStroke(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `stroke` property on the SVG element, including applicable\r\n\t * color modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Stroke setting\r\n\t */\r\n\tprotected setStroke(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tif (!$type.isObject(value) || \"r\" in value) {\r\n\t\t\tvalue = toColor(value);\r\n\t\t}\r\n\r\n\t\tif (this.setColorProperty(\"stroke\", value) || this.strokeModifier) {\r\n\r\n\t\t\t// this can not go into next if, as value is turned to Gradient\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tif (this.strokeModifier) {\r\n\t\t\t\t\tvalue = this.strokeModifier.modify(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.realStroke = value;\r\n\r\n\t\t\tif (value instanceof Color) {\r\n\t\t\t\tif (value.hex == \"none\") {\r\n\t\t\t\t\tthis.removeSVGAttribute(\"stroke\");\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.setSVGAttribute({ \"stroke\": value.toString() });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (!$type.hasValue(value)) {\r\n\t\t\t\tthis.removeSVGAttribute(\"stroke\");\r\n\t\t\t}\r\n\t\t\telse if (<any>value instanceof Pattern || <any>value instanceof LinearGradient || <any>value instanceof RadialGradient) {\r\n\t\t\t\tlet stroke = value;\r\n\t\t\t\tstroke.paper = this.paper;\r\n\t\t\t\tthis.setSVGAttribute({ \"stroke\": \"url(\\\"\" + $utils.getBaseURI() + stroke.id + \"\\\")\" });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Stroke setting\r\n\t */\r\n\tpublic get stroke(): Color | Pattern | LinearGradient | RadialGradient {\r\n\t\treturn this.getPropertyValue(\"stroke\");\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) opacity.\r\n\t *\r\n\t * The values may range from 0 (fully transparent) to 1 (fully opaque).\r\n\t *\r\n\t * @param value  Opacity (0-1)\r\n\t */\r\n\tpublic set strokeOpacity(value: number) {\r\n\t\tvalue = $math.toNumberRange(value, 0, 1);\r\n\t\tif (this.setPropertyValue(\"strokeOpacity\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-opacity\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Opacity (0-1)\r\n\t */\r\n\tpublic get strokeOpacity(): number {\r\n\t\treturn this.getPropertyValue(\"strokeOpacity\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if the element's stroke (outline) should remain keep constant\r\n\t * thicnkess and do not scale when the whole element is resized.\r\n\t *\r\n\t * @param value  Do not scale stroke (outline)\r\n\t */\r\n\tpublic set nonScalingStroke(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.setPropertyValue(\"nonScalingStroke\", value)) {\r\n\t\t\tthis.strokeWidth = this.strokeWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Do not scale stroke (outline)\r\n\t */\r\n\tpublic get nonScalingStroke(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonScalingStroke\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if element should keep constant size and not scale even if there is\r\n\t * space available, or it does not fit.\r\n\t *\r\n\t * @param value  Is element scaleable?\r\n\t */\r\n\tpublic set nonScaling(value: boolean) {\r\n\t\t// @todo Description (review)\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setPropertyValue(\"nonScaling\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is element scaleable?\r\n\t */\r\n\tpublic get nonScaling(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonScaling\");\r\n\t}\r\n\r\n\t/**\r\n\t * Stroke (outline) thickness in pixels.\r\n\t *\r\n\t * @param value  Thickness (px)\r\n\t */\r\n\tpublic set strokeWidth(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tthis.setPropertyValue(\"strokeWidth\", value, true);\r\n\r\n\t\tif (this.nonScalingStroke) {\r\n\t\t\tif (!$type.isNumber(value)) {\r\n\t\t\t\tvalue = 1;\r\n\t\t\t}\r\n\t\t\tvalue = value / this.globalScale;\r\n\t\t}\r\n\t\tthis.setSVGAttribute({ \"stroke-width\": value });\r\n\t}\r\n\r\n\t/**\r\n\t * @return Thickness (px)\r\n\t */\r\n\tpublic get strokeWidth(): number {\r\n\t\treturn this.getPropertyValue(\"strokeWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-dasharray` for the stroke (outline).\r\n\t *\r\n\t * \"Dasharray\" allows setting rules to make lines dashed, dotted, etc.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray} for more info on `stroke-dasharray`\r\n\t * @param value  `stroke-dasharray`\r\n\t */\r\n\tpublic set strokeDasharray(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (this.setPropertyValue(\"strokeDasharray\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-dasharray\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-dasharray`\r\n\t */\r\n\tpublic get strokeDasharray(): string {\r\n\t\treturn this.getPropertyValue(\"strokeDasharray\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-dashoffset` for the stroke (outline).\r\n\t *\r\n\t * \"Dashoffset\" allows setting the start position of the dashes if\r\n\t * `strokeDasharray` is used.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dashoffset} for more info on `stroke-dashoffset`\r\n\t * @param value  `stroke-dashoffset`\r\n\t */\r\n\tpublic set strokeDashoffset(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (this.setPropertyValue(\"strokeDashoffset\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-dashoffset\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-dashoffset`\r\n\t */\r\n\tpublic get strokeDashoffset(): number {\r\n\t\treturn this.getPropertyValue(\"strokeDashoffset\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-linecap` to indicate how line ends are drawn.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linecap`\r\n\t * @param value  `stroke-linecap`\r\n\t */\r\n\tpublic set strokeLinecap(value: \"butt\" | \"square\" | \"round\") {\r\n\t\tif (this.setPropertyValue(\"strokeLinecap\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-linecap\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-linecap`\r\n\t */\r\n\tpublic get strokeLinecap(): \"butt\" | \"square\" | \"round\" {\r\n\t\treturn this.getPropertyValue(\"strokeLinecap\");\r\n\t}\r\n\r\n\t/**\r\n\t * A `stroke-linejoin` to indicate how line ends are drawn.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Fills_and_Strokes#Stroke} for more info on `stroke-linejoin`\r\n\t * @param value  `stroke-linejoin`\r\n\t */\r\n\tpublic set strokeLinejoin(value: \"miter\" | \"round\" | \"bevel\") {\r\n\t\tif (this.setPropertyValue(\"strokeLinejoin\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"stroke-linejoin\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return `stroke-linejoin`\r\n\t */\r\n\tpublic get strokeLinejoin(): \"miter\" | \"round\" | \"bevel\" {\r\n\t\treturn this.getPropertyValue(\"strokeLinejoin\");\r\n\t}\r\n\r\n\t/**\r\n\t * An SVG-specific `shape-rendering` value.\r\n\t *\r\n\t * `shape-rendering` controls how vector graphics are drawn and rendered.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering} for more information about `shape-rendering`\r\n\t * @default \"auto\"\r\n\t * @param value  'shape-rendering' value\r\n\t */\r\n\tpublic set shapeRendering(value: ShapeRendering) {\r\n\t\tvalue = <ShapeRendering>$type.toText(value);\r\n\t\tif (this.setPropertyValue(\"shapeRendering\", value)) {\r\n\t\t\tthis.setSVGAttribute({ \"shape-rendering\": value });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return 'shape-rendering' value\r\n\t */\r\n\tpublic get shapeRendering(): ShapeRendering {\r\n\t\treturn this.getPropertyValue(\"shapeRendering\");\r\n\t}\r\n\r\n\t/**\r\n\t * Controls if SVG vectors should be drawn with \"pixel\" precision, producing\r\n\t * perfectly crisp lines on retina displays.\r\n\t *\r\n\t * Setting this to `true` might improve visual quality, but may have a\r\n\t * negative effect on performance.\r\n\t *\r\n\t * Different elements use different default setting for `pixelPerfect`.\r\n\t *\r\n\t * We recommend leaving this at their default settings, unless there's a\r\n\t * specific need.\r\n\t *\r\n\t * @param value  Use pixel perfect?\r\n\t */\r\n\tpublic set pixelPerfect(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (value) {\r\n\t\t\tthis._positionPrecision = options.pixelPerfectPrecision;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._positionPrecision = 3;\r\n\t\t}\r\n\r\n\t\tthis.setPropertyValue(\"pixelPerfect\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use pixel perfect?\r\n\t */\r\n\tpublic get pixelPerfect(): boolean {\r\n\t\treturn this.getPropertyValue(\"pixelPerfect\");\r\n\t}\r\n\r\n\t/**\r\n\t * An RTL (right-to-left) setting.\r\n\t *\r\n\t * RTL may affect alignment, text, and other visual properties.\r\n\t *\r\n\t * If you set this on a top-level chart object, it will be used for all\r\n\t * child elements, e.g. labels, unless they have their own `rtl` setting\r\n\t * set directly on them.\r\n\t *\r\n\t * @param value  `true` for to use RTL\r\n\t */\r\n\tpublic set rtl(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (this.isBaseSprite) {\r\n\t\t\tthis.topParent.rtl = value;\r\n\t\t}\r\n\t\tthis._rtl = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return RTL?\r\n\t */\r\n\tpublic get rtl(): boolean {\r\n\t\tif ($type.hasValue(this._rtl)) {\r\n\t\t\treturn this._rtl;\r\n\t\t}\r\n\t\telse if (this._topParent) {\r\n\t\t\treturn this._topParent.rtl;\r\n\t\t}\r\n\t\t//this.rtl = false;\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * VISIBILITY AND ORDER PROPERTIES AND RELATED STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n \t * Reveals hidden element.\r\n \t *\r\n \t * Has no effect if element is already visible.\r\n \t *\r\n \t * If `duration` is not specified, it will use default.\r\n \t *\r\n \t * @param duration  Fade in duration (ms)\r\n \t * @return Animation object if such object was created\r\n \t */\r\n\tpublic show(duration?: number): $type.Optional<Animation> {\r\n\t\treturn this.showReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif (this.preventShow) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet transition: $type.Optional<Animation>;\r\n\r\n\t\tconst properties = this.defaultState.properties;\r\n\r\n\t\tif (!this.disabled && (this.isHidden || !this.visible || this.isHiding || (properties.opacity != null && this.opacity < properties.opacity && !this.isShowing)) && !this.isDisposed()) {\r\n\r\n\t\t\t// helps to avoid flicker, as show might change opacity or visibility but item might be at invalid state/position\r\n\t\t\tif (this.invalid) {\r\n\t\t\t\tthis.validate();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.positionInvalid) {\r\n\t\t\t\tthis.validatePosition();\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = this.defaultState.transitionDuration;\r\n\t\t\t}\r\n\r\n\t\t\tif (this._hideAnimation) {\r\n\t\t\t\tthis._hideAnimation.kill();\r\n\t\t\t\tthis._hideAnimation = undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel hide handler just in case it was there\r\n\t\t\tif (this._showHideDisposer) {\r\n\t\t\t\tthis.removeDispose(this._showHideDisposer);\r\n\t\t\t}\r\n\r\n\t\t\tthis._isHidden = false;\r\n\t\t\tthis.isHiding = false;\r\n\t\t\tthis.isShowing = true;\r\n\r\n\t\t\t// Apply current state\r\n\t\t\ttransition = this.applyCurrentState(duration);\r\n\r\n\t\t\tif (transition && !transition.isFinished()) {\r\n\r\n\t\t\t\tthis._showHideDisposer = transition.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.isShowing = false;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis._disposers.push(this._showHideDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.isShowing = false;\r\n\t\t\t}\r\n\t\t\t// Make it visible\r\n\t\t\tlet visible = this.defaultState.properties.visible;\r\n\t\t\tif (!$type.hasValue(visible)) {\r\n\t\t\t\tvisible = true;\r\n\t\t\t}\r\n\t\t\tthis.visible = visible;\r\n\r\n\t\t\t// Unhide from screen readers\r\n\t\t\tthis.readerHidden = false;\r\n\r\n\t\t\t// Dispatch \"show\" event\r\n\t\t\tthis.dispatchImmediately(\"shown\");\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates hiding of Sprite.\r\n\t * When called it will fade out the the Sprite to transparency, then make it\r\n\t * invisible.\r\n\t * @param duration Duration in millisecons\r\n\t */\r\n\r\n\t/**\r\n\t * Hides the element, by applying `hidden` state.\r\n\t *\r\n\t * Has no effect if element is already hidden.\r\n \t *\r\n \t * If `duration` is not specified, it will use default.\r\n \t *\r\n \t * While element is fading out, its `isHiding` property will resolve to\r\n \t * `true`.\r\n \t *\r\n \t * When element is hidden, its `visible` property will resolve to `false`.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return hide Animation object if such object was created\r\n\t */\r\n\tpublic hide(duration?: number): $type.Optional<Animation> {\r\n\t\treturn this.hideReal(duration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tlet transition: $type.Optional<Animation>;\r\n\r\n\t\tif (!this.isHiding && this.visible && !this.isDisposed()) {\r\n\t\t\t// added to solve 51375\r\n\t\t\tif (this.tooltip && this.tooltip.currentSprite == this) {\r\n\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t}\r\n\r\n\t\t\tif (this._hideAnimation) {\r\n\t\t\t\tthis._hideAnimation.kill();\r\n\t\t\t\tthis._hideAnimation = undefined;\r\n\t\t\t}\r\n\r\n\t\t\tthis.isShowing = false;\r\n\r\n\t\t\t// Cancel hide handler just in case it was there\r\n\t\t\tif (this._showHideDisposer) {\r\n\t\t\t\tthis.removeDispose(this._showHideDisposer);\r\n\t\t\t}\r\n\r\n\t\t\t// Get state\r\n\t\t\tlet hiddenState = this.hiddenState;\r\n\r\n\t\t\t// Transition to \"hidden\" state, provided Sprite has one set\r\n\t\t\tif (hiddenState) {\r\n\t\t\t\t// Yes, we have a \"hidden\" state\r\n\t\t\t\t// `setState` will return an `Animation` object which we can set\r\n\t\t\t\t// events on\r\n\t\t\t\ttransition = this.setState(hiddenState, duration, undefined);\r\n\r\n\t\t\t\tif (transition && !transition.isFinished()) {\r\n\t\t\t\t\tthis._hideAnimation = transition;\r\n\t\t\t\t\tthis._showHideDisposer = transition.events.on(\"animationended\", () => {\r\n\t\t\t\t\t\tthis.isHiding = false;\r\n\t\t\t\t\t\tthis._isHidden = true;\r\n\t\t\t\t\t\tif (hiddenState.properties.visible == false) {\r\n\t\t\t\t\t\t\tthis.visible = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\r\n\t\t\t\t\tthis._disposers.push(this._showHideDisposer);\r\n\r\n\t\t\t\t\t// Thrown everything into `_disposers` just in case Sprite gets\r\n\t\t\t\t\t// destroyed in the meantime\r\n\t\t\t\t\tthis._disposers.push(transition);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.isHiding = false;\r\n\t\t\t\t\tthis._isHidden = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// No hidden state, let's just set `visible` and call it a day\r\n\t\t\t\tthis.visible = false;\r\n\t\t\t\tthis.isHiding = false;\r\n\t\t\t\tthis._isHidden = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Hide from screen readers\r\n\t\t\tthis.readerHidden = true;\r\n\r\n\t\t\t// Dispach \"hidden\" event\r\n\t\t\tthis.dispatchImmediately(\"hidden\");\r\n\t\t\tthis.invalidate(); // hide it at once to avoid flickers // validate() causes SO\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(duration)) {\r\n\t\t\tduration = this.hiddenState.transitionDuration;\r\n\t\t}\r\n\r\n\t\treturn transition;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if element is current visible (`true`) or hidden (`false`).\r\n\t *\r\n\t * @param value Visible?\r\n\t */\r\n\tpublic set visible(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setVisibility(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Visible?\r\n\t */\r\n\tpublic get visible(): boolean {\r\n\t\treturn this.getVisibility();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns visibility value\r\n\t * @ignore\r\n\t */\r\n\tprotected getVisibility(): boolean {\r\n\t\tlet value = this.getPropertyValue(\"visible\");\r\n\t\tif (!$type.hasValue(value)) {\r\n\t\t\tvalue = true;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets `visibility` property:\r\n\t *\r\n\t * * `true` - visible\r\n\t * * `false` - hidden\r\n\t *\r\n\t * @param value  true - visible, false - hidden\r\n\t * @return Current visibility\r\n\t */\r\n\tpublic setVisibility(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"visible\", value)) {\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.group.removeAttr(\"visibility\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.group.attr({ \"visibility\": \"hidden\" });\r\n\t\t\t}\r\n\t\t\t//this.invalidatePosition();\r\n\r\n\t\t\tif (this.events.isEnabled(\"visibilitychanged\")) {\r\n\t\t\t\tconst event: AMEvent<this, ISpriteEvents>[\"visibilitychanged\"] = {\r\n\t\t\t\t\ttype: \"visibilitychanged\",\r\n\t\t\t\t\ttarget: this,\r\n\t\t\t\t\tvisible: value\r\n\t\t\t\t};\r\n\t\t\t\tthis.events.dispatchImmediately(\"visibilitychanged\", event);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A \"zIndex\" of the element.\r\n\t *\r\n\t * \"zIndex\" determines the order of how elements are placed over each other.\r\n\t *\r\n\t * Higher \"zIndex\" will mean the element will be draw on top of elements\r\n\t * with lower \"zIndexes\".\r\n\t *\r\n\t * @param value  zIndex\r\n\t */\r\n\tpublic set zIndex(value: number) {\r\n\t\tvalue = $type.toNumber(value);\r\n\t\tif (this.setPropertyValue(\"zIndex\", value)) {\r\n\t\t\tthis.dispatch(\"zIndexChanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return zIndex\r\n\t */\r\n\tpublic get zIndex(): number {\r\n\t\treturn this.getPropertyValue(\"zIndex\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to the very top in element order, so that it appears\r\n\t * in front of other elements.\r\n\t */\r\n\tpublic toFront(): void {\r\n\t\tlet parent = this._parent;\r\n\t\tif (parent && parent.children.indexOf(this) != parent.children.length - 1) {\r\n\t\t\tparent.children.moveValue(this, parent.children.length - 1);\r\n\t\t\tthis.dispatch(\"zIndexChanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Moves the element to the very bottom in the element order, so that it\r\n\t * appears behind other elements.\r\n\t */\r\n\tpublic toBack(): void {\r\n\t\tlet parent = this._parent;\r\n\t\tif (parent && parent.children.indexOf(this) != 0) {\r\n\t\t\tparent.children.moveValue(this, 0);\r\n\t\t\tthis.dispatch(\"zIndexChanged\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A custom class name to set on the element.\r\n\t *\r\n\t * If set, the value will be added to element's `class` attribute.\r\n\t *\r\n\t * @since 4.9.11\r\n\t * @param  value  Class name\r\n\t */\r\n\tpublic set userClassName(value: string) {\r\n\t\tif (this.setPropertyValue(\"userClassName\", value)) {\r\n\t\t\tif (!value && this.userClassName) {\r\n\t\t\t\tthis.group.removeClass(this.userClassName);\r\n\t\t\t}\r\n\t\t\tthis.setClassName();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Class name\r\n\t */\r\n\tpublic get userClassName(): string {\r\n\t\treturn this.getPropertyValue(\"userClassName\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TOOLTIP-RELATED PROPERTIES STUFF\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * A [[Tooltip]] object to be used when displayed rollover information for\r\n\t * the element.\r\n\t *\r\n\t * @param tooltip  Tooltip\r\n\t */\r\n\tpublic set tooltip(tooltip: $type.Optional<Tooltip>) {\r\n\t\tif (this._tooltip) {\r\n\t\t\t//this._tooltip.dispose();\r\n\t\t\tthis.removeDispose(this._tooltip);\r\n\t\t}\r\n\r\n\t\tthis._tooltip = tooltip;\r\n\r\n\t\tif (tooltip) {\r\n\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip\r\n\t */\r\n\tpublic get tooltip(): $type.Optional<Tooltip> {\r\n\t\tif (this._tooltip) {\r\n\t\t\treturn this._tooltip;\r\n\t\t}\r\n\t\telse if (this.virtualParent) {\r\n\t\t\treturn this.virtualParent.tooltip;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.tooltip;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[DataItem]] to use when populating content for the element's\r\n\t * [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @see {@link DataItem}\r\n\t * @param value  Tooltip data item\r\n\t */\r\n\tpublic set tooltipDataItem(value: DataItem) {\r\n\t\t// important: do not dispose tooltip dataItem, as it is some actual data item from data!\r\n\t\tthis._tooltipDataItem = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip data item\r\n\t */\r\n\tpublic get tooltipDataItem(): DataItem {\r\n\t\tconst tooltipDataItem = this._tooltipDataItem;\r\n\r\n\t\tif (tooltipDataItem) {\r\n\t\t\treturn tooltipDataItem;\r\n\r\n\t\t} else {\r\n\t\t\treturn this.dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] or sprite template to use when getting colors for tooltip. If a template is set,\r\n\t * tooltip will look for a clone in tooltipDataItem.sprites. If no clone is found, then template colors will be used.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @see {@link Sprite}\r\n\t * @param sprite Sprite\r\n\t */\r\n\tpublic set tooltipColorSource(sprite: $type.Optional<Sprite>) {\r\n\t\tthis._tooltipColorSource = sprite;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip color source\r\n\t */\r\n\tpublic get tooltipColorSource(): $type.Optional<Sprite> {\r\n\t\treturn this._tooltipColorSource;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the element's [[Tooltip]].\r\n\t *\r\n\t * A tooltip will be populated using text templates in either `tooltipHTML` or\r\n\t * `tooltipText` as well as data in `tooltipDataItem`.\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t * @param optional point (sprite-related) to which tooltip must point.\r\n\t * @return returns true if the tooltip was shown and false if it wasn't (no text was found)\r\n\t */\r\n\tpublic showTooltip(point?: IPoint): boolean {\r\n\r\n\t\tif (this.showTooltipOn == \"always\" && !this._tooltip && this.tooltip) {\r\n\t\t\tthis._tooltip = this.tooltip.clone();\r\n\t\t}\r\n\r\n\t\tif (!point && this.tooltipPosition == \"pointer\" && this.isHover) {\r\n\t\t\tpoint = $utils.documentPointToSvg(getInteraction().lastPointer.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale);\r\n\t\t}\r\n\r\n\t\t// do not show if hidden\r\n\t\tlet sprite: Sprite = this;\r\n\t\twhile (sprite != undefined) {\r\n\t\t\tif (!sprite.visible || sprite.disabled || sprite.__disabled) {\r\n\t\t\t\tif (this._tooltip && this._tooltip.visible) {\r\n\t\t\t\t\tthis._tooltip.hide(0);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsprite = sprite.parent;\r\n\t\t}\r\n\r\n\t\tif ($type.hasValue(this.tooltipText) || $type.hasValue(this.tooltipHTML)) {\r\n\t\t\tlet tooltip = this.tooltip;\r\n\t\t\tlet tooltipDataItem = this.tooltipDataItem;\r\n\r\n\t\t\tif (tooltip) {\r\n\r\n\t\t\t\ttooltip.targetSprite = this;\r\n\r\n\t\t\t\tlet colorSource: Sprite = this;\r\n\t\t\t\tlet tooltipColorSource = this.tooltipColorSource;\r\n\t\t\t\tif ((tooltip.getStrokeFromObject || tooltip.getFillFromObject) && tooltipColorSource) {\r\n\t\t\t\t\tif (tooltipColorSource.isTemplate) {\r\n\t\t\t\t\t\tif (tooltipDataItem) {\r\n\t\t\t\t\t\t\t$array.eachContinue(tooltipDataItem.sprites, (sprite) => {\r\n\t\t\t\t\t\t\t\tif (sprite.clonedFrom == tooltipColorSource) {\r\n\t\t\t\t\t\t\t\t\tcolorSource = sprite;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolorSource = tooltipColorSource;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif (tooltip.getStrokeFromObject) {\r\n\t\t\t\t\tlet stroke = this.stroke;\r\n\t\t\t\t\tlet source: Sprite = colorSource;\r\n\r\n\t\t\t\t\twhile (source.parent != undefined) {\r\n\t\t\t\t\t\tstroke = source.stroke;\r\n\t\t\t\t\t\tif (stroke == undefined) {\r\n\t\t\t\t\t\t\tsource = source.parent;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (stroke != undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (stroke instanceof Color) {\r\n\t\t\t\t\t\ttooltip.background.animate({ property: \"stroke\", to: stroke }, tooltip.animationDuration);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttooltip.background.stroke = stroke;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Set data item\r\n\t\t\t\ttooltip.dataItem = tooltipDataItem;\r\n\t\t\t\ttooltip.label.populateStringFrom = this;\r\n\r\n\t\t\t\tif (tooltip.getFillFromObject) {\r\n\r\n\t\t\t\t\tlet fill = this.fill;\r\n\r\n\t\t\t\t\tlet source: Sprite = colorSource;\r\n\r\n\t\t\t\t\twhile (source.parent != undefined) {\r\n\t\t\t\t\t\tfill = source.fill;\r\n\t\t\t\t\t\tif (fill == undefined || (fill instanceof Color && fill.rgb == undefined)) {\r\n\t\t\t\t\t\t\tsource = source.parent;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (fill != undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (fill == undefined) {\r\n\t\t\t\t\t\tfill = color(\"#000000\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (fill instanceof Color) {\r\n\t\t\t\t\t\tif (!tooltip.visible) {\r\n\t\t\t\t\t\t\ttooltip.background.fill = fill;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ttooltip.background.animate({ property: \"fill\", to: fill }, tooltip.animationDuration);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttooltip.background.fill = fill;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (tooltip.autoTextColor && fill instanceof Color) {\r\n\t\t\t\t\t\ttooltip.label.fill = fill.alternative;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply tooltip text\r\n\t\t\t\tlet text = \"\";\r\n\t\t\t\tif (this.tooltipHTML) {\r\n\t\t\t\t\ttooltip.html = this.tooltipHTML;\r\n\t\t\t\t\ttext = this.tooltipHTML;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.tooltipText) {\r\n\t\t\t\t\ttooltip.text = this.tooltipText;\r\n\t\t\t\t\ttext = this.tooltipText;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.updateTooltipPosition(point)) {\r\n\r\n\t\t\t\t\t// Set accessibility option\r\n\t\t\t\t\ttooltip.readerDescribedBy = this.uidAttr();\r\n\r\n\t\t\t\t\t// make label to render to be able to check currentText\r\n\t\t\t\t\tif (tooltip.label.invalid) {\r\n\t\t\t\t\t\ttooltip.label.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (text != undefined && text != \"\" && tooltip.label.currentText != \"\") {\r\n\r\n\t\t\t\t\t\t//@todo: think of how to solve this better\r\n\t\t\t\t\t\tif (tooltip && !tooltip.parent) {\r\n\t\t\t\t\t\t\ttooltip.parent = this.tooltipContainer;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Reveal tooltip\r\n\t\t\t\t\t\t// showing it in 1 ms helps to avoid strange flickering in IE\r\n\t\t\t\t\t\tlet duration = tooltip.defaultState.transitionDuration;\r\n\t\t\t\t\t\tif (duration <= 0) {\r\n\t\t\t\t\t\t\tduration = 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttooltip.show(duration);\r\n\t\t\t\t\t\ttooltip.currentSprite = this;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.hideTooltip(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateTooltipPosition(point?: IPoint): boolean {\r\n\t\tif (this.tooltipPosition == \"pointer\") {\r\n\r\n\t\t\tif (this._interactionDisposer) {\r\n\t\t\t\tthis._interactionDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tthis._interactionDisposer = getInteraction().body.events.on(\"track\", (ev) => {\r\n\t\t\t\treturn this.pointTooltipTo($utils.documentPointToSvg(ev.point, this.svgContainer.SVGContainer, this.svgContainer.cssScale), true);\r\n\t\t\t});\r\n\t\t\tif (point) {\r\n\t\t\t\treturn this.pointTooltipTo(point, true);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Point to the X/Y of this Sprite\r\n\t\t\tlet globalPoint = $utils.spritePointToSvg({\r\n\t\t\t\t\"x\": this.getTooltipX(),\r\n\t\t\t\t\"y\": this.getTooltipY()\r\n\t\t\t}, this);\r\n\t\t\treturn this.pointTooltipTo(globalPoint);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the point the [[Tooltip]] should point to.\r\n\t *\r\n\t * @param point      Coordinates to point to\r\n\t * @param instantly  Move instantly without animation\r\n\t */\r\n\tprotected pointTooltipTo(point: IPoint, instantly?: boolean): boolean {\r\n\t\tlet tooltip = this.tooltip;\r\n\t\tif (tooltip && this.topParent) {\r\n\r\n\t\t\tif (tooltip.showInViewport) {\r\n\t\t\t\ttooltip.pointTo(point, instantly);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.isInRectangle(point, { x: 0, y: 0, width: this.topParent.maxWidth, height: this.topParent.maxHeight })) {\r\n\t\t\t\ttooltip.pointTo(point, instantly);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip(duration?: number): void {\r\n\r\n\t\tif (this.showTooltipOn == \"always\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet tooltip = this.tooltip;\r\n\t\tif (tooltip) {\r\n\t\t\tif (tooltip.targetSprite == this) {\r\n\t\t\t\ttooltip.targetSprite = undefined;\r\n\t\t\t}\r\n\t\t\ttooltip.hide(duration);\r\n\t\t\tif (this._interactionDisposer) {\r\n\t\t\t\tthis._interactionDisposer.dispose();\r\n\t\t\t\tthis._interactionDisposer = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * An HTML template to be used to populate [[Tooltip]] contents.\r\n\t *\r\n\t * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n\t * for any data values to be replaced with the values from respective data\r\n\t * items.\r\n\t *\r\n\t * @param value Tooltip HTML content template\r\n\t */\r\n\tpublic set tooltipHTML(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tthis.hoverable = true;\r\n\t\tif (this.setPropertyValue(\"tooltipHTML\", value)) {\r\n\t\t\tif (this.tooltip) {\r\n\t\t\t\tif (this.tooltip.visible) {\r\n\t\t\t\t\tthis.showTooltip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip HTML content template\r\n\t */\r\n\tpublic get tooltipHTML(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipHTML\");\r\n\t}\r\n\r\n\t/**\r\n\t * A text template to be used to populate Tooltip's contents.\r\n\t *\r\n\t * If element has `tooltipDataItem` or `dataItem` set, this will be parsed\r\n\t * for any data values to be replaced with the values from respective data\r\n\t * items.\r\n\t *\r\n\t * This template will also be parsed for any special formatting tags.\r\n\t *\r\n\t * @param value Tooltip content template\r\n\t * @see {@link TextFormatter}\r\n\t */\r\n\tpublic set tooltipText(value: string) {\r\n\t\tvalue = $type.toText(value);\r\n\t\tif (value) {\r\n\t\t\tthis.hoverable = true;\r\n\t\t}\r\n\t\tif (this.setPropertyValue(\"tooltipText\", value)) {\r\n\t\t\tif (this.tooltip) {\r\n\t\t\t\tif (this.tooltip.visible) {\r\n\t\t\t\t\tthis.showTooltip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip content template\r\n\t */\r\n\tpublic get tooltipText(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipText\");\r\n\t}\r\n\r\n\t/**\r\n\t * A container reference that should be used to place element's\r\n\t * [[Tooltip]] in.\r\n\t *\r\n\t * Will use parent's container if does not have one set.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Container\r\n\t * @todo Dispose of the old _tooltipContainer ?\r\n\t */\r\n\tpublic set tooltipContainer(value: $type.Optional<Container>) {\r\n\t\tthis._tooltipContainer = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Container\r\n\t */\r\n\tpublic get tooltipContainer(): $type.Optional<Container> {\r\n\t\tif (this._tooltipContainer) {\r\n\t\t\treturn this._tooltipContainer;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.tooltipContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate the [[Tooltip]] should be shown at.\r\n\t *\r\n\t * @param value  Tooltip X (px)\r\n\t */\r\n\tpublic set tooltipX(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"tooltipX\", value) && this.tooltip) {\r\n\t\t\tthis.tooltip.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tpublic get tooltipX(): number | Percent {\r\n\t\treturn this.getTooltipX();\r\n\t}\r\n\r\n\t/**\r\n\t * DEPRECATION NOTICE: This setting is deprecated in favor of a more flexible\r\n\t * setting: `showTooltipOn`. Please use `showTooltipOn = \"always\"` instead.\r\n\t *\r\n\t * Indicates if this element should display a tooltip permanently.\r\n\t *\r\n\t * Useful, if you want to show permanent tooltips on some items.\r\n\t *\r\n\t * @default false\r\n\t * @since 4.5.4\r\n\t * @deprecated Use `showTooltipOn = \"always\"` instead\r\n\t * @param  value  Always show tooltip?\r\n\t */\r\n\tpublic set alwaysShowTooltip(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tif (value) {\r\n\t\t\tthis.showTooltipOn = \"always\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Always show tooltip?\r\n\t */\r\n\tpublic get alwaysShowTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"showTooltipOn\") == \"always\";\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates when tooltip needs to be shown on this element:\r\n\t *\r\n\t * * `\"hover\"` (default) - Tooltip will be shown when element is hovered on.\r\n\t * * `\"hit\"` - Tooltip will be shown when element is clicked/tapped. Tooltip will be hidden when clicked/tapped anywhere else.\r\n\t * * `\"always\"` - Tooltip will be shown on the element permanently.\r\n\t *\r\n\t * For example, if you would like to show tooltips on all of the columns of\r\n\t * a [[ColumnSeries]]:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.columns.template.showTooltipOn = \"always\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.columns.template.showTooltipOn = \"always\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"columns\": {\r\n\t *       \"showTooltipOn\": \"always\"\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * It can even be set to display on a selected columns via `propertyFields`:\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.columns.template.propertyFields.showTooltipOn = \"tooltip\";\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"columns\": {\r\n\t *       \"propertyFields\": {\r\n\t *         \"showTooltipOn\": \"tooltip\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default \"hover\"\r\n\t * @since 4.7.9\r\n\t * @param  value  When to show tooltip\r\n\t */\r\n\tpublic set showTooltipOn(value: \"hover\" | \"hit\" | \"always\") {\r\n\t\tif (this.setPropertyValue(\"showTooltipOn\", value)) {\r\n\t\t\tif (value == \"hit\") {\r\n\t\t\t\tthis.clickable = true;\r\n\t\t\t}\r\n\t\t\tif (this.tooltip) {\r\n\t\t\t\tif (value == \"always\") {\r\n\t\t\t\t\tthis.showTooltip();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.handleAlwaysShowTooltip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return When to show tooltip\r\n\t */\r\n\tpublic get showTooltipOn(): \"hover\" | \"hit\" | \"always\" {\r\n\t\treturn this.getPropertyValue(\"showTooltipOn\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if [[Tooltip]] should follow the mouse or touch pointer or stay\r\n\t * at the fixed position.\r\n\t *\r\n\t * @param value  Position\r\n\t */\r\n\tpublic set tooltipPosition(value: \"fixed\" | \"pointer\") {\r\n\t\tthis.setPropertyValue(\"tooltipPosition\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * Position\r\n\t */\r\n\tpublic get tooltipPosition(): \"fixed\" | \"pointer\" {\r\n\t\treturn this.getPropertyValue(\"tooltipPosition\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate the [[Tooltip]] should be shown at.\r\n\t *\r\n\t * @param value  Tooltip Y (px)\r\n\t */\r\n\tpublic set tooltipY(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"tooltipY\", value) && this.tooltip) {\r\n\t\t\tthis.tooltip.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tpublic get tooltipY(): number | Percent {\r\n\t\treturn this.getTooltipY();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns Tooltip X coordinate if it's set, or middle of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return X (px)\r\n\t */\r\n\tpublic getTooltipX(): number {\r\n\r\n\t\tlet x = this.getPropertyValue(\"tooltipX\");\r\n\r\n\t\tif (!$type.hasValue(x)) {\r\n\t\t\tx = percent(50);\r\n\t\t}\r\n\r\n\t\tlet value: number;\r\n\t\tif ($type.isNumber(x)) {\r\n\t\t\tvalue = x;\r\n\t\t}\r\n\r\n\t\tif (x instanceof Percent) {\r\n\t\t\tvalue = this.maxLeftSelf + this._measuredWidthSelf * x.value - this.pixelPaddingLeft - this.ex; // overflow is know only for measured items, so this is not always good\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns Tooltip Y coordinate if it's set, or middle of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Y (px)\r\n\t */\r\n\tpublic getTooltipY(): number {\r\n\t\tlet y = this.getPropertyValue(\"tooltipY\");\r\n\r\n\t\tif (!$type.hasValue(y)) {\r\n\t\t\ty = percent(50);\r\n\t\t}\r\n\r\n\t\tlet value: number;\r\n\t\tif ($type.isNumber(y)) {\r\n\t\t\tvalue = y;\r\n\t\t}\r\n\r\n\t\tif (y instanceof Percent) {\r\n\t\t\tvalue = this.maxTopSelf + this._measuredHeightSelf * y.value - this.pixelPaddingTop - this.ey;  // overflow is know only for measured items, so this is not always good\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Displays a modal or console message with error, and halts any further\r\n\t * processing of this item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param e Error\r\n\t * @todo Implement from applying further actions to this item\r\n\t */\r\n\tpublic raiseCriticalError(e: Error, closable?: boolean) {\r\n\r\n\t\tif (this.svgContainer) {\r\n\t\t\tif (!this._adapterO) {\r\n\t\t\t\tthis.modal.content = e.message;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.modal.content = this._adapterO.apply(\"criticalError\", e).message;\r\n\t\t\t}\r\n\r\n\t\t\tif (!closable) {\r\n\t\t\t\tthis.disabled = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.modal.closable = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (!options.suppressErrors) {\r\n\t\t\t\tthis.modal.open();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (options.verbose) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Tooltip color source\r\n\t\t\tif ($type.hasValue(config.tooltipColorSource) && $type.isString(config.tooltipColorSource) && this.map.hasKey(config.tooltipColorSource)) {\r\n\t\t\t\tconfig.tooltipColorSource = this.map.getKey(config.tooltipColorSource);\r\n\t\t\t}\r\n\r\n\t\t\t// Cursor styles\r\n\t\t\tif ($type.hasValue(config.cursorOverStyle) && $type.isString(config.cursorOverStyle)) {\r\n\t\t\t\tconfig.cursorOverStyle = this.getCursorStyle(config.cursorOverStyle);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.cursorDowntyle) && $type.isString(config.cursorDowntyle)) {\r\n\t\t\t\tconfig.cursorDowntyle = this.getCursorStyle(config.cursorDowntyle);\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.cursorOptions)) {\r\n\t\t\t\tif ($type.hasValue(config.cursorOptions.overStyle) && $type.isString(config.cursorOptions.overStyle)) {\r\n\t\t\t\t\tconfig.cursorOptions.overStyle = this.getCursorStyle(config.cursorOptions.overStyle);\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.hasValue(config.cursorOptions.downStyle) && $type.isString(config.cursorOptions.downStyle)) {\r\n\t\t\t\t\tconfig.cursorOptions.downStyle = this.getCursorStyle(config.cursorOptions.downStyle);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t\tthis.processDelayedMap();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts string name of the cursor into actual [[MouseCursorStyle]].\r\n\t *\r\n\t * @param style  Cursor type\r\n\t * @return Cursor definition\r\n\t */\r\n\tprivate getCursorStyle(style: string): MouseCursorStyle {\r\n\t\tswitch (style) {\r\n\t\t\tcase \"grab\":\r\n\t\t\t\treturn MouseCursorStyle.grab;\r\n\t\t\tcase \"grabbing\":\r\n\t\t\t\treturn MouseCursorStyle.grabbing;\r\n\t\t\tcase \"pointer\":\r\n\t\t\t\treturn MouseCursorStyle.pointer;\r\n\t\t\tcase \"horizontalResize\":\r\n\t\t\t\treturn MouseCursorStyle.horizontalResize;\r\n\t\t\tcase \"verticalResize\":\r\n\t\t\t\treturn MouseCursorStyle.verticalResize;\r\n\t\t\tdefault:\r\n\t\t\t\treturn MouseCursorStyle.default;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"tooltipColorSource\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"tooltipColorSource\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If `sprite.hide()` is called, we set isHidden to true when sprite is hidden.\r\n\t * This was added becaus hidden state might have visibility set to true and so\r\n\t * there would not be possible to find out if a sprite is technically hidden or not.\r\n\t */\r\n\tpublic get isHidden(): boolean {\r\n\t\tif (this._isHidden) {\r\n\t\t\treturn this._isHidden;\r\n\t\t}\r\n\t\telse if (this._parent) {\r\n\t\t\treturn this._parent.isHidden;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * If this is set to `true`, Sprite, when inited will be instantly hidden\r\n\t * (\"hidden\" state applied) and then shown (\"default\" state applied).\r\n\t *\r\n\t * If your \"default\" state's `transitionDuration > 0` this will result in\r\n\t * initial animation from \"hidden\" state to \"default\" state.\r\n\t *\r\n\t * If you need a Sprite which has `showOnInit = true` not to be shown\r\n\t * initially, set `sprite.hidden = true`. Setting `sprite.visible = false`\r\n\t * will not prevent the animation and the sprite will be shown.\r\n\t *\r\n\t * @param value show on init?\r\n\t */\r\n\tpublic set showOnInit(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setShowOnInit(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setShowOnInit(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"showOnInit\", value)) {\r\n\t\t\tif (!this.isTemplate) {\r\n\t\t\t\tif (value && !this.inited && !this.hidden) {\r\n\t\t\t\t\tthis._showOnInitDisposer = new MultiDisposer([\r\n\t\t\t\t\t\tregistry.events.once(\"enterframe\", this.hideInitially, this),\r\n\t\t\t\t\t\tthis.events.once(\"beforevalidated\", this.hideInitially, this, false),\r\n\t\t\t\t\t\tthis.events.on(\"inited\", this.appear, this, false)\r\n\t\t\t\t\t])\r\n\r\n\t\t\t\t\tthis._disposers.push(this._showOnInitDisposer);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (this._showOnInitDisposer) {\r\n\t\t\t\t\t\tthis._showOnInitDisposer.dispose();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected hideInitially() {\r\n\t\tif (!this.isDisposed()) {\r\n\t\t\tthis.appeared = false;\r\n\t\t\t//if (!this.hidden && !this._isHidden) { // not good for series, as on enterframe it doesn't have data items yet.\r\n\t\t\tif (!this.inited) {\r\n\t\t\t\tthis.hide(0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the chart instantly and then shows it. If defaultState.transitionDuration > 0, this will result an animation in which properties of hidden state will animate to properties of visible state.\r\n\t */\r\n\tpublic appear() {\r\n\t\tthis.appeared = false;\r\n\t\tif (!this.hidden && !this.isHidden) {\r\n\t\t\tthis.hide(0);\r\n\t\t}\r\n\t\tif (!this.hidden) {\r\n\r\n\t\t\tlet animation = this.show();\r\n\r\n\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\tthis.addDisposer(animation.events.on(\"animationended\", () => {\r\n\t\t\t\t\tthis.appeared = true;\r\n\t\t\t\t\tthis.dispatch(\"appeared\");\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.appeared = true;\r\n\t\t\t\tthis.dispatch(\"appeared\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.appeared = true;\r\n\t\t\tthis.dispatch(\"appeared\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Show on init?\r\n\t */\r\n\tpublic get showOnInit(): boolean {\r\n\t\treturn this.getPropertyValue(\"showOnInit\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * If a sprite has `showOnInit = true`, it will animate from \"hidden\" to\r\n\t * \"default\" state when initialized. To prevent this but keep\r\n\t * `showOnInit = true`, you can set `sprite.hidden = true`.\r\n\t *\r\n\t * @param value initially hidden?\r\n\t */\r\n\tpublic set hidden(value: boolean) {\r\n\t\tvalue = $type.toBoolean(value);\r\n\t\tthis.setPropertyValue(\"hidden\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Is initially hidden?\r\n\t */\r\n\tpublic get hidden(): boolean {\r\n\t\treturn this.getPropertyValue(\"hidden\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\treturn this._bbox;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of plugins (objects that implement [[IPlugin]] interface) attached\r\n\t * to this object.\r\n\t *\r\n\t * @since 4.2.2\r\n\t * @return List of plugins\r\n\t */\r\n\tpublic get plugins(): List<IPlugin> {\r\n\t\tif (!this._plugins) {\r\n\t\t\tthis._plugins = new List<IPlugin>();\r\n\t\t\tthis._disposers.push(this._plugins.events.on(\"inserted\", (ev) => {\r\n\t\t\t\tev.newValue.target = this;\r\n\t\t\t\tev.newValue.init();\r\n\t\t\t}));\r\n\t\t\tthis._disposers.push(new ListDisposer(this._plugins));\r\n\t\t}\r\n\t\treturn this._plugins;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemUpdate(skippedSprites: Array<Sprite>) {\r\n\t\tthis.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.update method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemCheckIfValidate(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.validatePositions method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemValidatePositions() {\r\n\t\tthis.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Called during the System.validateLayouts method\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _systemValidateLayouts() {\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Sprite\"] = Sprite;\r\n"]},"metadata":{},"sourceType":"module"}