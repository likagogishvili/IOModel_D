{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Pattern } from \"./Pattern\";\nimport { registry } from \"../../Registry\";\nimport * as $path from \"../../rendering/Path\";\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Line pattern.\r\n */\n\nvar LinePattern =\n/** @class */\nfunction (_super) {\n  __extends(LinePattern, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function LinePattern() {\n    var _this = _super.call(this) || this;\n\n    _this.properties[\"gap\"] = 0;\n    _this._line = _this.paper.add(\"path\");\n\n    _this.addElement(_this._line);\n\n    return _this;\n  }\n  /**\r\n   * Draws the pattern.\r\n   */\n\n\n  LinePattern.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    if (Math.round(this.rotation / 90) != this.rotation / 90) {\n      this.properties[\"shapeRendering\"] = \"auto\";\n    }\n\n    if (this._line) {\n      var w = this.width;\n      var h = this.height;\n      var path = \"\";\n\n      if (!this.gap) {\n        if (Math.round(this.rotation / 90) != this.rotation / 90) {\n          path = $path.moveTo({\n            x: -w,\n            y: h / 2\n          }) + $path.lineTo({\n            x: w * 2,\n            y: h / 2\n          });\n          this.properties[\"rotationX\"] = this.width / 2;\n          this.properties[\"rotationY\"] = this.height / 2;\n        } else {\n          path = $path.moveTo({\n            x: 0,\n            y: 0\n          }) + $path.lineTo({\n            x: w,\n            y: 0\n          });\n        }\n      } else {\n        var step = this.gap + this.strokeWidth;\n        var count = this.height / step;\n\n        for (var i = -count / 2; i < count * 1.5; i++) {\n          if (Math.round(this.rotation / 90) != this.rotation / 90) {\n            path += $path.moveTo({\n              x: -w,\n              y: (i + 0.5) * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: (i + 0.5) * step\n            });\n            this.properties[\"rotationX\"] = this.width / 2;\n            this.properties[\"rotationY\"] = this.height / 2;\n          } else {\n            path += $path.moveTo({\n              x: -w,\n              y: i * step\n            }) + $path.lineTo({\n              x: w * 2,\n              y: i * step\n            });\n          }\n        }\n      }\n\n      this._line.attr({\n        \"d\": path\n      });\n    }\n  };\n\n  Object.defineProperty(LinePattern.prototype, \"gap\", {\n    /**\r\n     * @return gap\r\n     */\n    get: function () {\n      return this.properties[\"gap\"];\n    },\n\n    /**\r\n     * Number of pixels between pattern lines.\r\n     *\r\n     * The pattern will automatically draw required number of lines to fill\r\n     * pattern area maintaining `gap` distance between them.\r\n     *\r\n     * 0 (zero) means only single line will be drawn.\r\n     *\r\n     * @default 0\r\n     * @since 4.7.7\r\n     */\n    set: function (value) {\n      this.properties[\"gap\"] = value;\n      this.draw();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LinePattern;\n}(Pattern);\n\nexport { LinePattern };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;","map":{"version":3,"mappings":";AAAA;;;;;;;AAMA,SAASA,OAAT,QAA2C,WAA3C;AAEA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,sBAAvB;AAIC;AAGD;;;;;;;AAOA;;;;AAGA;AAAA;AAAA;EAAiCC;EAYhC;;;;;EAGA;IAAA,YACCC,qBAAO,IADR;;IAECC,KAAI,CAACC,UAAL,CAAgB,KAAhB,IAAyB,CAAzB;IACAD,KAAI,CAACE,KAAL,GAAaF,KAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,MAAf,CAAb;;IACAJ,KAAI,CAACK,UAAL,CAAgBL,KAAI,CAACE,KAArB;;;EACA;EAED;;;;;EAGUI,6BAAV;IACCP,iBAAMQ,IAAN,CAAUC,IAAV,CAAU,IAAV;;IACA,IAAIC,IAAI,CAACC,KAAL,CAAW,KAAKC,QAAL,GAAgB,EAA3B,KAAkC,KAAKA,QAAL,GAAgB,EAAtD,EAA0D;MACzD,KAAKV,UAAL,CAAgB,gBAAhB,IAAoC,MAApC;IACA;;IACD,IAAI,KAAKC,KAAT,EAAgB;MACf,IAAIU,CAAC,GAAG,KAAKC,KAAb;MACA,IAAIC,CAAC,GAAG,KAAKC,MAAb;MAEA,IAAIC,IAAI,GAAG,EAAX;;MAEA,IAAI,CAAC,KAAKC,GAAV,EAAe;QACd,IAAIR,IAAI,CAACC,KAAL,CAAW,KAAKC,QAAL,GAAgB,EAA3B,KAAkC,KAAKA,QAAL,GAAgB,EAAtD,EAA0D;UACzDK,IAAI,GAAGnB,KAAK,CAACqB,MAAN,CAAa;YAAEC,CAAC,EAAE,CAACP,CAAN;YAASQ,CAAC,EAAEN,CAAC,GAAG;UAAhB,CAAb,IAAoCjB,KAAK,CAACwB,MAAN,CAAa;YAAEF,CAAC,EAAEP,CAAC,GAAG,CAAT;YAAYQ,CAAC,EAAEN,CAAC,GAAG;UAAnB,CAAb,CAA3C;UAEA,KAAKb,UAAL,CAAgB,WAAhB,IAA+B,KAAKY,KAAL,GAAa,CAA5C;UACA,KAAKZ,UAAL,CAAgB,WAAhB,IAA+B,KAAKc,MAAL,GAAc,CAA7C;QACA,CALD,MAMK;UACJC,IAAI,GAAGnB,KAAK,CAACqB,MAAN,CAAa;YAAEC,CAAC,EAAE,CAAL;YAAQC,CAAC,EAAE;UAAX,CAAb,IAA+BvB,KAAK,CAACwB,MAAN,CAAa;YAAEF,CAAC,EAAEP,CAAL;YAAQQ,CAAC,EAAE;UAAX,CAAb,CAAtC;QACA;MACD,CAVD,MAWK;QACJ,IAAIE,IAAI,GAAG,KAAKL,GAAL,GAAW,KAAKM,WAA3B;QACA,IAAIC,KAAK,GAAG,KAAKT,MAAL,GAAcO,IAA1B;;QAEA,KAAK,IAAIG,CAAC,GAAG,CAACD,KAAD,GAAS,CAAtB,EAAyBC,CAAC,GAAGD,KAAK,GAAG,GAArC,EAA0CC,CAAC,EAA3C,EAA+C;UAC9C,IAAIhB,IAAI,CAACC,KAAL,CAAW,KAAKC,QAAL,GAAgB,EAA3B,KAAkC,KAAKA,QAAL,GAAgB,EAAtD,EAA0D;YACzDK,IAAI,IAAInB,KAAK,CAACqB,MAAN,CAAa;cAAEC,CAAC,EAAE,CAACP,CAAN;cAASQ,CAAC,EAAE,CAACK,CAAC,GAAG,GAAL,IAAYH;YAAxB,CAAb,IAA+CzB,KAAK,CAACwB,MAAN,CAAa;cAAEF,CAAC,EAAEP,CAAC,GAAG,CAAT;cAAYQ,CAAC,EAAE,CAACK,CAAC,GAAG,GAAL,IAAYH;YAA3B,CAAb,CAAvD;YAEA,KAAKrB,UAAL,CAAgB,WAAhB,IAA+B,KAAKY,KAAL,GAAa,CAA5C;YACA,KAAKZ,UAAL,CAAgB,WAAhB,IAA+B,KAAKc,MAAL,GAAc,CAA7C;UACA,CALD,MAMK;YACJC,IAAI,IAAInB,KAAK,CAACqB,MAAN,CAAa;cAAEC,CAAC,EAAE,CAACP,CAAN;cAASQ,CAAC,EAAEK,CAAC,GAAGH;YAAhB,CAAb,IAAuCzB,KAAK,CAACwB,MAAN,CAAa;cAAEF,CAAC,EAAEP,CAAC,GAAG,CAAT;cAAYQ,CAAC,EAAEK,CAAC,GAAGH;YAAnB,CAAb,CAA/C;UACA;QACD;MACD;;MAED,KAAKpB,KAAL,CAAWwB,IAAX,CAAgB;QAAE,KAAKV;MAAP,CAAhB;IACA;EACD,CAzCS;;EAuDVW,sBAAWrB,qBAAX,EAAW,KAAX,EAAc;IAKd;;;SAGA;MACC,OAAO,KAAKL,UAAL,CAAgB,KAAhB,CAAP;IACA,CAVa;;IAXd;;;;;;;;;;;SAWA,UAAe2B,KAAf,EAA4B;MAC3B,KAAK3B,UAAL,CAAgB,KAAhB,IAAyB2B,KAAzB;MACA,KAAKrB,IAAL;IACA,CAHa;oBAAA;;EAAA,CAAd;EAWD;AAAC,CA3FD,CAAiCZ,OAAjC;;;AA6FA;;;;;;;AAMAC,QAAQ,CAACiC,iBAAT,CAA2B,aAA3B,IAA4CvB,WAA5C","names":["Pattern","registry","$path","__extends","_super","_this","properties","_line","paper","add","addElement","LinePattern","draw","call","Math","round","rotation","w","width","h","height","path","gap","moveTo","x","y","lineTo","step","strokeWidth","count","i","attr","Object","value","registeredClasses"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/rendering/fills/LinePattern.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Pattern, PatternProperties } from \"./Pattern\";\r\nimport { AMElement } from \"../AMElement\";\r\nimport { registry } from \"../../Registry\";\r\nimport * as $path from \"../../rendering/Path\";\r\n\r\nexport interface LinePatternProperties extends PatternProperties {\r\n\tgap: number;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Line pattern.\r\n */\r\nexport class LinePattern extends Pattern {\r\n\r\n\t/**\r\n\t * SVG `<line>` element used for pattern.\r\n\t */\r\n\tprotected _line: AMElement;\r\n\r\n\t/**\r\n\t * Defines property types.\r\n\t */\r\n\tpublic _properties!: LinePatternProperties;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.properties[\"gap\"] = 0;\r\n\t\tthis._line = this.paper.add(\"path\");\r\n\t\tthis.addElement(this._line);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the pattern.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\tthis.properties[\"shapeRendering\"] = \"auto\";\r\n\t\t}\r\n\t\tif (this._line) {\r\n\t\t\tlet w = this.width;\r\n\t\t\tlet h = this.height;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tif (!this.gap) {\r\n\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: -w, y: h / 2 }) + $path.lineTo({ x: w * 2, y: h / 2 });\r\n\r\n\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpath = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: w, y: 0 });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet step = this.gap + this.strokeWidth;\r\n\t\t\t\tlet count = this.height / step;\r\n\r\n\t\t\t\tfor (let i = -count / 2; i < count * 1.5; i++) {\r\n\t\t\t\t\tif (Math.round(this.rotation / 90) != this.rotation / 90) {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: (i + 0.5) * step }) + $path.lineTo({ x: w * 2, y: (i + 0.5) * step });\r\n\r\n\t\t\t\t\t\tthis.properties[\"rotationX\"] = this.width / 2;\r\n\t\t\t\t\t\tthis.properties[\"rotationY\"] = this.height / 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: -w, y: i * step }) + $path.lineTo({ x: w * 2, y: i * step });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._line.attr({ \"d\": path });\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Number of pixels between pattern lines.\r\n\t *\r\n\t * The pattern will automatically draw required number of lines to fill\r\n\t * pattern area maintaining `gap` distance between them.\r\n\t *\r\n\t * 0 (zero) means only single line will be drawn.\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.7.7\r\n\t */\r\n\tpublic set gap(value: number) {\r\n\t\tthis.properties[\"gap\"] = value;\r\n\t\tthis.draw();\r\n\t}\r\n\r\n\t/**\r\n\t * @return gap\r\n\t */\r\n\tpublic get gap(): number {\r\n\t\treturn this.properties[\"gap\"];\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LinePattern\"] = LinePattern;\r\n"]},"metadata":{},"sourceType":"module"}