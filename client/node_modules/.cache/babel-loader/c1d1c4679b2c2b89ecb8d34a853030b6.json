{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Entity } from \"../../util/Entity\";\n/**\r\n * Base class for patterns.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar Pattern =\n/** @class */\nfunction (_super) {\n  __extends(Pattern, _super);\n\n  function Pattern() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    Object.defineProperty(_this, \"_display\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_backgroundDisplay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: _this._root._renderer.makeGraphics()\n    });\n    Object.defineProperty(_this, \"_clear\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(_this, \"_pattern\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    return _this;\n  }\n\n  Object.defineProperty(Pattern.prototype, \"_afterNew\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      // Applying themes because pattern will not have parent\n      _super.prototype._afterNewApplyThemes.call(this);\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"pattern\", {\n    get: function () {\n      return this._pattern;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Pattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  Object.defineProperty(Pattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(Pattern.prototype, \"_changed\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._changed.call(this);\n\n      if (this._clear) {\n        var repetition = this.get(\"repetition\", \"\");\n        var width = this.get(\"width\", 100);\n        var height = this.get(\"height\", 100);\n        var fill = this.get(\"fill\");\n        var fillOpacity = this.get(\"fillOpacity\", 1);\n\n        this._display.clear();\n\n        this._backgroundDisplay.clear();\n\n        if (fill && fillOpacity > 0) {\n          this._backgroundDisplay.beginFill(fill, fillOpacity);\n\n          this._backgroundDisplay.drawRect(0, 0, width, height);\n\n          this._backgroundDisplay.endFill();\n        }\n\n        this._display.angle = this.get(\"rotation\", 0); //this._display.pivot = { x: width / 2, y: height / 2 };\n\n        this._draw();\n\n        this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n      }\n    }\n  });\n  Object.defineProperty(Pattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"Pattern\"\n  });\n  Object.defineProperty(Pattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Entity.classNames.concat([Pattern.className])\n  });\n  return Pattern;\n}(Entity);\n\nexport { Pattern };","map":{"version":3,"mappings":"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","names":["Entity","__extends","Object","_this","_root","_renderer","makeGraphics","_super","_afterNewApplyThemes","call","Pattern","_pattern","_beforeChanged","isDirty","_clear","_changed","repetition","get","width","height","fill","fillOpacity","_display","clear","_backgroundDisplay","beginFill","drawRect","endFill","angle","_draw","createPattern","classNames","concat","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/render/patterns/Pattern.ts"],"sourcesContent":["import type { IGraphics, IPattern } from \"../backend/Renderer\";\nimport type { Color } from \"../../util/Color\";\n\nimport { Entity, IEntitySettings, IEntityPrivate } from \"../../util/Entity\";\n\nexport interface IPatternSettings extends IEntitySettings {\n\n\t/**\n\t * Rotation of patterm in degrees. Supported values: -90 to 90.\n\t *\n\t * @default 0\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Rotation} for more info\n\t */\n\trotation?: number;\n\n\t/**\n\t * How pattern tiles are repeated when filling the area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Repetition} for more info\n\t */\n\trepetition?: \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"no-repeat\";\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\twidth?: number;\n\n\t/**\n\t * Width of the pattern tile, in pixels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Sizing_patterns} for more info\n\t */\n\theight?: number;\n\n\t/**\n\t * Color of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolor?: Color;\n\n\t/**\n\t * Opacity of the pattern shape.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tcolorOpacity?: number;\n\n\t/**\n\t * Width of the pattern's line elements.\n\t *\n\t * @default 1\n\t */\n\tstrokeWidth?: number;\n\n\t/**\n\t * Stroke (border or line) dash settings.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDasharray?: number[] | number;\n\n\t/**\n\t * Stroke (border or line) dash offset.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/#Dashed_lines} for more information\n\t */\n\tstrokeDashoffset?: number;\n\n\t/**\n\t * Color to fill gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfill?: Color;\n\n\t/**\n\t * Opacity of the fill for gaps between pattern shapes.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/#Colors} for more info\n\t */\n\tfillOpacity?: number;\n\n\t/**\n\t * @ignore\n\t */\n\tcolorInherited?: boolean;\n\n\t/**\n\t * @ignore\n\t */\n\tfillInherited?: boolean;\n}\n\nexport interface IPatternPrivate extends IEntityPrivate {\n}\n\n/**\n * Base class for patterns.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class Pattern extends Entity {\n\tprotected _afterNew() {\n\t\t// Applying themes because pattern will not have parent\n\t\tsuper._afterNewApplyThemes();\n\t}\n\n\tdeclare public _settings: IPatternSettings;\n\tdeclare public _privateSettings: IPatternPrivate;\n\n\tpublic static className: string = \"Pattern\";\n\tpublic static classNames: Array<string> = Entity.classNames.concat([Pattern.className]);\n\n\tpublic _display: IGraphics = this._root._renderer.makeGraphics();\n\tpublic _backgroundDisplay: IGraphics = this._root._renderer.makeGraphics();\n\n\tprotected _clear = false;\n\n\tprotected _pattern: IPattern | undefined;\n\n\tpublic get pattern(): IPattern | undefined {\n\t\treturn this._pattern;\n\t}\n\n\tprotected _draw(): void { }\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"repetition\") || this.isDirty(\"width\") || this.isDirty(\"height\") || this.isDirty(\"rotation\") || this.isDirty(\"color\") || this.isDirty(\"strokeWidth\") || this.isDirty(\"strokeDasharray\") || this.isDirty(\"strokeDashoffset\") || this.isDirty(\"colorOpacity\") || this.isDirty(\"fill\") || this.isDirty(\"fillOpacity\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tpublic _changed() {\n\t\tsuper._changed();\n\n\t\tif (this._clear) {\n\t\t\tconst repetition = this.get(\"repetition\", \"\");\n\t\t\tconst width = this.get(\"width\", 100);\n\t\t\tconst height = this.get(\"height\", 100);\n\t\t\tconst fill = this.get(\"fill\");\n\t\t\tconst fillOpacity = this.get(\"fillOpacity\", 1);\n\n\t\t\tthis._display.clear();\n\t\t\tthis._backgroundDisplay.clear();\n\n\t\t\tif (fill && (fillOpacity > 0)) {\n\t\t\t\tthis._backgroundDisplay.beginFill(fill, fillOpacity);\n\t\t\t\tthis._backgroundDisplay.drawRect(0, 0, width, height);\n\t\t\t\tthis._backgroundDisplay.endFill();\n\t\t\t}\n\n\t\t\tthis._display.angle = this.get(\"rotation\", 0);\n\t\t\t//this._display.pivot = { x: width / 2, y: height / 2 };\n\t\t\tthis._draw();\n\n\t\t\tthis._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}