{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Pattern } from \"./Pattern\";\nimport * as $math from \"../../util/Math\";\n/**\r\n * Circle pattern.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\r\n */\n\nvar CirclePattern =\n/** @class */\nfunction (_super) {\n  __extends(CirclePattern, _super);\n\n  function CirclePattern() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(CirclePattern.prototype, \"_beforeChanged\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._beforeChanged.call(this);\n\n      if (this.isDirty(\"gap\")) {\n        this._clear = true;\n      }\n    }\n  });\n  Object.defineProperty(CirclePattern.prototype, \"_draw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {\n      _super.prototype._draw.call(this);\n\n      var checkered = this.get(\"checkered\", false);\n      var centered = this.get(\"centered\", true);\n      var gap = this.get(\"gap\", 0);\n      var rotation = this.get(\"rotation\", 0);\n      var w = this.get(\"width\", 100);\n      var h = this.get(\"height\", 100);\n      var radius = this.get(\"radius\", 3);\n      var cellW = radius * 2 + gap;\n      var cellH = radius * 2 + gap;\n      var cols = Math.round(w / cellW);\n      var rows = Math.round(h / cellH);\n      cellW = w / cols;\n      cellH = h / rows;\n\n      if (rotation != 0) {\n        // @todo this is probably not right\n        this._display.x = cellW * $math.cos(rotation);\n        this._display.y = cellH * $math.sin(rotation);\n      }\n\n      var color = this.get(\"color\");\n      var colorOpacity = this.get(\"colorOpacity\");\n\n      if (color || colorOpacity) {\n        this._display.beginFill(color, colorOpacity);\n      }\n\n      for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n        for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n          if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {\n            var x = c * cellW;\n            var y = r * cellH;\n\n            if (centered) {\n              x += cellW + gap / 2;\n              y += cellH + gap / 2;\n            }\n\n            this._display.drawCircle(x - radius, y - radius, radius);\n          }\n        }\n      }\n\n      if (checkered) {\n        w = w / 2 - gap * 2;\n        h = h / 2 - gap * 2;\n      } else {\n        w -= gap;\n        h -= gap;\n      }\n\n      if (color || colorOpacity) {\n        this._display.endFill();\n      }\n    }\n  });\n  Object.defineProperty(CirclePattern, \"className\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"CirclePattern\"\n  });\n  Object.defineProperty(CirclePattern, \"classNames\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: Pattern.classNames.concat([CirclePattern.className])\n  });\n  return CirclePattern;\n}(Pattern);\n\nexport { CirclePattern };","map":{"version":3,"mappings":"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","names":["Pattern","$math","__extends","_super","_beforeChanged","call","isDirty","_clear","_draw","checkered","get","centered","gap","rotation","w","h","radius","cellW","cellH","cols","Math","round","rows","_display","x","cos","y","sin","color","colorOpacity","beginFill","r","c","drawCircle","endFill","Object","classNames","concat","CirclePattern","className"],"sourceRoot":"","sources":["../../../../../../src/.internal/core/render/patterns/CirclePattern.ts"],"sourcesContent":["import { Pattern, IPatternSettings, IPatternPrivate } from \"./Pattern\";\n\nimport * as $math from \"../../util/Math\";\n\nexport interface ICirclePatternSettings extends IPatternSettings {\n\n\t/**\n\t * Gap between circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tgap?: number;\n\n\t/**\n\t * Radius of the circles, in pixels.\n\t *\n\t * @default 3\n\t */\n\tradius?: number;\n\n\t/**\n\t * If set to `true`, will place every second circle, creating checkered\n\t * pattern.\n\t *\n\t * @default false\n\t */\n\tcheckered?: boolean;\n\n\t/**\n\t * Center circles.\n\t *\n\t * @default true\n\t */\n\tcentered?: boolean;\n\n}\n\nexport interface ICirclePatternPrivate extends IPatternPrivate {\n}\n\n/**\n * Circle pattern.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/colors-gradients-and-patterns/patterns/} for more info\n */\nexport class CirclePattern extends Pattern {\n\n\tdeclare public _settings: ICirclePatternSettings;\n\tdeclare public _privateSettings: ICirclePatternPrivate;\n\n\tpublic static className: string = \"CirclePattern\";\n\tpublic static classNames: Array<string> = Pattern.classNames.concat([CirclePattern.className]);\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this.isDirty(\"gap\")) {\n\t\t\tthis._clear = true;\n\t\t}\n\t}\n\n\tprotected _draw() {\n\t\tsuper._draw();\n\n\t\tconst checkered = this.get(\"checkered\", false);\n\t\tconst centered = this.get(\"centered\", true);\n\t\tconst gap = this.get(\"gap\", 0);\n\t\tconst rotation = this.get(\"rotation\", 0);\n\t\tlet w = this.get(\"width\", 100);\n\t\tlet h = this.get(\"height\", 100);\n\t\tlet radius = this.get(\"radius\", 3);\n\n\t\tlet cellW = radius * 2 + gap;\n\t\tlet cellH = radius * 2 + gap;\n\n\t\tlet cols = Math.round(w / cellW);\n\t\tlet rows = Math.round(h / cellH);\n\n\t\tcellW = w / cols;\n\t\tcellH = h / rows;\n\n\t\tif (rotation != 0) {\n\t\t\t// @todo this is probably not right\n\t\t\tthis._display.x = cellW * $math.cos(rotation);\n\t\t\tthis._display.y = cellH * $math.sin(rotation);\n\t\t}\n\n\t\tconst color = this.get(\"color\");\n\t\tconst colorOpacity = this.get(\"colorOpacity\");\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.beginFill(color, colorOpacity);\n\t\t}\n\n\t\tfor (let r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {\n\t\t\tfor (let c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {\n\t\t\t\tif (!checkered || ((r & 1) != 1 && (c & 1) != 1) || ((r & 1) == 1 && (c & 1) == 1)) {\n\t\t\t\t\tlet x = c * cellW;\n\t\t\t\t\tlet y = r * cellH;\n\t\t\t\t\tif (centered) {\n\t\t\t\t\t\tx += cellW + gap / 2;\n\t\t\t\t\t\ty += cellH + gap / 2;\n\t\t\t\t\t}\n\t\t\t\t\tthis._display.drawCircle(x - radius, y - radius, radius);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (checkered) {\n\t\t\tw = w / 2 - gap * 2;\n\t\t\th = h / 2 - gap * 2;\n\t\t}\n\t\telse {\n\t\t\tw -= gap;\n\t\t\th -= gap;\n\t\t}\n\n\t\tif (color || colorOpacity) {\n\t\t\tthis._display.endFill();\n\t\t}\n\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}