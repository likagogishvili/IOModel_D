{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\n\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = $type.hasValue(options) && options.responseType == \"blob\"; // Create request and set up handlers\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    }; // Open request\n\n\n    xhr.open(\"GET\", url, true);\n\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    } // Process options\n\n\n    if ($type.hasValue(options)) {\n      if ($type.hasValue(options.requestHeaders)) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n\n      if ($type.hasValue(options.responseType)) {\n        xhr.responseType = options.responseType;\n      }\n    } // Send request\n\n\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\n\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      success(reader.result);\n    };\n\n    reader.onerror = function (e) {\n      error(e);\n    };\n\n    reader.readAsText(blob);\n  });\n}","map":{"version":3,"mappings":"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","names":["$type","load","url","target","options","Promise","success","error","isBlob","hasValue","responseType","xhr","XMLHttpRequest","onload","status","response","blob_1","readBlob","then","output","blob","type","getResponseHeader","responseText","onerror","open","withCredentials","requestHeaders","i","length","header","setRequestHeader","key","value","send","reader","FileReader","result","e","readAsText"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Net.ts"],"sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n\r\n/**\r\n * Defines an interface for objects that hold a net request result.\r\n */\r\nexport interface INetLoadResult<A> {\r\n\r\n\t/**\r\n\t * A reference to original [[XMLHttpRequest]].\r\n\t */\r\n\txhr: XMLHttpRequest;\r\n\r\n\t/**\r\n\t * Request response body.\r\n\t */\r\n\tresponse?: string;\r\n\r\n\t/**\r\n\t * Request response as Blob. (if set `responseType = \"blob\"`)\r\n\t */\r\n\tblob?: Blob;\r\n\r\n\t/**\r\n\t * Response `Content-Type`.\r\n\t */\r\n\ttype: string | null;\r\n\r\n\t/**\r\n\t * Was there an error?\r\n\t */\r\n\terror: boolean;\r\n\r\n\t/**\r\n\t * A target object that made the net load request.\r\n\t */\r\n\ttarget?: A;\r\n\r\n}\r\n\r\nexport interface INetRequestOptions {\r\n\r\n\t/**\r\n\t * Custom request headers to be added to HTTP(S) request.\r\n\t */\r\n\trequestHeaders?: { key: string, value: string }[];\r\n\r\n\t/**\r\n\t * Specify expected response type.\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType} for more info\r\n\t */\r\n\tresponseType?: XMLHttpRequestResponseType;\r\n\r\n\t/**\r\n\t * Specify whether to send CORS credentials (defaults to `false`).\r\n\t *\r\n\t * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials} for more info\r\n\t */\r\n\twithCredentials?: boolean;\r\n}\r\n\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\r\nexport function load<A>(url: string, target?: A, options?: INetRequestOptions): Promise<INetLoadResult<A>> {\r\n\treturn new Promise<INetLoadResult<A>>((success, error) => {\r\n\r\n\t\t// Is return type Blob?\r\n\t\tlet isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n\r\n\t\t// Create request and set up handlers\r\n\t\tlet xhr = new XMLHttpRequest();\r\n\t\txhr.onload = () => {\r\n\t\t\tif (xhr.status === 200) {\r\n\r\n\t\t\t\tlet response: $type.Optional<string>;\r\n\t\t\t\tlet blob: $type.Optional<Blob>;\r\n\r\n\t\t\t\tif (isBlob) {\r\n\t\t\t\t\tblob = xhr.response;\r\n\t\t\t\t\treadBlob(blob).then((response) => {\r\n\t\t\t\t\t\tlet output: INetLoadResult<A> = {\r\n\t\t\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\t\t\terror: false,\r\n\t\t\t\t\t\t\tresponse: response,\r\n\t\t\t\t\t\t\tblob: blob,\r\n\t\t\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\t\t\ttarget: target\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tsuccess(output);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tresponse = xhr.responseText || xhr.response\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet output: INetLoadResult<A> = {\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: false,\r\n\t\t\t\t\tresponse: response,\r\n\t\t\t\t\tblob: blob,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t};\r\n\t\t\t\tsuccess(output);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\terror({\r\n\t\t\t\t\txhr: xhr,\r\n\t\t\t\t\terror: true,\r\n\t\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\t\ttarget: target\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\txhr.onerror = () => {\r\n\t\t\terror({\r\n\t\t\t\txhr: xhr,\r\n\t\t\t\terror: true,\r\n\t\t\t\ttype: xhr.getResponseHeader(\"Content-Type\"),\r\n\t\t\t\ttarget: target\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t// Open request\r\n\t\txhr.open(\"GET\", url, true);\r\n\r\n\t\tif (options && options.withCredentials) {\r\n\t\t\txhr.withCredentials = true;\r\n\t\t}\r\n\r\n\t\t// Process options\r\n\t\tif ($type.hasValue(options)) {\r\n\r\n\t\t\tif ($type.hasValue(options.requestHeaders)) {\r\n\t\t\t\tfor (let i = 0; i < options.requestHeaders.length; i++) {\r\n\t\t\t\t\tlet header = options.requestHeaders[i];\r\n\t\t\t\t\txhr.setRequestHeader(header.key, header.value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(options.responseType)) {\r\n\t\t\t\txhr.responseType = options.responseType;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Send request\r\n\t\txhr.send();\r\n\r\n\t});\r\n\r\n}\r\n\r\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\r\nexport function readBlob(blob: Blob): Promise<string> {\r\n\treturn new Promise<string>((success, error) => {\r\n\t\tconst reader = new FileReader()\r\n\r\n\t\treader.onload = event => {\r\n\t\t\tsuccess(<string>reader.result);\r\n\t\t}\r\n\r\n\t\treader.onerror = (e) => {\r\n\t\t\terror(e);\r\n\t\t}\r\n\r\n\t\treader.readAsText(blob);\r\n\t});\r\n}\r\n"]},"metadata":{},"sourceType":"module"}