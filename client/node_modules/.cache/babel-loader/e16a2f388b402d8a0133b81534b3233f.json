{"ast":null,"code":"import { Template } from \"./util/Template\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n/**\r\n * A base class for an amCharts theme.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\r\n * @important\r\n */\n\nvar Theme =\n/** @class */\nfunction () {\n  function Theme(root, isReal) {\n    Object.defineProperty(this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_rules\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._root = root;\n\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n\n\n  Object.defineProperty(Theme, \"new\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (root) {\n      var x = new this(root, true);\n      x.setupDefaultRules();\n      return x;\n    }\n  });\n  Object.defineProperty(Theme.prototype, \"setupDefaultRules\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function () {}\n  });\n  /**\r\n   * Looks up the rules for a specific theme class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @return             Array<IRule<A>>\r\n   */\n\n  Object.defineProperty(Theme.prototype, \"_lookupRules\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeClass) {\n      return this._rules[themeClass];\n    }\n  });\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\r\n   * type checks.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n\n  Object.defineProperty(Theme.prototype, \"ruleRaw\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeClass, themeTags) {\n      if (themeTags === void 0) {\n        themeTags = [];\n      }\n\n      var rules = this._rules[themeClass];\n\n      if (!rules) {\n        rules = this._rules[themeClass] = [];\n      }\n\n      themeTags.sort($order.compare);\n\n      var _a = $array.getSortedIndex(rules, function (x) {\n        var order = $order.compare(x.tags.length, themeTags.length);\n\n        if (order === 0) {\n          return $order.compareArray(x.tags, themeTags, $order.compare);\n        } else {\n          return order;\n        }\n      }),\n          index = _a.index,\n          found = _a.found;\n\n      if (found) {\n        return rules[index].template;\n      } else {\n        var template = Template.new({});\n        rules.splice(index, 0, {\n          tags: themeTags,\n          template: template\n        });\n        return template;\n      }\n    }\n  });\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n\n  Object.defineProperty(Theme.prototype, \"rule\", {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function (themeClass, themeTags) {\n      if (themeTags === void 0) {\n        themeTags = [];\n      }\n\n      return this.ruleRaw(themeClass, themeTags);\n    }\n  });\n  return Theme;\n}();\n\nexport { Theme };","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,iBAAzB;AAGA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,cAAxB;AAOA;;;;;;;AAMA;AAAA;AAAA;EAmBC,eAAYC,IAAZ,EAAwBC,MAAxB,EAAsC;IAjBtCC;sBAAA;wBAAA;oBAAA;;IAAA;IA0BAA;sBAAA;wBAAA;oBAAA;aAA8D;IAA9D;IARC,KAAKC,KAAL,GAAaH,IAAb;;IACA,IAAI,CAACC,MAAL,EAAa;MACZ,MAAM,IAAIG,KAAJ,CAAU,yDAAV,CAAN;IACA;EACD;EApBD;;;;;;;;;;;;;;;WASA,UAA4CJ,IAA5C,EAAsD;MACrD,IAAMK,CAAC,GAAI,IAAI,IAAJ,CAASL,IAAT,EAAe,IAAf,CAAX;MACAK,CAAC,CAACC,iBAAF;MACA,OAAOD,CAAP;IACA;;;;;;WASD,aAAsC;;EAItC;;;;;;;;;;;;WAOA,UAAsCE,UAAtC,EAAwD;MACvD,OAAO,KAAKC,MAAL,CAAYD,UAAZ,CAAP;IACA;;EAED;;;;;;;;;;;;;;;;WAWA,UAAiCA,UAAjC,EAAqDE,SAArD,EAAkF;MAA7B;QAAAA;MAA6B;;MACjF,IAAIC,KAAK,GAAG,KAAKF,MAAL,CAAYD,UAAZ,CAAZ;;MAEA,IAAI,CAACG,KAAL,EAAY;QACXA,KAAK,GAAG,KAAKF,MAAL,CAAYD,UAAZ,IAA0B,EAAlC;MACA;;MAEDE,SAAS,CAACE,IAAV,CAAeb,MAAM,CAACc,OAAtB;;MAEM,SAAmBb,MAAM,CAACc,cAAP,CAAsBH,KAAtB,EAA6B,UAACL,CAAD,EAAE;QACvD,IAAMS,KAAK,GAAGhB,MAAM,CAACc,OAAP,CAAeP,CAAC,CAACU,IAAF,CAAOC,MAAtB,EAA8BP,SAAS,CAACO,MAAxC,CAAd;;QAEA,IAAIF,KAAK,KAAK,CAAd,EAAiB;UAChB,OAAOhB,MAAM,CAACmB,YAAP,CAAoBZ,CAAC,CAACU,IAAtB,EAA4BN,SAA5B,EAAuCX,MAAM,CAACc,OAA9C,CAAP;QAEA,CAHD,MAGO;UACN,OAAOE,KAAP;QACA;MACD,CATwB,CAAnB;MAAA,IAAEI,KAAK,WAAP;MAAA,IAASC,KAAK,WAAd;;MAWN,IAAIA,KAAJ,EAAW;QACV,OAAOT,KAAK,CAACQ,KAAD,CAAL,CAAaE,QAApB;MAEA,CAHD,MAGO;QACN,IAAMA,QAAQ,GAAGvB,QAAQ,CAACwB,GAAT,CAAgB,EAAhB,CAAjB;QAEAX,KAAK,CAACY,MAAN,CAAaJ,KAAb,EAAoB,CAApB,EAAuB;UACtBH,IAAI,EAAEN,SADgB;UAEtBW,QAAQ;QAFc,CAAvB;QAKA,OAAOA,QAAP;MACA;IACD;;EAED;;;;;;;;;;;;;WAQA,UAAsCb,UAAtC,EAAqDE,SAArD,EAAkF;MAA7B;QAAAA;MAA6B;;MACjF,OAAO,KAAKc,OAAL,CAAahB,UAAb,EAAyBE,SAAzB,CAAP;IACA;;EACF;AAAC,CAlGD","names":["Template","$order","$array","root","isReal","Object","_root","Error","x","setupDefaultRules","themeClass","_rules","themeTags","rules","sort","compare","getSortedIndex","order","tags","length","compareArray","index","found","template","new","splice","ruleRaw"],"sourceRoot":"","sources":["../../../../src/.internal/core/Theme.ts"],"sourcesContent":["import type { Entity } from \"./util/Entity\";\nimport { Template } from \"./util/Template\";\nimport type { Root } from \"./Root\";\nimport type { IClasses } from \"./Classes\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n\nexport interface IRule<A extends Entity> {\n\ttags: Array<string>;\n\ttemplate: Template<A>;\n}\n\n/**\n * A base class for an amCharts theme.\n *\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\n * @important\n */\nexport class Theme {\n\n\tprotected _root!: Root;\n\n\t/**\n\t * Use this method to create an instance of this class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\n\t * @param   root      Root element\n\t * @param   settings  Settings\n\t * @param   template  Template\n\t * @return            Instantiated object\n\t */\n\tstatic new<T extends typeof Theme>(this: T, root: Root): InstanceType<T> {\n\t\tconst x = (new this(root, true)) as InstanceType<T>;\n\t\tx.setupDefaultRules();\n\t\treturn x;\n\t}\n\n\tconstructor(root: Root, isReal:boolean) {\n\t\tthis._root = root;\n\t\tif (!isReal) {\n\t\t\tthrow new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n\t\t}\n\t}\n\n\tprotected setupDefaultRules(): void {}\n\n\tprotected _rules: { [type: string]: Array<IRule<Entity>>; } = {};\n\n\t/**\n\t * Looks up the rules for a specific theme class.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @return             Array<IRule<A>>\n\t */\n\tpublic _lookupRules<A extends Entity>(themeClass: string): Array<IRule<A>> | undefined {\n\t\treturn this._rules[themeClass] as unknown as Array<IRule<A>> | undefined;\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\n\t * type checks.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic ruleRaw<A extends Entity>(themeClass: string, themeTags: Array<string> = []): Template<A> {\n\t\tlet rules = this._rules[themeClass];\n\n\t\tif (!rules) {\n\t\t\trules = this._rules[themeClass] = [];\n\t\t}\n\n\t\tthemeTags.sort($order.compare);\n\n\t\tconst { index, found } = $array.getSortedIndex(rules, (x) => {\n\t\t\tconst order = $order.compare(x.tags.length, themeTags.length);\n\n\t\t\tif (order === 0) {\n\t\t\t\treturn $order.compareArray(x.tags, themeTags, $order.compare);\n\n\t\t\t} else {\n\t\t\t\treturn order;\n\t\t\t}\n\t\t});\n\n\t\tif (found) {\n\t\t\treturn rules[index].template as Template<A>;\n\n\t\t} else {\n\t\t\tconst template = Template.new<A>({});\n\n\t\t\trules.splice(index, 0, {\n\t\t\t\ttags: themeTags,\n\t\t\t\ttemplate,\n\t\t\t});\n\n\t\t\treturn template;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a [[Template]] for specific theme class and tags.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\n\t * @param   themeClass Theme class\n\t * @param   themeTags  Theme tags\n\t * @return             Template\n\t */\n\tpublic rule<K extends keyof IClasses>(themeClass: K, themeTags: Array<string> = []): Template<IClasses[K]> {\n\t\treturn this.ruleRaw(themeClass, themeTags) as Template<IClasses[K]>;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}