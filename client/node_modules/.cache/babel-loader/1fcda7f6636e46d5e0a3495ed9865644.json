{"ast":null,"code":"import * as $type from \"../utils/Type\";\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var timeUnitDurations = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n  month: 2592000000,\n  year: 31536000000\n};\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\n\nexport function getNextUnit(unit) {\n  switch (unit) {\n    case \"year\":\n      return;\n\n    case \"month\":\n      return \"year\";\n\n    case \"week\":\n      return \"month\";\n\n    case \"day\":\n      return \"month\";\n    // not a mistake\n\n    case \"hour\":\n      return \"day\";\n\n    case \"minute\":\n      return \"hour\";\n\n    case \"second\":\n      return \"minute\";\n\n    case \"millisecond\":\n      return \"second\";\n  }\n}\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\n\nexport function getDuration(unit, count) {\n  if (!$type.hasValue(count)) {\n    count = 1;\n  }\n\n  return timeUnitDurations[unit] * count;\n}\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\n\nexport function now() {\n  return new Date();\n}\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\n\nexport function getTime() {\n  return now().getTime();\n}\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\n\nexport function copy(date) {\n  return new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\n}\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\n\nexport function checkChange(dateOne, dateTwo, unit, utc) {\n  dateOne = new Date(dateOne.getTime());\n  dateTwo = new Date(dateTwo.getTime());\n  var timeZoneOffset1 = 0;\n  var timeZoneOffset2 = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset1 = dateOne.getTimezoneOffset();\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\n    timeZoneOffset2 = dateTwo.getTimezoneOffset();\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\n  }\n\n  var changed = false;\n\n  switch (unit) {\n    case \"year\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"month\":\n      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\n        changed = true;\n      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"day\":\n      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\n        changed = true;\n      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"hour\":\n      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"minute\":\n      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"second\":\n      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\n        changed = true;\n      }\n\n      break;\n\n    case \"millisecond\":\n      if (dateOne.getTime() != dateTwo.getTime()) {\n        changed = true;\n      }\n\n      break;\n  }\n\n  if (changed) {\n    return true;\n  }\n\n  var nextUnit = getNextUnit(unit);\n\n  if (nextUnit) {\n    dateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\n    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\n    return checkChange(dateOne, dateTwo, nextUnit, utc);\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\n\nexport function add(date, unit, count, utc) {\n  var timeZoneOffset = 0;\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n      date.setUTCDate(day + count);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n      date.setUTCSeconds(seconds + count);\n      break;\n\n    case \"millisecond\":\n      var milliseconds = date.getUTCMilliseconds();\n      date.setUTCMilliseconds(milliseconds + count);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n      date.setUTCHours(hours + count);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      date.setUTCMinutes(minutes + count);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n      date.setUTCFullYear(year + count);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n      date.setUTCMonth(month + count);\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      date.setUTCDate(wday + count * 7);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff); // solves issues if newe time falls back to old time zone\n\n        if (date.getTimezoneOffset() != newTimeZoneOffset) {\n          date.setUTCMinutes(date.getUTCMinutes() - diff);\n        }\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\n\nexport function round(date, unit, count, firstDateOfWeek, utc, firstDate, roundMinutes, timezone) {\n  if (roundMinutes === void 0) {\n    roundMinutes = 0;\n  }\n\n  if (!$type.isNumber(count)) {\n    count = 1;\n  }\n\n  var timeZoneOffset = 0;\n\n  if (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\n    date = setTimezone(date, timezone);\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    timeZoneOffset = date.getTimezoneOffset();\n    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\n  }\n\n  switch (unit) {\n    case \"day\":\n      var day = date.getUTCDate();\n\n      if (count > 1) {\n        //\tday = Math.floor(day / count) * count;\n        if (firstDate) {\n          firstDate = round(firstDate, \"day\", 1);\n          var difference = date.getTime() - firstDate.getTime();\n          var unitCount = Math.floor(difference / getDuration(\"day\") / count);\n          var duration = getDuration(\"day\", unitCount * count);\n          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\n        }\n      } else {\n        date.setUTCDate(day);\n      }\n\n      date.setUTCHours(0, 0, 0, 0);\n      break;\n\n    case \"second\":\n      var seconds = date.getUTCSeconds();\n\n      if (count > 1) {\n        seconds = Math.floor(seconds / count) * count;\n      }\n\n      date.setUTCSeconds(seconds, 0);\n      break;\n\n    case \"millisecond\":\n      if (count == 1) {\n        return date; // much better for perf!\n      }\n\n      var milliseconds = date.getUTCMilliseconds();\n      milliseconds = Math.floor(milliseconds / count) * count;\n      date.setUTCMilliseconds(milliseconds);\n      break;\n\n    case \"hour\":\n      var hours = date.getUTCHours();\n\n      if (count > 1) {\n        hours = Math.floor(hours / count) * count;\n      }\n\n      date.setUTCHours(hours, roundMinutes, 0, 0);\n      break;\n\n    case \"minute\":\n      var minutes = date.getUTCMinutes();\n      milliseconds = date.getUTCMilliseconds();\n\n      if (count > 1) {\n        minutes = Math.floor(minutes / count) * count;\n      }\n\n      date.setUTCMinutes(minutes, 0, 0);\n      break;\n\n    case \"month\":\n      var month = date.getUTCMonth();\n\n      if (count > 1) {\n        month = Math.floor(month / count) * count;\n      }\n\n      date.setUTCMonth(month, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n\n    case \"year\":\n      var year = date.getUTCFullYear();\n\n      if (count > 1) {\n        year = Math.floor(year / count) * count;\n      }\n\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, roundMinutes, 0, 0); //let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      //timeZoneOffset = nonUTCDateY.getTimezoneOffset();\n\n      break;\n\n    case \"week\":\n      var wday = date.getUTCDate();\n      var weekDay = date.getUTCDay();\n\n      if (!$type.isNumber(firstDateOfWeek)) {\n        firstDateOfWeek = 1;\n      } // todo: rounding when count is not 1\n\n\n      if (weekDay >= firstDateOfWeek) {\n        wday = wday - weekDay + firstDateOfWeek;\n      } else {\n        wday = wday - (7 + weekDay) + firstDateOfWeek;\n      }\n\n      date.setUTCDate(wday);\n      date.setUTCHours(0, roundMinutes, 0, 0);\n      break;\n  }\n\n  if (!utc && unit != \"millisecond\") {\n    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\n\n    if (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\n      var newTimeZoneOffset = date.getTimezoneOffset();\n\n      if (newTimeZoneOffset != timeZoneOffset) {\n        var diff = newTimeZoneOffset - timeZoneOffset;\n        date.setUTCMinutes(date.getUTCMinutes() + diff);\n      }\n    }\n  }\n\n  return date;\n}\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\n\nexport function setTimezone(date, timezone) {\n  var d = new Date(date.toLocaleString(\"en-US\", {\n    timeZone: timezone\n  }));\n  return d;\n}\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\n\nexport function getTimezoneMinutes(timezone) {\n  var d = new Date();\n  d.setHours(0, 0, 0, 0);\n  var d2 = setTimezone(d, timezone);\n  return d2.getMinutes();\n}","map":{"version":3,"mappings":"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","names":["$type","timeUnitDurations","millisecond","second","minute","hour","day","week","month","year","getNextUnit","unit","getDuration","count","hasValue","now","Date","getTime","copy","date","checkChange","dateOne","dateTwo","utc","timeZoneOffset1","timeZoneOffset2","getTimezoneOffset","setUTCMinutes","getUTCMinutes","changed","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCSeconds","nextUnit","add","timeZoneOffset","setUTCDate","seconds","setUTCSeconds","milliseconds","getUTCMilliseconds","setUTCMilliseconds","hours","setUTCHours","minutes","setUTCFullYear","setUTCMonth","wday","newTimeZoneOffset","diff","round","firstDateOfWeek","firstDate","roundMinutes","timezone","isNumber","indexOf","setTimezone","difference","unitCount","Math","floor","duration","setTime","weekDay","getUTCDay","d","toLocaleString","timeZone","getTimezoneMinutes","setHours","d2","getMinutes"],"sourceRoot":"","sources":["../../../../../src/.internal/core/utils/Time.ts"],"sourcesContent":["/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { TimeUnit } from \"../defs/TimeUnit\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * Maps time period names to their numeric representations in milliseconds.\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport let timeUnitDurations: { [Key in TimeUnit]: number } = {\r\n\tmillisecond: 1,\r\n\tsecond: 1000,\r\n\tminute: 60000,\r\n\thour: 3600000,\r\n\tday: 86400000,\r\n\tweek: 604800000,\r\n\tmonth: 2592000000,\r\n\tyear: 31536000000\r\n};\r\n\r\n/**\r\n * Returns the next time unit that goes after source `unit`.\r\n *\r\n * E.g. \"hour\" is the next unit after \"minute\", etc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit  Source time unit\r\n * @return Next time unit\r\n */\r\nexport function getNextUnit(unit: TimeUnit): $type.Optional<TimeUnit> {\r\n\tswitch (unit) {\r\n\t\tcase \"year\":\r\n\t\t\treturn\r\n\r\n\t\tcase \"month\":\r\n\t\t\treturn \"year\";\r\n\r\n\t\tcase \"week\":\r\n\t\t\treturn \"month\";\r\n\r\n\t\tcase \"day\":\r\n\t\t\treturn \"month\"; // not a mistake\r\n\r\n\t\tcase \"hour\":\r\n\t\t\treturn \"day\";\r\n\r\n\t\tcase \"minute\":\r\n\t\t\treturn \"hour\";\r\n\r\n\t\tcase \"second\":\r\n\t\t\treturn \"minute\"\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\treturn \"second\";\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns number of milliseconds in the `count` of time `unit`.\r\n *\r\n * Available units: \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\",\r\n * \"month\", and \"year\".\r\n *\r\n * @ignore Exclude from docs\r\n * @param unit   Time unit\r\n * @param count  Number of units\r\n * @return Milliseconds\r\n */\r\nexport function getDuration(unit: TimeUnit, count?: number): number {\r\n\tif (!$type.hasValue(count)) {\r\n\t\tcount = 1;\r\n\t}\r\n\treturn timeUnitDurations[unit] * count;\r\n}\r\n\r\n/**\r\n * Returns current `Date` object.\r\n *\r\n * @return Current date\r\n */\r\nexport function now(): Date {\r\n\treturn new Date();\r\n}\r\n\r\n/**\r\n * Returns current timestamp.\r\n *\r\n * @return Current timestamp\r\n */\r\nexport function getTime(): number {\r\n\treturn now().getTime();\r\n}\r\n\r\n/**\r\n * Returns a copy of the `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date  Source date\r\n * @return Copy\r\n */\r\nexport function copy(date: Date): Date {\r\n\treturn new Date(date.getTime()); // todo: check if this is ok. new Date(date) used to strip milliseconds on FF in v3\r\n}\r\n\r\n/**\r\n * Checks if the `unit` part of two `Date` objects do not match. Two dates\r\n * represent a \"range\" of time, rather the same time date.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dateOne  Date 1\r\n * @param dateTwo  Date 2\r\n * @param unit     Time unit to check\r\n * @return Range?\r\n */\r\nexport function checkChange(dateOne: Date, dateTwo: Date, unit: TimeUnit, utc?: boolean): boolean {\r\n\r\n\tdateOne = new Date(dateOne.getTime());\r\n\tdateTwo = new Date(dateTwo.getTime());\r\n\r\n\tlet timeZoneOffset1 = 0;\r\n\tlet timeZoneOffset2 = 0;\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\ttimeZoneOffset1 = dateOne.getTimezoneOffset();\r\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);\r\n\r\n\t\ttimeZoneOffset2 = dateTwo.getTimezoneOffset();\r\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);\r\n\t}\r\n\r\n\tlet changed = false;\r\n\tswitch (unit) {\r\n\t\tcase \"year\":\r\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"month\":\r\n\t\t\tif (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\telse if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"day\":\r\n\t\t\tif (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\telse if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"hour\":\r\n\t\t\tif (dateOne.getUTCHours() != dateTwo.getUTCHours()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"minute\":\r\n\t\t\tif (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"second\":\r\n\t\t\tif (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\tif (dateOne.getTime() != dateTwo.getTime()) {\r\n\t\t\t\tchanged = true;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (changed) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tlet nextUnit: $type.Optional<TimeUnit> = getNextUnit(unit);\r\n\tif (nextUnit) {\r\n\t\tdateOne.setUTCMinutes(dateOne.getUTCMinutes() + timeZoneOffset1);\r\n\t\tdateTwo.setUTCMinutes(dateTwo.getUTCMinutes() + timeZoneOffset2);\r\n\t\treturn checkChange(dateOne, dateTwo, nextUnit, utc);\r\n\t}\r\n\telse {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\n/**\r\n * Adds `count` of time `unit` to the source date. Returns a modified `Date` object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date   Source date\r\n * @param unit   Time unit\r\n * @param count  Number of units to add\r\n * @return Modified date\r\n */\r\nexport function add(date: Date, unit: TimeUnit, count: number, utc?: boolean): Date {\r\n\tlet timeZoneOffset = 0;\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\ttimeZoneOffset = date.getTimezoneOffset();\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n\t}\r\n\r\n\tswitch (unit) {\r\n\t\tcase \"day\":\r\n\t\t\tlet day: number = date.getUTCDate();\r\n\t\t\tdate.setUTCDate(day + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"second\":\r\n\t\t\tlet seconds: number = date.getUTCSeconds();\r\n\t\t\tdate.setUTCSeconds(seconds + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\tlet milliseconds: number = date.getUTCMilliseconds();\r\n\t\t\tdate.setUTCMilliseconds(milliseconds + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"hour\":\r\n\t\t\tlet hours: number = date.getUTCHours();\r\n\t\t\tdate.setUTCHours(hours + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"minute\":\r\n\t\t\tlet minutes: number = date.getUTCMinutes();\r\n\t\t\tdate.setUTCMinutes(minutes + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"year\":\r\n\t\t\tlet year: number = date.getUTCFullYear();\r\n\t\t\tdate.setUTCFullYear(year + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"month\":\r\n\t\t\tlet month: number = date.getUTCMonth();\r\n\t\t\tdate.setUTCMonth(month + count);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"week\":\r\n\t\t\tlet wday: number = date.getUTCDate();\r\n\t\t\tdate.setUTCDate(wday + count * 7);\r\n\t\t\tbreak;\r\n\t}\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n\r\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\r\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\r\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\r\n\r\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\r\n\t\t\t\t// solves issues if newe time falls back to old time zone\r\n\t\t\t\tif (date.getTimezoneOffset() != newTimeZoneOffset) {\r\n\t\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() - diff);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn date;\r\n}\r\n\r\n/**\r\n * \"Rounds\" the date to specific time unit.\r\n *\r\n * @ignore Exclude from docs\r\n * @param date             Source date\r\n * @param unit             Time unit\r\n * @param count            Number of units to round to\r\n * @param firstDateOfWeek  First day of week\r\n * @param roundMinutes     Minutes to round to (some timezones use non-whole hour)\r\n * @param timezone         Use specific named timezone when rounding\r\n * @return New date\r\n */\r\nexport function round(date: Date, unit: TimeUnit, count: number, firstDateOfWeek?: number, utc?: boolean, firstDate?: Date, roundMinutes: number = 0, timezone?: string): Date {\r\n\r\n\tif (!$type.isNumber(count)) {\r\n\t\tcount = 1;\r\n\t}\r\n\r\n\tlet timeZoneOffset = 0;\r\n\r\n\tif (timezone && [\"day\", \"month\", \"week\", \"year\"].indexOf(unit) != -1) {\r\n\t\tdate = setTimezone(date, timezone);\r\n\t}\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\ttimeZoneOffset = date.getTimezoneOffset();\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);\r\n\t}\r\n\r\n\tswitch (unit) {\r\n\r\n\t\tcase \"day\":\r\n\t\t\tlet day = date.getUTCDate();\r\n\r\n\t\t\tif (count > 1) {\r\n\t\t\t\t//\tday = Math.floor(day / count) * count;\r\n\t\t\t\tif (firstDate) {\r\n\t\t\t\t\tfirstDate = round(firstDate, \"day\", 1);\r\n\r\n\t\t\t\t\tlet difference = date.getTime() - firstDate.getTime();\r\n\t\t\t\t\tlet unitCount = Math.floor(difference / getDuration(\"day\") / count);\r\n\t\t\t\t\tlet duration = getDuration(\"day\", unitCount * count);\r\n\t\t\t\t\tdate.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration(\"minute\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdate.setUTCDate(day);\r\n\t\t\t}\r\n\t\t\tdate.setUTCHours(0, 0, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"second\":\r\n\t\t\tlet seconds = date.getUTCSeconds();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tseconds = Math.floor(seconds / count) * count;\r\n\t\t\t}\r\n\t\t\tdate.setUTCSeconds(seconds, 0);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"millisecond\":\r\n\t\t\tif (count == 1) {\r\n\t\t\t\treturn date; // much better for perf!\r\n\t\t\t}\r\n\r\n\t\t\tlet milliseconds = date.getUTCMilliseconds();\r\n\t\t\tmilliseconds = Math.floor(milliseconds / count) * count;\r\n\t\t\tdate.setUTCMilliseconds(milliseconds);\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"hour\":\r\n\r\n\t\t\tlet hours = date.getUTCHours();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\thours = Math.floor(hours / count) * count;\r\n\t\t\t}\r\n\t\t\tdate.setUTCHours(hours, roundMinutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"minute\":\r\n\r\n\t\t\tlet minutes = date.getUTCMinutes();\r\n\t\t\tmilliseconds = date.getUTCMilliseconds();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tminutes = Math.floor(minutes / count) * count;\r\n\t\t\t}\r\n\r\n\t\t\tdate.setUTCMinutes(minutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"month\":\r\n\r\n\t\t\tlet month = date.getUTCMonth();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tmonth = Math.floor(month / count) * count;\r\n\t\t\t}\r\n\r\n\t\t\tdate.setUTCMonth(month, 1);\r\n\t\t\tdate.setUTCHours(0, roundMinutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase \"year\":\r\n\r\n\t\t\tlet year = date.getUTCFullYear();\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tyear = Math.floor(year / count) * count;\r\n\t\t\t}\r\n\t\t\tdate.setUTCFullYear(year, 0, 1);\r\n\t\t\tdate.setUTCHours(0, roundMinutes, 0, 0);\r\n\r\n\t\t\t//let nonUTCDateY = new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n\t\t\t//timeZoneOffset = nonUTCDateY.getTimezoneOffset();\r\n\r\n\t\t\tbreak;\r\n\r\n\r\n\t\tcase \"week\":\r\n\r\n\t\t\tlet wday = date.getUTCDate();\r\n\t\t\tlet weekDay = date.getUTCDay();\r\n\r\n\t\t\tif (!$type.isNumber(firstDateOfWeek)) {\r\n\t\t\t\tfirstDateOfWeek = 1;\r\n\t\t\t}\r\n\r\n\t\t\t// todo: rounding when count is not 1\r\n\t\t\tif (weekDay >= firstDateOfWeek) {\r\n\t\t\t\twday = wday - weekDay + firstDateOfWeek;\r\n\t\t\t} else {\r\n\t\t\t\twday = wday - (7 + weekDay) + firstDateOfWeek;\r\n\t\t\t}\r\n\r\n\t\t\tdate.setUTCDate(wday);\r\n\t\t\tdate.setUTCHours(0, roundMinutes, 0, 0);\r\n\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif (!utc && unit != \"millisecond\") {\r\n\t\tdate.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);\r\n\r\n\t\tif (unit == \"day\" || unit == \"week\" || unit == \"month\" || unit == \"year\") {\r\n\t\t\tlet newTimeZoneOffset = date.getTimezoneOffset();\r\n\t\t\tif (newTimeZoneOffset != timeZoneOffset) {\r\n\t\t\t\tlet diff = newTimeZoneOffset - timeZoneOffset;\r\n\r\n\t\t\t\tdate.setUTCMinutes(date.getUTCMinutes() + diff);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn date;\r\n}\r\n\r\n/**\r\n * Returns a new `Date` object which corresponds to the source date in a\r\n * specific timezone.\r\n *\r\n * @since 4.10.1\r\n * @param   date      Source date\r\n * @param   timezone  Timezone identifier\r\n * @return            Recalculated new Date\r\n */\r\nexport function setTimezone(date: Date, timezone: string): Date {\r\n\tconst d = new Date(date.toLocaleString(\"en-US\", { timeZone: timezone }));\r\n\treturn d;\r\n}\r\n\r\n/**\r\n * Returns minute fraction of the set timezone.\r\n *\r\n * @since 4.10.12\r\n * @param  timezone  Timezone identifier\r\n * @return           Minutes\r\n */\r\nexport function getTimezoneMinutes(timezone: string): number {\r\n\tlet d = new Date();\r\n\td.setHours(0, 0, 0, 0);\r\n\tlet d2 = setTimezone(d, timezone);\r\n\treturn d2.getMinutes();\r\n}"]},"metadata":{},"sourceType":"module"}